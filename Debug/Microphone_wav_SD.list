
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ac0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bd8c0  08015ca0  08015ca0  00016ca0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d3560  080d3560  000d59d4  2**0
                  CONTENTS
  4 .ARM          00000008  080d3560  080d3560  000d4560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d3568  080d3568  000d59d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d3568  080d3568  000d4568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080d356c  080d356c  000d456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009d4  20000000  080d3570  000d5000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005608  200009d4  080d3f44  000d59d4  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20005fdc  080d3f44  000d5fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000d59d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b8e  00000000  00000000  000d5a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000523e  00000000  00000000  000f7592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  000fc7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f8  00000000  00000000  000fe188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d271  00000000  00000000  000ff480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024cdd  00000000  00000000  0012c6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010461c  00000000  00000000  001513ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000f4  00000000  00000000  002559ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007784  00000000  00000000  00255ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0025d264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003325  00000000  00000000  0025d2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  002605f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009d4 	.word	0x200009d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015c78 	.word	0x08015c78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009d8 	.word	0x200009d8
 800020c:	08015c78 	.word	0x08015c78

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_DMA_Init+0x58>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a13      	ldr	r2, [pc, #76]	@ (8000ff0 <MX_DMA_Init+0x58>)
 8000fa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_DMA_Init+0x58>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2039      	movs	r0, #57	@ 0x39
 8000fbc:	f003 fced 	bl	800499a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000fc0:	2039      	movs	r0, #57	@ 0x39
 8000fc2:	f003 fd06 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2102      	movs	r1, #2
 8000fca:	203b      	movs	r0, #59	@ 0x3b
 8000fcc:	f003 fce5 	bl	800499a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fd0:	203b      	movs	r0, #59	@ 0x3b
 8000fd2:	f003 fcfe 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2102      	movs	r1, #2
 8000fda:	2045      	movs	r0, #69	@ 0x45
 8000fdc:	f003 fcdd 	bl	800499a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fe0:	2045      	movs	r0, #69	@ 0x45
 8000fe2:	f003 fcf6 	bl	80049d2 <HAL_NVIC_EnableIRQ>

}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b090      	sub	sp, #64	@ 0x40
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	4ba6      	ldr	r3, [pc, #664]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4aa5      	ldr	r2, [pc, #660]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4ba3      	ldr	r3, [pc, #652]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001022:	4ba0      	ldr	r3, [pc, #640]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a9f      	ldr	r2, [pc, #636]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b9d      	ldr	r3, [pc, #628]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b9a      	ldr	r3, [pc, #616]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a99      	ldr	r2, [pc, #612]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b97      	ldr	r3, [pc, #604]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	623b      	str	r3, [r7, #32]
 8001050:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	4b94      	ldr	r3, [pc, #592]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a93      	ldr	r2, [pc, #588]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b91      	ldr	r3, [pc, #580]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b8e      	ldr	r3, [pc, #568]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a8d      	ldr	r2, [pc, #564]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b8b      	ldr	r3, [pc, #556]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b88      	ldr	r3, [pc, #544]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a87      	ldr	r2, [pc, #540]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b85      	ldr	r3, [pc, #532]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800109a:	4b82      	ldr	r3, [pc, #520]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a81      	ldr	r2, [pc, #516]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b7f      	ldr	r3, [pc, #508]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010b2:	4b7c      	ldr	r3, [pc, #496]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a7b      	ldr	r2, [pc, #492]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b79      	ldr	r3, [pc, #484]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010ca:	4b76      	ldr	r3, [pc, #472]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a75      	ldr	r2, [pc, #468]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b73      	ldr	r3, [pc, #460]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e2:	4b70      	ldr	r3, [pc, #448]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a6f      	ldr	r2, [pc, #444]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b6d      	ldr	r3, [pc, #436]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	4b6a      	ldr	r3, [pc, #424]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a69      	ldr	r2, [pc, #420]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b67      	ldr	r3, [pc, #412]	@ (80012a4 <MX_GPIO_Init+0x2b0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2102      	movs	r1, #2
 8001116:	4864      	ldr	r0, [pc, #400]	@ (80012a8 <MX_GPIO_Init+0x2b4>)
 8001118:	f004 fbba 	bl	8005890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 800111c:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112e:	4619      	mov	r1, r3
 8001130:	485e      	ldr	r0, [pc, #376]	@ (80012ac <MX_GPIO_Init+0x2b8>)
 8001132:	f004 f8dd 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 8001136:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113c:	2303      	movs	r3, #3
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	4859      	ldr	r0, [pc, #356]	@ (80012b0 <MX_GPIO_Init+0x2bc>)
 800114c:	f004 f8d0 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001150:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001156:	2303      	movs	r3, #3
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001162:	4619      	mov	r1, r3
 8001164:	4853      	ldr	r0, [pc, #332]	@ (80012b4 <MX_GPIO_Init+0x2c0>)
 8001166:	f004 f8c3 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800116a:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001170:	2303      	movs	r3, #3
 8001172:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	484e      	ldr	r0, [pc, #312]	@ (80012b8 <MX_GPIO_Init+0x2c4>)
 8001180:	f004 f8b6 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8001184:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001196:	4619      	mov	r1, r3
 8001198:	4848      	ldr	r0, [pc, #288]	@ (80012bc <MX_GPIO_Init+0x2c8>)
 800119a:	f004 f8a9 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 800119e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a4:	2303      	movs	r3, #3
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011b0:	4619      	mov	r1, r3
 80011b2:	4843      	ldr	r0, [pc, #268]	@ (80012c0 <MX_GPIO_Init+0x2cc>)
 80011b4:	f004 f89c 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 80011b8:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011be:	2303      	movs	r3, #3
 80011c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ca:	4619      	mov	r1, r3
 80011cc:	483d      	ldr	r0, [pc, #244]	@ (80012c4 <MX_GPIO_Init+0x2d0>)
 80011ce:	f004 f88f 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 80011d2:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e4:	4619      	mov	r1, r3
 80011e6:	4830      	ldr	r0, [pc, #192]	@ (80012a8 <MX_GPIO_Init+0x2b4>)
 80011e8:	f004 f882 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80011ec:	23ff      	movs	r3, #255	@ 0xff
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f0:	2303      	movs	r3, #3
 80011f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	4832      	ldr	r0, [pc, #200]	@ (80012c8 <MX_GPIO_Init+0x2d4>)
 8001200:	f004 f876 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001204:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001216:	4619      	mov	r1, r3
 8001218:	482a      	ldr	r0, [pc, #168]	@ (80012c4 <MX_GPIO_Init+0x2d0>)
 800121a:	f004 f869 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800121e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	2303      	movs	r3, #3
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800122c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001230:	4619      	mov	r1, r3
 8001232:	4826      	ldr	r0, [pc, #152]	@ (80012cc <MX_GPIO_Init+0x2d8>)
 8001234:	f004 f85c 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001238:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001246:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800124a:	4619      	mov	r1, r3
 800124c:	4820      	ldr	r0, [pc, #128]	@ (80012d0 <MX_GPIO_Init+0x2dc>)
 800124e:	f004 f84f 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001252:	2302      	movs	r3, #2
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001266:	4619      	mov	r1, r3
 8001268:	480f      	ldr	r0, [pc, #60]	@ (80012a8 <MX_GPIO_Init+0x2b4>)
 800126a:	f004 f841 	bl	80052f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800126e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001274:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001278:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001282:	4619      	mov	r1, r3
 8001284:	4808      	ldr	r0, [pc, #32]	@ (80012a8 <MX_GPIO_Init+0x2b4>)
 8001286:	f004 f833 	bl	80052f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2028      	movs	r0, #40	@ 0x28
 8001290:	f003 fb83 	bl	800499a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001294:	2028      	movs	r0, #40	@ 0x28
 8001296:	f003 fb9c 	bl	80049d2 <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3740      	adds	r7, #64	@ 0x40
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40022000 	.word	0x40022000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40021800 	.word	0x40021800
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40022400 	.word	0x40022400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40022800 	.word	0x40022800
 80012cc:	40021400 	.word	0x40021400
 80012d0:	40021c00 	.word	0x40021c00

080012d4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012d8:	f3bf 8f4f 	dsb	sy
}
 80012dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012de:	f3bf 8f6f 	isb	sy
}
 80012e2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <SCB_EnableICache+0x48>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012ec:	f3bf 8f4f 	dsb	sy
}
 80012f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f2:	f3bf 8f6f 	isb	sy
}
 80012f6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <SCB_EnableICache+0x48>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <SCB_EnableICache+0x48>)
 80012fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001302:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001304:	f3bf 8f4f 	dsb	sy
}
 8001308:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800130a:	f3bf 8f6f 	isb	sy
}
 800130e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <SCB_EnableDCache+0x84>)
 8001328:	2200      	movs	r2, #0
 800132a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800132e:	f3bf 8f4f 	dsb	sy
}
 8001332:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001334:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <SCB_EnableDCache+0x84>)
 8001336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800133a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	0b5b      	lsrs	r3, r3, #13
 8001340:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001344:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800134e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	015a      	lsls	r2, r3, #5
 8001354:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001358:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800135e:	4911      	ldr	r1, [pc, #68]	@ (80013a4 <SCB_EnableDCache+0x84>)
 8001360:	4313      	orrs	r3, r2
 8001362:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1e5a      	subs	r2, r3, #1
 800136a:	60ba      	str	r2, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ef      	bne.n	8001350 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	60fa      	str	r2, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1e5      	bne.n	8001346 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800137a:	f3bf 8f4f 	dsb	sy
}
 800137e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <SCB_EnableDCache+0x84>)
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <SCB_EnableDCache+0x84>)
 8001386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800138c:	f3bf 8f4f 	dsb	sy
}
 8001390:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001392:	f3bf 8f6f 	isb	sy
}
 8001396:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <AI_Init.0>:
	ai_buffer ai_output[AI_NETWORK_OUT_NUM];

	/**
	 * @brief Initialize the AI model
	 */
	void AI_Init(void) {
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b093      	sub	sp, #76	@ 0x4c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4664      	mov	r4, ip
 80013b0:	f8c7 c004 	str.w	ip, [r7, #4]
	    ai_error ai_err;

	    // Set working memory and get weights/biases from the model
	    ai_network_params ai_params = {
	        AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 80013b4:	f00d fbb6 	bl	800eb24 <ai_network_data_weights_get>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f00d fb79 	bl	800eab8 <ai_network_data_weights_buffer_get>
	        AI_NETWORK_DATA_ACTIVATIONS(activations)
 80013c6:	f64f 235c 	movw	r3, #64092	@ 0xfa5c
 80013ca:	4423      	add	r3, r4
 80013cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4610      	mov	r0, r2
 80013d4:	f00d fb3a 	bl	800ea4c <ai_network_data_activations_buffer_get>
	    };

	    // Create and initialize the network
	    ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80013d8:	f64f 2358 	movw	r3, #64088	@ 0xfa58
 80013dc:	4423      	add	r3, r4
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00d fa9d 	bl	800e920 <ai_network_create>
 80013e6:	4603      	mov	r3, r0
 80013e8:	647b      	str	r3, [r7, #68]	@ 0x44
	    if (ai_err.type != AI_ERROR_NONE) {
 80013ea:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <AI_Init.0+0x62>
	        printf("AI network creation failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 80013f2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80013f6:	4619      	mov	r1, r3
 80013f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013fa:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80013fe:	461a      	mov	r2, r3
 8001400:	4823      	ldr	r0, [pc, #140]	@ (8001490 <AI_Init.0+0xe8>)
 8001402:	f012 fcf7 	bl	8013df4 <iprintf>
	        Error_Handler();
 8001406:	f000 fc39 	bl	8001c7c <Error_Handler>
	    }

	    if (!ai_network_init(network, &ai_params)) {
 800140a:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 800140e:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 8001412:	f107 020c 	add.w	r2, r7, #12
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f00d facb 	bl	800e9b4 <ai_network_init>
 800141e:	4603      	mov	r3, r0
 8001420:	f083 0301 	eor.w	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d014      	beq.n	8001454 <AI_Init.0+0xac>
	        ai_err = ai_network_get_error(network);
 800142a:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 800142e:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 8001432:	4618      	mov	r0, r3
 8001434:	f00d fa68 	bl	800e908 <ai_network_get_error>
 8001438:	4603      	mov	r3, r0
 800143a:	647b      	str	r3, [r7, #68]	@ 0x44
	        printf("AI network initialization failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 800143c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001440:	4619      	mov	r1, r3
 8001442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001444:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001448:	461a      	mov	r2, r3
 800144a:	4812      	ldr	r0, [pc, #72]	@ (8001494 <AI_Init.0+0xec>)
 800144c:	f012 fcd2 	bl	8013df4 <iprintf>
	        Error_Handler();
 8001450:	f000 fc14 	bl	8001c7c <Error_Handler>
	    }

	    // Retrieve input and output buffer structures dynamically
	    ai_network_inputs_get(network, ai_input);
 8001454:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 8001458:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 800145c:	f64f 233c 	movw	r3, #64060	@ 0xfa3c
 8001460:	4423      	add	r3, r4
 8001462:	4619      	mov	r1, r3
 8001464:	4610      	mov	r0, r2
 8001466:	f00d fa71 	bl	800e94c <ai_network_inputs_get>
	    ai_network_outputs_get(network, ai_output);
 800146a:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 800146e:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 8001472:	f64f 2320 	movw	r3, #64032	@ 0xfa20
 8001476:	4423      	add	r3, r4
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f00d fa80 	bl	800e980 <ai_network_outputs_get>

	    printf("AI model initialized successfully.\r\n");
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <AI_Init.0+0xf0>)
 8001482:	f012 fd1f 	bl	8013ec4 <puts>
	}
 8001486:	bf00      	nop
 8001488:	374c      	adds	r7, #76	@ 0x4c
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	08015ca0 	.word	0x08015ca0
 8001494:	08015cd0 	.word	0x08015cd0
 8001498:	08015d08 	.word	0x08015d08

0800149c <main>:
{
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	f5ad 3d00 	sub.w	sp, sp, #131072	@ 0x20000
 80014a2:	b0b6      	sub	sp, #216	@ 0xd8
 80014a4:	af00      	add	r7, sp, #0
int main(void)
 80014a6:	4b62      	ldr	r3, [pc, #392]	@ (8001630 <main+0x194>)
 80014a8:	443b      	add	r3, r7
 80014aa:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80014ae:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 80014b2:	f8c2 3fec 	str.w	r3, [r2, #4076]	@ 0xfec
	int buf_len = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	4a5e      	ldr	r2, [pc, #376]	@ (8001634 <main+0x198>)
 80014ba:	443a      	add	r2, r7
 80014bc:	6013      	str	r3, [r2, #0]
	const char* activities[AI_NETWORK_OUT_1_SIZE] = {
 80014be:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80014c2:	4a5d      	ldr	r2, [pc, #372]	@ (8001638 <main+0x19c>)
 80014c4:	f1a3 04a0 	sub.w	r4, r3, #160	@ 0xa0
 80014c8:	4615      	mov	r5, r2
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014d2:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_handle network = AI_HANDLE_NULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 80014dc:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 80014e0:	f8c2 39b8 	str.w	r3, [r2, #2488]	@ 0x9b8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80014e4:	f7ff fef6 	bl	80012d4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80014e8:	f7ff ff1a 	bl	8001320 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f003 f8f8 	bl	80046e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f92c 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f7ff fd7e 	bl	8000ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f8:	f7ff fd4e 	bl	8000f98 <MX_DMA_Init>
  MX_SAI1_Init();
 80014fc:	f000 fbc4 	bl	8001c88 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8001500:	f000 ff7c 	bl	80023fc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001504:	f009 fd72 	bl	800afec <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 8001508:	f000 fce2 	bl	8001ed0 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 800150c:	484b      	ldr	r0, [pc, #300]	@ (800163c <main+0x1a0>)
 800150e:	f012 fcd9 	bl	8013ec4 <puts>
  SDCard_InitAndFormat();
 8001512:	f000 f9c9 	bl	80018a8 <SDCard_InitAndFormat>

  AI_Init();
 8001516:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <main+0x1a4>)
 8001518:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800151c:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 8001520:	443b      	add	r3, r7
 8001522:	469c      	mov	ip, r3
 8001524:	f7ff ff40 	bl	80013a8 <AI_Init.0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0; // AI stuff
 8001528:	2300      	movs	r3, #0
 800152a:	4a46      	ldr	r2, [pc, #280]	@ (8001644 <main+0x1a8>)
 800152c:	443a      	add	r2, r7
 800152e:	6013      	str	r3, [r2, #0]
  while (1)
  {
      check_button_release();
 8001530:	f000 f9a6 	bl	8001880 <check_button_release>
      printf("Waiting for input to record...\r\n");
 8001534:	4844      	ldr	r0, [pc, #272]	@ (8001648 <main+0x1ac>)
 8001536:	f012 fcc5 	bl	8013ec4 <puts>
      HAL_Delay(1000);
 800153a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800153e:	f003 f92d 	bl	800479c <HAL_Delay>

      if (button_pressed == 1)
 8001542:	4b42      	ldr	r3, [pc, #264]	@ (800164c <main+0x1b0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d16c      	bne.n	8001626 <main+0x18a>
      {
          /* Toggle the green led to visually show action */
          HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 800154c:	2102      	movs	r1, #2
 800154e:	4840      	ldr	r0, [pc, #256]	@ (8001650 <main+0x1b4>)
 8001550:	f004 f9b7 	bl	80058c2 <HAL_GPIO_TogglePin>
          HAL_Delay(100);
 8001554:	2064      	movs	r0, #100	@ 0x64
 8001556:	f003 f921 	bl	800479c <HAL_Delay>
          HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 800155a:	2102      	movs	r1, #2
 800155c:	483c      	ldr	r0, [pc, #240]	@ (8001650 <main+0x1b4>)
 800155e:	f004 f9b0 	bl	80058c2 <HAL_GPIO_TogglePin>
          HAL_Delay(100);
 8001562:	2064      	movs	r0, #100	@ 0x64
 8001564:	f003 f91a 	bl	800479c <HAL_Delay>

          /* If the program is not already recording... */
          if (AudioState == AUDIO_STATE_IDLE)
 8001568:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <main+0x1b8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d108      	bne.n	8001582 <main+0xe6>
          {
              /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
              AUDIO_REC_Start();
 8001570:	f009 f9d0 	bl	800a914 <AUDIO_REC_Start>
          }

          /* While recording, we loop the recording process */
          while (AudioState == AUDIO_STATE_RECORD)
 8001574:	e005      	b.n	8001582 <main+0xe6>
          {
              status = AUDIO_REC_Process();
 8001576:	f009 fa53 	bl	800aa20 <AUDIO_REC_Process>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <main+0x1bc>)
 8001580:	701a      	strb	r2, [r3, #0]
          while (AudioState == AUDIO_STATE_RECORD)
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <main+0x1b8>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d0f5      	beq.n	8001576 <main+0xda>
          }

          /* Once we stop recording, we correctly close the .WAV */
          if (AudioState == AUDIO_STATE_STOP)
 800158a:	4b32      	ldr	r3, [pc, #200]	@ (8001654 <main+0x1b8>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b0a      	cmp	r3, #10
 8001590:	d108      	bne.n	80015a4 <main+0x108>
          {
              status = AUDIO_REC_Process();
 8001592:	f009 fa45 	bl	800aa20 <AUDIO_REC_Process>
 8001596:	4603      	mov	r3, r0
 8001598:	461a      	mov	r2, r3
 800159a:	4b2f      	ldr	r3, [pc, #188]	@ (8001658 <main+0x1bc>)
 800159c:	701a      	strb	r2, [r3, #0]
              printf("Recording stopped.\r\n");
 800159e:	482f      	ldr	r0, [pc, #188]	@ (800165c <main+0x1c0>)
 80015a0:	f012 fc90 	bl	8013ec4 <puts>
          }

          // Process the WAV file for AI inference
          if (status == 0)  // Ensure the WAV file was properly processed
 80015a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <main+0x1bc>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d139      	bne.n	8001620 <main+0x184>
          {
              int ret = preprocess_wav_data(in_data);
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <main+0x1a4>)
 80015ae:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80015b2:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80015b6:	443b      	add	r3, r7
 80015b8:	3330      	adds	r3, #48	@ 0x30
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fb16 	bl	8001bec <preprocess_wav_data>
 80015c0:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <main+0x1c4>)
 80015c2:	443b      	add	r3, r7
 80015c4:	6018      	str	r0, [r3, #0]
              if (ret == 0)  // Check if preprocessing was successful
 80015c6:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <main+0x1c4>)
 80015c8:	443b      	add	r3, r7
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d123      	bne.n	8001618 <main+0x17c>
              {
                  // Run inference on the preprocessed data
                  int activity_index = AI_Process(in_data);
 80015d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <main+0x1a4>)
 80015d2:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80015d6:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80015da:	443b      	add	r3, r7
 80015dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80015e0:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <main+0x1a4>)
 80015e2:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80015e6:	f103 03d8 	add.w	r3, r3, #216	@ 0xd8
 80015ea:	443b      	add	r3, r7
 80015ec:	469c      	mov	ip, r3
 80015ee:	4610      	mov	r0, r2
 80015f0:	f000 f840 	bl	8001674 <AI_Process.1>
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <main+0x1c8>)
 80015f6:	443b      	add	r3, r7
 80015f8:	6018      	str	r0, [r3, #0]
                  printf("Predicted activity: %s\r\n", activities[activity_index]);
 80015fa:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80015fe:	461a      	mov	r2, r3
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <main+0x1c8>)
 8001602:	443b      	add	r3, r7
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 800160e:	4619      	mov	r1, r3
 8001610:	4815      	ldr	r0, [pc, #84]	@ (8001668 <main+0x1cc>)
 8001612:	f012 fbef 	bl	8013df4 <iprintf>
 8001616:	e006      	b.n	8001626 <main+0x18a>
              }
              else
              {
                  printf("Error: WAV file preprocessing failed.\r\n");
 8001618:	4814      	ldr	r0, [pc, #80]	@ (800166c <main+0x1d0>)
 800161a:	f012 fc53 	bl	8013ec4 <puts>
 800161e:	e002      	b.n	8001626 <main+0x18a>
              }
          }
          else
          {
              printf("Error: WAV file info reading failed.\r\n");
 8001620:	4813      	ldr	r0, [pc, #76]	@ (8001670 <main+0x1d4>)
 8001622:	f012 fc4f 	bl	8013ec4 <puts>
          }
      }

      HAL_Delay(100);  // Small delay for stability
 8001626:	2064      	movs	r0, #100	@ 0x64
 8001628:	f003 f8b8 	bl	800479c <HAL_Delay>
  {
 800162c:	e780      	b.n	8001530 <main+0x94>
 800162e:	bf00      	nop
 8001630:	000200e8 	.word	0x000200e8
 8001634:	000200d4 	.word	0x000200d4
 8001638:	08015e08 	.word	0x08015e08
 800163c:	08015d2c 	.word	0x08015d2c
 8001640:	fffdff60 	.word	0xfffdff60
 8001644:	000200d0 	.word	0x000200d0
 8001648:	08015d40 	.word	0x08015d40
 800164c:	20000bf4 	.word	0x20000bf4
 8001650:	40022000 	.word	0x40022000
 8001654:	200009f0 	.word	0x200009f0
 8001658:	200009f1 	.word	0x200009f1
 800165c:	08015d60 	.word	0x08015d60
 8001660:	000200cc 	.word	0x000200cc
 8001664:	000200c8 	.word	0x000200c8
 8001668:	08015d74 	.word	0x08015d74
 800166c:	08015d90 	.word	0x08015d90
 8001670:	08015db8 	.word	0x08015db8

08001674 <AI_Process.1>:
	int AI_Process(const float* input_data) {
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	4664      	mov	r4, ip
 800167e:	f8c7 c000 	str.w	ip, [r7]
	    memcpy(in_data, input_data, sizeof(in_data));
 8001682:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8001686:	f64f 12f0 	movw	r2, #63984	@ 0xf9f0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4618      	mov	r0, r3
 800168e:	f012 fd88 	bl	80141a2 <memcpy>
	    ai_i32 nbatch = ai_network_run(network, ai_input, ai_output);
 8001692:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 8001696:	f8d3 0a58 	ldr.w	r0, [r3, #2648]	@ 0xa58
 800169a:	f64f 233c 	movw	r3, #64060	@ 0xfa3c
 800169e:	4423      	add	r3, r4
 80016a0:	f64f 2220 	movw	r2, #64032	@ 0xfa20
 80016a4:	4422      	add	r2, r4
 80016a6:	4619      	mov	r1, r3
 80016a8:	f00d f9c0 	bl	800ea2c <ai_network_run>
 80016ac:	6138      	str	r0, [r7, #16]
	    if (nbatch != 1) {
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d013      	beq.n	80016dc <AI_Process.1+0x68>
	        ai_error ai_err = ai_network_get_error(network);
 80016b4:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80016b8:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 80016bc:	4618      	mov	r0, r3
 80016be:	f00d f923 	bl	800e908 <ai_network_get_error>
 80016c2:	4603      	mov	r3, r0
 80016c4:	60fb      	str	r3, [r7, #12]
	        printf("AI model inference failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 80016c6:	7b3b      	ldrb	r3, [r7, #12]
 80016c8:	4619      	mov	r1, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80016d0:	461a      	mov	r2, r3
 80016d2:	481c      	ldr	r0, [pc, #112]	@ (8001744 <AI_Process.1+0xd0>)
 80016d4:	f012 fb8e 	bl	8013df4 <iprintf>
	        Error_Handler();
 80016d8:	f000 fad0 	bl	8001c7c <Error_Handler>
	    float max_val = out_data[0];
 80016dc:	69a3      	ldr	r3, [r4, #24]
 80016de:	61fb      	str	r3, [r7, #28]
	    int max_idx = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
	    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++) {
 80016e4:	2301      	movs	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e017      	b.n	800171a <AI_Process.1+0xa6>
	        if (out_data[i] > max_val) {
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3306      	adds	r3, #6
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4423      	add	r3, r4
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80016fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d507      	bpl.n	8001714 <AI_Process.1+0xa0>
	            max_val = out_data[i];
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3306      	adds	r3, #6
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4423      	add	r3, r4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	61fb      	str	r3, [r7, #28]
	            max_idx = i;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	61bb      	str	r3, [r7, #24]
	    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b05      	cmp	r3, #5
 800171e:	dde4      	ble.n	80016ea <AI_Process.1+0x76>
	    printf("Predicted activity: %s (confidence: %.2f)\r\n", activities[max_idx], max_val);
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8001726:	69f8      	ldr	r0, [r7, #28]
 8001728:	f7fe ff8e 	bl	8000648 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4621      	mov	r1, r4
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <AI_Process.1+0xd4>)
 8001734:	f012 fb5e 	bl	8013df4 <iprintf>
	    return max_idx;
 8001738:	69bb      	ldr	r3, [r7, #24]
	}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	@ 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	08015e20 	.word	0x08015e20
 8001748:	08015e50 	.word	0x08015e50

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b094      	sub	sp, #80	@ 0x50
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0320 	add.w	r3, r7, #32
 8001756:	2230      	movs	r2, #48	@ 0x30
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f012 fc92 	bl	8014084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001770:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <SystemClock_Config+0xd0>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	4a29      	ldr	r2, [pc, #164]	@ (800181c <SystemClock_Config+0xd0>)
 8001776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177a:	6413      	str	r3, [r2, #64]	@ 0x40
 800177c:	4b27      	ldr	r3, [pc, #156]	@ (800181c <SystemClock_Config+0xd0>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001788:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <SystemClock_Config+0xd4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a24      	ldr	r2, [pc, #144]	@ (8001820 <SystemClock_Config+0xd4>)
 800178e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <SystemClock_Config+0xd4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a0:	2302      	movs	r3, #2
 80017a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a8:	2310      	movs	r3, #16
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ac:	2302      	movs	r3, #2
 80017ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017b4:	2308      	movs	r3, #8
 80017b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80017b8:	23c8      	movs	r3, #200	@ 0xc8
 80017ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017bc:	2302      	movs	r3, #2
 80017be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80017c0:	2308      	movs	r3, #8
 80017c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	4618      	mov	r0, r3
 80017ca:	f004 fedb 	bl	8006584 <HAL_RCC_OscConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017d4:	f000 fa52 	bl	8001c7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017d8:	f004 fe84 	bl	80064e4 <HAL_PWREx_EnableOverDrive>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017e2:	f000 fa4b 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e6:	230f      	movs	r3, #15
 80017e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ea:	2302      	movs	r3, #2
 80017ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	2106      	movs	r1, #6
 8001804:	4618      	mov	r0, r3
 8001806:	f005 f961 	bl	8006acc <HAL_RCC_ClockConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001810:	f000 fa34 	bl	8001c7c <Error_Handler>
  }
}
 8001814:	bf00      	nop
 8001816:	3750      	adds	r7, #80	@ 0x50
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	40007000 	.word	0x40007000

08001824 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 800182c:	1d39      	adds	r1, r7, #4
 800182e:	2364      	movs	r3, #100	@ 0x64
 8001830:	2201      	movs	r2, #1
 8001832:	4804      	ldr	r0, [pc, #16]	@ (8001844 <__io_putchar+0x20>)
 8001834:	f007 fe84 	bl	8009540 <HAL_UART_Transmit>
return ch;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000e28 	.word	0x20000e28

08001848 <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001858:	d10a      	bne.n	8001870 <HAL_GPIO_EXTI_Callback+0x28>
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x30>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <HAL_GPIO_EXTI_Callback+0x30>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 800186a:	4804      	ldr	r0, [pc, #16]	@ (800187c <HAL_GPIO_EXTI_Callback+0x34>)
 800186c:	f012 fb2a 	bl	8013ec4 <puts>
      }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000bf4 	.word	0x20000bf4
 800187c:	08015e7c 	.word	0x08015e7c

08001880 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 8001884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001888:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <check_button_release+0x20>)
 800188a:	f003 ffe9 	bl	8005860 <HAL_GPIO_ReadPin>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <check_button_release+0x1a>
 8001894:	4b03      	ldr	r3, [pc, #12]	@ (80018a4 <check_button_release+0x24>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000
 80018a4:	20000bf4 	.word	0x20000bf4

080018a8 <SDCard_InitAndFormat>:
/* ======================================================== */


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	491e      	ldr	r1, [pc, #120]	@ (800192c <SDCard_InitAndFormat+0x84>)
 80018b2:	481f      	ldr	r0, [pc, #124]	@ (8001930 <SDCard_InitAndFormat+0x88>)
 80018b4:	f00b fb28 	bl	800cf08 <f_mount>
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4619      	mov	r1, r3
 80018c6:	481b      	ldr	r0, [pc, #108]	@ (8001934 <SDCard_InitAndFormat+0x8c>)
 80018c8:	f012 fa94 	bl	8013df4 <iprintf>
        Error_Handler();
 80018cc:	f000 f9d6 	bl	8001c7c <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 80018d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <SDCard_InitAndFormat+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	2107      	movs	r1, #7
 80018dc:	4813      	ldr	r0, [pc, #76]	@ (800192c <SDCard_InitAndFormat+0x84>)
 80018de:	f00c fa79 	bl	800ddd4 <f_mkfs>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4812      	ldr	r0, [pc, #72]	@ (800193c <SDCard_InitAndFormat+0x94>)
 80018f2:	f012 fa7f 	bl	8013df4 <iprintf>
        Error_Handler();
 80018f6:	f000 f9c1 	bl	8001c7c <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	490b      	ldr	r1, [pc, #44]	@ (800192c <SDCard_InitAndFormat+0x84>)
 80018fe:	2000      	movs	r0, #0
 8001900:	f00b fb02 	bl	800cf08 <f_mount>
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d006      	beq.n	800191c <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4619      	mov	r1, r3
 8001912:	480b      	ldr	r0, [pc, #44]	@ (8001940 <SDCard_InitAndFormat+0x98>)
 8001914:	f012 fa6e 	bl	8013df4 <iprintf>
        Error_Handler();
 8001918:	f000 f9b0 	bl	8001c7c <Error_Handler>
    }

    printf("SD card initialized and formatted successfully.\r\n");
 800191c:	4809      	ldr	r0, [pc, #36]	@ (8001944 <SDCard_InitAndFormat+0x9c>)
 800191e:	f012 fad1 	bl	8013ec4 <puts>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20005b78 	.word	0x20005b78
 8001930:	20005b7c 	.word	0x20005b7c
 8001934:	08015e90 	.word	0x08015e90
 8001938:	200009f4 	.word	0x200009f4
 800193c:	08015ec0 	.word	0x08015ec0
 8001940:	08015ef0 	.word	0x08015ef0
 8001944:	08015f30 	.word	0x08015f30

08001948 <read_wav_file>:
    // Close the file
    f_close(&file);
}
/* ======================================================== */

int read_wav_file(const char *filename, int16_t *audio_buffer, uint32_t *num_samples) {
 8001948:	b580      	push	{r7, lr}
 800194a:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 800194e:	af00      	add	r7, sp, #0
 8001950:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001954:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001958:	6018      	str	r0, [r3, #0]
 800195a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800195e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8001962:	6019      	str	r1, [r3, #0]
 8001964:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001968:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800196c:	601a      	str	r2, [r3, #0]
    FIL wav_file;
    WAV_Header header;
    UINT bytes_read;

    // Open the WAV file
    if (f_open(&wav_file, filename, FA_READ) != FR_OK) {
 800196e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001972:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001976:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800197a:	2201      	movs	r2, #1
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	f00b fb09 	bl	800cf94 <f_open>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <read_wav_file+0x4c>
        printf("Error: Unable to open WAV file.\r\n");
 8001988:	4837      	ldr	r0, [pc, #220]	@ (8001a68 <read_wav_file+0x120>)
 800198a:	f012 fa9b 	bl	8013ec4 <puts>
        return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e064      	b.n	8001a5e <read_wav_file+0x116>
    }

    // Read WAV header
    if (f_read(&wav_file, &header, sizeof(WAV_Header), &bytes_read) != FR_OK) {
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	f107 0114 	add.w	r1, r7, #20
 800199c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80019a0:	222c      	movs	r2, #44	@ 0x2c
 80019a2:	f00b fcb1 	bl	800d308 <f_read>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00a      	beq.n	80019c2 <read_wav_file+0x7a>
        printf("Error: Unable to read WAV header.\r\n");
 80019ac:	482f      	ldr	r0, [pc, #188]	@ (8001a6c <read_wav_file+0x124>)
 80019ae:	f012 fa89 	bl	8013ec4 <puts>
        f_close(&wav_file);
 80019b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00b ffd8 	bl	800d96c <f_close>
        return -2;
 80019bc:	f06f 0301 	mvn.w	r3, #1
 80019c0:	e04d      	b.n	8001a5e <read_wav_file+0x116>
    }

    // Check if WAV file has the correct format
    if (header.SampleRate != WAV_SAMPLE_RATE || header.BitsPerSample != 16 || header.NumChannels != 1) {
 80019c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80019c6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80019d0:	d10d      	bne.n	80019ee <read_wav_file+0xa6>
 80019d2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80019d6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80019da:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80019dc:	2b10      	cmp	r3, #16
 80019de:	d106      	bne.n	80019ee <read_wav_file+0xa6>
 80019e0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80019e4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80019e8:	8adb      	ldrh	r3, [r3, #22]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d00a      	beq.n	8001a04 <read_wav_file+0xbc>
        printf("Error: Unsupported WAV format.\r\n");
 80019ee:	4820      	ldr	r0, [pc, #128]	@ (8001a70 <read_wav_file+0x128>)
 80019f0:	f012 fa68 	bl	8013ec4 <puts>
        f_close(&wav_file);
 80019f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00b ffb7 	bl	800d96c <f_close>
        return -3;
 80019fe:	f06f 0302 	mvn.w	r3, #2
 8001a02:	e02c      	b.n	8001a5e <read_wav_file+0x116>
    }

    // Read audio samples in chunks and process
    if (f_read(&wav_file, audio_buffer, sizeof(int16_t) * FFT_SIZE, &bytes_read) != FR_OK) {
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001a0c:	f5a2 711a 	sub.w	r1, r2, #616	@ 0x268
 8001a10:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a18:	6809      	ldr	r1, [r1, #0]
 8001a1a:	f00b fc75 	bl	800d308 <f_read>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00a      	beq.n	8001a3a <read_wav_file+0xf2>
        printf("Error: Unable to read audio data.\r\n");
 8001a24:	4813      	ldr	r0, [pc, #76]	@ (8001a74 <read_wav_file+0x12c>)
 8001a26:	f012 fa4d 	bl	8013ec4 <puts>
        f_close(&wav_file);
 8001a2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f00b ff9c 	bl	800d96c <f_close>
        return -4;
 8001a34:	f06f 0303 	mvn.w	r3, #3
 8001a38:	e011      	b.n	8001a5e <read_wav_file+0x116>
    }

    *num_samples = bytes_read / sizeof(int16_t);
 8001a3a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001a3e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	085a      	lsrs	r2, r3, #1
 8001a46:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001a4a:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	601a      	str	r2, [r3, #0]

    f_close(&wav_file);
 8001a52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00b ff88 	bl	800d96c <f_close>
    return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	080160d4 	.word	0x080160d4
 8001a6c:	080160f8 	.word	0x080160f8
 8001a70:	0801611c 	.word	0x0801611c
 8001a74:	0801613c 	.word	0x0801613c

08001a78 <normalize_audio>:


void normalize_audio(int16_t *audio_data, uint32_t num_samples, float *normalized_buffer) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < num_samples; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e016      	b.n	8001ab8 <normalize_audio+0x40>
        normalized_buffer[i] = (float)audio_data[i] / 32768.0f;  // Normalize to [-1, 1]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4413      	add	r3, r2
 8001a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001ad0 <normalize_audio+0x58>
 8001aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aae:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < num_samples; i++) {
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d3e4      	bcc.n	8001a8a <normalize_audio+0x12>
    }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	47000000 	.word	0x47000000

08001ad4 <apply_fft>:

void apply_fft(float *normalized_buffer, float *fft_output, uint32_t fft_size) {
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b08d      	sub	sp, #52	@ 0x34
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
    arm_rfft_fast_instance_f32 fft_instance;
    arm_rfft_fast_init_f32(&fft_instance, fft_size);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00d f824 	bl	800eb38 <arm_rfft_fast_init_f32>
    arm_rfft_fast_f32(&fft_instance, normalized_buffer, fft_output, 0);
 8001af0:	f107 0014 	add.w	r0, r7, #20
 8001af4:	2300      	movs	r3, #0
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	f00d f8d1 	bl	800eca0 <arm_rfft_fast_f32>

    // Convert FFT output to magnitude
    for (uint32_t i = 0; i < fft_size / 2; i++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b02:	e01c      	b.n	8001b3e <apply_fft+0x6a>
        fft_output[i] = sqrtf(fft_output[i] * fft_output[i]);
 8001b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	ed93 7a00 	vldr	s14, [r3]
 8001b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	4413      	add	r3, r2
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	18d4      	adds	r4, r2, r3
 8001b28:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2c:	f014 f882 	bl	8015c34 <sqrtf>
 8001b30:	eef0 7a40 	vmov.f32	s15, s0
 8001b34:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < fft_size / 2; i++) {
 8001b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3dd      	bcc.n	8001b04 <apply_fft+0x30>
    }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3734      	adds	r7, #52	@ 0x34
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}

08001b52 <calculate_mel_spectrogram>:


void calculate_mel_spectrogram(float *fft_output, float *mel_spectrogram, uint32_t fft_size, uint32_t num_mel_bins) {
 8001b52:	b480      	push	{r7}
 8001b54:	b087      	sub	sp, #28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
    // Your Mel filterbank coefficients should be defined or loaded here
    // Apply Mel filterbank to the FFT output
    for (uint32_t i = 0; i < num_mel_bins; i++) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e009      	b.n	8001b7a <calculate_mel_spectrogram+0x28>
        mel_spectrogram[i] = 0.0f;  // Replace this with actual calculation based on filterbank
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < num_mel_bins; i++) {
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3f1      	bcc.n	8001b66 <calculate_mel_spectrogram+0x14>
    }
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <prepare_ai_model_input>:


void prepare_ai_model_input(float *mel_spectrogram, float *model_input_buffer, uint32_t num_mel_bins, uint32_t ai_input_size) {
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < ai_input_size; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e018      	b.n	8001bd6 <prepare_ai_model_input+0x46>
        if (i < num_mel_bins) {
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d20a      	bcs.n	8001bc2 <prepare_ai_model_input+0x32>
            model_input_buffer[i] = mel_spectrogram[i];
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	440b      	add	r3, r1
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e006      	b.n	8001bd0 <prepare_ai_model_input+0x40>
        } else {
            model_input_buffer[i] = 0.0f;  // Pad with zeros or other initialization if needed
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < ai_input_size; i++) {
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d3e2      	bcc.n	8001ba4 <prepare_ai_model_input+0x14>
        }
    }
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <preprocess_wav_data>:

int preprocess_wav_data(float *input_buffer) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	f5ad 6d2b 	sub.w	sp, sp, #2736	@ 0xab0
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001bf8:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 8001bfc:	6018      	str	r0, [r3, #0]
    float fft_output[FFT_SIZE];
    float mel_spectrogram[NUM_MEL_BINS];
    uint32_t num_samples;

    // Step 1: Read the WAV file and get audio samples
    if (read_wav_file("WAVE.wav", audio_buffer, &num_samples) != 0) {
 8001bfe:	f107 020c 	add.w	r2, r7, #12
 8001c02:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001c06:	4619      	mov	r1, r3
 8001c08:	481b      	ldr	r0, [pc, #108]	@ (8001c78 <preprocess_wav_data+0x8c>)
 8001c0a:	f7ff fe9d 	bl	8001948 <read_wav_file>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <preprocess_wav_data+0x2e>
        return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
 8001c18:	e029      	b.n	8001c6e <preprocess_wav_data+0x82>
    }

    // Step 2: Normalize audio data to [-1, 1]
    normalize_audio(audio_buffer, num_samples, normalized_buffer);
 8001c1a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001c1e:	f6a3 23a4 	subw	r3, r3, #2724	@ 0xaa4
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 8001c28:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff23 	bl	8001a78 <normalize_audio>

    // Step 3: Apply FFT to the normalized audio data
    apply_fft(normalized_buffer, fft_output, FFT_SIZE);
 8001c32:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8001c36:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8001c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff48 	bl	8001ad4 <apply_fft>

    // Step 4: Convert FFT output to Mel spectrogram
    calculate_mel_spectrogram(fft_output, mel_spectrogram, FFT_SIZE / 2, NUM_MEL_BINS);
 8001c44:	f107 0110 	add.w	r1, r7, #16
 8001c48:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8001c4c:	2328      	movs	r3, #40	@ 0x28
 8001c4e:	2280      	movs	r2, #128	@ 0x80
 8001c50:	f7ff ff7f 	bl	8001b52 <calculate_mel_spectrogram>

    // Step 5: Prepare the AI model input buffer with Mel spectrogram
    prepare_ai_model_input(mel_spectrogram, input_buffer, NUM_MEL_BINS, AI_NETWORK_IN_1_SIZE);
 8001c54:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001c58:	f6a3 21ac 	subw	r1, r3, #2732	@ 0xaac
 8001c5c:	f107 0010 	add.w	r0, r7, #16
 8001c60:	f643 637c 	movw	r3, #15996	@ 0x3e7c
 8001c64:	2228      	movs	r2, #40	@ 0x28
 8001c66:	6809      	ldr	r1, [r1, #0]
 8001c68:	f7ff ff92 	bl	8001b90 <prepare_ai_model_input>

    return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f507 672b 	add.w	r7, r7, #2736	@ 0xab0
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08016160 	.word	0x08016160

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <Error_Handler+0x8>

08001c88 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001c8e:	4a28      	ldr	r2, [pc, #160]	@ (8001d30 <MX_SAI1_Init+0xa8>)
 8001c90:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ca4:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cca:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001cce:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001cd0:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001cdc:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	@ (8001d2c <MX_SAI1_Init+0xa4>)
 8001d1a:	f005 fef9 	bl	8007b10 <HAL_SAI_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8001d24:	f7ff ffaa 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000bf8 	.word	0x20000bf8
 8001d30:	40015804 	.word	0x40015804

08001d34 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0aa      	sub	sp, #168	@ 0xa8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	2284      	movs	r2, #132	@ 0x84
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f012 f99d 	bl	8014084 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a41      	ldr	r2, [pc, #260]	@ (8001e54 <HAL_SAI_MspInit+0x120>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d17b      	bne.n	8001e4c <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001d54:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001d58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001d5a:	2332      	movs	r3, #50	@ 0x32
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001d62:	2302      	movs	r3, #2
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001d66:	2300      	movs	r3, #0
 8001d68:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001d72:	2300      	movs	r3, #0
 8001d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f005 f88c 	bl	8006e98 <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8001d86:	f7ff ff79 	bl	8001c7c <Error_Handler>
    }

    if (SAI1_client == 0)
 8001d8a:	4b33      	ldr	r3, [pc, #204]	@ (8001e58 <HAL_SAI_MspInit+0x124>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10b      	bne.n	8001daa <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001d92:	4b32      	ldr	r3, [pc, #200]	@ (8001e5c <HAL_SAI_MspInit+0x128>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	4a31      	ldr	r2, [pc, #196]	@ (8001e5c <HAL_SAI_MspInit+0x128>)
 8001d98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <HAL_SAI_MspInit+0x128>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001daa:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <HAL_SAI_MspInit+0x124>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	4a29      	ldr	r2, [pc, #164]	@ (8001e58 <HAL_SAI_MspInit+0x124>)
 8001db2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001db4:	2370      	movs	r3, #112	@ 0x70
 8001db6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001dcc:	2306      	movs	r3, #6
 8001dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4821      	ldr	r0, [pc, #132]	@ (8001e60 <HAL_SAI_MspInit+0x12c>)
 8001dda:	f003 fa89 	bl	80052f0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001de0:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <HAL_SAI_MspInit+0x134>)
 8001de2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001df8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dfc:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e04:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e0c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e14:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001e16:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e1c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001e24:	480f      	ldr	r0, [pc, #60]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e26:	f002 fdef 	bl	8004a08 <HAL_DMA_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8001e30:	f7ff ff24 	bl	8001c7c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a0b      	ldr	r2, [pc, #44]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e38:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e44:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001e46:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_SAI_MspInit+0x130>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001e4c:	bf00      	nop
 8001e4e:	37a8      	adds	r7, #168	@ 0xa8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40015804 	.word	0x40015804
 8001e58:	20000cdc 	.word	0x20000cdc
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40021000 	.word	0x40021000
 8001e64:	20000c7c 	.word	0x20000c7c
 8001e68:	40026428 	.word	0x40026428

08001e6c <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a11      	ldr	r2, [pc, #68]	@ (8001ec0 <HAL_SAI_MspDeInit+0x54>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <HAL_SAI_MspDeInit+0x58>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <HAL_SAI_MspDeInit+0x58>)
 8001e86:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <HAL_SAI_MspDeInit+0x58>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_SAI_MspDeInit+0x5c>)
 8001e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e94:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec8 <HAL_SAI_MspDeInit+0x5c>)
 8001e96:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e9a:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001e9c:	2170      	movs	r1, #112	@ 0x70
 8001e9e:	480b      	ldr	r0, [pc, #44]	@ (8001ecc <HAL_SAI_MspDeInit+0x60>)
 8001ea0:	f003 fbd2 	bl	8005648 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fe5b 	bl	8004b64 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 fe56 	bl	8004b64 <HAL_DMA_DeInit>
    }
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40015804 	.word	0x40015804
 8001ec4:	20000cdc 	.word	0x20000cdc
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <MX_SDMMC1_SD_Init+0x38>)
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <MX_SDMMC1_SD_Init+0x3c>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <MX_SDMMC1_SD_Init+0x38>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <MX_SDMMC1_SD_Init+0x38>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <MX_SDMMC1_SD_Init+0x38>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <MX_SDMMC1_SD_Init+0x38>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <MX_SDMMC1_SD_Init+0x38>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <MX_SDMMC1_SD_Init+0x38>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	20000ce0 	.word	0x20000ce0
 8001f0c:	40012c00 	.word	0x40012c00

08001f10 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0ac      	sub	sp, #176	@ 0xb0
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	2284      	movs	r2, #132	@ 0x84
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f012 f8a7 	bl	8014084 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a74      	ldr	r2, [pc, #464]	@ (800210c <HAL_SD_MspInit+0x1fc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	f040 80e0 	bne.w	8002102 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001f42:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8001f46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f004 ff9d 	bl	8006e98 <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001f64:	f7ff fe8a 	bl	8001c7c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f68:	4b69      	ldr	r3, [pc, #420]	@ (8002110 <HAL_SD_MspInit+0x200>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	4a68      	ldr	r2, [pc, #416]	@ (8002110 <HAL_SD_MspInit+0x200>)
 8001f6e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f72:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f74:	4b66      	ldr	r3, [pc, #408]	@ (8002110 <HAL_SD_MspInit+0x200>)
 8001f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f80:	4b63      	ldr	r3, [pc, #396]	@ (8002110 <HAL_SD_MspInit+0x200>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	4a62      	ldr	r2, [pc, #392]	@ (8002110 <HAL_SD_MspInit+0x200>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8c:	4b60      	ldr	r3, [pc, #384]	@ (8002110 <HAL_SD_MspInit+0x200>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f98:	4b5d      	ldr	r3, [pc, #372]	@ (8002110 <HAL_SD_MspInit+0x200>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002110 <HAL_SD_MspInit+0x200>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa4:	4b5a      	ldr	r3, [pc, #360]	@ (8002110 <HAL_SD_MspInit+0x200>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001fb0:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fca:	230c      	movs	r3, #12
 8001fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	484f      	ldr	r0, [pc, #316]	@ (8002114 <HAL_SD_MspInit+0x204>)
 8001fd8:	f003 f98a 	bl	80052f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ff4:	230c      	movs	r3, #12
 8001ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ffe:	4619      	mov	r1, r3
 8002000:	4845      	ldr	r0, [pc, #276]	@ (8002118 <HAL_SD_MspInit+0x208>)
 8002002:	f003 f975 	bl	80052f0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002006:	4b45      	ldr	r3, [pc, #276]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002008:	4a45      	ldr	r2, [pc, #276]	@ (8002120 <HAL_SD_MspInit+0x210>)
 800200a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800200c:	4b43      	ldr	r3, [pc, #268]	@ (800211c <HAL_SD_MspInit+0x20c>)
 800200e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002012:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002014:	4b41      	ldr	r3, [pc, #260]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800201a:	4b40      	ldr	r3, [pc, #256]	@ (800211c <HAL_SD_MspInit+0x20c>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002020:	4b3e      	ldr	r3, [pc, #248]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002022:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002026:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002028:	4b3c      	ldr	r3, [pc, #240]	@ (800211c <HAL_SD_MspInit+0x20c>)
 800202a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800202e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002030:	4b3a      	ldr	r3, [pc, #232]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002032:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002036:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8002038:	4b38      	ldr	r3, [pc, #224]	@ (800211c <HAL_SD_MspInit+0x20c>)
 800203a:	2220      	movs	r2, #32
 800203c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800203e:	4b37      	ldr	r3, [pc, #220]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002044:	4b35      	ldr	r3, [pc, #212]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002046:	2204      	movs	r2, #4
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800204a:	4b34      	ldr	r3, [pc, #208]	@ (800211c <HAL_SD_MspInit+0x20c>)
 800204c:	2203      	movs	r2, #3
 800204e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002050:	4b32      	ldr	r3, [pc, #200]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002052:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002056:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002058:	4b30      	ldr	r3, [pc, #192]	@ (800211c <HAL_SD_MspInit+0x20c>)
 800205a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002060:	482e      	ldr	r0, [pc, #184]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002062:	f002 fcd1 	bl	8004a08 <HAL_DMA_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 800206c:	f7ff fe06 	bl	8001c7c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a2a      	ldr	r2, [pc, #168]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40
 8002076:	4a29      	ldr	r2, [pc, #164]	@ (800211c <HAL_SD_MspInit+0x20c>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800207c:	4b29      	ldr	r3, [pc, #164]	@ (8002124 <HAL_SD_MspInit+0x214>)
 800207e:	4a2a      	ldr	r2, [pc, #168]	@ (8002128 <HAL_SD_MspInit+0x218>)
 8002080:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8002082:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <HAL_SD_MspInit+0x214>)
 8002084:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002088:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800208a:	4b26      	ldr	r3, [pc, #152]	@ (8002124 <HAL_SD_MspInit+0x214>)
 800208c:	2240      	movs	r2, #64	@ 0x40
 800208e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002090:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <HAL_SD_MspInit+0x214>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002096:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <HAL_SD_MspInit+0x214>)
 8002098:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800209c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800209e:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020a4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020ac:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80020ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020b0:	2220      	movs	r2, #32
 80020b2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020bc:	2204      	movs	r2, #4
 80020be:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80020c0:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020c2:	2203      	movs	r2, #3
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80020c6:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80020cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020d0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80020d4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80020d6:	4813      	ldr	r0, [pc, #76]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020d8:	f002 fc96 	bl	8004a08 <HAL_DMA_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80020e2:	f7ff fdcb 	bl	8001c7c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <HAL_SD_MspInit+0x214>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2101      	movs	r1, #1
 80020f6:	2031      	movs	r0, #49	@ 0x31
 80020f8:	f002 fc4f 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80020fc:	2031      	movs	r0, #49	@ 0x31
 80020fe:	f002 fc68 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002102:	bf00      	nop
 8002104:	37b0      	adds	r7, #176	@ 0xb0
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40023800 	.word	0x40023800
 8002114:	40020800 	.word	0x40020800
 8002118:	40020c00 	.word	0x40020c00
 800211c:	20000d64 	.word	0x20000d64
 8002120:	40026458 	.word	0x40026458
 8002124:	20000dc4 	.word	0x20000dc4
 8002128:	400264a0 	.word	0x400264a0

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <HAL_MspInit+0x44>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	4a0e      	ldr	r2, [pc, #56]	@ (8002170 <HAL_MspInit+0x44>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	@ 0x40
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <HAL_MspInit+0x44>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <HAL_MspInit+0x44>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_MspInit+0x44>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002154:	6453      	str	r3, [r2, #68]	@ 0x44
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_MspInit+0x44>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <NMI_Handler+0x4>

0800217c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <HardFault_Handler+0x4>

08002184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <MemManage_Handler+0x4>

0800218c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <BusFault_Handler+0x4>

08002194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <UsageFault_Handler+0x4>

0800219c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ca:	f002 fac7 	bl	800475c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80021d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80021da:	f003 fb8d 	bl	80058f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80021e8:	4802      	ldr	r0, [pc, #8]	@ (80021f4 <SDMMC1_IRQHandler+0x10>)
 80021ea:	f006 fab3 	bl	8008754 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000ce0 	.word	0x20000ce0

080021f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80021fc:	4802      	ldr	r0, [pc, #8]	@ (8002208 <DMA2_Stream1_IRQHandler+0x10>)
 80021fe:	f002 fe01 	bl	8004e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000c7c 	.word	0x20000c7c

0800220c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <DMA2_Stream3_IRQHandler+0x10>)
 8002212:	f002 fdf7 	bl	8004e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000d64 	.word	0x20000d64

08002220 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <DMA2_Stream6_IRQHandler+0x10>)
 8002226:	f002 fded 	bl	8004e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000dc4 	.word	0x20000dc4

08002234 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <DMA2_Stream7_IRQHandler+0x14>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fde1 	bl	8004e04 <HAL_DMA_IRQHandler>
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000f94 	.word	0x20000f94

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002266:	f011 ff6f 	bl	8014148 <__errno>
 800226a:	4603      	mov	r3, r0
 800226c:	2216      	movs	r2, #22
 800226e:	601a      	str	r2, [r3, #0]
  return -1;
 8002270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe7 	bl	800225c <_kill>
  while (1) {}    /* Make sure we hang here */
 800228e:	bf00      	nop
 8002290:	e7fd      	b.n	800228e <_exit+0x12>

08002292 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	e00a      	b.n	80022ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022a4:	f3af 8000 	nop.w
 80022a8:	4601      	mov	r1, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	60ba      	str	r2, [r7, #8]
 80022b0:	b2ca      	uxtb	r2, r1
 80022b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	dbf0      	blt.n	80022a4 <_read+0x12>
  }

  return len;
 80022c2:	687b      	ldr	r3, [r7, #4]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e009      	b.n	80022f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	60ba      	str	r2, [r7, #8]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fa9c 	bl	8001824 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	dbf1      	blt.n	80022de <_write+0x12>
  }
  return len;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <_close>:

int _close(int file)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800232c:	605a      	str	r2, [r3, #4]
  return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_isatty>:

int _isatty(int file)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	@ (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f011 fed4 	bl	8014148 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	@ (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	@ (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20050000 	.word	0x20050000
 80023cc:	00002000 	.word	0x00002000
 80023d0:	20000e24 	.word	0x20000e24
 80023d4:	20005fe0 	.word	0x20005fe0

080023d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002400:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 8002402:	4a15      	ldr	r2, [pc, #84]	@ (8002458 <MX_USART1_UART_Init+0x5c>)
 8002404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002406:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 8002408:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800240c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002414:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 8002422:	220c      	movs	r2, #12
 8002424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800242c:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002432:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 8002434:	2200      	movs	r2, #0
 8002436:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800243e:	4805      	ldr	r0, [pc, #20]	@ (8002454 <MX_USART1_UART_Init+0x58>)
 8002440:	f007 f830 	bl	80094a4 <HAL_UART_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800244a:	f7ff fc17 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000e28 	.word	0x20000e28
 8002458:	40011000 	.word	0x40011000

0800245c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0ac      	sub	sp, #176	@ 0xb0
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002474:	f107 0318 	add.w	r3, r7, #24
 8002478:	2284      	movs	r2, #132	@ 0x84
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f011 fe01 	bl	8014084 <memset>
  if(uartHandle->Instance==USART1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a32      	ldr	r2, [pc, #200]	@ (8002550 <HAL_UART_MspInit+0xf4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d15c      	bne.n	8002546 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800248c:	2340      	movs	r3, #64	@ 0x40
 800248e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002490:	2300      	movs	r3, #0
 8002492:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002494:	f107 0318 	add.w	r3, r7, #24
 8002498:	4618      	mov	r0, r3
 800249a:	f004 fcfd 	bl	8006e98 <HAL_RCCEx_PeriphCLKConfig>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024a4:	f7ff fbea 	bl	8001c7c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <HAL_UART_MspInit+0xf8>)
 80024aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ac:	4a29      	ldr	r2, [pc, #164]	@ (8002554 <HAL_UART_MspInit+0xf8>)
 80024ae:	f043 0310 	orr.w	r3, r3, #16
 80024b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80024b4:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <HAL_UART_MspInit+0xf8>)
 80024b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c0:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <HAL_UART_MspInit+0xf8>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	4a23      	ldr	r2, [pc, #140]	@ (8002554 <HAL_UART_MspInit+0xf8>)
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80024cc:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <HAL_UART_MspInit+0xf8>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <HAL_UART_MspInit+0xf8>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <HAL_UART_MspInit+0xf8>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <HAL_UART_MspInit+0xf8>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002508:	2307      	movs	r3, #7
 800250a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002512:	4619      	mov	r1, r3
 8002514:	4810      	ldr	r0, [pc, #64]	@ (8002558 <HAL_UART_MspInit+0xfc>)
 8002516:	f002 feeb 	bl	80052f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800251a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800251e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002534:	2307      	movs	r3, #7
 8002536:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800253e:	4619      	mov	r1, r3
 8002540:	4806      	ldr	r0, [pc, #24]	@ (800255c <HAL_UART_MspInit+0x100>)
 8002542:	f002 fed5 	bl	80052f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002546:	bf00      	nop
 8002548:	37b0      	adds	r7, #176	@ 0xb0
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40011000 	.word	0x40011000
 8002554:	40023800 	.word	0x40023800
 8002558:	40020400 	.word	0x40020400
 800255c:	40020000 	.word	0x40020000

08002560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002598 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002564:	f7ff ff38 	bl	80023d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002568:	480c      	ldr	r0, [pc, #48]	@ (800259c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800256a:	490d      	ldr	r1, [pc, #52]	@ (80025a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800256c:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002580:	4c0a      	ldr	r4, [pc, #40]	@ (80025ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800258e:	f011 fde1 	bl	8014154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002592:	f7fe ff83 	bl	800149c <main>
  bx  lr    
 8002596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002598:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800259c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a0:	200009d4 	.word	0x200009d4
  ldr r2, =_sidata
 80025a4:	080d3570 	.word	0x080d3570
  ldr r2, =_sbss
 80025a8:	200009d4 	.word	0x200009d4
  ldr r4, =_ebss
 80025ac:	20005fdc 	.word	0x20005fdc

080025b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b0:	e7fe      	b.n	80025b0 <ADC_IRQHandler>
	...

080025b4 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	4603      	mov	r3, r0
 80025be:	81fb      	strh	r3, [r7, #14]
 80025c0:	460b      	mov	r3, r1
 80025c2:	81bb      	strh	r3, [r7, #12]
 80025c4:	4613      	mov	r3, r2
 80025c6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80025cc:	89bb      	ldrh	r3, [r7, #12]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80025d2:	89bb      	ldrh	r3, [r7, #12]
 80025d4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025d8:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80025de:	f001 fc71 	bl	8003ec4 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80025e2:	89fb      	ldrh	r3, [r7, #14]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2203      	movs	r2, #3
 80025e8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 fafb 	bl	8003be8 <CODEC_IO_Write>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	4413      	add	r3, r2
 80025fa:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2200      	movs	r2, #0
 8002602:	f640 0117 	movw	r1, #2071	@ 0x817
 8002606:	4618      	mov	r0, r3
 8002608:	f001 faee 	bl	8003be8 <CODEC_IO_Write>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8002616:	89fb      	ldrh	r3, [r7, #14]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2200      	movs	r2, #0
 800261c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002620:	4618      	mov	r0, r3
 8002622:	f001 fae1 	bl	8003be8 <CODEC_IO_Write>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	226c      	movs	r2, #108	@ 0x6c
 8002636:	2139      	movs	r1, #57	@ 0x39
 8002638:	4618      	mov	r0, r3
 800263a:	f001 fad5 	bl	8003be8 <CODEC_IO_Write>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002648:	8afb      	ldrh	r3, [r7, #22]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800264e:	89fb      	ldrh	r3, [r7, #14]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2213      	movs	r2, #19
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f001 fac6 	bl	8003be8 <CODEC_IO_Write>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	e00b      	b.n	8002680 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002668:	89fb      	ldrh	r3, [r7, #14]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2203      	movs	r2, #3
 800266e:	2101      	movs	r1, #1
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fab9 	bl	8003be8 <CODEC_IO_Write>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002680:	2032      	movs	r0, #50	@ 0x32
 8002682:	f001 fc87 	bl	8003f94 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002686:	8b3b      	ldrh	r3, [r7, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 815f 	beq.w	800294c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800268e:	4bae      	ldr	r3, [pc, #696]	@ (8002948 <wm8994_Init+0x394>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002694:	8b3b      	ldrh	r3, [r7, #24]
 8002696:	2b03      	cmp	r3, #3
 8002698:	f000 808c 	beq.w	80027b4 <wm8994_Init+0x200>
 800269c:	2b03      	cmp	r3, #3
 800269e:	f300 8111 	bgt.w	80028c4 <wm8994_Init+0x310>
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d002      	beq.n	80026ac <wm8994_Init+0xf8>
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d042      	beq.n	8002730 <wm8994_Init+0x17c>
 80026aa:	e10b      	b.n	80028c4 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80026ac:	89fb      	ldrh	r3, [r7, #14]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80026b4:	2105      	movs	r1, #5
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 fa96 	bl	8003be8 <CODEC_IO_Write>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2200      	movs	r2, #0
 80026cc:	f240 6101 	movw	r1, #1537	@ 0x601
 80026d0:	4618      	mov	r0, r3
 80026d2:	f001 fa89 	bl	8003be8 <CODEC_IO_Write>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80026e0:	89fb      	ldrh	r3, [r7, #14]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2200      	movs	r2, #0
 80026e6:	f240 6102 	movw	r1, #1538	@ 0x602
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 fa7c 	bl	8003be8 <CODEC_IO_Write>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2202      	movs	r2, #2
 8002700:	f240 6104 	movw	r1, #1540	@ 0x604
 8002704:	4618      	mov	r0, r3
 8002706:	f001 fa6f 	bl	8003be8 <CODEC_IO_Write>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002714:	89fb      	ldrh	r3, [r7, #14]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2202      	movs	r2, #2
 800271a:	f240 6105 	movw	r1, #1541	@ 0x605
 800271e:	4618      	mov	r0, r3
 8002720:	f001 fa62 	bl	8003be8 <CODEC_IO_Write>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	61fb      	str	r3, [r7, #28]
      break;
 800272e:	e110      	b.n	8002952 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002730:	89fb      	ldrh	r3, [r7, #14]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f240 3203 	movw	r2, #771	@ 0x303
 8002738:	2105      	movs	r1, #5
 800273a:	4618      	mov	r0, r3
 800273c:	f001 fa54 	bl	8003be8 <CODEC_IO_Write>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2201      	movs	r2, #1
 8002750:	f240 6101 	movw	r1, #1537	@ 0x601
 8002754:	4618      	mov	r0, r3
 8002756:	f001 fa47 	bl	8003be8 <CODEC_IO_Write>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	4413      	add	r3, r2
 8002762:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002764:	89fb      	ldrh	r3, [r7, #14]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2201      	movs	r2, #1
 800276a:	f240 6102 	movw	r1, #1538	@ 0x602
 800276e:	4618      	mov	r0, r3
 8002770:	f001 fa3a 	bl	8003be8 <CODEC_IO_Write>
 8002774:	4603      	mov	r3, r0
 8002776:	461a      	mov	r2, r3
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800277e:	89fb      	ldrh	r3, [r7, #14]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2200      	movs	r2, #0
 8002784:	f240 6104 	movw	r1, #1540	@ 0x604
 8002788:	4618      	mov	r0, r3
 800278a:	f001 fa2d 	bl	8003be8 <CODEC_IO_Write>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2200      	movs	r2, #0
 800279e:	f240 6105 	movw	r1, #1541	@ 0x605
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 fa20 	bl	8003be8 <CODEC_IO_Write>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	61fb      	str	r3, [r7, #28]
      break;
 80027b2:	e0ce      	b.n	8002952 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80027b4:	8afb      	ldrh	r3, [r7, #22]
 80027b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027ba:	d141      	bne.n	8002840 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80027bc:	89fb      	ldrh	r3, [r7, #14]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80027c4:	2105      	movs	r1, #5
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fa0e 	bl	8003be8 <CODEC_IO_Write>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80027d6:	89fb      	ldrh	r3, [r7, #14]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2203      	movs	r2, #3
 80027dc:	f240 6101 	movw	r1, #1537	@ 0x601
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 fa01 	bl	8003be8 <CODEC_IO_Write>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80027f0:	89fb      	ldrh	r3, [r7, #14]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2203      	movs	r2, #3
 80027f6:	f240 6102 	movw	r1, #1538	@ 0x602
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 f9f4 	bl	8003be8 <CODEC_IO_Write>
 8002800:	4603      	mov	r3, r0
 8002802:	461a      	mov	r2, r3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2203      	movs	r2, #3
 8002810:	f240 6104 	movw	r1, #1540	@ 0x604
 8002814:	4618      	mov	r0, r3
 8002816:	f001 f9e7 	bl	8003be8 <CODEC_IO_Write>
 800281a:	4603      	mov	r3, r0
 800281c:	461a      	mov	r2, r3
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	4413      	add	r3, r2
 8002822:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2203      	movs	r2, #3
 800282a:	f240 6105 	movw	r1, #1541	@ 0x605
 800282e:	4618      	mov	r0, r3
 8002830:	f001 f9da 	bl	8003be8 <CODEC_IO_Write>
 8002834:	4603      	mov	r3, r0
 8002836:	461a      	mov	r2, r3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800283e:	e088      	b.n	8002952 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002840:	89fb      	ldrh	r3, [r7, #14]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002848:	2105      	movs	r1, #5
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f9cc 	bl	8003be8 <CODEC_IO_Write>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	4413      	add	r3, r2
 8002858:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2201      	movs	r2, #1
 8002860:	f240 6101 	movw	r1, #1537	@ 0x601
 8002864:	4618      	mov	r0, r3
 8002866:	f001 f9bf 	bl	8003be8 <CODEC_IO_Write>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2201      	movs	r2, #1
 800287a:	f240 6102 	movw	r1, #1538	@ 0x602
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f9b2 	bl	8003be8 <CODEC_IO_Write>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	4413      	add	r3, r2
 800288c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800288e:	89fb      	ldrh	r3, [r7, #14]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2202      	movs	r2, #2
 8002894:	f240 6104 	movw	r1, #1540	@ 0x604
 8002898:	4618      	mov	r0, r3
 800289a:	f001 f9a5 	bl	8003be8 <CODEC_IO_Write>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80028a8:	89fb      	ldrh	r3, [r7, #14]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2202      	movs	r2, #2
 80028ae:	f240 6105 	movw	r1, #1541	@ 0x605
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 f998 	bl	8003be8 <CODEC_IO_Write>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	61fb      	str	r3, [r7, #28]
      break;
 80028c2:	e046      	b.n	8002952 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80028c4:	89fb      	ldrh	r3, [r7, #14]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f240 3203 	movw	r2, #771	@ 0x303
 80028cc:	2105      	movs	r1, #5
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 f98a 	bl	8003be8 <CODEC_IO_Write>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80028de:	89fb      	ldrh	r3, [r7, #14]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2201      	movs	r2, #1
 80028e4:	f240 6101 	movw	r1, #1537	@ 0x601
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 f97d 	bl	8003be8 <CODEC_IO_Write>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80028f8:	89fb      	ldrh	r3, [r7, #14]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2201      	movs	r2, #1
 80028fe:	f240 6102 	movw	r1, #1538	@ 0x602
 8002902:	4618      	mov	r0, r3
 8002904:	f001 f970 	bl	8003be8 <CODEC_IO_Write>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2200      	movs	r2, #0
 8002918:	f240 6104 	movw	r1, #1540	@ 0x604
 800291c:	4618      	mov	r0, r3
 800291e:	f001 f963 	bl	8003be8 <CODEC_IO_Write>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800292c:	89fb      	ldrh	r3, [r7, #14]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2200      	movs	r2, #0
 8002932:	f240 6105 	movw	r1, #1541	@ 0x605
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f956 	bl	8003be8 <CODEC_IO_Write>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	61fb      	str	r3, [r7, #28]
      break;
 8002946:	e004      	b.n	8002952 <wm8994_Init+0x39e>
 8002948:	20000eb0 	.word	0x20000eb0
    }
  }
  else
  {
    outputEnabled = 0;
 800294c:	4b99      	ldr	r3, [pc, #612]	@ (8002bb4 <wm8994_Init+0x600>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002952:	8afb      	ldrh	r3, [r7, #22]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 81ab 	beq.w	8002cb0 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800295a:	4b97      	ldr	r3, [pc, #604]	@ (8002bb8 <wm8994_Init+0x604>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002960:	8afb      	ldrh	r3, [r7, #22]
 8002962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002966:	f000 8129 	beq.w	8002bbc <wm8994_Init+0x608>
 800296a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800296e:	f300 819b 	bgt.w	8002ca8 <wm8994_Init+0x6f4>
 8002972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002976:	d05a      	beq.n	8002a2e <wm8994_Init+0x47a>
 8002978:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800297c:	f300 8194 	bgt.w	8002ca8 <wm8994_Init+0x6f4>
 8002980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002984:	f000 80c6 	beq.w	8002b14 <wm8994_Init+0x560>
 8002988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800298c:	f040 818c 	bne.w	8002ca8 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002990:	89fb      	ldrh	r3, [r7, #14]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002998:	2104      	movs	r1, #4
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f924 	bl	8003be8 <CODEC_IO_Write>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80029aa:	89fb      	ldrh	r3, [r7, #14]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	22db      	movs	r2, #219	@ 0xdb
 80029b0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f917 	bl	8003be8 <CODEC_IO_Write>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80029c4:	89fb      	ldrh	r3, [r7, #14]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80029cc:	2102      	movs	r1, #2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 f90a 	bl	8003be8 <CODEC_IO_Write>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2202      	movs	r2, #2
 80029e4:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 f8fd 	bl	8003be8 <CODEC_IO_Write>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2202      	movs	r2, #2
 80029fe:	f240 6109 	movw	r1, #1545	@ 0x609
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 f8f0 	bl	8003be8 <CODEC_IO_Write>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	220e      	movs	r2, #14
 8002a18:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 f8e3 	bl	8003be8 <CODEC_IO_Write>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	61fb      	str	r3, [r7, #28]
      break;
 8002a2c:	e143      	b.n	8002cb6 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2211      	movs	r2, #17
 8002a34:	2128      	movs	r1, #40	@ 0x28
 8002a36:	4618      	mov	r0, r3
 8002a38:	f001 f8d6 	bl	8003be8 <CODEC_IO_Write>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002a46:	89fb      	ldrh	r3, [r7, #14]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2235      	movs	r2, #53	@ 0x35
 8002a4c:	2129      	movs	r1, #41	@ 0x29
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 f8ca 	bl	8003be8 <CODEC_IO_Write>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002a5e:	89fb      	ldrh	r3, [r7, #14]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2235      	movs	r2, #53	@ 0x35
 8002a64:	212a      	movs	r1, #42	@ 0x2a
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 f8be 	bl	8003be8 <CODEC_IO_Write>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f240 3203 	movw	r2, #771	@ 0x303
 8002a7e:	2104      	movs	r1, #4
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 f8b1 	bl	8003be8 <CODEC_IO_Write>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	22db      	movs	r2, #219	@ 0xdb
 8002a96:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 f8a4 	bl	8003be8 <CODEC_IO_Write>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 f897 	bl	8003be8 <CODEC_IO_Write>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002ac4:	89fb      	ldrh	r3, [r7, #14]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f240 6106 	movw	r1, #1542	@ 0x606
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 f88a 	bl	8003be8 <CODEC_IO_Write>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002ade:	89fb      	ldrh	r3, [r7, #14]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f240 6107 	movw	r1, #1543	@ 0x607
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 f87d 	bl	8003be8 <CODEC_IO_Write>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	220d      	movs	r2, #13
 8002afe:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 f870 	bl	8003be8 <CODEC_IO_Write>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	61fb      	str	r3, [r7, #28]
      break;
 8002b12:	e0d0      	b.n	8002cb6 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002b14:	89fb      	ldrh	r3, [r7, #14]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 f862 	bl	8003be8 <CODEC_IO_Write>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002b2e:	89fb      	ldrh	r3, [r7, #14]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	22db      	movs	r2, #219	@ 0xdb
 8002b34:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 f855 	bl	8003be8 <CODEC_IO_Write>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002b48:	89fb      	ldrh	r3, [r7, #14]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002b50:	2102      	movs	r1, #2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 f848 	bl	8003be8 <CODEC_IO_Write>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002b62:	89fb      	ldrh	r3, [r7, #14]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2202      	movs	r2, #2
 8002b68:	f240 6106 	movw	r1, #1542	@ 0x606
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 f83b 	bl	8003be8 <CODEC_IO_Write>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002b7c:	89fb      	ldrh	r3, [r7, #14]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2202      	movs	r2, #2
 8002b82:	f240 6107 	movw	r1, #1543	@ 0x607
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 f82e 	bl	8003be8 <CODEC_IO_Write>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	4413      	add	r3, r2
 8002b94:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002b96:	89fb      	ldrh	r3, [r7, #14]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	220d      	movs	r2, #13
 8002b9c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 f821 	bl	8003be8 <CODEC_IO_Write>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	61fb      	str	r3, [r7, #28]
      break; 
 8002bb0:	e081      	b.n	8002cb6 <wm8994_Init+0x702>
 8002bb2:	bf00      	nop
 8002bb4:	20000eb0 	.word	0x20000eb0
 8002bb8:	20000eb4 	.word	0x20000eb4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002bbc:	89fb      	ldrh	r3, [r7, #14]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 f80e 	bl	8003be8 <CODEC_IO_Write>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002bd6:	89fb      	ldrh	r3, [r7, #14]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	22db      	movs	r2, #219	@ 0xdb
 8002bdc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f801 	bl	8003be8 <CODEC_IO_Write>
 8002be6:	4603      	mov	r3, r0
 8002be8:	461a      	mov	r2, r3
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002bf0:	89fb      	ldrh	r3, [r7, #14]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	22db      	movs	r2, #219	@ 0xdb
 8002bf6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fff4 	bl	8003be8 <CODEC_IO_Write>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	4413      	add	r3, r2
 8002c08:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002c0a:	89fb      	ldrh	r3, [r7, #14]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 ffe7 	bl	8003be8 <CODEC_IO_Write>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002c24:	89fb      	ldrh	r3, [r7, #14]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f240 6106 	movw	r1, #1542	@ 0x606
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 ffda 	bl	8003be8 <CODEC_IO_Write>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002c3e:	89fb      	ldrh	r3, [r7, #14]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2202      	movs	r2, #2
 8002c44:	f240 6107 	movw	r1, #1543	@ 0x607
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 ffcd 	bl	8003be8 <CODEC_IO_Write>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002c58:	89fb      	ldrh	r3, [r7, #14]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 ffc0 	bl	8003be8 <CODEC_IO_Write>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002c72:	89fb      	ldrh	r3, [r7, #14]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2202      	movs	r2, #2
 8002c78:	f240 6109 	movw	r1, #1545	@ 0x609
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 ffb3 	bl	8003be8 <CODEC_IO_Write>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002c8c:	89fb      	ldrh	r3, [r7, #14]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	220d      	movs	r2, #13
 8002c92:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 ffa6 	bl	8003be8 <CODEC_IO_Write>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	61fb      	str	r3, [r7, #28]
      break;    
 8002ca6:	e006      	b.n	8002cb6 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
      break;
 8002cae:	e002      	b.n	8002cb6 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002cb0:	4ba4      	ldr	r3, [pc, #656]	@ (8002f44 <wm8994_Init+0x990>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4aa3      	ldr	r2, [pc, #652]	@ (8002f48 <wm8994_Init+0x994>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d079      	beq.n	8002db2 <wm8994_Init+0x7fe>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4aa1      	ldr	r2, [pc, #644]	@ (8002f48 <wm8994_Init+0x994>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	f200 80ad 	bhi.w	8002e22 <wm8994_Init+0x86e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d061      	beq.n	8002d96 <wm8994_Init+0x7e2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	f200 80a2 	bhi.w	8002e22 <wm8994_Init+0x86e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	f000 808e 	beq.w	8002e06 <wm8994_Init+0x852>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	f200 8096 	bhi.w	8002e22 <wm8994_Init+0x86e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002cfc:	d03d      	beq.n	8002d7a <wm8994_Init+0x7c6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002d04:	f200 808d 	bhi.w	8002e22 <wm8994_Init+0x86e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d06b      	beq.n	8002dea <wm8994_Init+0x836>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f200 8082 	bhi.w	8002e22 <wm8994_Init+0x86e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002d24:	d01b      	beq.n	8002d5e <wm8994_Init+0x7aa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002d2c:	d879      	bhi.n	8002e22 <wm8994_Init+0x86e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002d34:	d005      	beq.n	8002d42 <wm8994_Init+0x78e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d046      	beq.n	8002dce <wm8994_Init+0x81a>
 8002d40:	e06f      	b.n	8002e22 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002d42:	89fb      	ldrh	r3, [r7, #14]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2203      	movs	r2, #3
 8002d48:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 ff4b 	bl	8003be8 <CODEC_IO_Write>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	61fb      	str	r3, [r7, #28]
    break;
 8002d5c:	e06f      	b.n	8002e3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002d5e:	89fb      	ldrh	r3, [r7, #14]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2233      	movs	r2, #51	@ 0x33
 8002d64:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 ff3d 	bl	8003be8 <CODEC_IO_Write>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	461a      	mov	r2, r3
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	61fb      	str	r3, [r7, #28]
    break;
 8002d78:	e061      	b.n	8002e3e <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002d7a:	89fb      	ldrh	r3, [r7, #14]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2263      	movs	r2, #99	@ 0x63
 8002d80:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 ff2f 	bl	8003be8 <CODEC_IO_Write>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	61fb      	str	r3, [r7, #28]
    break;
 8002d94:	e053      	b.n	8002e3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2283      	movs	r2, #131	@ 0x83
 8002d9c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 ff21 	bl	8003be8 <CODEC_IO_Write>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	61fb      	str	r3, [r7, #28]
    break;
 8002db0:	e045      	b.n	8002e3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	22a3      	movs	r2, #163	@ 0xa3
 8002db8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 ff13 	bl	8003be8 <CODEC_IO_Write>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	61fb      	str	r3, [r7, #28]
    break;
 8002dcc:	e037      	b.n	8002e3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002dce:	89fb      	ldrh	r3, [r7, #14]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2213      	movs	r2, #19
 8002dd4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 ff05 	bl	8003be8 <CODEC_IO_Write>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	61fb      	str	r3, [r7, #28]
    break;
 8002de8:	e029      	b.n	8002e3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002dea:	89fb      	ldrh	r3, [r7, #14]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2243      	movs	r2, #67	@ 0x43
 8002df0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fef7 	bl	8003be8 <CODEC_IO_Write>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	61fb      	str	r3, [r7, #28]
    break;
 8002e04:	e01b      	b.n	8002e3e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002e06:	89fb      	ldrh	r3, [r7, #14]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2273      	movs	r2, #115	@ 0x73
 8002e0c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fee9 	bl	8003be8 <CODEC_IO_Write>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	61fb      	str	r3, [r7, #28]
    break; 
 8002e20:	e00d      	b.n	8002e3e <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2283      	movs	r2, #131	@ 0x83
 8002e28:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fedb 	bl	8003be8 <CODEC_IO_Write>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	61fb      	str	r3, [r7, #28]
    break; 
 8002e3c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002e3e:	8afb      	ldrh	r3, [r7, #22]
 8002e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e44:	d10e      	bne.n	8002e64 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002e4e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fec8 	bl	8003be8 <CODEC_IO_Write>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4413      	add	r3, r2
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e00d      	b.n	8002e80 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002e64:	89fb      	ldrh	r3, [r7, #14]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002e6c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 feb9 	bl	8003be8 <CODEC_IO_Write>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002e80:	89fb      	ldrh	r3, [r7, #14]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2200      	movs	r2, #0
 8002e86:	f240 3102 	movw	r1, #770	@ 0x302
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 feac 	bl	8003be8 <CODEC_IO_Write>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002e9a:	89fb      	ldrh	r3, [r7, #14]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	220a      	movs	r2, #10
 8002ea0:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fe9f 	bl	8003be8 <CODEC_IO_Write>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002eb4:	89fb      	ldrh	r3, [r7, #14]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fe92 	bl	8003be8 <CODEC_IO_Write>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002ece:	8b3b      	ldrh	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 817b 	beq.w	80031cc <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002ed6:	8b3b      	ldrh	r3, [r7, #24]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d157      	bne.n	8002f8c <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002edc:	89fb      	ldrh	r3, [r7, #14]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ee4:	212d      	movs	r1, #45	@ 0x2d
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fe7e 	bl	8003be8 <CODEC_IO_Write>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002efe:	212e      	movs	r1, #46	@ 0x2e
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fe71 	bl	8003be8 <CODEC_IO_Write>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002f10:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <wm8994_Init+0x998>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002f18:	89fb      	ldrh	r3, [r7, #14]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8002f20:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fe5f 	bl	8003be8 <CODEC_IO_Write>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4413      	add	r3, r2
 8002f32:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <wm8994_Init+0x998>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8002f3a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002f3e:	f001 f829 	bl	8003f94 <AUDIO_IO_Delay>
 8002f42:	e016      	b.n	8002f72 <wm8994_Init+0x9be>
 8002f44:	20000eb4 	.word	0x20000eb4
 8002f48:	00017700 	.word	0x00017700
 8002f4c:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002f50:	89fb      	ldrh	r3, [r7, #14]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f248 1208 	movw	r2, #33032	@ 0x8108
 8002f58:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fe43 	bl	8003be8 <CODEC_IO_Write>
 8002f62:	4603      	mov	r3, r0
 8002f64:	461a      	mov	r2, r3
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002f6c:	2032      	movs	r0, #50	@ 0x32
 8002f6e:	f001 f811 	bl	8003f94 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fe33 	bl	8003be8 <CODEC_IO_Write>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002f8c:	89fb      	ldrh	r3, [r7, #14]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002f94:	2103      	movs	r1, #3
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fe26 	bl	8003be8 <CODEC_IO_Write>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2200      	movs	r2, #0
 8002fac:	2122      	movs	r1, #34	@ 0x22
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fe1a 	bl	8003be8 <CODEC_IO_Write>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002fbe:	89fb      	ldrh	r3, [r7, #14]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2123      	movs	r1, #35	@ 0x23
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fe0e 	bl	8003be8 <CODEC_IO_Write>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002fde:	2136      	movs	r1, #54	@ 0x36
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fe01 	bl	8003be8 <CODEC_IO_Write>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fdf4 	bl	8003be8 <CODEC_IO_Write>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800300a:	8afb      	ldrh	r3, [r7, #22]
 800300c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003010:	d10d      	bne.n	800302e <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8003012:	89fb      	ldrh	r3, [r7, #14]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f240 2205 	movw	r2, #517	@ 0x205
 800301a:	2151      	movs	r1, #81	@ 0x51
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fde3 	bl	8003be8 <CODEC_IO_Write>
 8003022:	4603      	mov	r3, r0
 8003024:	461a      	mov	r2, r3
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	e00b      	b.n	8003046 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2205      	movs	r2, #5
 8003034:	2151      	movs	r1, #81	@ 0x51
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fdd6 	bl	8003be8 <CODEC_IO_Write>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	4413      	add	r3, r2
 8003044:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8003046:	8b7b      	ldrh	r3, [r7, #26]
 8003048:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 800304c:	f043 0303 	orr.w	r3, r3, #3
 8003050:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003052:	89fb      	ldrh	r3, [r7, #14]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	8b7a      	ldrh	r2, [r7, #26]
 8003058:	2101      	movs	r1, #1
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fdc4 	bl	8003be8 <CODEC_IO_Write>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800306a:	89fb      	ldrh	r3, [r7, #14]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2222      	movs	r2, #34	@ 0x22
 8003070:	2160      	movs	r1, #96	@ 0x60
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fdb8 	bl	8003be8 <CODEC_IO_Write>
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	4413      	add	r3, r2
 8003080:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8003082:	89fb      	ldrh	r3, [r7, #14]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f649 7225 	movw	r2, #40741	@ 0x9f25
 800308a:	214c      	movs	r1, #76	@ 0x4c
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fdab 	bl	8003be8 <CODEC_IO_Write>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4413      	add	r3, r2
 800309a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 800309c:	200f      	movs	r0, #15
 800309e:	f000 ff79 	bl	8003f94 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80030a2:	89fb      	ldrh	r3, [r7, #14]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2201      	movs	r2, #1
 80030a8:	212d      	movs	r1, #45	@ 0x2d
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fd9c 	bl	8003be8 <CODEC_IO_Write>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4413      	add	r3, r2
 80030b8:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80030ba:	89fb      	ldrh	r3, [r7, #14]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2201      	movs	r2, #1
 80030c0:	212e      	movs	r1, #46	@ 0x2e
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fd90 	bl	8003be8 <CODEC_IO_Write>
 80030c8:	4603      	mov	r3, r0
 80030ca:	461a      	mov	r2, r3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80030d2:	89fb      	ldrh	r3, [r7, #14]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80030da:	2103      	movs	r1, #3
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fd83 	bl	8003be8 <CODEC_IO_Write>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80030ec:	89fb      	ldrh	r3, [r7, #14]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2233      	movs	r2, #51	@ 0x33
 80030f2:	2154      	movs	r1, #84	@ 0x54
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fd77 	bl	8003be8 <CODEC_IO_Write>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8003104:	f240 1001 	movw	r0, #257	@ 0x101
 8003108:	f000 ff44 	bl	8003f94 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800310c:	89fb      	ldrh	r3, [r7, #14]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	22ee      	movs	r2, #238	@ 0xee
 8003112:	2160      	movs	r1, #96	@ 0x60
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fd67 	bl	8003be8 <CODEC_IO_Write>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003124:	89fb      	ldrh	r3, [r7, #14]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	22c0      	movs	r2, #192	@ 0xc0
 800312a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fd5a 	bl	8003be8 <CODEC_IO_Write>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800313e:	89fb      	ldrh	r3, [r7, #14]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	22c0      	movs	r2, #192	@ 0xc0
 8003144:	f240 6111 	movw	r1, #1553	@ 0x611
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fd4d 	bl	8003be8 <CODEC_IO_Write>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2210      	movs	r2, #16
 800315e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fd40 	bl	8003be8 <CODEC_IO_Write>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003172:	89fb      	ldrh	r3, [r7, #14]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	22c0      	movs	r2, #192	@ 0xc0
 8003178:	f240 6112 	movw	r1, #1554	@ 0x612
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fd33 	bl	8003be8 <CODEC_IO_Write>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	22c0      	movs	r2, #192	@ 0xc0
 8003192:	f240 6113 	movw	r1, #1555	@ 0x613
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fd26 	bl	8003be8 <CODEC_IO_Write>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2210      	movs	r2, #16
 80031ac:	f240 4122 	movw	r1, #1058	@ 0x422
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fd19 	bl	8003be8 <CODEC_IO_Write>
 80031b6:	4603      	mov	r3, r0
 80031b8:	461a      	mov	r2, r3
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	4413      	add	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80031c0:	7afa      	ldrb	r2, [r7, #11]
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f984 	bl	80034d4 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80031cc:	8afb      	ldrh	r3, [r7, #22]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80a6 	beq.w	8003320 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80031d4:	8afb      	ldrh	r3, [r7, #22]
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031da:	d003      	beq.n	80031e4 <wm8994_Init+0xc30>
 80031dc:	8afb      	ldrh	r3, [r7, #22]
 80031de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e2:	d12b      	bne.n	800323c <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80031e4:	8b7b      	ldrh	r3, [r7, #26]
 80031e6:	f043 0313 	orr.w	r3, r3, #19
 80031ea:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80031ec:	89fb      	ldrh	r3, [r7, #14]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	8b7a      	ldrh	r2, [r7, #26]
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fcf7 	bl	8003be8 <CODEC_IO_Write>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003204:	89fb      	ldrh	r3, [r7, #14]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2202      	movs	r2, #2
 800320a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fcea 	bl	8003be8 <CODEC_IO_Write>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4413      	add	r3, r2
 800321c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800321e:	89fb      	ldrh	r3, [r7, #14]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003226:	f240 4111 	movw	r1, #1041	@ 0x411
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fcdc 	bl	8003be8 <CODEC_IO_Write>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	4413      	add	r3, r2
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e06b      	b.n	8003314 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800323c:	8afb      	ldrh	r3, [r7, #22]
 800323e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003242:	d139      	bne.n	80032b8 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003244:	8b7b      	ldrh	r3, [r7, #26]
 8003246:	f043 0313 	orr.w	r3, r3, #19
 800324a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800324c:	89fb      	ldrh	r3, [r7, #14]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	8b7a      	ldrh	r2, [r7, #26]
 8003252:	2101      	movs	r1, #1
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fcc7 	bl	8003be8 <CODEC_IO_Write>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003264:	89fb      	ldrh	r3, [r7, #14]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2202      	movs	r2, #2
 800326a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fcba 	bl	8003be8 <CODEC_IO_Write>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800327e:	89fb      	ldrh	r3, [r7, #14]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003286:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fcac 	bl	8003be8 <CODEC_IO_Write>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4413      	add	r3, r2
 8003298:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800329a:	89fb      	ldrh	r3, [r7, #14]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80032a2:	f240 4111 	movw	r1, #1041	@ 0x411
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fc9e 	bl	8003be8 <CODEC_IO_Write>
 80032ac:	4603      	mov	r3, r0
 80032ae:	461a      	mov	r2, r3
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	e02d      	b.n	8003314 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80032b8:	8afb      	ldrh	r3, [r7, #22]
 80032ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032be:	d003      	beq.n	80032c8 <wm8994_Init+0xd14>
 80032c0:	8afb      	ldrh	r3, [r7, #22]
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c6:	d125      	bne.n	8003314 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	220b      	movs	r2, #11
 80032ce:	2118      	movs	r1, #24
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fc89 	bl	8003be8 <CODEC_IO_Write>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	4413      	add	r3, r2
 80032de:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80032e0:	89fb      	ldrh	r3, [r7, #14]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	220b      	movs	r2, #11
 80032e6:	211a      	movs	r1, #26
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fc7d 	bl	8003be8 <CODEC_IO_Write>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461a      	mov	r2, r3
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80032f8:	89fb      	ldrh	r3, [r7, #14]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003300:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fc6f 	bl	8003be8 <CODEC_IO_Write>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003314:	7afa      	ldrb	r2, [r7, #11]
 8003316:	89fb      	ldrh	r3, [r7, #14]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f8da 	bl	80034d4 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8003320:	69fb      	ldr	r3, [r7, #28]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop

0800332c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003330:	f000 fdd2 	bl	8003ed8 <AUDIO_IO_DeInit>
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}

08003338 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003342:	f000 fdbf 	bl	8003ec4 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fdf5 	bl	8003f3c <AUDIO_IO_Read>
 8003352:	4603      	mov	r3, r0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	80fb      	strh	r3, [r7, #6]
 8003368:	4613      	mov	r3, r2
 800336a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f000 f9d1 	bl	800371c <wm8994_SetMute>
 800337a:	4602      	mov	r2, r0
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003382:	68fb      	ldr	r3, [r7, #12]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	2101      	movs	r1, #1
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f9bc 	bl	800371c <wm8994_SetMute>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2201      	movs	r2, #1
 80033b2:	2102      	movs	r1, #2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fc17 	bl	8003be8 <CODEC_IO_Write>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80033c4:	68fb      	ldr	r3, [r7, #12]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f99b 	bl	800371c <wm8994_SetMute>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80033ee:	68fb      	ldr	r3, [r7, #12]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8003408:	4b31      	ldr	r3, [pc, #196]	@ (80034d0 <wm8994_Stop+0xd8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d05a      	beq.n	80034c6 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	2101      	movs	r1, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f981 	bl	800371c <wm8994_SetMute>
 800341a:	4602      	mov	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d04e      	beq.n	80034c6 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003430:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fbd7 	bl	8003be8 <CODEC_IO_Write>
 800343a:	4603      	mov	r3, r0
 800343c:	461a      	mov	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4413      	add	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800344c:	f240 4122 	movw	r1, #1058	@ 0x422
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fbc9 	bl	8003be8 <CODEC_IO_Write>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2200      	movs	r2, #0
 8003466:	212d      	movs	r1, #45	@ 0x2d
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fbbd 	bl	8003be8 <CODEC_IO_Write>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2200      	movs	r2, #0
 800347e:	212e      	movs	r1, #46	@ 0x2e
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fbb1 	bl	8003be8 <CODEC_IO_Write>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2200      	movs	r2, #0
 8003496:	2105      	movs	r1, #5
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fba5 	bl	8003be8 <CODEC_IO_Write>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fb99 	bl	8003be8 <CODEC_IO_Write>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80034c0:	4b03      	ldr	r3, [pc, #12]	@ (80034d0 <wm8994_Stop+0xd8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80034c6:	68fb      	ldr	r3, [r7, #12]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000eb0 	.word	0x20000eb0

080034d4 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	460a      	mov	r2, r1
 80034de:	80fb      	strh	r3, [r7, #6]
 80034e0:	4613      	mov	r3, r2
 80034e2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80034e8:	797b      	ldrb	r3, [r7, #5]
 80034ea:	2b64      	cmp	r3, #100	@ 0x64
 80034ec:	d80b      	bhi.n	8003506 <wm8994_SetVolume+0x32>
 80034ee:	797a      	ldrb	r2, [r7, #5]
 80034f0:	4613      	mov	r3, r2
 80034f2:	019b      	lsls	r3, r3, #6
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	4a86      	ldr	r2, [pc, #536]	@ (8003710 <wm8994_SetVolume+0x23c>)
 80034f8:	fb82 1203 	smull	r1, r2, r2, r3
 80034fc:	1152      	asrs	r2, r2, #5
 80034fe:	17db      	asrs	r3, r3, #31
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e000      	b.n	8003508 <wm8994_SetVolume+0x34>
 8003506:	2364      	movs	r3, #100	@ 0x64
 8003508:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800350a:	4b82      	ldr	r3, [pc, #520]	@ (8003714 <wm8994_SetVolume+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 809b 	beq.w	800364a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003514:	7afb      	ldrb	r3, [r7, #11]
 8003516:	2b3e      	cmp	r3, #62	@ 0x3e
 8003518:	d93d      	bls.n	8003596 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f8fc 	bl	800371c <wm8994_SetMute>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f240 127f 	movw	r2, #383	@ 0x17f
 8003534:	211c      	movs	r1, #28
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fb56 	bl	8003be8 <CODEC_IO_Write>
 800353c:	4603      	mov	r3, r0
 800353e:	461a      	mov	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f240 127f 	movw	r2, #383	@ 0x17f
 800354e:	211d      	movs	r1, #29
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fb49 	bl	8003be8 <CODEC_IO_Write>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f240 127f 	movw	r2, #383	@ 0x17f
 8003568:	2126      	movs	r1, #38	@ 0x26
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fb3c 	bl	8003be8 <CODEC_IO_Write>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f240 127f 	movw	r2, #383	@ 0x17f
 8003582:	2127      	movs	r1, #39	@ 0x27
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fb2f 	bl	8003be8 <CODEC_IO_Write>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e059      	b.n	800364a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003596:	797b      	ldrb	r3, [r7, #5]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f8bb 	bl	800371c <wm8994_SetMute>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e04c      	b.n	800364a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f8b1 	bl	800371c <wm8994_SetMute>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	b2d8      	uxtb	r0, r3
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	211c      	movs	r1, #28
 80035d6:	f000 fb07 	bl	8003be8 <CODEC_IO_Write>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	b2d8      	uxtb	r0, r3
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	211d      	movs	r1, #29
 80035f8:	f000 faf6 	bl	8003be8 <CODEC_IO_Write>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	b2d8      	uxtb	r0, r3
 800360a:	7afb      	ldrb	r3, [r7, #11]
 800360c:	b21b      	sxth	r3, r3
 800360e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003612:	b21b      	sxth	r3, r3
 8003614:	b29b      	uxth	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	2126      	movs	r1, #38	@ 0x26
 800361a:	f000 fae5 	bl	8003be8 <CODEC_IO_Write>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	b2d8      	uxtb	r0, r3
 800362c:	7afb      	ldrb	r3, [r7, #11]
 800362e:	b21b      	sxth	r3, r3
 8003630:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003634:	b21b      	sxth	r3, r3
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	2127      	movs	r1, #39	@ 0x27
 800363c:	f000 fad4 	bl	8003be8 <CODEC_IO_Write>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800364a:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <wm8994_SetVolume+0x244>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d059      	beq.n	8003706 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003652:	797b      	ldrb	r3, [r7, #5]
 8003654:	2b63      	cmp	r3, #99	@ 0x63
 8003656:	d80c      	bhi.n	8003672 <wm8994_SetVolume+0x19e>
 8003658:	797a      	ldrb	r2, [r7, #5]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	4a2b      	ldr	r2, [pc, #172]	@ (8003710 <wm8994_SetVolume+0x23c>)
 8003664:	fb82 1203 	smull	r1, r2, r2, r3
 8003668:	1152      	asrs	r2, r2, #5
 800366a:	17db      	asrs	r3, r3, #31
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e000      	b.n	8003674 <wm8994_SetVolume+0x1a0>
 8003672:	23ef      	movs	r3, #239	@ 0xef
 8003674:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	b2d8      	uxtb	r0, r3
 800367a:	7afb      	ldrb	r3, [r7, #11]
 800367c:	b21b      	sxth	r3, r3
 800367e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003682:	b21b      	sxth	r3, r3
 8003684:	b29b      	uxth	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800368c:	f000 faac 	bl	8003be8 <CODEC_IO_Write>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	b2d8      	uxtb	r0, r3
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	f240 4101 	movw	r1, #1025	@ 0x401
 80036b0:	f000 fa9a 	bl	8003be8 <CODEC_IO_Write>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	b2d8      	uxtb	r0, r3
 80036c2:	7afb      	ldrb	r3, [r7, #11]
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	f240 4104 	movw	r1, #1028	@ 0x404
 80036d4:	f000 fa88 	bl	8003be8 <CODEC_IO_Write>
 80036d8:	4603      	mov	r3, r0
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	b2d8      	uxtb	r0, r3
 80036e6:	7afb      	ldrb	r3, [r7, #11]
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ee:	b21b      	sxth	r3, r3
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	f240 4105 	movw	r1, #1029	@ 0x405
 80036f8:	f000 fa76 	bl	8003be8 <CODEC_IO_Write>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	51eb851f 	.word	0x51eb851f
 8003714:	20000eb0 	.word	0x20000eb0
 8003718:	20000eb4 	.word	0x20000eb4

0800371c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	6039      	str	r1, [r7, #0]
 8003726:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 800372c:	4b21      	ldr	r3, [pc, #132]	@ (80037b4 <wm8994_SetMute+0x98>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d039      	beq.n	80037a8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d11c      	bne.n	8003774 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003742:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fa4e 	bl	8003be8 <CODEC_IO_Write>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800375e:	f240 4122 	movw	r1, #1058	@ 0x422
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fa40 	bl	8003be8 <CODEC_IO_Write>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e019      	b.n	80037a8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2210      	movs	r2, #16
 800377a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fa32 	bl	8003be8 <CODEC_IO_Write>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2210      	movs	r2, #16
 8003794:	f240 4122 	movw	r1, #1058	@ 0x422
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fa25 	bl	8003be8 <CODEC_IO_Write>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4413      	add	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80037a8:	68fb      	ldr	r3, [r7, #12]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000eb0 	.word	0x20000eb0

080037b8 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	460a      	mov	r2, r1
 80037c2:	80fb      	strh	r3, [r7, #6]
 80037c4:	4613      	mov	r3, r2
 80037c6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80037cc:	797b      	ldrb	r3, [r7, #5]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	f000 808c 	beq.w	80038ec <wm8994_SetOutputMode+0x134>
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	f300 80cb 	bgt.w	8003970 <wm8994_SetOutputMode+0x1b8>
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d002      	beq.n	80037e4 <wm8994_SetOutputMode+0x2c>
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d042      	beq.n	8003868 <wm8994_SetOutputMode+0xb0>
 80037e2:	e0c5      	b.n	8003970 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80037ec:	2105      	movs	r1, #5
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f9fa 	bl	8003be8 <CODEC_IO_Write>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2200      	movs	r2, #0
 8003804:	f240 6101 	movw	r1, #1537	@ 0x601
 8003808:	4618      	mov	r0, r3
 800380a:	f000 f9ed 	bl	8003be8 <CODEC_IO_Write>
 800380e:	4603      	mov	r3, r0
 8003810:	461a      	mov	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2200      	movs	r2, #0
 800381e:	f240 6102 	movw	r1, #1538	@ 0x602
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f9e0 	bl	8003be8 <CODEC_IO_Write>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2202      	movs	r2, #2
 8003838:	f240 6104 	movw	r1, #1540	@ 0x604
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f9d3 	bl	8003be8 <CODEC_IO_Write>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2202      	movs	r2, #2
 8003852:	f240 6105 	movw	r1, #1541	@ 0x605
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f9c6 	bl	8003be8 <CODEC_IO_Write>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
    break;
 8003866:	e0c5      	b.n	80039f4 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f240 3203 	movw	r2, #771	@ 0x303
 8003870:	2105      	movs	r1, #5
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f9b8 	bl	8003be8 <CODEC_IO_Write>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2201      	movs	r2, #1
 8003888:	f240 6101 	movw	r1, #1537	@ 0x601
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f9ab 	bl	8003be8 <CODEC_IO_Write>
 8003892:	4603      	mov	r3, r0
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2201      	movs	r2, #1
 80038a2:	f240 6102 	movw	r1, #1538	@ 0x602
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f99e 	bl	8003be8 <CODEC_IO_Write>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2200      	movs	r2, #0
 80038bc:	f240 6104 	movw	r1, #1540	@ 0x604
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f991 	bl	8003be8 <CODEC_IO_Write>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2200      	movs	r2, #0
 80038d6:	f240 6105 	movw	r1, #1541	@ 0x605
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f984 	bl	8003be8 <CODEC_IO_Write>
 80038e0:	4603      	mov	r3, r0
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
    break;
 80038ea:	e083      	b.n	80039f4 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80038f4:	2105      	movs	r1, #5
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f976 	bl	8003be8 <CODEC_IO_Write>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2201      	movs	r2, #1
 800390c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f969 	bl	8003be8 <CODEC_IO_Write>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4413      	add	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2201      	movs	r2, #1
 8003926:	f240 6102 	movw	r1, #1538	@ 0x602
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f95c 	bl	8003be8 <CODEC_IO_Write>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2202      	movs	r2, #2
 8003940:	f240 6104 	movw	r1, #1540	@ 0x604
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f94f 	bl	8003be8 <CODEC_IO_Write>
 800394a:	4603      	mov	r3, r0
 800394c:	461a      	mov	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4413      	add	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2202      	movs	r2, #2
 800395a:	f240 6105 	movw	r1, #1541	@ 0x605
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f942 	bl	8003be8 <CODEC_IO_Write>
 8003964:	4603      	mov	r3, r0
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
    break;
 800396e:	e041      	b.n	80039f4 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f240 3203 	movw	r2, #771	@ 0x303
 8003978:	2105      	movs	r1, #5
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f934 	bl	8003be8 <CODEC_IO_Write>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2201      	movs	r2, #1
 8003990:	f240 6101 	movw	r1, #1537	@ 0x601
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f927 	bl	8003be8 <CODEC_IO_Write>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2201      	movs	r2, #1
 80039aa:	f240 6102 	movw	r1, #1538	@ 0x602
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f91a 	bl	8003be8 <CODEC_IO_Write>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	f240 6104 	movw	r1, #1540	@ 0x604
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f90d 	bl	8003be8 <CODEC_IO_Write>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4413      	add	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	f240 6105 	movw	r1, #1541	@ 0x605
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f900 	bl	8003be8 <CODEC_IO_Write>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
    break;    
 80039f2:	bf00      	nop
  }  
  return counter;
 80039f4:	68fb      	ldr	r3, [r7, #12]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4a64      	ldr	r2, [pc, #400]	@ (8003ba4 <wm8994_SetFrequency+0x1a4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d079      	beq.n	8003b0c <wm8994_SetFrequency+0x10c>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4a62      	ldr	r2, [pc, #392]	@ (8003ba4 <wm8994_SetFrequency+0x1a4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	f200 80ad 	bhi.w	8003b7c <wm8994_SetFrequency+0x17c>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d061      	beq.n	8003af0 <wm8994_SetFrequency+0xf0>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003a32:	4293      	cmp	r3, r2
 8003a34:	f200 80a2 	bhi.w	8003b7c <wm8994_SetFrequency+0x17c>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	f000 808e 	beq.w	8003b60 <wm8994_SetFrequency+0x160>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	f200 8096 	bhi.w	8003b7c <wm8994_SetFrequency+0x17c>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003a56:	d03d      	beq.n	8003ad4 <wm8994_SetFrequency+0xd4>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003a5e:	f200 808d 	bhi.w	8003b7c <wm8994_SetFrequency+0x17c>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d06b      	beq.n	8003b44 <wm8994_SetFrequency+0x144>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f200 8082 	bhi.w	8003b7c <wm8994_SetFrequency+0x17c>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003a7e:	d01b      	beq.n	8003ab8 <wm8994_SetFrequency+0xb8>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003a86:	d879      	bhi.n	8003b7c <wm8994_SetFrequency+0x17c>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003a8e:	d005      	beq.n	8003a9c <wm8994_SetFrequency+0x9c>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d046      	beq.n	8003b28 <wm8994_SetFrequency+0x128>
 8003a9a:	e06f      	b.n	8003b7c <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f89e 	bl	8003be8 <CODEC_IO_Write>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
    break;
 8003ab6:	e06f      	b.n	8003b98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2233      	movs	r2, #51	@ 0x33
 8003abe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f890 	bl	8003be8 <CODEC_IO_Write>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
    break;
 8003ad2:	e061      	b.n	8003b98 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2263      	movs	r2, #99	@ 0x63
 8003ada:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f882 	bl	8003be8 <CODEC_IO_Write>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
    break;
 8003aee:	e053      	b.n	8003b98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2283      	movs	r2, #131	@ 0x83
 8003af6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f874 	bl	8003be8 <CODEC_IO_Write>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    break;
 8003b0a:	e045      	b.n	8003b98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	22a3      	movs	r2, #163	@ 0xa3
 8003b12:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f866 	bl	8003be8 <CODEC_IO_Write>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
    break;
 8003b26:	e037      	b.n	8003b98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2213      	movs	r2, #19
 8003b2e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f858 	bl	8003be8 <CODEC_IO_Write>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
    break;
 8003b42:	e029      	b.n	8003b98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2243      	movs	r2, #67	@ 0x43
 8003b4a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f84a 	bl	8003be8 <CODEC_IO_Write>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
    break;
 8003b5e:	e01b      	b.n	8003b98 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2273      	movs	r2, #115	@ 0x73
 8003b66:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f83c 	bl	8003be8 <CODEC_IO_Write>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
    break; 
 8003b7a:	e00d      	b.n	8003b98 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2283      	movs	r2, #131	@ 0x83
 8003b82:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f82e 	bl	8003be8 <CODEC_IO_Write>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
    break; 
 8003b96:	bf00      	nop
  }
  return counter;
 8003b98:	68fb      	ldr	r3, [r7, #12]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	00017700 	.word	0x00017700

08003ba8 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 f812 	bl	8003be8 <CODEC_IO_Write>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003bc8:	4b05      	ldr	r3, [pc, #20]	@ (8003be0 <wm8994_Reset+0x38>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <wm8994_Reset+0x3c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

  return counter;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000eb0 	.word	0x20000eb0
 8003be4:	20000eb4 	.word	0x20000eb4

08003be8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	80bb      	strh	r3, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	88b9      	ldrh	r1, [r7, #4]
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f96f 	bl	8003ee8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	b2db      	uxtb	r3, r3
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08c      	sub	sp, #48	@ 0x30
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a51      	ldr	r2, [pc, #324]	@ (8003d68 <I2Cx_MspInit+0x150>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d14d      	bne.n	8003cc4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003c28:	4b50      	ldr	r3, [pc, #320]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c34:	4b4d      	ldr	r3, [pc, #308]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003c44:	2312      	movs	r3, #18
 8003c46:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003c50:	2304      	movs	r3, #4
 8003c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003c54:	f107 031c 	add.w	r3, r7, #28
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4845      	ldr	r0, [pc, #276]	@ (8003d70 <I2Cx_MspInit+0x158>)
 8003c5c:	f001 fb48 	bl	80052f0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003c60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003c66:	f107 031c 	add.w	r3, r7, #28
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4840      	ldr	r0, [pc, #256]	@ (8003d70 <I2Cx_MspInit+0x158>)
 8003c6e:	f001 fb3f 	bl	80052f0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003c72:	4b3e      	ldr	r3, [pc, #248]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	4a3d      	ldr	r2, [pc, #244]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003c8a:	4b38      	ldr	r3, [pc, #224]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a37      	ldr	r2, [pc, #220]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c94:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003c96:	4b35      	ldr	r3, [pc, #212]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4a34      	ldr	r2, [pc, #208]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003c9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ca0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	210f      	movs	r1, #15
 8003ca6:	2048      	movs	r0, #72	@ 0x48
 8003ca8:	f000 fe77 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003cac:	2048      	movs	r0, #72	@ 0x48
 8003cae:	f000 fe90 	bl	80049d2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	210f      	movs	r1, #15
 8003cb6:	2049      	movs	r0, #73	@ 0x49
 8003cb8:	f000 fe6f 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003cbc:	2049      	movs	r0, #73	@ 0x49
 8003cbe:	f000 fe88 	bl	80049d2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003cc2:	e04d      	b.n	8003d60 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003cc4:	4b29      	ldr	r3, [pc, #164]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	4a28      	ldr	r2, [pc, #160]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd0:	4b26      	ldr	r3, [pc, #152]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ce0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003ce2:	2312      	movs	r3, #18
 8003ce4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003cea:	2302      	movs	r3, #2
 8003cec:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003cee:	2304      	movs	r3, #4
 8003cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003cf2:	f107 031c 	add.w	r3, r7, #28
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	481e      	ldr	r0, [pc, #120]	@ (8003d74 <I2Cx_MspInit+0x15c>)
 8003cfa:	f001 faf9 	bl	80052f0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003cfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003d04:	f107 031c 	add.w	r3, r7, #28
 8003d08:	4619      	mov	r1, r3
 8003d0a:	481a      	ldr	r0, [pc, #104]	@ (8003d74 <I2Cx_MspInit+0x15c>)
 8003d0c:	f001 faf0 	bl	80052f0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003d10:	4b16      	ldr	r3, [pc, #88]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	4a15      	ldr	r2, [pc, #84]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003d16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d1c:	4b13      	ldr	r3, [pc, #76]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003d28:	4b10      	ldr	r3, [pc, #64]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003d2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d32:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003d34:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4a0c      	ldr	r2, [pc, #48]	@ (8003d6c <I2Cx_MspInit+0x154>)
 8003d3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d3e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003d40:	2200      	movs	r2, #0
 8003d42:	210f      	movs	r1, #15
 8003d44:	201f      	movs	r0, #31
 8003d46:	f000 fe28 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003d4a:	201f      	movs	r0, #31
 8003d4c:	f000 fe41 	bl	80049d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003d50:	2200      	movs	r2, #0
 8003d52:	210f      	movs	r1, #15
 8003d54:	2020      	movs	r0, #32
 8003d56:	f000 fe20 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003d5a:	2020      	movs	r0, #32
 8003d5c:	f000 fe39 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 8003d60:	bf00      	nop
 8003d62:	3730      	adds	r7, #48	@ 0x30
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000eb8 	.word	0x20000eb8
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40021c00 	.word	0x40021c00
 8003d74:	40020400 	.word	0x40020400

08003d78 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f002 f8df 	bl	8005f44 <HAL_I2C_GetState>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d125      	bne.n	8003dd8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a14      	ldr	r2, [pc, #80]	@ (8003de0 <I2Cx_Init+0x68>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d103      	bne.n	8003d9c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a13      	ldr	r2, [pc, #76]	@ (8003de4 <I2Cx_Init+0x6c>)
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e002      	b.n	8003da2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a12      	ldr	r2, [pc, #72]	@ (8003de8 <I2Cx_Init+0x70>)
 8003da0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a11      	ldr	r2, [pc, #68]	@ (8003dec <I2Cx_Init+0x74>)
 8003da6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff23 	bl	8003c18 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f001 fda8 	bl	8005928 <HAL_I2C_Init>
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000eb8 	.word	0x20000eb8
 8003de4:	40005c00 	.word	0x40005c00
 8003de8:	40005400 	.word	0x40005400
 8003dec:	40912732 	.word	0x40912732

08003df0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	@ 0x28
 8003df4:	af04      	add	r7, sp, #16
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	72fb      	strb	r3, [r7, #11]
 8003e02:	460b      	mov	r3, r1
 8003e04:	813b      	strh	r3, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003e0e:	7afb      	ldrb	r3, [r7, #11]
 8003e10:	b299      	uxth	r1, r3
 8003e12:	88f8      	ldrh	r0, [r7, #6]
 8003e14:	893a      	ldrh	r2, [r7, #8]
 8003e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e1a:	9302      	str	r3, [sp, #8]
 8003e1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	4603      	mov	r3, r0
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f001 ff72 	bl	8005d10 <HAL_I2C_Mem_Read>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d004      	beq.n	8003e40 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003e36:	7afb      	ldrb	r3, [r7, #11]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f832 	bl	8003ea4 <I2Cx_Error>
  }
  return status;    
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b08a      	sub	sp, #40	@ 0x28
 8003e4e:	af04      	add	r7, sp, #16
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	4608      	mov	r0, r1
 8003e54:	4611      	mov	r1, r2
 8003e56:	461a      	mov	r2, r3
 8003e58:	4603      	mov	r3, r0
 8003e5a:	72fb      	strb	r3, [r7, #11]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	813b      	strh	r3, [r7, #8]
 8003e60:	4613      	mov	r3, r2
 8003e62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003e68:	7afb      	ldrb	r3, [r7, #11]
 8003e6a:	b299      	uxth	r1, r3
 8003e6c:	88f8      	ldrh	r0, [r7, #6]
 8003e6e:	893a      	ldrh	r2, [r7, #8]
 8003e70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e74:	9302      	str	r3, [sp, #8]
 8003e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	4603      	mov	r3, r0
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f001 fe31 	bl	8005ae8 <HAL_I2C_Mem_Write>
 8003e86:	4603      	mov	r3, r0
 8003e88:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d004      	beq.n	8003e9a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	4619      	mov	r1, r3
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f805 	bl	8003ea4 <I2Cx_Error>
  }
  return status;
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f001 fdd5 	bl	8005a60 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ff5e 	bl	8003d78 <I2Cx_Init>
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003ec8:	4802      	ldr	r0, [pc, #8]	@ (8003ed4 <AUDIO_IO_Init+0x10>)
 8003eca:	f7ff ff55 	bl	8003d78 <I2Cx_Init>
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000eb8 	.word	0x20000eb8

08003ed8 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	80bb      	strh	r3, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003efa:	887b      	ldrh	r3, [r7, #2]
 8003efc:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003efe:	89fb      	ldrh	r3, [r7, #14]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	b21a      	sxth	r2, r3
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	b21b      	sxth	r3, r3
 8003f12:	4313      	orrs	r3, r2
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003f1a:	88ba      	ldrh	r2, [r7, #4]
 8003f1c:	79f9      	ldrb	r1, [r7, #7]
 8003f1e:	2302      	movs	r3, #2
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	1cbb      	adds	r3, r7, #2
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2302      	movs	r3, #2
 8003f28:	4803      	ldr	r0, [pc, #12]	@ (8003f38 <AUDIO_IO_Write+0x50>)
 8003f2a:	f7ff ff8e 	bl	8003e4a <I2Cx_WriteMultiple>
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000eb8 	.word	0x20000eb8

08003f3c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	4603      	mov	r3, r0
 8003f44:	460a      	mov	r2, r1
 8003f46:	71fb      	strb	r3, [r7, #7]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	81bb      	strh	r3, [r7, #12]
 8003f50:	2300      	movs	r3, #0
 8003f52:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003f54:	88ba      	ldrh	r2, [r7, #4]
 8003f56:	79f9      	ldrb	r1, [r7, #7]
 8003f58:	2302      	movs	r3, #2
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	2302      	movs	r3, #2
 8003f64:	480a      	ldr	r0, [pc, #40]	@ (8003f90 <AUDIO_IO_Read+0x54>)
 8003f66:	f7ff ff43 	bl	8003df0 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003f6a:	89bb      	ldrh	r3, [r7, #12]
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003f70:	89bb      	ldrh	r3, [r7, #12]
 8003f72:	b21b      	sxth	r3, r3
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	b21a      	sxth	r2, r3
 8003f78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	b21b      	sxth	r3, r3
 8003f80:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003f86:	89bb      	ldrh	r3, [r7, #12]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000eb8 	.word	0x20000eb8

08003f94 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fbfd 	bl	800479c <HAL_Delay>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003fb4:	480e      	ldr	r0, [pc, #56]	@ (8003ff0 <HAL_SAI_ErrorCallback+0x44>)
 8003fb6:	f004 f85f 	bl	8008078 <HAL_SAI_GetState>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003fbe:	480d      	ldr	r0, [pc, #52]	@ (8003ff4 <HAL_SAI_ErrorCallback+0x48>)
 8003fc0:	f004 f85a 	bl	8008078 <HAL_SAI_GetState>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SAI_ErrorCallback+0x28>
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b12      	cmp	r3, #18
 8003fd2:	d101      	bne.n	8003fd8 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003fd4:	f000 f810 	bl	8003ff8 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003fd8:	7bbb      	ldrb	r3, [r7, #14]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SAI_ErrorCallback+0x38>
 8003fde:	7bbb      	ldrb	r3, [r7, #14]
 8003fe0:	2b22      	cmp	r3, #34	@ 0x22
 8003fe2:	d101      	bne.n	8003fe8 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8003fe4:	f000 f9f6 	bl	80043d4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000f10 	.word	0x20000f10
 8003ff4:	20000f94 	.word	0x20000f94

08003ff8 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	@ 0x30
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8004012:	4b63      	ldr	r3, [pc, #396]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	4a62      	ldr	r2, [pc, #392]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004018:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800401c:	6453      	str	r3, [r2, #68]	@ 0x44
 800401e:	4b60      	ldr	r3, [pc, #384]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800402a:	4b5d      	ldr	r3, [pc, #372]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	4a5c      	ldr	r2, [pc, #368]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004034:	6313      	str	r3, [r2, #48]	@ 0x30
 8004036:	4b5a      	ldr	r3, [pc, #360]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8004042:	4b57      	ldr	r3, [pc, #348]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	4a56      	ldr	r2, [pc, #344]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404c:	6313      	str	r3, [r2, #48]	@ 0x30
 800404e:	4b54      	ldr	r3, [pc, #336]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800405a:	4b51      	ldr	r3, [pc, #324]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	4a50      	ldr	r2, [pc, #320]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004064:	6313      	str	r3, [r2, #48]	@ 0x30
 8004066:	4b4e      	ldr	r3, [pc, #312]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800407e:	2303      	movs	r3, #3
 8004080:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004082:	230a      	movs	r3, #10
 8004084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8004086:	f107 031c 	add.w	r3, r7, #28
 800408a:	4619      	mov	r1, r3
 800408c:	4845      	ldr	r0, [pc, #276]	@ (80041a4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800408e:	f001 f92f 	bl	80052f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8004092:	2320      	movs	r3, #32
 8004094:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004096:	2302      	movs	r3, #2
 8004098:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800409e:	2303      	movs	r3, #3
 80040a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80040a2:	230a      	movs	r3, #10
 80040a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80040a6:	f107 031c 	add.w	r3, r7, #28
 80040aa:	4619      	mov	r1, r3
 80040ac:	483d      	ldr	r0, [pc, #244]	@ (80041a4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80040ae:	f001 f91f 	bl	80052f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80040b2:	2340      	movs	r3, #64	@ 0x40
 80040b4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80040b6:	2302      	movs	r3, #2
 80040b8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80040be:	2303      	movs	r3, #3
 80040c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80040c2:	230a      	movs	r3, #10
 80040c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80040c6:	f107 031c 	add.w	r3, r7, #28
 80040ca:	4619      	mov	r1, r3
 80040cc:	4835      	ldr	r0, [pc, #212]	@ (80041a4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80040ce:	f001 f90f 	bl	80052f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80040d2:	2310      	movs	r3, #16
 80040d4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80040d6:	2302      	movs	r3, #2
 80040d8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80040de:	2303      	movs	r3, #3
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80040e2:	230a      	movs	r3, #10
 80040e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80040e6:	f107 031c 	add.w	r3, r7, #28
 80040ea:	4619      	mov	r1, r3
 80040ec:	482d      	ldr	r0, [pc, #180]	@ (80041a4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80040ee:	f001 f8ff 	bl	80052f0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80040f2:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	4a2a      	ldr	r2, [pc, #168]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 80040f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80040fe:	4b28      	ldr	r3, [pc, #160]	@ (80041a0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a26      	ldr	r2, [pc, #152]	@ (80041a8 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d138      	bne.n	8004186 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004114:	4b25      	ldr	r3, [pc, #148]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004116:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800411a:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800411c:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800411e:	2240      	movs	r2, #64	@ 0x40
 8004120:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004122:	4b22      	ldr	r3, [pc, #136]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004124:	2200      	movs	r2, #0
 8004126:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004128:	4b20      	ldr	r3, [pc, #128]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800412a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800412e:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004130:	4b1e      	ldr	r3, [pc, #120]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004136:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004138:	4b1c      	ldr	r3, [pc, #112]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800413a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800413e:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8004140:	4b1a      	ldr	r3, [pc, #104]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004142:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004146:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004148:	4b18      	ldr	r3, [pc, #96]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800414a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800414e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004152:	2204      	movs	r2, #4
 8004154:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004156:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004158:	2203      	movs	r2, #3
 800415a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800415c:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800415e:	2200      	movs	r2, #0
 8004160:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004162:	4b12      	ldr	r3, [pc, #72]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004168:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800416a:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 800416c:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a0e      	ldr	r2, [pc, #56]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004172:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004174:	4a0d      	ldr	r2, [pc, #52]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800417a:	480c      	ldr	r0, [pc, #48]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800417c:	f000 fcf2 	bl	8004b64 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8004180:	480a      	ldr	r0, [pc, #40]	@ (80041ac <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004182:	f000 fc41 	bl	8004a08 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8004186:	2200      	movs	r2, #0
 8004188:	210e      	movs	r1, #14
 800418a:	203c      	movs	r0, #60	@ 0x3c
 800418c:	f000 fc05 	bl	800499a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8004190:	203c      	movs	r0, #60	@ 0x3c
 8004192:	f000 fc1e 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 8004196:	bf00      	nop
 8004198:	3730      	adds	r7, #48	@ 0x30
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40022000 	.word	0x40022000
 80041a8:	40015c04 	.word	0x40015c04
 80041ac:	20001018 	.word	0x20001018
 80041b0:	40026470 	.word	0x40026470

080041b4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b0a6      	sub	sp, #152	@ 0x98
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	4618      	mov	r0, r3
 80041c6:	f003 fa57 	bl	8007678 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d009      	beq.n	80041e8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f245 6222 	movw	r2, #22050	@ 0x5622
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d112      	bne.n	800420e <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80041e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80041ec:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80041ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80041f2:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80041f4:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80041f8:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80041fa:	2302      	movs	r3, #2
 80041fc:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80041fe:	2313      	movs	r3, #19
 8004200:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004202:	f107 0314 	add.w	r3, r7, #20
 8004206:	4618      	mov	r0, r3
 8004208:	f002 fe46 	bl	8006e98 <HAL_RCCEx_PeriphCLKConfig>
 800420c:	e012      	b.n	8004234 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800420e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004212:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004214:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004218:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800421a:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800421e:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8004220:	2307      	movs	r3, #7
 8004222:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004224:	2301      	movs	r3, #1
 8004226:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	4618      	mov	r0, r3
 800422e:	f002 fe33 	bl	8006e98 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	3798      	adds	r7, #152	@ 0x98
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	68f9      	ldr	r1, [r7, #12]
 800424e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004252:	f000 f805 	bl	8004260 <BSP_AUDIO_IN_InitEx>
 8004256:	4603      	mov	r3, r0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b089      	sub	sp, #36	@ 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	4603      	mov	r3, r0
 800426e:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004278:	89fb      	ldrh	r3, [r7, #14]
 800427a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800427e:	d006      	beq.n	800428e <BSP_AUDIO_IN_InitEx+0x2e>
 8004280:	89fb      	ldrh	r3, [r7, #14]
 8004282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004286:	d002      	beq.n	800428e <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e046      	b.n	800431c <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 800428e:	f000 fa11 	bl	80046b4 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8004292:	2200      	movs	r2, #0
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4824      	ldr	r0, [pc, #144]	@ (8004328 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004298:	f7ff ff8c 	bl	80041b4 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800429c:	4b22      	ldr	r3, [pc, #136]	@ (8004328 <BSP_AUDIO_IN_InitEx+0xc8>)
 800429e:	4a23      	ldr	r2, [pc, #140]	@ (800432c <BSP_AUDIO_IN_InitEx+0xcc>)
 80042a0:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80042a2:	4821      	ldr	r0, [pc, #132]	@ (8004328 <BSP_AUDIO_IN_InitEx+0xc8>)
 80042a4:	f003 fee8 	bl	8008078 <HAL_SAI_GetState>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d107      	bne.n	80042be <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80042ae:	2100      	movs	r1, #0
 80042b0:	481d      	ldr	r0, [pc, #116]	@ (8004328 <BSP_AUDIO_IN_InitEx+0xc8>)
 80042b2:	f7ff fea9 	bl	8004008 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80042b6:	2100      	movs	r1, #0
 80042b8:	481b      	ldr	r0, [pc, #108]	@ (8004328 <BSP_AUDIO_IN_InitEx+0xc8>)
 80042ba:	f000 f893 	bl	80043e4 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80042be:	89fb      	ldrh	r3, [r7, #14]
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c4:	d102      	bne.n	80042cc <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80042c6:	230a      	movs	r3, #10
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	e001      	b.n	80042d0 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80042cc:	2305      	movs	r3, #5
 80042ce:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	69b9      	ldr	r1, [r7, #24]
 80042d4:	2001      	movs	r0, #1
 80042d6:	f000 f937 	bl	8004548 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80042da:	4b15      	ldr	r3, [pc, #84]	@ (8004330 <BSP_AUDIO_IN_InitEx+0xd0>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2034      	movs	r0, #52	@ 0x34
 80042e0:	4798      	blx	r3
 80042e2:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f648 1294 	movw	r2, #35220	@ 0x8994
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d109      	bne.n	8004302 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80042ee:	4b10      	ldr	r3, [pc, #64]	@ (8004330 <BSP_AUDIO_IN_InitEx+0xd0>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	2034      	movs	r0, #52	@ 0x34
 80042f4:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 80042f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <BSP_AUDIO_IN_InitEx+0xd4>)
 80042f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004330 <BSP_AUDIO_IN_InitEx+0xd0>)
 80042fa:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e001      	b.n	8004306 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8004306:	7ffb      	ldrb	r3, [r7, #31]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 800430c:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <BSP_AUDIO_IN_InitEx+0xd4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681c      	ldr	r4, [r3, #0]
 8004312:	89f9      	ldrh	r1, [r7, #14]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2264      	movs	r2, #100	@ 0x64
 8004318:	2034      	movs	r0, #52	@ 0x34
 800431a:	47a0      	blx	r4
    }
  }
  return ret;
 800431c:	7ffb      	ldrb	r3, [r7, #31]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3724      	adds	r7, #36	@ 0x24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd90      	pop	{r4, r7, pc}
 8004326:	bf00      	nop
 8004328:	20000f94 	.word	0x20000f94
 800432c:	40015c24 	.word	0x40015c24
 8004330:	20000004 	.word	0x20000004
 8004334:	20000f0c 	.word	0x20000f0c

08004338 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4805      	ldr	r0, [pc, #20]	@ (8004364 <BSP_AUDIO_IN_Record+0x2c>)
 8004350:	f003 fe04 	bl	8007f5c <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	b2db      	uxtb	r3, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000f94 	.word	0x20000f94

08004368 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8004370:	480c      	ldr	r0, [pc, #48]	@ (80043a4 <BSP_AUDIO_IN_Stop+0x3c>)
 8004372:	f003 fd80 	bl	8007e76 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8004376:	4b0c      	ldr	r3, [pc, #48]	@ (80043a8 <BSP_AUDIO_IN_Stop+0x40>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	2034      	movs	r0, #52	@ 0x34
 8004380:	4798      	blx	r3
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e006      	b.n	800439a <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d102      	bne.n	8004398 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8004392:	2001      	movs	r0, #1
 8004394:	f000 fa02 	bl	800479c <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004398:	2300      	movs	r3, #0
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000f94 	.word	0x20000f94
 80043a8:	20000f0c 	.word	0x20000f0c

080043ac <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80043b4:	f006 fc0a 	bl	800abcc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80043c8:	f006 fc48 	bl	800ac5c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08c      	sub	sp, #48	@ 0x30
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80043ee:	4b50      	ldr	r3, [pc, #320]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	4a4f      	ldr	r2, [pc, #316]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 80043f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80043fa:	4b4d      	ldr	r3, [pc, #308]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8004406:	4b4a      	ldr	r3, [pc, #296]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	4a49      	ldr	r2, [pc, #292]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 800440c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004410:	6313      	str	r3, [r2, #48]	@ 0x30
 8004412:	4b47      	ldr	r3, [pc, #284]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800441e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004422:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004424:	2302      	movs	r3, #2
 8004426:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004428:	2300      	movs	r3, #0
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800442c:	2302      	movs	r3, #2
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004430:	230a      	movs	r3, #10
 8004432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004434:	f107 031c 	add.w	r3, r7, #28
 8004438:	4619      	mov	r1, r3
 800443a:	483e      	ldr	r0, [pc, #248]	@ (8004534 <BSP_AUDIO_IN_MspInit+0x150>)
 800443c:	f000 ff58 	bl	80052f0 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8004440:	4b3b      	ldr	r3, [pc, #236]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004444:	4a3a      	ldr	r2, [pc, #232]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444a:	6313      	str	r3, [r2, #48]	@ 0x30
 800444c:	4b38      	ldr	r3, [pc, #224]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 800444e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004458:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800445c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800445e:	2300      	movs	r3, #0
 8004460:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004466:	2302      	movs	r3, #2
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800446a:	f107 031c 	add.w	r3, r7, #28
 800446e:	4619      	mov	r1, r3
 8004470:	4831      	ldr	r0, [pc, #196]	@ (8004538 <BSP_AUDIO_IN_MspInit+0x154>)
 8004472:	f000 ff3d 	bl	80052f0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004476:	4b2e      	ldr	r3, [pc, #184]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	4a2d      	ldr	r2, [pc, #180]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 800447c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004480:	6313      	str	r3, [r2, #48]	@ 0x30
 8004482:	4b2b      	ldr	r3, [pc, #172]	@ (8004530 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2a      	ldr	r2, [pc, #168]	@ (800453c <BSP_AUDIO_IN_MspInit+0x158>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d137      	bne.n	8004508 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004498:	4b29      	ldr	r3, [pc, #164]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 800449a:	2200      	movs	r2, #0
 800449c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800449e:	4b28      	ldr	r3, [pc, #160]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80044a4:	4b26      	ldr	r3, [pc, #152]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80044aa:	4b25      	ldr	r3, [pc, #148]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044b0:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80044b2:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044b8:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80044ba:	4b21      	ldr	r3, [pc, #132]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044c0:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80044c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044c8:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80044ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80044d0:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80044d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80044d8:	4b19      	ldr	r3, [pc, #100]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044da:	2203      	movs	r2, #3
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80044de:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80044e4:	4b16      	ldr	r3, [pc, #88]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80044ea:	4b15      	ldr	r3, [pc, #84]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044ec:	4a15      	ldr	r2, [pc, #84]	@ (8004544 <BSP_AUDIO_IN_MspInit+0x160>)
 80044ee:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a13      	ldr	r2, [pc, #76]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80044f6:	4a12      	ldr	r2, [pc, #72]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80044fc:	4810      	ldr	r0, [pc, #64]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 80044fe:	f000 fb31 	bl	8004b64 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8004502:	480f      	ldr	r0, [pc, #60]	@ (8004540 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004504:	f000 fa80 	bl	8004a08 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004508:	2200      	movs	r2, #0
 800450a:	210f      	movs	r1, #15
 800450c:	2046      	movs	r0, #70	@ 0x46
 800450e:	f000 fa44 	bl	800499a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004512:	2046      	movs	r0, #70	@ 0x46
 8004514:	f000 fa5d 	bl	80049d2 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004518:	2200      	movs	r2, #0
 800451a:	210f      	movs	r1, #15
 800451c:	2028      	movs	r0, #40	@ 0x28
 800451e:	f000 fa3c 	bl	800499a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004522:	2028      	movs	r0, #40	@ 0x28
 8004524:	f000 fa55 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 8004528:	bf00      	nop
 800452a:	3730      	adds	r7, #48	@ 0x30
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40023800 	.word	0x40023800
 8004534:	40021800 	.word	0x40021800
 8004538:	40021c00 	.word	0x40021c00
 800453c:	40015c24 	.word	0x40015c24
 8004540:	20001078 	.word	0x20001078
 8004544:	400264b8 	.word	0x400264b8

08004548 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004554:	4b53      	ldr	r3, [pc, #332]	@ (80046a4 <SAIx_In_Init+0x15c>)
 8004556:	4a54      	ldr	r2, [pc, #336]	@ (80046a8 <SAIx_In_Init+0x160>)
 8004558:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800455a:	4b52      	ldr	r3, [pc, #328]	@ (80046a4 <SAIx_In_Init+0x15c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b50      	ldr	r3, [pc, #320]	@ (80046a4 <SAIx_In_Init+0x15c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004568:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800456a:	4a4e      	ldr	r2, [pc, #312]	@ (80046a4 <SAIx_In_Init+0x15c>)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004570:	4a4c      	ldr	r2, [pc, #304]	@ (80046a4 <SAIx_In_Init+0x15c>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004576:	4b4b      	ldr	r3, [pc, #300]	@ (80046a4 <SAIx_In_Init+0x15c>)
 8004578:	2200      	movs	r2, #0
 800457a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800457c:	4b49      	ldr	r3, [pc, #292]	@ (80046a4 <SAIx_In_Init+0x15c>)
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004582:	4b48      	ldr	r3, [pc, #288]	@ (80046a4 <SAIx_In_Init+0x15c>)
 8004584:	2280      	movs	r2, #128	@ 0x80
 8004586:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004588:	4b46      	ldr	r3, [pc, #280]	@ (80046a4 <SAIx_In_Init+0x15c>)
 800458a:	2200      	movs	r2, #0
 800458c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800458e:	4b45      	ldr	r3, [pc, #276]	@ (80046a4 <SAIx_In_Init+0x15c>)
 8004590:	2201      	movs	r2, #1
 8004592:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004594:	4b43      	ldr	r3, [pc, #268]	@ (80046a4 <SAIx_In_Init+0x15c>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800459a:	4b42      	ldr	r3, [pc, #264]	@ (80046a4 <SAIx_In_Init+0x15c>)
 800459c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045a0:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80045a2:	4b40      	ldr	r3, [pc, #256]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80045a8:	4b3e      	ldr	r3, [pc, #248]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045aa:	2240      	movs	r2, #64	@ 0x40
 80045ac:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80045ae:	4b3d      	ldr	r3, [pc, #244]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045b0:	2220      	movs	r2, #32
 80045b2:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80045b4:	4b3b      	ldr	r3, [pc, #236]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80045ba:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80045bc:	4b39      	ldr	r3, [pc, #228]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80045c2:	4b38      	ldr	r3, [pc, #224]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80045c8:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80045ca:	4b36      	ldr	r3, [pc, #216]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80045d0:	4b34      	ldr	r3, [pc, #208]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80045d6:	4b33      	ldr	r3, [pc, #204]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045d8:	2204      	movs	r2, #4
 80045da:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80045dc:	4a31      	ldr	r2, [pc, #196]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80045e2:	4830      	ldr	r0, [pc, #192]	@ (80046a4 <SAIx_In_Init+0x15c>)
 80045e4:	f003 fa94 	bl	8007b10 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80045e8:	4b30      	ldr	r3, [pc, #192]	@ (80046ac <SAIx_In_Init+0x164>)
 80045ea:	4a31      	ldr	r2, [pc, #196]	@ (80046b0 <SAIx_In_Init+0x168>)
 80045ec:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80045ee:	4b2f      	ldr	r3, [pc, #188]	@ (80046ac <SAIx_In_Init+0x164>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b2d      	ldr	r3, [pc, #180]	@ (80046ac <SAIx_In_Init+0x164>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80045fc:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80045fe:	4a2b      	ldr	r2, [pc, #172]	@ (80046ac <SAIx_In_Init+0x164>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004604:	4b29      	ldr	r3, [pc, #164]	@ (80046ac <SAIx_In_Init+0x164>)
 8004606:	2203      	movs	r2, #3
 8004608:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800460a:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <SAIx_In_Init+0x164>)
 800460c:	2200      	movs	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004610:	4b26      	ldr	r3, [pc, #152]	@ (80046ac <SAIx_In_Init+0x164>)
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8004616:	4b25      	ldr	r3, [pc, #148]	@ (80046ac <SAIx_In_Init+0x164>)
 8004618:	2280      	movs	r2, #128	@ 0x80
 800461a:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800461c:	4b23      	ldr	r3, [pc, #140]	@ (80046ac <SAIx_In_Init+0x164>)
 800461e:	2200      	movs	r2, #0
 8004620:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004622:	4b22      	ldr	r3, [pc, #136]	@ (80046ac <SAIx_In_Init+0x164>)
 8004624:	2201      	movs	r2, #1
 8004626:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8004628:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <SAIx_In_Init+0x164>)
 800462a:	2201      	movs	r2, #1
 800462c:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800462e:	4b1f      	ldr	r3, [pc, #124]	@ (80046ac <SAIx_In_Init+0x164>)
 8004630:	2200      	movs	r2, #0
 8004632:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004634:	4b1d      	ldr	r3, [pc, #116]	@ (80046ac <SAIx_In_Init+0x164>)
 8004636:	2201      	movs	r2, #1
 8004638:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800463a:	4b1c      	ldr	r3, [pc, #112]	@ (80046ac <SAIx_In_Init+0x164>)
 800463c:	2240      	movs	r2, #64	@ 0x40
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004640:	4b1a      	ldr	r3, [pc, #104]	@ (80046ac <SAIx_In_Init+0x164>)
 8004642:	2220      	movs	r2, #32
 8004644:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004646:	4b19      	ldr	r3, [pc, #100]	@ (80046ac <SAIx_In_Init+0x164>)
 8004648:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800464c:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800464e:	4b17      	ldr	r3, [pc, #92]	@ (80046ac <SAIx_In_Init+0x164>)
 8004650:	2200      	movs	r2, #0
 8004652:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004654:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <SAIx_In_Init+0x164>)
 8004656:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800465a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800465c:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <SAIx_In_Init+0x164>)
 800465e:	2200      	movs	r2, #0
 8004660:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004662:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <SAIx_In_Init+0x164>)
 8004664:	2200      	movs	r2, #0
 8004666:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004668:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <SAIx_In_Init+0x164>)
 800466a:	2204      	movs	r2, #4
 800466c:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800466e:	4a0f      	ldr	r2, [pc, #60]	@ (80046ac <SAIx_In_Init+0x164>)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004674:	480d      	ldr	r0, [pc, #52]	@ (80046ac <SAIx_In_Init+0x164>)
 8004676:	f003 fa4b 	bl	8007b10 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <SAIx_In_Init+0x15c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b08      	ldr	r3, [pc, #32]	@ (80046a4 <SAIx_In_Init+0x15c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004688:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800468a:	4b08      	ldr	r3, [pc, #32]	@ (80046ac <SAIx_In_Init+0x164>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <SAIx_In_Init+0x164>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004698:	601a      	str	r2, [r3, #0]
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000f10 	.word	0x20000f10
 80046a8:	40015c04 	.word	0x40015c04
 80046ac:	20000f94 	.word	0x20000f94
 80046b0:	40015c24 	.word	0x40015c24

080046b4 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80046b8:	4b07      	ldr	r3, [pc, #28]	@ (80046d8 <SAIx_In_DeInit+0x24>)
 80046ba:	4a08      	ldr	r2, [pc, #32]	@ (80046dc <SAIx_In_DeInit+0x28>)
 80046bc:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <SAIx_In_DeInit+0x24>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b04      	ldr	r3, [pc, #16]	@ (80046d8 <SAIx_In_DeInit+0x24>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046cc:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80046ce:	4802      	ldr	r0, [pc, #8]	@ (80046d8 <SAIx_In_DeInit+0x24>)
 80046d0:	f003 fb9c 	bl	8007e0c <HAL_SAI_DeInit>
}
 80046d4:	bf00      	nop
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000f94 	.word	0x20000f94
 80046dc:	40015c24 	.word	0x40015c24

080046e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e4:	2003      	movs	r0, #3
 80046e6:	f000 f94d 	bl	8004984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046ea:	2000      	movs	r0, #0
 80046ec:	f000 f806 	bl	80046fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f0:	f7fd fd1c 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004704:	4b12      	ldr	r3, [pc, #72]	@ (8004750 <HAL_InitTick+0x54>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <HAL_InitTick+0x58>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	4619      	mov	r1, r3
 800470e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004712:	fbb3 f3f1 	udiv	r3, r3, r1
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f967 	bl	80049ee <HAL_SYSTICK_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e00e      	b.n	8004748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b0f      	cmp	r3, #15
 800472e:	d80a      	bhi.n	8004746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004730:	2200      	movs	r2, #0
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	f000 f92f 	bl	800499a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800473c:	4a06      	ldr	r2, [pc, #24]	@ (8004758 <HAL_InitTick+0x5c>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000000 	.word	0x20000000
 8004754:	2000003c 	.word	0x2000003c
 8004758:	20000038 	.word	0x20000038

0800475c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004760:	4b06      	ldr	r3, [pc, #24]	@ (800477c <HAL_IncTick+0x20>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_IncTick+0x24>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4413      	add	r3, r2
 800476c:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <HAL_IncTick+0x24>)
 800476e:	6013      	str	r3, [r2, #0]
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	2000003c 	.word	0x2000003c
 8004780:	200010d8 	.word	0x200010d8

08004784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return uwTick;
 8004788:	4b03      	ldr	r3, [pc, #12]	@ (8004798 <HAL_GetTick+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	200010d8 	.word	0x200010d8

0800479c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff ffee 	bl	8004784 <HAL_GetTick>
 80047a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d005      	beq.n	80047c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047b6:	4b0a      	ldr	r3, [pc, #40]	@ (80047e0 <HAL_Delay+0x44>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047c2:	bf00      	nop
 80047c4:	f7ff ffde 	bl	8004784 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d8f7      	bhi.n	80047c4 <HAL_Delay+0x28>
  {
  }
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	2000003c 	.word	0x2000003c

080047e4 <__NVIC_SetPriorityGrouping>:
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <__NVIC_SetPriorityGrouping+0x40>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004800:	4013      	ands	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800480c:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <__NVIC_SetPriorityGrouping+0x44>)
 800480e:	4313      	orrs	r3, r2
 8004810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004812:	4a04      	ldr	r2, [pc, #16]	@ (8004824 <__NVIC_SetPriorityGrouping+0x40>)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	60d3      	str	r3, [r2, #12]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	e000ed00 	.word	0xe000ed00
 8004828:	05fa0000 	.word	0x05fa0000

0800482c <__NVIC_GetPriorityGrouping>:
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004830:	4b04      	ldr	r3, [pc, #16]	@ (8004844 <__NVIC_GetPriorityGrouping+0x18>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 0307 	and.w	r3, r3, #7
}
 800483a:	4618      	mov	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <__NVIC_EnableIRQ>:
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004856:	2b00      	cmp	r3, #0
 8004858:	db0b      	blt.n	8004872 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	4907      	ldr	r1, [pc, #28]	@ (8004880 <__NVIC_EnableIRQ+0x38>)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2001      	movs	r0, #1
 800486a:	fa00 f202 	lsl.w	r2, r0, r2
 800486e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	e000e100 	.word	0xe000e100

08004884 <__NVIC_SetPriority>:
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	6039      	str	r1, [r7, #0]
 800488e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004894:	2b00      	cmp	r3, #0
 8004896:	db0a      	blt.n	80048ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	b2da      	uxtb	r2, r3
 800489c:	490c      	ldr	r1, [pc, #48]	@ (80048d0 <__NVIC_SetPriority+0x4c>)
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	0112      	lsls	r2, r2, #4
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	440b      	add	r3, r1
 80048a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048ac:	e00a      	b.n	80048c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	4908      	ldr	r1, [pc, #32]	@ (80048d4 <__NVIC_SetPriority+0x50>)
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	3b04      	subs	r3, #4
 80048bc:	0112      	lsls	r2, r2, #4
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	440b      	add	r3, r1
 80048c2:	761a      	strb	r2, [r3, #24]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	e000e100 	.word	0xe000e100
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <NVIC_EncodePriority>:
{
 80048d8:	b480      	push	{r7}
 80048da:	b089      	sub	sp, #36	@ 0x24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f1c3 0307 	rsb	r3, r3, #7
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	bf28      	it	cs
 80048f6:	2304      	movcs	r3, #4
 80048f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d902      	bls.n	8004908 <NVIC_EncodePriority+0x30>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3b03      	subs	r3, #3
 8004906:	e000      	b.n	800490a <NVIC_EncodePriority+0x32>
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800490c:	f04f 32ff 	mov.w	r2, #4294967295
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43da      	mvns	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	401a      	ands	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004920:	f04f 31ff 	mov.w	r1, #4294967295
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	43d9      	mvns	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004930:	4313      	orrs	r3, r2
}
 8004932:	4618      	mov	r0, r3
 8004934:	3724      	adds	r7, #36	@ 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3b01      	subs	r3, #1
 800494c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004950:	d301      	bcc.n	8004956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004952:	2301      	movs	r3, #1
 8004954:	e00f      	b.n	8004976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004956:	4a0a      	ldr	r2, [pc, #40]	@ (8004980 <SysTick_Config+0x40>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800495e:	210f      	movs	r1, #15
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	f7ff ff8e 	bl	8004884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004968:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <SysTick_Config+0x40>)
 800496a:	2200      	movs	r2, #0
 800496c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800496e:	4b04      	ldr	r3, [pc, #16]	@ (8004980 <SysTick_Config+0x40>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010

08004984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff29 	bl	80047e4 <__NVIC_SetPriorityGrouping>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800499a:	b580      	push	{r7, lr}
 800499c:	b086      	sub	sp, #24
 800499e:	af00      	add	r7, sp, #0
 80049a0:	4603      	mov	r3, r0
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049ac:	f7ff ff3e 	bl	800482c <__NVIC_GetPriorityGrouping>
 80049b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f7ff ff8e 	bl	80048d8 <NVIC_EncodePriority>
 80049bc:	4602      	mov	r2, r0
 80049be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff5d 	bl	8004884 <__NVIC_SetPriority>
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff31 	bl	8004848 <__NVIC_EnableIRQ>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ffa2 	bl	8004940 <SysTick_Config>
 80049fc:	4603      	mov	r3, r0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a14:	f7ff feb6 	bl	8004784 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e099      	b.n	8004b58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a44:	e00f      	b.n	8004a66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a46:	f7ff fe9d 	bl	8004784 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d908      	bls.n	8004a66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e078      	b.n	8004b58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e8      	bne.n	8004a46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4b38      	ldr	r3, [pc, #224]	@ (8004b60 <HAL_DMA_Init+0x158>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d107      	bne.n	8004ad0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0307 	bic.w	r3, r3, #7
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d117      	bne.n	8004b2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fb73 	bl	80051f8 <DMA_CheckFifoParam>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2240      	movs	r2, #64	@ 0x40
 8004b1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004b26:	2301      	movs	r3, #1
 8004b28:	e016      	b.n	8004b58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fb2a 	bl	800518c <DMA_CalcBaseAndBitshift>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b40:	223f      	movs	r2, #63	@ 0x3f
 8004b42:	409a      	lsls	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	f010803f 	.word	0xf010803f

08004b64 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e050      	b.n	8004c18 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d101      	bne.n	8004b86 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
 8004b84:	e048      	b.n	8004c18 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2200      	movs	r2, #0
 8004bac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2221      	movs	r2, #33	@ 0x21
 8004bc4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fae0 	bl	800518c <DMA_CalcBaseAndBitshift>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd4:	223f      	movs	r2, #63	@ 0x3f
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_DMA_Start_IT+0x26>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e048      	b.n	8004cd8 <HAL_DMA_Start_IT+0xb8>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d137      	bne.n	8004cca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fa5e 	bl	8005130 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c78:	223f      	movs	r2, #63	@ 0x3f
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0216 	orr.w	r2, r2, #22
 8004c8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c9e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0208 	orr.w	r2, r2, #8
 8004cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e005      	b.n	8004cd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cee:	f7ff fd49 	bl	8004784 <HAL_GetTick>
 8004cf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d008      	beq.n	8004d12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2280      	movs	r2, #128	@ 0x80
 8004d04:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e052      	b.n	8004db8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0216 	bic.w	r2, r2, #22
 8004d20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <HAL_DMA_Abort+0x62>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0208 	bic.w	r2, r2, #8
 8004d50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d62:	e013      	b.n	8004d8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d64:	f7ff fd0e 	bl	8004784 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d90c      	bls.n	8004d8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e015      	b.n	8004db8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e4      	bne.n	8004d64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9e:	223f      	movs	r2, #63	@ 0x3f
 8004da0:	409a      	lsls	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d004      	beq.n	8004dde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2280      	movs	r2, #128	@ 0x80
 8004dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e00c      	b.n	8004df8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2205      	movs	r2, #5
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004e10:	4b8e      	ldr	r3, [pc, #568]	@ (800504c <HAL_DMA_IRQHandler+0x248>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a8e      	ldr	r2, [pc, #568]	@ (8005050 <HAL_DMA_IRQHandler+0x24c>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	0a9b      	lsrs	r3, r3, #10
 8004e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2e:	2208      	movs	r2, #8
 8004e30:	409a      	lsls	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01a      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0204 	bic.w	r2, r2, #4
 8004e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e68:	f043 0201 	orr.w	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e74:	2201      	movs	r2, #1
 8004e76:	409a      	lsls	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d012      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e92:	2201      	movs	r2, #1
 8004e94:	409a      	lsls	r2, r3
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	f043 0202 	orr.w	r2, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eaa:	2204      	movs	r2, #4
 8004eac:	409a      	lsls	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d012      	beq.n	8004edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec8:	2204      	movs	r2, #4
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed4:	f043 0204 	orr.w	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d043      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d03c      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efe:	2210      	movs	r2, #16
 8004f00:	409a      	lsls	r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d018      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d024      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
 8004f32:	e01f      	b.n	8004f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
 8004f44:	e016      	b.n	8004f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0208 	bic.w	r2, r2, #8
 8004f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f78:	2220      	movs	r2, #32
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 808f 	beq.w	80050a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8087 	beq.w	80050a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d136      	bne.n	800501c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0216 	bic.w	r2, r2, #22
 8004fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_DMA_IRQHandler+0x1da>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0208 	bic.w	r2, r2, #8
 8004fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff2:	223f      	movs	r2, #63	@ 0x3f
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800500e:	2b00      	cmp	r3, #0
 8005010:	d07e      	beq.n	8005110 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
        }
        return;
 800501a:	e079      	b.n	8005110 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01d      	beq.n	8005066 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10d      	bne.n	8005054 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503c:	2b00      	cmp	r3, #0
 800503e:	d031      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
 8005048:	e02c      	b.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
 800504a:	bf00      	nop
 800504c:	20000000 	.word	0x20000000
 8005050:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d023      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4798      	blx	r3
 8005064:	e01e      	b.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10f      	bne.n	8005094 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0210 	bic.w	r2, r2, #16
 8005082:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d032      	beq.n	8005112 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d022      	beq.n	80050fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2205      	movs	r2, #5
 80050bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	3301      	adds	r3, #1
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d307      	bcc.n	80050ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f2      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x2cc>
 80050ea:	e000      	b.n	80050ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
 800510e:	e000      	b.n	8005112 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005110:	bf00      	nop
    }
  }
}
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800514c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d108      	bne.n	8005170 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800516e:	e007      	b.n	8005180 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	60da      	str	r2, [r3, #12]
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	3b10      	subs	r3, #16
 800519c:	4a13      	ldr	r2, [pc, #76]	@ (80051ec <DMA_CalcBaseAndBitshift+0x60>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051a6:	4a12      	ldr	r2, [pc, #72]	@ (80051f0 <DMA_CalcBaseAndBitshift+0x64>)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d908      	bls.n	80051cc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	4b0c      	ldr	r3, [pc, #48]	@ (80051f4 <DMA_CalcBaseAndBitshift+0x68>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80051ca:	e006      	b.n	80051da <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	4b08      	ldr	r3, [pc, #32]	@ (80051f4 <DMA_CalcBaseAndBitshift+0x68>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	aaaaaaab 	.word	0xaaaaaaab
 80051f0:	080162f0 	.word	0x080162f0
 80051f4:	fffffc00 	.word	0xfffffc00

080051f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005208:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d11f      	bne.n	8005252 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b03      	cmp	r3, #3
 8005216:	d856      	bhi.n	80052c6 <DMA_CheckFifoParam+0xce>
 8005218:	a201      	add	r2, pc, #4	@ (adr r2, 8005220 <DMA_CheckFifoParam+0x28>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	08005231 	.word	0x08005231
 8005224:	08005243 	.word	0x08005243
 8005228:	08005231 	.word	0x08005231
 800522c:	080052c7 	.word	0x080052c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d046      	beq.n	80052ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005240:	e043      	b.n	80052ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800524a:	d140      	bne.n	80052ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005250:	e03d      	b.n	80052ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800525a:	d121      	bne.n	80052a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b03      	cmp	r3, #3
 8005260:	d837      	bhi.n	80052d2 <DMA_CheckFifoParam+0xda>
 8005262:	a201      	add	r2, pc, #4	@ (adr r2, 8005268 <DMA_CheckFifoParam+0x70>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	08005279 	.word	0x08005279
 800526c:	0800527f 	.word	0x0800527f
 8005270:	08005279 	.word	0x08005279
 8005274:	08005291 	.word	0x08005291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      break;
 800527c:	e030      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d025      	beq.n	80052d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528e:	e022      	b.n	80052d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005294:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005298:	d11f      	bne.n	80052da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800529e:	e01c      	b.n	80052da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d903      	bls.n	80052ae <DMA_CheckFifoParam+0xb6>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d003      	beq.n	80052b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052ac:	e018      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
      break;
 80052b2:	e015      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00e      	beq.n	80052de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
      break;
 80052c4:	e00b      	b.n	80052de <DMA_CheckFifoParam+0xe6>
      break;
 80052c6:	bf00      	nop
 80052c8:	e00a      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
      break;
 80052ca:	bf00      	nop
 80052cc:	e008      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
      break;
 80052ce:	bf00      	nop
 80052d0:	e006      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
      break;
 80052d2:	bf00      	nop
 80052d4:	e004      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
      break;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <DMA_CheckFifoParam+0xe8>
      break;
 80052de:	bf00      	nop
    }
  } 
  
  return status; 
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop

080052f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b089      	sub	sp, #36	@ 0x24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005302:	2300      	movs	r3, #0
 8005304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
 800530e:	e175      	b.n	80055fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005310:	2201      	movs	r2, #1
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	429a      	cmp	r2, r3
 800532a:	f040 8164 	bne.w	80055f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d005      	beq.n	8005346 <HAL_GPIO_Init+0x56>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d130      	bne.n	80053a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	2203      	movs	r2, #3
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800537c:	2201      	movs	r2, #1
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 0201 	and.w	r2, r3, #1
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d017      	beq.n	80053e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	2203      	movs	r2, #3
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d123      	bne.n	8005438 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	08da      	lsrs	r2, r3, #3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3208      	adds	r2, #8
 80053f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	220f      	movs	r2, #15
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	08da      	lsrs	r2, r3, #3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3208      	adds	r2, #8
 8005432:	69b9      	ldr	r1, [r7, #24]
 8005434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	2203      	movs	r2, #3
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 0203 	and.w	r2, r3, #3
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4313      	orrs	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80be 	beq.w	80055f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800547a:	4b66      	ldr	r3, [pc, #408]	@ (8005614 <HAL_GPIO_Init+0x324>)
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	4a65      	ldr	r2, [pc, #404]	@ (8005614 <HAL_GPIO_Init+0x324>)
 8005480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005484:	6453      	str	r3, [r2, #68]	@ 0x44
 8005486:	4b63      	ldr	r3, [pc, #396]	@ (8005614 <HAL_GPIO_Init+0x324>)
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005492:	4a61      	ldr	r2, [pc, #388]	@ (8005618 <HAL_GPIO_Init+0x328>)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	089b      	lsrs	r3, r3, #2
 8005498:	3302      	adds	r3, #2
 800549a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	220f      	movs	r2, #15
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4013      	ands	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a58      	ldr	r2, [pc, #352]	@ (800561c <HAL_GPIO_Init+0x32c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d037      	beq.n	800552e <HAL_GPIO_Init+0x23e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a57      	ldr	r2, [pc, #348]	@ (8005620 <HAL_GPIO_Init+0x330>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d031      	beq.n	800552a <HAL_GPIO_Init+0x23a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a56      	ldr	r2, [pc, #344]	@ (8005624 <HAL_GPIO_Init+0x334>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02b      	beq.n	8005526 <HAL_GPIO_Init+0x236>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a55      	ldr	r2, [pc, #340]	@ (8005628 <HAL_GPIO_Init+0x338>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d025      	beq.n	8005522 <HAL_GPIO_Init+0x232>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a54      	ldr	r2, [pc, #336]	@ (800562c <HAL_GPIO_Init+0x33c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01f      	beq.n	800551e <HAL_GPIO_Init+0x22e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a53      	ldr	r2, [pc, #332]	@ (8005630 <HAL_GPIO_Init+0x340>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d019      	beq.n	800551a <HAL_GPIO_Init+0x22a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a52      	ldr	r2, [pc, #328]	@ (8005634 <HAL_GPIO_Init+0x344>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_GPIO_Init+0x226>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a51      	ldr	r2, [pc, #324]	@ (8005638 <HAL_GPIO_Init+0x348>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00d      	beq.n	8005512 <HAL_GPIO_Init+0x222>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a50      	ldr	r2, [pc, #320]	@ (800563c <HAL_GPIO_Init+0x34c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d007      	beq.n	800550e <HAL_GPIO_Init+0x21e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a4f      	ldr	r2, [pc, #316]	@ (8005640 <HAL_GPIO_Init+0x350>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <HAL_GPIO_Init+0x21a>
 8005506:	2309      	movs	r3, #9
 8005508:	e012      	b.n	8005530 <HAL_GPIO_Init+0x240>
 800550a:	230a      	movs	r3, #10
 800550c:	e010      	b.n	8005530 <HAL_GPIO_Init+0x240>
 800550e:	2308      	movs	r3, #8
 8005510:	e00e      	b.n	8005530 <HAL_GPIO_Init+0x240>
 8005512:	2307      	movs	r3, #7
 8005514:	e00c      	b.n	8005530 <HAL_GPIO_Init+0x240>
 8005516:	2306      	movs	r3, #6
 8005518:	e00a      	b.n	8005530 <HAL_GPIO_Init+0x240>
 800551a:	2305      	movs	r3, #5
 800551c:	e008      	b.n	8005530 <HAL_GPIO_Init+0x240>
 800551e:	2304      	movs	r3, #4
 8005520:	e006      	b.n	8005530 <HAL_GPIO_Init+0x240>
 8005522:	2303      	movs	r3, #3
 8005524:	e004      	b.n	8005530 <HAL_GPIO_Init+0x240>
 8005526:	2302      	movs	r3, #2
 8005528:	e002      	b.n	8005530 <HAL_GPIO_Init+0x240>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <HAL_GPIO_Init+0x240>
 800552e:	2300      	movs	r3, #0
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	f002 0203 	and.w	r2, r2, #3
 8005536:	0092      	lsls	r2, r2, #2
 8005538:	4093      	lsls	r3, r2
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	4313      	orrs	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005540:	4935      	ldr	r1, [pc, #212]	@ (8005618 <HAL_GPIO_Init+0x328>)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	089b      	lsrs	r3, r3, #2
 8005546:	3302      	adds	r3, #2
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800554e:	4b3d      	ldr	r3, [pc, #244]	@ (8005644 <HAL_GPIO_Init+0x354>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	43db      	mvns	r3, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4013      	ands	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005572:	4a34      	ldr	r2, [pc, #208]	@ (8005644 <HAL_GPIO_Init+0x354>)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005578:	4b32      	ldr	r3, [pc, #200]	@ (8005644 <HAL_GPIO_Init+0x354>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	43db      	mvns	r3, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800559c:	4a29      	ldr	r2, [pc, #164]	@ (8005644 <HAL_GPIO_Init+0x354>)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055a2:	4b28      	ldr	r3, [pc, #160]	@ (8005644 <HAL_GPIO_Init+0x354>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	43db      	mvns	r3, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4013      	ands	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005644 <HAL_GPIO_Init+0x354>)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005644 <HAL_GPIO_Init+0x354>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	43db      	mvns	r3, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4013      	ands	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055f0:	4a14      	ldr	r2, [pc, #80]	@ (8005644 <HAL_GPIO_Init+0x354>)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	3301      	adds	r3, #1
 80055fa:	61fb      	str	r3, [r7, #28]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	2b0f      	cmp	r3, #15
 8005600:	f67f ae86 	bls.w	8005310 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop
 8005608:	3724      	adds	r7, #36	@ 0x24
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	40013800 	.word	0x40013800
 800561c:	40020000 	.word	0x40020000
 8005620:	40020400 	.word	0x40020400
 8005624:	40020800 	.word	0x40020800
 8005628:	40020c00 	.word	0x40020c00
 800562c:	40021000 	.word	0x40021000
 8005630:	40021400 	.word	0x40021400
 8005634:	40021800 	.word	0x40021800
 8005638:	40021c00 	.word	0x40021c00
 800563c:	40022000 	.word	0x40022000
 8005640:	40022400 	.word	0x40022400
 8005644:	40013c00 	.word	0x40013c00

08005648 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005652:	2300      	movs	r3, #0
 8005654:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e0d9      	b.n	8005818 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005664:	2201      	movs	r2, #1
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4013      	ands	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	f040 80c9 	bne.w	8005812 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005680:	4a6b      	ldr	r2, [pc, #428]	@ (8005830 <HAL_GPIO_DeInit+0x1e8>)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	089b      	lsrs	r3, r3, #2
 8005686:	3302      	adds	r3, #2
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0303 	and.w	r3, r3, #3
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	220f      	movs	r2, #15
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	4013      	ands	r3, r2
 80056a0:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a63      	ldr	r2, [pc, #396]	@ (8005834 <HAL_GPIO_DeInit+0x1ec>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d037      	beq.n	800571a <HAL_GPIO_DeInit+0xd2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a62      	ldr	r2, [pc, #392]	@ (8005838 <HAL_GPIO_DeInit+0x1f0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d031      	beq.n	8005716 <HAL_GPIO_DeInit+0xce>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a61      	ldr	r2, [pc, #388]	@ (800583c <HAL_GPIO_DeInit+0x1f4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d02b      	beq.n	8005712 <HAL_GPIO_DeInit+0xca>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a60      	ldr	r2, [pc, #384]	@ (8005840 <HAL_GPIO_DeInit+0x1f8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d025      	beq.n	800570e <HAL_GPIO_DeInit+0xc6>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a5f      	ldr	r2, [pc, #380]	@ (8005844 <HAL_GPIO_DeInit+0x1fc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01f      	beq.n	800570a <HAL_GPIO_DeInit+0xc2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a5e      	ldr	r2, [pc, #376]	@ (8005848 <HAL_GPIO_DeInit+0x200>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d019      	beq.n	8005706 <HAL_GPIO_DeInit+0xbe>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a5d      	ldr	r2, [pc, #372]	@ (800584c <HAL_GPIO_DeInit+0x204>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_GPIO_DeInit+0xba>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a5c      	ldr	r2, [pc, #368]	@ (8005850 <HAL_GPIO_DeInit+0x208>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00d      	beq.n	80056fe <HAL_GPIO_DeInit+0xb6>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a5b      	ldr	r2, [pc, #364]	@ (8005854 <HAL_GPIO_DeInit+0x20c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <HAL_GPIO_DeInit+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a5a      	ldr	r2, [pc, #360]	@ (8005858 <HAL_GPIO_DeInit+0x210>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d101      	bne.n	80056f6 <HAL_GPIO_DeInit+0xae>
 80056f2:	2309      	movs	r3, #9
 80056f4:	e012      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 80056f6:	230a      	movs	r3, #10
 80056f8:	e010      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 80056fa:	2308      	movs	r3, #8
 80056fc:	e00e      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 80056fe:	2307      	movs	r3, #7
 8005700:	e00c      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 8005702:	2306      	movs	r3, #6
 8005704:	e00a      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 8005706:	2305      	movs	r3, #5
 8005708:	e008      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 800570a:	2304      	movs	r3, #4
 800570c:	e006      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 800570e:	2303      	movs	r3, #3
 8005710:	e004      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 8005712:	2302      	movs	r3, #2
 8005714:	e002      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <HAL_GPIO_DeInit+0xd4>
 800571a:	2300      	movs	r3, #0
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	f002 0203 	and.w	r2, r2, #3
 8005722:	0092      	lsls	r2, r2, #2
 8005724:	4093      	lsls	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	d132      	bne.n	8005792 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800572c:	4b4b      	ldr	r3, [pc, #300]	@ (800585c <HAL_GPIO_DeInit+0x214>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	43db      	mvns	r3, r3
 8005734:	4949      	ldr	r1, [pc, #292]	@ (800585c <HAL_GPIO_DeInit+0x214>)
 8005736:	4013      	ands	r3, r2
 8005738:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800573a:	4b48      	ldr	r3, [pc, #288]	@ (800585c <HAL_GPIO_DeInit+0x214>)
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	43db      	mvns	r3, r3
 8005742:	4946      	ldr	r1, [pc, #280]	@ (800585c <HAL_GPIO_DeInit+0x214>)
 8005744:	4013      	ands	r3, r2
 8005746:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005748:	4b44      	ldr	r3, [pc, #272]	@ (800585c <HAL_GPIO_DeInit+0x214>)
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	43db      	mvns	r3, r3
 8005750:	4942      	ldr	r1, [pc, #264]	@ (800585c <HAL_GPIO_DeInit+0x214>)
 8005752:	4013      	ands	r3, r2
 8005754:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005756:	4b41      	ldr	r3, [pc, #260]	@ (800585c <HAL_GPIO_DeInit+0x214>)
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	43db      	mvns	r3, r3
 800575e:	493f      	ldr	r1, [pc, #252]	@ (800585c <HAL_GPIO_DeInit+0x214>)
 8005760:	4013      	ands	r3, r2
 8005762:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	220f      	movs	r2, #15
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005774:	4a2e      	ldr	r2, [pc, #184]	@ (8005830 <HAL_GPIO_DeInit+0x1e8>)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	089b      	lsrs	r3, r3, #2
 800577a:	3302      	adds	r3, #2
 800577c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	43da      	mvns	r2, r3
 8005784:	482a      	ldr	r0, [pc, #168]	@ (8005830 <HAL_GPIO_DeInit+0x1e8>)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	089b      	lsrs	r3, r3, #2
 800578a:	400a      	ands	r2, r1
 800578c:	3302      	adds	r3, #2
 800578e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	2103      	movs	r1, #3
 800579c:	fa01 f303 	lsl.w	r3, r1, r3
 80057a0:	43db      	mvns	r3, r3
 80057a2:	401a      	ands	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	08da      	lsrs	r2, r3, #3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3208      	adds	r2, #8
 80057b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	220f      	movs	r2, #15
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	08d2      	lsrs	r2, r2, #3
 80057c8:	4019      	ands	r1, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3208      	adds	r2, #8
 80057ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	2103      	movs	r1, #3
 80057dc:	fa01 f303 	lsl.w	r3, r1, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	401a      	ands	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	2101      	movs	r1, #1
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	fa01 f303 	lsl.w	r3, r1, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	401a      	ands	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2103      	movs	r1, #3
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	401a      	ands	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	3301      	adds	r3, #1
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b0f      	cmp	r3, #15
 800581c:	f67f af22 	bls.w	8005664 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40013800 	.word	0x40013800
 8005834:	40020000 	.word	0x40020000
 8005838:	40020400 	.word	0x40020400
 800583c:	40020800 	.word	0x40020800
 8005840:	40020c00 	.word	0x40020c00
 8005844:	40021000 	.word	0x40021000
 8005848:	40021400 	.word	0x40021400
 800584c:	40021800 	.word	0x40021800
 8005850:	40021c00 	.word	0x40021c00
 8005854:	40022000 	.word	0x40022000
 8005858:	40022400 	.word	0x40022400
 800585c:	40013c00 	.word	0x40013c00

08005860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	887b      	ldrh	r3, [r7, #2]
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
 800587c:	e001      	b.n	8005882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800587e:	2300      	movs	r3, #0
 8005880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	807b      	strh	r3, [r7, #2]
 800589c:	4613      	mov	r3, r2
 800589e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058a0:	787b      	ldrb	r3, [r7, #1]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058a6:	887a      	ldrh	r2, [r7, #2]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80058ac:	e003      	b.n	80058b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058ae:	887b      	ldrh	r3, [r7, #2]
 80058b0:	041a      	lsls	r2, r3, #16
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	619a      	str	r2, [r3, #24]
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058d4:	887a      	ldrh	r2, [r7, #2]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4013      	ands	r3, r2
 80058da:	041a      	lsls	r2, r3, #16
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	43d9      	mvns	r1, r3
 80058e0:	887b      	ldrh	r3, [r7, #2]
 80058e2:	400b      	ands	r3, r1
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	619a      	str	r2, [r3, #24]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005902:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d006      	beq.n	800591c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800590e:	4a05      	ldr	r2, [pc, #20]	@ (8005924 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	4618      	mov	r0, r3
 8005918:	f7fb ff96 	bl	8001848 <HAL_GPIO_EXTI_Callback>
  }
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40013c00 	.word	0x40013c00

08005928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e08b      	b.n	8005a52 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8b5 	bl	8005abe <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2224      	movs	r2, #36	@ 0x24
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005978:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005988:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d107      	bne.n	80059a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	e006      	b.n	80059b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d108      	bne.n	80059ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059c6:	605a      	str	r2, [r3, #4]
 80059c8:	e007      	b.n	80059da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6859      	ldr	r1, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a5c <HAL_I2C_Init+0x134>)
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	02008000 	.word	0x02008000

08005a60 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e021      	b.n	8005ab6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2224      	movs	r2, #36	@ 0x24
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0201 	bic.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f821 	bl	8005ad2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	4608      	mov	r0, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	461a      	mov	r2, r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	817b      	strh	r3, [r7, #10]
 8005afa:	460b      	mov	r3, r1
 8005afc:	813b      	strh	r3, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	f040 80f9 	bne.w	8005d02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_I2C_Mem_Write+0x34>
 8005b16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0ed      	b.n	8005d04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_I2C_Mem_Write+0x4e>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e0e6      	b.n	8005d04 <HAL_I2C_Mem_Write+0x21c>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b3e:	f7fe fe21 	bl	8004784 <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	2319      	movs	r3, #25
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fad1 	bl	80060f8 <I2C_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0d1      	b.n	8005d04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2221      	movs	r2, #33	@ 0x21
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2240      	movs	r2, #64	@ 0x40
 8005b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a3a      	ldr	r2, [r7, #32]
 8005b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b88:	88f8      	ldrh	r0, [r7, #6]
 8005b8a:	893a      	ldrh	r2, [r7, #8]
 8005b8c:	8979      	ldrh	r1, [r7, #10]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	4603      	mov	r3, r0
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f9e1 	bl	8005f60 <I2C_RequestMemoryWrite>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e0a9      	b.n	8005d04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2bff      	cmp	r3, #255	@ 0xff
 8005bb8:	d90e      	bls.n	8005bd8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	22ff      	movs	r2, #255	@ 0xff
 8005bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	8979      	ldrh	r1, [r7, #10]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fc55 	bl	8006480 <I2C_TransferConfig>
 8005bd6:	e00f      	b.n	8005bf8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	8979      	ldrh	r1, [r7, #10]
 8005bea:	2300      	movs	r3, #0
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fc44 	bl	8006480 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fad4 	bl	80061aa <I2C_WaitOnTXISFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e07b      	b.n	8005d04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d034      	beq.n	8005cb0 <HAL_I2C_Mem_Write+0x1c8>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d130      	bne.n	8005cb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c54:	2200      	movs	r2, #0
 8005c56:	2180      	movs	r1, #128	@ 0x80
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fa4d 	bl	80060f8 <I2C_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e04d      	b.n	8005d04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2bff      	cmp	r3, #255	@ 0xff
 8005c70:	d90e      	bls.n	8005c90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	22ff      	movs	r2, #255	@ 0xff
 8005c76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	8979      	ldrh	r1, [r7, #10]
 8005c80:	2300      	movs	r3, #0
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fbf9 	bl	8006480 <I2C_TransferConfig>
 8005c8e:	e00f      	b.n	8005cb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	8979      	ldrh	r1, [r7, #10]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 fbe8 	bl	8006480 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d19e      	bne.n	8005bf8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 faba 	bl	8006238 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e01a      	b.n	8005d04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6859      	ldr	r1, [r3, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8005d0c <HAL_I2C_Mem_Write+0x224>)
 8005ce2:	400b      	ands	r3, r1
 8005ce4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e000      	b.n	8005d04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005d02:	2302      	movs	r3, #2
  }
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	fe00e800 	.word	0xfe00e800

08005d10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	4608      	mov	r0, r1
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	817b      	strh	r3, [r7, #10]
 8005d22:	460b      	mov	r3, r1
 8005d24:	813b      	strh	r3, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	f040 80fd 	bne.w	8005f32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_I2C_Mem_Read+0x34>
 8005d3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0f1      	b.n	8005f34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_I2C_Mem_Read+0x4e>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e0ea      	b.n	8005f34 <HAL_I2C_Mem_Read+0x224>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d66:	f7fe fd0d 	bl	8004784 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2319      	movs	r3, #25
 8005d72:	2201      	movs	r2, #1
 8005d74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f9bd 	bl	80060f8 <I2C_WaitOnFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0d5      	b.n	8005f34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2222      	movs	r2, #34	@ 0x22
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2240      	movs	r2, #64	@ 0x40
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005db0:	88f8      	ldrh	r0, [r7, #6]
 8005db2:	893a      	ldrh	r2, [r7, #8]
 8005db4:	8979      	ldrh	r1, [r7, #10]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f921 	bl	8006008 <I2C_RequestMemoryRead>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0ad      	b.n	8005f34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2bff      	cmp	r3, #255	@ 0xff
 8005de0:	d90e      	bls.n	8005e00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	8979      	ldrh	r1, [r7, #10]
 8005df0:	4b52      	ldr	r3, [pc, #328]	@ (8005f3c <HAL_I2C_Mem_Read+0x22c>)
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fb41 	bl	8006480 <I2C_TransferConfig>
 8005dfe:	e00f      	b.n	8005e20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	8979      	ldrh	r1, [r7, #10]
 8005e12:	4b4a      	ldr	r3, [pc, #296]	@ (8005f3c <HAL_I2C_Mem_Read+0x22c>)
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fb30 	bl	8006480 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	2200      	movs	r2, #0
 8005e28:	2104      	movs	r1, #4
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f964 	bl	80060f8 <I2C_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e07c      	b.n	8005f34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d034      	beq.n	8005ee0 <HAL_I2C_Mem_Read+0x1d0>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d130      	bne.n	8005ee0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	2200      	movs	r2, #0
 8005e86:	2180      	movs	r1, #128	@ 0x80
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f935 	bl	80060f8 <I2C_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e04d      	b.n	8005f34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2bff      	cmp	r3, #255	@ 0xff
 8005ea0:	d90e      	bls.n	8005ec0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	8979      	ldrh	r1, [r7, #10]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fae1 	bl	8006480 <I2C_TransferConfig>
 8005ebe:	e00f      	b.n	8005ee0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	8979      	ldrh	r1, [r7, #10]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fad0 	bl	8006480 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d19a      	bne.n	8005e20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f9a2 	bl	8006238 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e01a      	b.n	8005f34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2220      	movs	r2, #32
 8005f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6859      	ldr	r1, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <HAL_I2C_Mem_Read+0x230>)
 8005f12:	400b      	ands	r3, r1
 8005f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e000      	b.n	8005f34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
  }
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	80002400 	.word	0x80002400
 8005f40:	fe00e800 	.word	0xfe00e800

08005f44 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f52:	b2db      	uxtb	r3, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	4608      	mov	r0, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	817b      	strh	r3, [r7, #10]
 8005f72:	460b      	mov	r3, r1
 8005f74:	813b      	strh	r3, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	8979      	ldrh	r1, [r7, #10]
 8005f80:	4b20      	ldr	r3, [pc, #128]	@ (8006004 <I2C_RequestMemoryWrite+0xa4>)
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fa79 	bl	8006480 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	69b9      	ldr	r1, [r7, #24]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 f909 	bl	80061aa <I2C_WaitOnTXISFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e02c      	b.n	8005ffc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d105      	bne.n	8005fb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fa8:	893b      	ldrh	r3, [r7, #8]
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fb2:	e015      	b.n	8005fe0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fb4:	893b      	ldrh	r3, [r7, #8]
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	69b9      	ldr	r1, [r7, #24]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f8ef 	bl	80061aa <I2C_WaitOnTXISFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e012      	b.n	8005ffc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fd6:	893b      	ldrh	r3, [r7, #8]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2180      	movs	r1, #128	@ 0x80
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f884 	bl	80060f8 <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	80002000 	.word	0x80002000

08006008 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	461a      	mov	r2, r3
 8006016:	4603      	mov	r3, r0
 8006018:	817b      	strh	r3, [r7, #10]
 800601a:	460b      	mov	r3, r1
 800601c:	813b      	strh	r3, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	b2da      	uxtb	r2, r3
 8006026:	8979      	ldrh	r1, [r7, #10]
 8006028:	4b20      	ldr	r3, [pc, #128]	@ (80060ac <I2C_RequestMemoryRead+0xa4>)
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2300      	movs	r3, #0
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 fa26 	bl	8006480 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	69b9      	ldr	r1, [r7, #24]
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f8b6 	bl	80061aa <I2C_WaitOnTXISFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e02c      	b.n	80060a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d105      	bne.n	800605a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800604e:	893b      	ldrh	r3, [r7, #8]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	629a      	str	r2, [r3, #40]	@ 0x28
 8006058:	e015      	b.n	8006086 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800605a:	893b      	ldrh	r3, [r7, #8]
 800605c:	0a1b      	lsrs	r3, r3, #8
 800605e:	b29b      	uxth	r3, r3
 8006060:	b2da      	uxtb	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	69b9      	ldr	r1, [r7, #24]
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f89c 	bl	80061aa <I2C_WaitOnTXISFlagUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e012      	b.n	80060a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2200      	movs	r2, #0
 800608e:	2140      	movs	r1, #64	@ 0x40
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f831 	bl	80060f8 <I2C_WaitOnFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	80002000 	.word	0x80002000

080060b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d103      	bne.n	80060ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2200      	movs	r2, #0
 80060cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d007      	beq.n	80060ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	619a      	str	r2, [r3, #24]
  }
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	4613      	mov	r3, r2
 8006106:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006108:	e03b      	b.n	8006182 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 f8d6 	bl	80062c0 <I2C_IsErrorOccurred>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e041      	b.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d02d      	beq.n	8006182 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006126:	f7fe fb2d 	bl	8004784 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d302      	bcc.n	800613c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d122      	bne.n	8006182 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4013      	ands	r3, r2
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	429a      	cmp	r2, r3
 800614a:	bf0c      	ite	eq
 800614c:	2301      	moveq	r3, #1
 800614e:	2300      	movne	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	429a      	cmp	r2, r3
 8006158:	d113      	bne.n	8006182 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615e:	f043 0220 	orr.w	r2, r3, #32
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e00f      	b.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	429a      	cmp	r2, r3
 800619e:	d0b4      	beq.n	800610a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061b6:	e033      	b.n	8006220 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f87f 	bl	80062c0 <I2C_IsErrorOccurred>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e031      	b.n	8006230 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d025      	beq.n	8006220 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d4:	f7fe fad6 	bl	8004784 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d302      	bcc.n	80061ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d11a      	bne.n	8006220 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d013      	beq.n	8006220 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061fc:	f043 0220 	orr.w	r2, r3, #32
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e007      	b.n	8006230 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	d1c4      	bne.n	80061b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006244:	e02f      	b.n	80062a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f838 	bl	80062c0 <I2C_IsErrorOccurred>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e02d      	b.n	80062b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625a:	f7fe fa93 	bl	8004784 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11a      	bne.n	80062a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b20      	cmp	r3, #32
 800627c:	d013      	beq.n	80062a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006282:	f043 0220 	orr.w	r2, r3, #32
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e007      	b.n	80062b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d1c8      	bne.n	8006246 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	@ 0x28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d068      	beq.n	80063be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2210      	movs	r2, #16
 80062f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062f4:	e049      	b.n	800638a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fc:	d045      	beq.n	800638a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062fe:	f7fe fa41 	bl	8004784 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	429a      	cmp	r2, r3
 800630c:	d302      	bcc.n	8006314 <I2C_IsErrorOccurred+0x54>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d13a      	bne.n	800638a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800631e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006326:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006336:	d121      	bne.n	800637c <I2C_IsErrorOccurred+0xbc>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800633e:	d01d      	beq.n	800637c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006340:	7cfb      	ldrb	r3, [r7, #19]
 8006342:	2b20      	cmp	r3, #32
 8006344:	d01a      	beq.n	800637c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006354:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006356:	f7fe fa15 	bl	8004784 <HAL_GetTick>
 800635a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800635c:	e00e      	b.n	800637c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800635e:	f7fe fa11 	bl	8004784 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b19      	cmp	r3, #25
 800636a:	d907      	bls.n	800637c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	f043 0320 	orr.w	r3, r3, #32
 8006372:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800637a:	e006      	b.n	800638a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b20      	cmp	r3, #32
 8006388:	d1e9      	bne.n	800635e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b20      	cmp	r3, #32
 8006396:	d003      	beq.n	80063a0 <I2C_IsErrorOccurred+0xe0>
 8006398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0aa      	beq.n	80062f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2220      	movs	r2, #32
 80063ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	f043 0304 	orr.w	r3, r3, #4
 80063b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	f043 0308 	orr.w	r3, r3, #8
 80063f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006402:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	f043 0302 	orr.w	r3, r3, #2
 800641a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800642c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01c      	beq.n	800646e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff fe3b 	bl	80060b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6859      	ldr	r1, [r3, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <I2C_IsErrorOccurred+0x1bc>)
 8006446:	400b      	ands	r3, r1
 8006448:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	431a      	orrs	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800646e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006472:	4618      	mov	r0, r3
 8006474:	3728      	adds	r7, #40	@ 0x28
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	fe00e800 	.word	0xfe00e800

08006480 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	607b      	str	r3, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	817b      	strh	r3, [r7, #10]
 800648e:	4613      	mov	r3, r2
 8006490:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006492:	897b      	ldrh	r3, [r7, #10]
 8006494:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006498:	7a7b      	ldrb	r3, [r7, #9]
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	0d5b      	lsrs	r3, r3, #21
 80064ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80064be:	4b08      	ldr	r3, [pc, #32]	@ (80064e0 <I2C_TransferConfig+0x60>)
 80064c0:	430b      	orrs	r3, r1
 80064c2:	43db      	mvns	r3, r3
 80064c4:	ea02 0103 	and.w	r1, r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	03ff63ff 	.word	0x03ff63ff

080064e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064ee:	4b23      	ldr	r3, [pc, #140]	@ (800657c <HAL_PWREx_EnableOverDrive+0x98>)
 80064f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f2:	4a22      	ldr	r2, [pc, #136]	@ (800657c <HAL_PWREx_EnableOverDrive+0x98>)
 80064f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80064fa:	4b20      	ldr	r3, [pc, #128]	@ (800657c <HAL_PWREx_EnableOverDrive+0x98>)
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006506:	4b1e      	ldr	r3, [pc, #120]	@ (8006580 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1d      	ldr	r2, [pc, #116]	@ (8006580 <HAL_PWREx_EnableOverDrive+0x9c>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006510:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006512:	f7fe f937 	bl	8004784 <HAL_GetTick>
 8006516:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006518:	e009      	b.n	800652e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800651a:	f7fe f933 	bl	8004784 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006528:	d901      	bls.n	800652e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e022      	b.n	8006574 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800652e:	4b14      	ldr	r3, [pc, #80]	@ (8006580 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800653a:	d1ee      	bne.n	800651a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800653c:	4b10      	ldr	r3, [pc, #64]	@ (8006580 <HAL_PWREx_EnableOverDrive+0x9c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a0f      	ldr	r2, [pc, #60]	@ (8006580 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006546:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006548:	f7fe f91c 	bl	8004784 <HAL_GetTick>
 800654c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800654e:	e009      	b.n	8006564 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006550:	f7fe f918 	bl	8004784 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800655e:	d901      	bls.n	8006564 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e007      	b.n	8006574 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006564:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006570:	d1ee      	bne.n	8006550 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40023800 	.word	0x40023800
 8006580:	40007000 	.word	0x40007000

08006584 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800658c:	2300      	movs	r3, #0
 800658e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e291      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8087 	beq.w	80066b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065a8:	4b96      	ldr	r3, [pc, #600]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 030c 	and.w	r3, r3, #12
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d00c      	beq.n	80065ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065b4:	4b93      	ldr	r3, [pc, #588]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 030c 	and.w	r3, r3, #12
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d112      	bne.n	80065e6 <HAL_RCC_OscConfig+0x62>
 80065c0:	4b90      	ldr	r3, [pc, #576]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065cc:	d10b      	bne.n	80065e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d06c      	beq.n	80066b4 <HAL_RCC_OscConfig+0x130>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d168      	bne.n	80066b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e26b      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ee:	d106      	bne.n	80065fe <HAL_RCC_OscConfig+0x7a>
 80065f0:	4b84      	ldr	r3, [pc, #528]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a83      	ldr	r2, [pc, #524]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80065f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	e02e      	b.n	800665c <HAL_RCC_OscConfig+0xd8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10c      	bne.n	8006620 <HAL_RCC_OscConfig+0x9c>
 8006606:	4b7f      	ldr	r3, [pc, #508]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a7e      	ldr	r2, [pc, #504]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 800660c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	4b7c      	ldr	r3, [pc, #496]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a7b      	ldr	r2, [pc, #492]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e01d      	b.n	800665c <HAL_RCC_OscConfig+0xd8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006628:	d10c      	bne.n	8006644 <HAL_RCC_OscConfig+0xc0>
 800662a:	4b76      	ldr	r3, [pc, #472]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a75      	ldr	r2, [pc, #468]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	4b73      	ldr	r3, [pc, #460]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a72      	ldr	r2, [pc, #456]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 800663c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e00b      	b.n	800665c <HAL_RCC_OscConfig+0xd8>
 8006644:	4b6f      	ldr	r3, [pc, #444]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6e      	ldr	r2, [pc, #440]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 800664a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	4b6c      	ldr	r3, [pc, #432]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a6b      	ldr	r2, [pc, #428]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800665a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d013      	beq.n	800668c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fe f88e 	bl	8004784 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800666c:	f7fe f88a 	bl	8004784 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	@ 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e21f      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667e:	4b61      	ldr	r3, [pc, #388]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f0      	beq.n	800666c <HAL_RCC_OscConfig+0xe8>
 800668a:	e014      	b.n	80066b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668c:	f7fe f87a 	bl	8004784 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006694:	f7fe f876 	bl	8004784 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b64      	cmp	r3, #100	@ 0x64
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e20b      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a6:	4b57      	ldr	r3, [pc, #348]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f0      	bne.n	8006694 <HAL_RCC_OscConfig+0x110>
 80066b2:	e000      	b.n	80066b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d069      	beq.n	8006796 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066c2:	4b50      	ldr	r3, [pc, #320]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 030c 	and.w	r3, r3, #12
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d11c      	bne.n	8006714 <HAL_RCC_OscConfig+0x190>
 80066da:	4b4a      	ldr	r3, [pc, #296]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d116      	bne.n	8006714 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066e6:	4b47      	ldr	r3, [pc, #284]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_RCC_OscConfig+0x17a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d001      	beq.n	80066fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e1df      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fe:	4b41      	ldr	r3, [pc, #260]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	493d      	ldr	r1, [pc, #244]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 800670e:	4313      	orrs	r3, r2
 8006710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006712:	e040      	b.n	8006796 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d023      	beq.n	8006764 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800671c:	4b39      	ldr	r3, [pc, #228]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a38      	ldr	r2, [pc, #224]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006722:	f043 0301 	orr.w	r3, r3, #1
 8006726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006728:	f7fe f82c 	bl	8004784 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006730:	f7fe f828 	bl	8004784 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e1bd      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006742:	4b30      	ldr	r3, [pc, #192]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f0      	beq.n	8006730 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800674e:	4b2d      	ldr	r3, [pc, #180]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	4929      	ldr	r1, [pc, #164]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 800675e:	4313      	orrs	r3, r2
 8006760:	600b      	str	r3, [r1, #0]
 8006762:	e018      	b.n	8006796 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006764:	4b27      	ldr	r3, [pc, #156]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a26      	ldr	r2, [pc, #152]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fe f808 	bl	8004784 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006778:	f7fe f804 	bl	8004784 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e199      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800678a:	4b1e      	ldr	r3, [pc, #120]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d038      	beq.n	8006814 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d019      	beq.n	80067de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067aa:	4b16      	ldr	r3, [pc, #88]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80067ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ae:	4a15      	ldr	r2, [pc, #84]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b6:	f7fd ffe5 	bl	8004784 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067be:	f7fd ffe1 	bl	8004784 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e176      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80067d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <HAL_RCC_OscConfig+0x23a>
 80067dc:	e01a      	b.n	8006814 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067de:	4b09      	ldr	r3, [pc, #36]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80067e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e2:	4a08      	ldr	r2, [pc, #32]	@ (8006804 <HAL_RCC_OscConfig+0x280>)
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ea:	f7fd ffcb 	bl	8004784 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f0:	e00a      	b.n	8006808 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f2:	f7fd ffc7 	bl	8004784 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d903      	bls.n	8006808 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e15c      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
 8006804:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006808:	4b91      	ldr	r3, [pc, #580]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 800680a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1ee      	bne.n	80067f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80a4 	beq.w	800696a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006822:	4b8b      	ldr	r3, [pc, #556]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10d      	bne.n	800684a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800682e:	4b88      	ldr	r3, [pc, #544]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	4a87      	ldr	r2, [pc, #540]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006838:	6413      	str	r3, [r2, #64]	@ 0x40
 800683a:	4b85      	ldr	r3, [pc, #532]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800684a:	4b82      	ldr	r3, [pc, #520]	@ (8006a54 <HAL_RCC_OscConfig+0x4d0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006852:	2b00      	cmp	r3, #0
 8006854:	d118      	bne.n	8006888 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006856:	4b7f      	ldr	r3, [pc, #508]	@ (8006a54 <HAL_RCC_OscConfig+0x4d0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a54 <HAL_RCC_OscConfig+0x4d0>)
 800685c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006862:	f7fd ff8f 	bl	8004784 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686a:	f7fd ff8b 	bl	8004784 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b64      	cmp	r3, #100	@ 0x64
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e120      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800687c:	4b75      	ldr	r3, [pc, #468]	@ (8006a54 <HAL_RCC_OscConfig+0x4d0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d106      	bne.n	800689e <HAL_RCC_OscConfig+0x31a>
 8006890:	4b6f      	ldr	r3, [pc, #444]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006894:	4a6e      	ldr	r2, [pc, #440]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	@ 0x70
 800689c:	e02d      	b.n	80068fa <HAL_RCC_OscConfig+0x376>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCC_OscConfig+0x33c>
 80068a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068aa:	4a69      	ldr	r2, [pc, #420]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b2:	4b67      	ldr	r3, [pc, #412]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b6:	4a66      	ldr	r2, [pc, #408]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068b8:	f023 0304 	bic.w	r3, r3, #4
 80068bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80068be:	e01c      	b.n	80068fa <HAL_RCC_OscConfig+0x376>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b05      	cmp	r3, #5
 80068c6:	d10c      	bne.n	80068e2 <HAL_RCC_OscConfig+0x35e>
 80068c8:	4b61      	ldr	r3, [pc, #388]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068cc:	4a60      	ldr	r2, [pc, #384]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068ce:	f043 0304 	orr.w	r3, r3, #4
 80068d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d8:	4a5d      	ldr	r2, [pc, #372]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	6713      	str	r3, [r2, #112]	@ 0x70
 80068e0:	e00b      	b.n	80068fa <HAL_RCC_OscConfig+0x376>
 80068e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e6:	4a5a      	ldr	r2, [pc, #360]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068e8:	f023 0301 	bic.w	r3, r3, #1
 80068ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ee:	4b58      	ldr	r3, [pc, #352]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f2:	4a57      	ldr	r2, [pc, #348]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80068f4:	f023 0304 	bic.w	r3, r3, #4
 80068f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d015      	beq.n	800692e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006902:	f7fd ff3f 	bl	8004784 <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006908:	e00a      	b.n	8006920 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690a:	f7fd ff3b 	bl	8004784 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006918:	4293      	cmp	r3, r2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e0ce      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006920:	4b4b      	ldr	r3, [pc, #300]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0ee      	beq.n	800690a <HAL_RCC_OscConfig+0x386>
 800692c:	e014      	b.n	8006958 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692e:	f7fd ff29 	bl	8004784 <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006934:	e00a      	b.n	800694c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006936:	f7fd ff25 	bl	8004784 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006944:	4293      	cmp	r3, r2
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e0b8      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800694c:	4b40      	ldr	r3, [pc, #256]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 800694e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1ee      	bne.n	8006936 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d105      	bne.n	800696a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800695e:	4b3c      	ldr	r3, [pc, #240]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006962:	4a3b      	ldr	r2, [pc, #236]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006968:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 80a4 	beq.w	8006abc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006974:	4b36      	ldr	r3, [pc, #216]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 030c 	and.w	r3, r3, #12
 800697c:	2b08      	cmp	r3, #8
 800697e:	d06b      	beq.n	8006a58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d149      	bne.n	8006a1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006988:	4b31      	ldr	r3, [pc, #196]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a30      	ldr	r2, [pc, #192]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 800698e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006994:	f7fd fef6 	bl	8004784 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800699c:	f7fd fef2 	bl	8004784 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e087      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ae:	4b28      	ldr	r3, [pc, #160]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1f0      	bne.n	800699c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69da      	ldr	r2, [r3, #28]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	019b      	lsls	r3, r3, #6
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	3b01      	subs	r3, #1
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069dc:	061b      	lsls	r3, r3, #24
 80069de:	4313      	orrs	r3, r2
 80069e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80069e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e8:	4b19      	ldr	r3, [pc, #100]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a18      	ldr	r2, [pc, #96]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 80069ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f4:	f7fd fec6 	bl	8004784 <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069fa:	e008      	b.n	8006a0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069fc:	f7fd fec2 	bl	8004784 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e057      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a0e:	4b10      	ldr	r3, [pc, #64]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0f0      	beq.n	80069fc <HAL_RCC_OscConfig+0x478>
 8006a1a:	e04f      	b.n	8006abc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a0b      	ldr	r2, [pc, #44]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fd feac 	bl	8004784 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a30:	f7fd fea8 	bl	8004784 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e03d      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a42:	4b03      	ldr	r3, [pc, #12]	@ (8006a50 <HAL_RCC_OscConfig+0x4cc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x4ac>
 8006a4e:	e035      	b.n	8006abc <HAL_RCC_OscConfig+0x538>
 8006a50:	40023800 	.word	0x40023800
 8006a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac8 <HAL_RCC_OscConfig+0x544>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d028      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d121      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d11a      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a88:	4013      	ands	r3, r2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d111      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d107      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d001      	beq.n	8006abc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40023800 	.word	0x40023800

08006acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0d0      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d910      	bls.n	8006b14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af2:	4b67      	ldr	r3, [pc, #412]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f023 020f 	bic.w	r2, r3, #15
 8006afa:	4965      	ldr	r1, [pc, #404]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b02:	4b63      	ldr	r3, [pc, #396]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d001      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0b8      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d020      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b2c:	4b59      	ldr	r3, [pc, #356]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	4a58      	ldr	r2, [pc, #352]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b44:	4b53      	ldr	r3, [pc, #332]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4a52      	ldr	r2, [pc, #328]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b50:	4b50      	ldr	r3, [pc, #320]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	494d      	ldr	r1, [pc, #308]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d040      	beq.n	8006bf0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d107      	bne.n	8006b86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b76:	4b47      	ldr	r3, [pc, #284]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d115      	bne.n	8006bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e07f      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b8e:	4b41      	ldr	r3, [pc, #260]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e073      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e06b      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bae:	4b39      	ldr	r3, [pc, #228]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f023 0203 	bic.w	r2, r3, #3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4936      	ldr	r1, [pc, #216]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc0:	f7fd fde0 	bl	8004784 <HAL_GetTick>
 8006bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc6:	e00a      	b.n	8006bde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc8:	f7fd fddc 	bl	8004784 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e053      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bde:	4b2d      	ldr	r3, [pc, #180]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 020c 	and.w	r2, r3, #12
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d1eb      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf0:	4b27      	ldr	r3, [pc, #156]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d210      	bcs.n	8006c20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bfe:	4b24      	ldr	r3, [pc, #144]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f023 020f 	bic.w	r2, r3, #15
 8006c06:	4922      	ldr	r1, [pc, #136]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c0e:	4b20      	ldr	r3, [pc, #128]	@ (8006c90 <HAL_RCC_ClockConfig+0x1c4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d001      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e032      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d008      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c2c:	4b19      	ldr	r3, [pc, #100]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	4916      	ldr	r1, [pc, #88]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c4a:	4b12      	ldr	r3, [pc, #72]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	490e      	ldr	r1, [pc, #56]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c5e:	f000 f821 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8006c62:	4602      	mov	r2, r0
 8006c64:	4b0b      	ldr	r3, [pc, #44]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c8>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	091b      	lsrs	r3, r3, #4
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	490a      	ldr	r1, [pc, #40]	@ (8006c98 <HAL_RCC_ClockConfig+0x1cc>)
 8006c70:	5ccb      	ldrb	r3, [r1, r3]
 8006c72:	fa22 f303 	lsr.w	r3, r2, r3
 8006c76:	4a09      	ldr	r2, [pc, #36]	@ (8006c9c <HAL_RCC_ClockConfig+0x1d0>)
 8006c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1d4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fd fd3c 	bl	80046fc <HAL_InitTick>

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40023c00 	.word	0x40023c00
 8006c94:	40023800 	.word	0x40023800
 8006c98:	080162d8 	.word	0x080162d8
 8006c9c:	20000000 	.word	0x20000000
 8006ca0:	20000038 	.word	0x20000038

08006ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca8:	b090      	sub	sp, #64	@ 0x40
 8006caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cbc:	4b59      	ldr	r3, [pc, #356]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 030c 	and.w	r3, r3, #12
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d00d      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	f200 80a1 	bhi.w	8006e10 <HAL_RCC_GetSysClockFreq+0x16c>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d003      	beq.n	8006cde <HAL_RCC_GetSysClockFreq+0x3a>
 8006cd6:	e09b      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cd8:	4b53      	ldr	r3, [pc, #332]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8006cda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006cdc:	e09b      	b.n	8006e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cde:	4b53      	ldr	r3, [pc, #332]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8006ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ce2:	e098      	b.n	8006e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cee:	4b4d      	ldr	r3, [pc, #308]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d028      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	099b      	lsrs	r3, r3, #6
 8006d00:	2200      	movs	r2, #0
 8006d02:	623b      	str	r3, [r7, #32]
 8006d04:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4b47      	ldr	r3, [pc, #284]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8006d10:	fb03 f201 	mul.w	r2, r3, r1
 8006d14:	2300      	movs	r3, #0
 8006d16:	fb00 f303 	mul.w	r3, r0, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	4a43      	ldr	r2, [pc, #268]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8006d1e:	fba0 1202 	umull	r1, r2, r0, r2
 8006d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d24:	460a      	mov	r2, r1
 8006d26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d2a:	4413      	add	r3, r2
 8006d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d30:	2200      	movs	r2, #0
 8006d32:	61bb      	str	r3, [r7, #24]
 8006d34:	61fa      	str	r2, [r7, #28]
 8006d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006d3e:	f7f9 ffb3 	bl	8000ca8 <__aeabi_uldivmod>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4613      	mov	r3, r2
 8006d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d4a:	e053      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d4c:	4b35      	ldr	r3, [pc, #212]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	099b      	lsrs	r3, r3, #6
 8006d52:	2200      	movs	r2, #0
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	617a      	str	r2, [r7, #20]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d5e:	f04f 0b00 	mov.w	fp, #0
 8006d62:	4652      	mov	r2, sl
 8006d64:	465b      	mov	r3, fp
 8006d66:	f04f 0000 	mov.w	r0, #0
 8006d6a:	f04f 0100 	mov.w	r1, #0
 8006d6e:	0159      	lsls	r1, r3, #5
 8006d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d74:	0150      	lsls	r0, r2, #5
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	ebb2 080a 	subs.w	r8, r2, sl
 8006d7e:	eb63 090b 	sbc.w	r9, r3, fp
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d96:	ebb2 0408 	subs.w	r4, r2, r8
 8006d9a:	eb63 0509 	sbc.w	r5, r3, r9
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	00eb      	lsls	r3, r5, #3
 8006da8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dac:	00e2      	lsls	r2, r4, #3
 8006dae:	4614      	mov	r4, r2
 8006db0:	461d      	mov	r5, r3
 8006db2:	eb14 030a 	adds.w	r3, r4, sl
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	eb45 030b 	adc.w	r3, r5, fp
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dca:	4629      	mov	r1, r5
 8006dcc:	028b      	lsls	r3, r1, #10
 8006dce:	4621      	mov	r1, r4
 8006dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	028a      	lsls	r2, r1, #10
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dde:	2200      	movs	r2, #0
 8006de0:	60bb      	str	r3, [r7, #8]
 8006de2:	60fa      	str	r2, [r7, #12]
 8006de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006de8:	f7f9 ff5e 	bl	8000ca8 <__aeabi_uldivmod>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4613      	mov	r3, r2
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006df4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	0c1b      	lsrs	r3, r3, #16
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	3301      	adds	r3, #1
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006e04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e0e:	e002      	b.n	8006e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e10:	4b05      	ldr	r3, [pc, #20]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3740      	adds	r7, #64	@ 0x40
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e22:	bf00      	nop
 8006e24:	40023800 	.word	0x40023800
 8006e28:	00f42400 	.word	0x00f42400
 8006e2c:	017d7840 	.word	0x017d7840

08006e30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e34:	4b03      	ldr	r3, [pc, #12]	@ (8006e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	20000000 	.word	0x20000000

08006e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e4c:	f7ff fff0 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e50:	4602      	mov	r2, r0
 8006e52:	4b05      	ldr	r3, [pc, #20]	@ (8006e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	0a9b      	lsrs	r3, r3, #10
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	4903      	ldr	r1, [pc, #12]	@ (8006e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e5e:	5ccb      	ldrb	r3, [r1, r3]
 8006e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	080162e8 	.word	0x080162e8

08006e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e74:	f7ff ffdc 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	0b5b      	lsrs	r3, r3, #13
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	4903      	ldr	r1, [pc, #12]	@ (8006e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e86:	5ccb      	ldrb	r3, [r1, r3]
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40023800 	.word	0x40023800
 8006e94:	080162e8 	.word	0x080162e8

08006e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d012      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ec0:	4b69      	ldr	r3, [pc, #420]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	4a68      	ldr	r2, [pc, #416]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006eca:	6093      	str	r3, [r2, #8]
 8006ecc:	4b66      	ldr	r3, [pc, #408]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed4:	4964      	ldr	r1, [pc, #400]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d017      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ef8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	4959      	ldr	r1, [pc, #356]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f10:	d101      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f12:	2301      	movs	r3, #1
 8006f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d017      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3c:	494a      	ldr	r1, [pc, #296]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f4c:	d101      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 808b 	beq.w	8007092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	4a39      	ldr	r2, [pc, #228]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f88:	4b37      	ldr	r3, [pc, #220]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f94:	4b35      	ldr	r3, [pc, #212]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a34      	ldr	r2, [pc, #208]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa0:	f7fd fbf0 	bl	8004784 <HAL_GetTick>
 8006fa4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fa6:	e008      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa8:	f7fd fbec 	bl	8004784 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b64      	cmp	r3, #100	@ 0x64
 8006fb4:	d901      	bls.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e357      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fba:	4b2c      	ldr	r3, [pc, #176]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fc6:	4b28      	ldr	r3, [pc, #160]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d035      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d02e      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fe4:	4b20      	ldr	r3, [pc, #128]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fee:	4b1e      	ldr	r3, [pc, #120]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ff8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007004:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007006:	4a18      	ldr	r2, [pc, #96]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800700c:	4b16      	ldr	r3, [pc, #88]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b01      	cmp	r3, #1
 8007016:	d114      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fd fbb4 	bl	8004784 <HAL_GetTick>
 800701c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800701e:	e00a      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007020:	f7fd fbb0 	bl	8004784 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800702e:	4293      	cmp	r3, r2
 8007030:	d901      	bls.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e319      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007036:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0ee      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800704a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800704e:	d111      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007050:	4b05      	ldr	r3, [pc, #20]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800705c:	4b04      	ldr	r3, [pc, #16]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800705e:	400b      	ands	r3, r1
 8007060:	4901      	ldr	r1, [pc, #4]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007062:	4313      	orrs	r3, r2
 8007064:	608b      	str	r3, [r1, #8]
 8007066:	e00b      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007068:	40023800 	.word	0x40023800
 800706c:	40007000 	.word	0x40007000
 8007070:	0ffffcff 	.word	0x0ffffcff
 8007074:	4baa      	ldr	r3, [pc, #680]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	4aa9      	ldr	r2, [pc, #676]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800707a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800707e:	6093      	str	r3, [r2, #8]
 8007080:	4ba7      	ldr	r3, [pc, #668]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007082:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800708c:	49a4      	ldr	r1, [pc, #656]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800708e:	4313      	orrs	r3, r2
 8007090:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b00      	cmp	r3, #0
 800709c:	d010      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800709e:	4ba0      	ldr	r3, [pc, #640]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070a4:	4a9e      	ldr	r2, [pc, #632]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80070ae:	4b9c      	ldr	r3, [pc, #624]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b8:	4999      	ldr	r1, [pc, #612]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070cc:	4b94      	ldr	r3, [pc, #592]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070da:	4991      	ldr	r1, [pc, #580]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070ee:	4b8c      	ldr	r3, [pc, #560]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070fc:	4988      	ldr	r1, [pc, #544]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007110:	4b83      	ldr	r3, [pc, #524]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800711e:	4980      	ldr	r1, [pc, #512]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007120:	4313      	orrs	r3, r2
 8007122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007132:	4b7b      	ldr	r3, [pc, #492]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007138:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007140:	4977      	ldr	r1, [pc, #476]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007142:	4313      	orrs	r3, r2
 8007144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007154:	4b72      	ldr	r3, [pc, #456]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715a:	f023 0203 	bic.w	r2, r3, #3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007162:	496f      	ldr	r1, [pc, #444]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007176:	4b6a      	ldr	r3, [pc, #424]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800717c:	f023 020c 	bic.w	r2, r3, #12
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007184:	4966      	ldr	r1, [pc, #408]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007198:	4b61      	ldr	r3, [pc, #388]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071a6:	495e      	ldr	r1, [pc, #376]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071ba:	4b59      	ldr	r3, [pc, #356]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c8:	4955      	ldr	r1, [pc, #340]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071dc:	4b50      	ldr	r3, [pc, #320]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ea:	494d      	ldr	r1, [pc, #308]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80071fe:	4b48      	ldr	r3, [pc, #288]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007204:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720c:	4944      	ldr	r1, [pc, #272]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800720e:	4313      	orrs	r3, r2
 8007210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007220:	4b3f      	ldr	r3, [pc, #252]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007226:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800722e:	493c      	ldr	r1, [pc, #240]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007242:	4b37      	ldr	r3, [pc, #220]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007248:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007250:	4933      	ldr	r1, [pc, #204]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007264:	4b2e      	ldr	r3, [pc, #184]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800726a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007272:	492b      	ldr	r1, [pc, #172]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007274:	4313      	orrs	r3, r2
 8007276:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d011      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007286:	4b26      	ldr	r3, [pc, #152]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007294:	4922      	ldr	r1, [pc, #136]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a4:	d101      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072a6:	2301      	movs	r3, #1
 80072a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80072b6:	2301      	movs	r3, #1
 80072b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072c6:	4b16      	ldr	r3, [pc, #88]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d4:	4912      	ldr	r1, [pc, #72]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00b      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072f8:	4909      	ldr	r1, [pc, #36]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d006      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 80d9 	beq.w	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007314:	4b02      	ldr	r3, [pc, #8]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a01      	ldr	r2, [pc, #4]	@ (8007320 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800731a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800731e:	e001      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007320:	40023800 	.word	0x40023800
 8007324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007326:	f7fd fa2d 	bl	8004784 <HAL_GetTick>
 800732a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800732c:	e008      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800732e:	f7fd fa29 	bl	8004784 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b64      	cmp	r3, #100	@ 0x64
 800733a:	d901      	bls.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e194      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007340:	4b6c      	ldr	r3, [pc, #432]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f0      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d021      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735c:	2b00      	cmp	r3, #0
 800735e:	d11d      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007360:	4b64      	ldr	r3, [pc, #400]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007366:	0c1b      	lsrs	r3, r3, #16
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800736e:	4b61      	ldr	r3, [pc, #388]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007374:	0e1b      	lsrs	r3, r3, #24
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	019a      	lsls	r2, r3, #6
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	041b      	lsls	r3, r3, #16
 8007386:	431a      	orrs	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	061b      	lsls	r3, r3, #24
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	071b      	lsls	r3, r3, #28
 8007394:	4957      	ldr	r1, [pc, #348]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073b0:	d00a      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d02e      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073c6:	d129      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073c8:	4b4a      	ldr	r3, [pc, #296]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073ce:	0c1b      	lsrs	r3, r3, #16
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073d6:	4b47      	ldr	r3, [pc, #284]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073dc:	0f1b      	lsrs	r3, r3, #28
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	019a      	lsls	r2, r3, #6
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	041b      	lsls	r3, r3, #16
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	061b      	lsls	r3, r3, #24
 80073f6:	431a      	orrs	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	071b      	lsls	r3, r3, #28
 80073fc:	493d      	ldr	r1, [pc, #244]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007404:	4b3b      	ldr	r3, [pc, #236]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800740a:	f023 021f 	bic.w	r2, r3, #31
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007412:	3b01      	subs	r3, #1
 8007414:	4937      	ldr	r1, [pc, #220]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007416:	4313      	orrs	r3, r2
 8007418:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01d      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007428:	4b32      	ldr	r3, [pc, #200]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800742a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800742e:	0e1b      	lsrs	r3, r3, #24
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007436:	4b2f      	ldr	r3, [pc, #188]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800743c:	0f1b      	lsrs	r3, r3, #28
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	019a      	lsls	r2, r3, #6
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	041b      	lsls	r3, r3, #16
 8007450:	431a      	orrs	r2, r3
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	061b      	lsls	r3, r3, #24
 8007456:	431a      	orrs	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	071b      	lsls	r3, r3, #28
 800745c:	4925      	ldr	r1, [pc, #148]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d011      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	019a      	lsls	r2, r3, #6
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	041b      	lsls	r3, r3, #16
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	061b      	lsls	r3, r3, #24
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	071b      	lsls	r3, r3, #28
 800748c:	4919      	ldr	r1, [pc, #100]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800748e:	4313      	orrs	r3, r2
 8007490:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007494:	4b17      	ldr	r3, [pc, #92]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a16      	ldr	r2, [pc, #88]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800749a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800749e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a0:	f7fd f970 	bl	8004784 <HAL_GetTick>
 80074a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074a8:	f7fd f96c 	bl	8004784 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b64      	cmp	r3, #100	@ 0x64
 80074b4:	d901      	bls.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e0d7      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074ba:	4b0e      	ldr	r3, [pc, #56]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0f0      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	f040 80cd 	bne.w	8007668 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074ce:	4b09      	ldr	r3, [pc, #36]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a08      	ldr	r2, [pc, #32]	@ (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074da:	f7fd f953 	bl	8004784 <HAL_GetTick>
 80074de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074e0:	e00a      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074e2:	f7fd f94f 	bl	8004784 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b64      	cmp	r3, #100	@ 0x64
 80074ee:	d903      	bls.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e0ba      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80074f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074f8:	4b5e      	ldr	r3, [pc, #376]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007504:	d0ed      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d009      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007522:	2b00      	cmp	r3, #0
 8007524:	d02e      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	d12a      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800752e:	4b51      	ldr	r3, [pc, #324]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007534:	0c1b      	lsrs	r3, r3, #16
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800753c:	4b4d      	ldr	r3, [pc, #308]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007542:	0f1b      	lsrs	r3, r3, #28
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	019a      	lsls	r2, r3, #6
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	041b      	lsls	r3, r3, #16
 8007554:	431a      	orrs	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	061b      	lsls	r3, r3, #24
 800755c:	431a      	orrs	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	071b      	lsls	r3, r3, #28
 8007562:	4944      	ldr	r1, [pc, #272]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007564:	4313      	orrs	r3, r2
 8007566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800756a:	4b42      	ldr	r3, [pc, #264]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800756c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007570:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007578:	3b01      	subs	r3, #1
 800757a:	021b      	lsls	r3, r3, #8
 800757c:	493d      	ldr	r1, [pc, #244]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d022      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007594:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007598:	d11d      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800759a:	4b36      	ldr	r3, [pc, #216]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800759c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a0:	0e1b      	lsrs	r3, r3, #24
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075a8:	4b32      	ldr	r3, [pc, #200]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ae:	0f1b      	lsrs	r3, r3, #28
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	019a      	lsls	r2, r3, #6
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	041b      	lsls	r3, r3, #16
 80075c2:	431a      	orrs	r2, r3
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	061b      	lsls	r3, r3, #24
 80075c8:	431a      	orrs	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	071b      	lsls	r3, r3, #28
 80075ce:	4929      	ldr	r1, [pc, #164]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d028      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075e2:	4b24      	ldr	r3, [pc, #144]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e8:	0e1b      	lsrs	r3, r3, #24
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075f0:	4b20      	ldr	r3, [pc, #128]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f6:	0c1b      	lsrs	r3, r3, #16
 80075f8:	f003 0303 	and.w	r3, r3, #3
 80075fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	019a      	lsls	r2, r3, #6
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	041b      	lsls	r3, r3, #16
 8007608:	431a      	orrs	r2, r3
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	061b      	lsls	r3, r3, #24
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	071b      	lsls	r3, r3, #28
 8007616:	4917      	ldr	r1, [pc, #92]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800761e:	4b15      	ldr	r3, [pc, #84]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007624:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762c:	4911      	ldr	r1, [pc, #68]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007634:	4b0f      	ldr	r3, [pc, #60]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a0e      	ldr	r2, [pc, #56]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800763a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800763e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007640:	f7fd f8a0 	bl	8004784 <HAL_GetTick>
 8007644:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007646:	e008      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007648:	f7fd f89c 	bl	8004784 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b64      	cmp	r3, #100	@ 0x64
 8007654:	d901      	bls.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e007      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800765a:	4b06      	ldr	r3, [pc, #24]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007666:	d1ef      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3720      	adds	r7, #32
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	40023800 	.word	0x40023800

08007678 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a80      	ldr	r2, [pc, #512]	@ (8007888 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007688:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800768a:	4b80      	ldr	r3, [pc, #512]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800768c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007690:	099b      	lsrs	r3, r3, #6
 8007692:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800769a:	4b7c      	ldr	r3, [pc, #496]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800769c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076a0:	0c1b      	lsrs	r3, r3, #16
 80076a2:	f003 0203 	and.w	r2, r3, #3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076aa:	4b78      	ldr	r3, [pc, #480]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076b0:	0e1b      	lsrs	r3, r3, #24
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076ba:	4b74      	ldr	r3, [pc, #464]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c0:	0f1b      	lsrs	r3, r3, #28
 80076c2:	f003 0207 	and.w	r2, r3, #7
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80076ca:	4b70      	ldr	r3, [pc, #448]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d0:	099b      	lsrs	r3, r3, #6
 80076d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076da:	4b6c      	ldr	r3, [pc, #432]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e0:	0c1b      	lsrs	r3, r3, #16
 80076e2:	f003 0203 	and.w	r2, r3, #3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076ea:	4b68      	ldr	r3, [pc, #416]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f0:	0e1b      	lsrs	r3, r3, #24
 80076f2:	f003 020f 	and.w	r2, r3, #15
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076fa:	4b64      	ldr	r3, [pc, #400]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80076fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007700:	0f1b      	lsrs	r3, r3, #28
 8007702:	f003 0207 	and.w	r2, r3, #7
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800770a:	4b60      	ldr	r3, [pc, #384]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800770c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007710:	f003 021f 	and.w	r2, r3, #31
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8007718:	4b5c      	ldr	r3, [pc, #368]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800771a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	f003 021f 	and.w	r2, r3, #31
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007728:	4b58      	ldr	r3, [pc, #352]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800772a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800772e:	0c1b      	lsrs	r3, r3, #16
 8007730:	f003 0203 	and.w	r2, r3, #3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8007738:	4b54      	ldr	r3, [pc, #336]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800773a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800773e:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007746:	4b51      	ldr	r3, [pc, #324]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800774c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007754:	4b4d      	ldr	r3, [pc, #308]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007760:	4b4a      	ldr	r3, [pc, #296]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007766:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800776e:	4b47      	ldr	r3, [pc, #284]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007774:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800777c:	4b43      	ldr	r3, [pc, #268]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007782:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800778a:	4b40      	ldr	r3, [pc, #256]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800778c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007790:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007798:	4b3c      	ldr	r3, [pc, #240]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779e:	f003 0203 	and.w	r2, r3, #3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80077a6:	4b39      	ldr	r3, [pc, #228]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ac:	f003 020c 	and.w	r2, r3, #12
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80077b4:	4b35      	ldr	r3, [pc, #212]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ba:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80077c2:	4b32      	ldr	r3, [pc, #200]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c8:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80077d0:	4b2e      	ldr	r3, [pc, #184]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d6:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80077de:	4b2b      	ldr	r3, [pc, #172]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e4:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80077ec:	4b27      	ldr	r3, [pc, #156]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f2:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80077fa:	4b24      	ldr	r3, [pc, #144]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007800:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007808:	4b20      	ldr	r3, [pc, #128]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800780a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007816:	4b1d      	ldr	r3, [pc, #116]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781c:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007824:	4b19      	ldr	r3, [pc, #100]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800782a:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007832:	4b16      	ldr	r3, [pc, #88]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007838:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007842:	4b12      	ldr	r3, [pc, #72]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800784a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800784c:	4b0f      	ldr	r3, [pc, #60]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800784e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007850:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800785c:	4b0b      	ldr	r3, [pc, #44]	@ (800788c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800785e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007862:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007870:	e003      	b.n	800787a <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007878:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	00fffff1 	.word	0x00fffff1
 800788c:	40023800 	.word	0x40023800

08007890 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078ae:	f040 808d 	bne.w	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80078b2:	4b93      	ldr	r3, [pc, #588]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80078c0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078c8:	d07c      	beq.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078d0:	d87b      	bhi.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078de:	d039      	beq.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80078e0:	e073      	b.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80078e2:	4b87      	ldr	r3, [pc, #540]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d108      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078ee:	4b84      	ldr	r3, [pc, #528]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078f6:	4a83      	ldr	r2, [pc, #524]	@ (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	613b      	str	r3, [r7, #16]
 80078fe:	e007      	b.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007900:	4b7f      	ldr	r3, [pc, #508]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007908:	4a7f      	ldr	r2, [pc, #508]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800790a:	fbb2 f3f3 	udiv	r3, r2, r3
 800790e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007910:	4b7b      	ldr	r3, [pc, #492]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007916:	0e1b      	lsrs	r3, r3, #24
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800791e:	4b78      	ldr	r3, [pc, #480]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007924:	099b      	lsrs	r3, r3, #6
 8007926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	fb03 f202 	mul.w	r2, r3, r2
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	fbb2 f3f3 	udiv	r3, r2, r3
 8007936:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007938:	4b71      	ldr	r3, [pc, #452]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800793a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800793e:	0a1b      	lsrs	r3, r3, #8
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	3301      	adds	r3, #1
 8007946:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	617b      	str	r3, [r7, #20]
        break;
 8007952:	e03b      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007954:	4b6a      	ldr	r3, [pc, #424]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d108      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007960:	4b67      	ldr	r3, [pc, #412]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007968:	4a66      	ldr	r2, [pc, #408]	@ (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800796a:	fbb2 f3f3 	udiv	r3, r2, r3
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	e007      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007972:	4b63      	ldr	r3, [pc, #396]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800797a:	4a63      	ldr	r2, [pc, #396]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800797c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007980:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007982:	4b5f      	ldr	r3, [pc, #380]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007988:	0e1b      	lsrs	r3, r3, #24
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007990:	4b5b      	ldr	r3, [pc, #364]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007996:	099b      	lsrs	r3, r3, #6
 8007998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	fb03 f202 	mul.w	r2, r3, r2
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80079aa:	4b55      	ldr	r3, [pc, #340]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	3301      	adds	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c0:	617b      	str	r3, [r7, #20]
        break;
 80079c2:	e003      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80079c4:	4b51      	ldr	r3, [pc, #324]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80079c6:	617b      	str	r3, [r7, #20]
        break;
 80079c8:	e000      	b.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80079ca:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079d2:	f040 808d 	bne.w	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80079d6:	4b4a      	ldr	r3, [pc, #296]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079dc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80079e4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079ec:	d07c      	beq.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079f4:	d87b      	bhi.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a02:	d039      	beq.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007a04:	e073      	b.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a06:	4b3e      	ldr	r3, [pc, #248]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d108      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a12:	4b3b      	ldr	r3, [pc, #236]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	e007      	b.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a24:	4b36      	ldr	r3, [pc, #216]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a2c:	4a36      	ldr	r2, [pc, #216]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a32:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007a34:	4b32      	ldr	r3, [pc, #200]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a3a:	0e1b      	lsrs	r3, r3, #24
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007a42:	4b2f      	ldr	r3, [pc, #188]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a48:	099b      	lsrs	r3, r3, #6
 8007a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	fb03 f202 	mul.w	r2, r3, r2
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007a5c:	4b28      	ldr	r3, [pc, #160]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a62:	0a1b      	lsrs	r3, r3, #8
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	3301      	adds	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	617b      	str	r3, [r7, #20]
        break;
 8007a76:	e03b      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a78:	4b21      	ldr	r3, [pc, #132]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d108      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a84:	4b1e      	ldr	r3, [pc, #120]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	e007      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a96:	4b1a      	ldr	r3, [pc, #104]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007aa6:	4b16      	ldr	r3, [pc, #88]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aac:	0e1b      	lsrs	r3, r3, #24
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007ab4:	4b12      	ldr	r3, [pc, #72]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aba:	099b      	lsrs	r3, r3, #6
 8007abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	fb03 f202 	mul.w	r2, r3, r2
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007acc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007ace:	4b0c      	ldr	r3, [pc, #48]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ad4:	f003 031f 	and.w	r3, r3, #31
 8007ad8:	3301      	adds	r3, #1
 8007ada:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae4:	617b      	str	r3, [r7, #20]
        break;
 8007ae6:	e003      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ae8:	4b08      	ldr	r3, [pc, #32]	@ (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007aea:	617b      	str	r3, [r7, #20]
        break;
 8007aec:	e000      	b.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007aee:	bf00      	nop
      }
    }
  }

  return frequency;
 8007af0:	697b      	ldr	r3, [r7, #20]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40023800 	.word	0x40023800
 8007b04:	00f42400 	.word	0x00f42400
 8007b08:	017d7840 	.word	0x017d7840
 8007b0c:	00bb8000 	.word	0x00bb8000

08007b10 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e156      	b.n	8007ddc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fa f8f6 	bl	8001d34 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fad5 	bl	8008100 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d00c      	beq.n	8007b78 <HAL_SAI_Init+0x68>
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d80d      	bhi.n	8007b7e <HAL_SAI_Init+0x6e>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_SAI_Init+0x5c>
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d003      	beq.n	8007b72 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007b6a:	e008      	b.n	8007b7e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61fb      	str	r3, [r7, #28]
      break;
 8007b70:	e006      	b.n	8007b80 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007b72:	2310      	movs	r3, #16
 8007b74:	61fb      	str	r3, [r7, #28]
      break;
 8007b76:	e003      	b.n	8007b80 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007b78:	2320      	movs	r3, #32
 8007b7a:	61fb      	str	r3, [r7, #28]
      break;
 8007b7c:	e000      	b.n	8007b80 <HAL_SAI_Init+0x70>
      break;
 8007b7e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d81e      	bhi.n	8007bc6 <HAL_SAI_Init+0xb6>
 8007b88:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <HAL_SAI_Init+0x80>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007ba1 	.word	0x08007ba1
 8007b94:	08007ba7 	.word	0x08007ba7
 8007b98:	08007baf 	.word	0x08007baf
 8007b9c:	08007bb7 	.word	0x08007bb7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
    }
    break;
 8007ba4:	e010      	b.n	8007bc8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007baa:	617b      	str	r3, [r7, #20]
    }
    break;
 8007bac:	e00c      	b.n	8007bc8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007bae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007bb2:	617b      	str	r3, [r7, #20]
    }
    break;
 8007bb4:	e008      	b.n	8007bc8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007bb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007bba:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007bc4:	e000      	b.n	8007bc8 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007bc6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a85      	ldr	r2, [pc, #532]	@ (8007de4 <HAL_SAI_Init+0x2d4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <HAL_SAI_Init+0xcc>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a84      	ldr	r2, [pc, #528]	@ (8007de8 <HAL_SAI_Init+0x2d8>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d103      	bne.n	8007be4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007bdc:	4a83      	ldr	r2, [pc, #524]	@ (8007dec <HAL_SAI_Init+0x2dc>)
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	e002      	b.n	8007bea <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007be4:	4a82      	ldr	r2, [pc, #520]	@ (8007df0 <HAL_SAI_Init+0x2e0>)
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04c      	beq.n	8007c8c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a7a      	ldr	r2, [pc, #488]	@ (8007de4 <HAL_SAI_Init+0x2d4>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d004      	beq.n	8007c0a <HAL_SAI_Init+0xfa>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a78      	ldr	r2, [pc, #480]	@ (8007de8 <HAL_SAI_Init+0x2d8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d104      	bne.n	8007c14 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007c0a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007c0e:	f7ff fe3f 	bl	8007890 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c12:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a76      	ldr	r2, [pc, #472]	@ (8007df4 <HAL_SAI_Init+0x2e4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <HAL_SAI_Init+0x118>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a75      	ldr	r2, [pc, #468]	@ (8007df8 <HAL_SAI_Init+0x2e8>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d104      	bne.n	8007c32 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007c28:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007c2c:	f7ff fe30 	bl	8007890 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c30:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	025b      	lsls	r3, r3, #9
 8007c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c48:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4a6b      	ldr	r2, [pc, #428]	@ (8007dfc <HAL_SAI_Init+0x2ec>)
 8007c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c52:	08da      	lsrs	r2, r3, #3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007c58:	68f9      	ldr	r1, [r7, #12]
 8007c5a:	4b68      	ldr	r3, [pc, #416]	@ (8007dfc <HAL_SAI_Init+0x2ec>)
 8007c5c:	fba3 2301 	umull	r2, r3, r3, r1
 8007c60:	08da      	lsrs	r2, r3, #3
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	1aca      	subs	r2, r1, r3
 8007c6c:	2a08      	cmp	r2, #8
 8007c6e:	d904      	bls.n	8007c7a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d104      	bne.n	8007c8c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	085a      	lsrs	r2, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_SAI_Init+0x18c>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d109      	bne.n	8007cb0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_SAI_Init+0x198>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e001      	b.n	8007cac <HAL_SAI_Init+0x19c>
 8007ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cac:	61bb      	str	r3, [r7, #24]
 8007cae:	e008      	b.n	8007cc2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d102      	bne.n	8007cbe <HAL_SAI_Init+0x1ae>
 8007cb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cbc:	e000      	b.n	8007cc0 <HAL_SAI_Init+0x1b0>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6819      	ldr	r1, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8007e00 <HAL_SAI_Init+0x2f0>)
 8007cce:	400b      	ands	r3, r1
 8007cd0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6819      	ldr	r1, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007ce6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cec:	431a      	orrs	r2, r3
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8007cfa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d06:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	051b      	lsls	r3, r3, #20
 8007d0e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6859      	ldr	r1, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b38      	ldr	r3, [pc, #224]	@ (8007e04 <HAL_SAI_Init+0x2f4>)
 8007d24:	400b      	ands	r3, r1
 8007d26:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6859      	ldr	r1, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6899      	ldr	r1, [r3, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	4b2d      	ldr	r3, [pc, #180]	@ (8007e08 <HAL_SAI_Init+0x2f8>)
 8007d52:	400b      	ands	r3, r1
 8007d54:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6899      	ldr	r1, [r3, #8]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d60:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007d66:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007d6c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007d72:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007d7c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68d9      	ldr	r1, [r3, #12]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007d94:	400b      	ands	r3, r1
 8007d96:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68d9      	ldr	r1, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dac:	041b      	lsls	r3, r3, #16
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007db4:	3b01      	subs	r3, #1
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3720      	adds	r7, #32
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	40015804 	.word	0x40015804
 8007de8:	40015824 	.word	0x40015824
 8007dec:	40015800 	.word	0x40015800
 8007df0:	40015c00 	.word	0x40015c00
 8007df4:	40015c04 	.word	0x40015c04
 8007df8:	40015c24 	.word	0x40015c24
 8007dfc:	cccccccd 	.word	0xcccccccd
 8007e00:	ff05c010 	.word	0xff05c010
 8007e04:	ffff1ff0 	.word	0xffff1ff0
 8007e08:	fff88000 	.word	0xfff88000

08007e0c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e027      	b.n	8007e6e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f04f 32ff 	mov.w	r2, #4294967295
 8007e36:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f961 	bl	8008100 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0208 	orr.w	r2, r2, #8
 8007e4c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fa f80c 	bl	8001e6c <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_SAI_DMAStop+0x1a>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e061      	b.n	8007f54 <HAL_SAI_DMAStop+0xde>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f931 	bl	8008100 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007eac:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d01c      	beq.n	8007ef0 <HAL_SAI_DMAStop+0x7a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b12      	cmp	r3, #18
 8007ec0:	d116      	bne.n	8007ef0 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fc ff0a 	bl	8004ce0 <HAL_DMA_Abort>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed8:	2b80      	cmp	r3, #128	@ 0x80
 8007eda:	d009      	beq.n	8007ef0 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ee6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01c      	beq.n	8007f32 <HAL_SAI_DMAStop+0xbc>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b22      	cmp	r3, #34	@ 0x22
 8007f02:	d116      	bne.n	8007f32 <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fc fee9 	bl	8004ce0 <HAL_DMA_Abort>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00e      	beq.n	8007f32 <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1a:	2b80      	cmp	r3, #128	@ 0x80
 8007f1c:	d009      	beq.n	8007f32 <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f042 0208 	orr.w	r2, r2, #8
 8007f40:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4613      	mov	r3, r2
 8007f68:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <HAL_SAI_Receive_DMA+0x1a>
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e074      	b.n	8008064 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d16d      	bne.n	8008062 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_SAI_Receive_DMA+0x38>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e067      	b.n	8008064 <HAL_SAI_Receive_DMA+0x108>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	88fa      	ldrh	r2, [r7, #6]
 8007fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	88fa      	ldrh	r2, [r7, #6]
 8007fae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2222      	movs	r2, #34	@ 0x22
 8007fbe:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc6:	4a29      	ldr	r2, [pc, #164]	@ (800806c <HAL_SAI_Receive_DMA+0x110>)
 8007fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fce:	4a28      	ldr	r2, [pc, #160]	@ (8008070 <HAL_SAI_Receive_DMA+0x114>)
 8007fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	4a27      	ldr	r2, [pc, #156]	@ (8008074 <HAL_SAI_Receive_DMA+0x118>)
 8007fd8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fde:	2200      	movs	r2, #0
 8007fe0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	331c      	adds	r3, #28
 8007fec:	4619      	mov	r1, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ffa:	f7fc fe11 	bl	8004c20 <HAL_DMA_Start_IT>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e029      	b.n	8008064 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008010:	2100      	movs	r1, #0
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f83e 	bl	8008094 <SAI_InterruptFlag>
 8008018:	4601      	mov	r1, r0
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691a      	ldr	r2, [r3, #16]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008036:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d107      	bne.n	8008056 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008054:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	e000      	b.n	8008064 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8008062:	2302      	movs	r3, #2
  }
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	080081d1 	.word	0x080081d1
 8008070:	08008171 	.word	0x08008171
 8008074:	080081ed 	.word	0x080081ed

08008078 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008086:	b2db      	uxtb	r3, r3
}
 8008088:	4618      	mov	r0, r3
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800809e:	2301      	movs	r3, #1
 80080a0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d103      	bne.n	80080b0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f043 0308 	orr.w	r3, r3, #8
 80080ae:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d10b      	bne.n	80080d0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d003      	beq.n	80080c8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d103      	bne.n	80080d0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f043 0310 	orr.w	r3, r3, #16
 80080ce:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d003      	beq.n	80080e0 <SAI_InterruptFlag+0x4c>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d104      	bne.n	80080ea <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e003      	b.n	80080f2 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f043 0304 	orr.w	r3, r3, #4
 80080f0:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80080f2:	68fb      	ldr	r3, [r7, #12]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008108:	4b17      	ldr	r3, [pc, #92]	@ (8008168 <SAI_Disable+0x68>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a17      	ldr	r2, [pc, #92]	@ (800816c <SAI_Disable+0x6c>)
 800810e:	fba2 2303 	umull	r2, r3, r2, r3
 8008112:	0b1b      	lsrs	r3, r3, #12
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800812a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	1e5a      	subs	r2, r3, #1
 8008130:	60fa      	str	r2, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800813c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	72fb      	strb	r3, [r7, #11]
      break;
 800814a:	e006      	b.n	800815a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e8      	bne.n	800812c <SAI_Disable+0x2c>

  return status;
 800815a:	7afb      	ldrb	r3, [r7, #11]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	20000000 	.word	0x20000000
 800816c:	95cbec1b 	.word	0x95cbec1b

08008170 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008186:	d01c      	beq.n	80081c2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008196:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80081a0:	2100      	movs	r1, #0
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff ff76 	bl	8008094 <SAI_InterruptFlag>
 80081a8:	4603      	mov	r3, r0
 80081aa:	43d9      	mvns	r1, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	400a      	ands	r2, r1
 80081b8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f7fc f8f2 	bl	80043ac <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f7fc f8ee 	bl	80043c0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80081e4:	bf00      	nop
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008200:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800820e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008210:	2b01      	cmp	r3, #1
 8008212:	d004      	beq.n	800821e <SAI_DMAError+0x32>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821a:	2b01      	cmp	r3, #1
 800821c:	d112      	bne.n	8008244 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800822c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff ff66 	bl	8008100 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7fb feb1 	bl	8003fac <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e022      	b.n	80082aa <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d105      	bne.n	800827c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7f9 fe4a 	bl	8001f10 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2203      	movs	r2, #3
 8008280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f815 	bl	80082b4 <HAL_SD_InitCard>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e00a      	b.n	80082aa <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082b4:	b5b0      	push	{r4, r5, r7, lr}
 80082b6:	b08e      	sub	sp, #56	@ 0x38
 80082b8:	af04      	add	r7, sp, #16
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80082bc:	2300      	movs	r3, #0
 80082be:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80082c8:	2300      	movs	r3, #0
 80082ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80082d0:	2376      	movs	r3, #118	@ 0x76
 80082d2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681d      	ldr	r5, [r3, #0]
 80082d8:	466c      	mov	r4, sp
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082e6:	f107 0308 	add.w	r3, r7, #8
 80082ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082ec:	4628      	mov	r0, r5
 80082ee:	f001 fddf 	bl	8009eb0 <SDMMC_Init>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80082f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e059      	b.n	80083b8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008312:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4618      	mov	r0, r3
 800831a:	f001 fe13 	bl	8009f44 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800832c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800832e:	2002      	movs	r0, #2
 8008330:	f7fc fa34 	bl	800479c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 ff59 	bl	80091ec <SD_PowerON>
 800833a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	431a      	orrs	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e02e      	b.n	80083b8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fe78 	bl	8009050 <SD_InitCard>
 8008360:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e01b      	b.n	80083b8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fe6d 	bl	800a068 <SDMMC_CmdBlockLength>
 800838e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00f      	beq.n	80083b6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a09      	ldr	r2, [pc, #36]	@ (80083c0 <HAL_SD_InitCard+0x10c>)
 800839c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	431a      	orrs	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3728      	adds	r7, #40	@ 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bdb0      	pop	{r4, r5, r7, pc}
 80083c0:	004005ff 	.word	0x004005ff

080083c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08c      	sub	sp, #48	@ 0x30
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d107      	bne.n	80083ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e0c3      	b.n	8008574 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	f040 80bc 	bne.w	8008572 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	441a      	add	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800840a:	429a      	cmp	r2, r3
 800840c:	d907      	bls.n	800841e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008412:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e0aa      	b.n	8008574 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2203      	movs	r2, #3
 8008422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800843c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008442:	4a4e      	ldr	r2, [pc, #312]	@ (800857c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008444:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844a:	4a4d      	ldr	r2, [pc, #308]	@ (8008580 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800844c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008452:	2200      	movs	r2, #0
 8008454:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845a:	2200      	movs	r2, #0
 800845c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3380      	adds	r3, #128	@ 0x80
 8008484:	4619      	mov	r1, r3
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	025b      	lsls	r3, r3, #9
 800848c:	089b      	lsrs	r3, r3, #2
 800848e:	f7fc fbc7 	bl	8004c20 <HAL_DMA_Start_IT>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d017      	beq.n	80084c8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80084a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a35      	ldr	r2, [pc, #212]	@ (8008584 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80084ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e055      	b.n	8008574 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0208 	orr.w	r2, r2, #8
 80084d6:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d002      	beq.n	80084e6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80084e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e2:	025b      	lsls	r3, r3, #9
 80084e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084e6:	f04f 33ff 	mov.w	r3, #4294967295
 80084ea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	025b      	lsls	r3, r3, #9
 80084f0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80084f2:	2390      	movs	r3, #144	@ 0x90
 80084f4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084f6:	2302      	movs	r3, #2
 80084f8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80084fe:	2301      	movs	r3, #1
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f107 0210 	add.w	r2, r7, #16
 800850a:	4611      	mov	r1, r2
 800850c:	4618      	mov	r0, r3
 800850e:	f001 fd7f 	bl	800a010 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d90a      	bls.n	800852e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2282      	movs	r2, #130	@ 0x82
 800851c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008524:	4618      	mov	r0, r3
 8008526:	f001 fde3 	bl	800a0f0 <SDMMC_CmdReadMultiBlock>
 800852a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800852c:	e009      	b.n	8008542 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2281      	movs	r2, #129	@ 0x81
 8008532:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800853a:	4618      	mov	r0, r3
 800853c:	f001 fdb6 	bl	800a0ac <SDMMC_CmdReadSingleBlock>
 8008540:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d012      	beq.n	800856e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a0d      	ldr	r2, [pc, #52]	@ (8008584 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800854e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008556:	431a      	orrs	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e002      	b.n	8008574 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	e000      	b.n	8008574 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008572:	2302      	movs	r3, #2
  }
}
 8008574:	4618      	mov	r0, r3
 8008576:	3730      	adds	r7, #48	@ 0x30
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	08008e5f 	.word	0x08008e5f
 8008580:	08008ed1 	.word	0x08008ed1
 8008584:	004005ff 	.word	0x004005ff

08008588 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08c      	sub	sp, #48	@ 0x30
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d107      	bne.n	80085b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e0c6      	b.n	800873e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	f040 80bf 	bne.w	800873c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	441a      	add	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d907      	bls.n	80085e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e0ad      	b.n	800873e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2203      	movs	r2, #3
 80085e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 021a 	orr.w	r2, r2, #26
 8008600:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008606:	4a50      	ldr	r2, [pc, #320]	@ (8008748 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008608:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800860e:	4a4f      	ldr	r2, [pc, #316]	@ (800874c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008610:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008616:	2200      	movs	r2, #0
 8008618:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861e:	2b01      	cmp	r3, #1
 8008620:	d002      	beq.n	8008628 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008624:	025b      	lsls	r3, r3, #9
 8008626:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d90a      	bls.n	8008644 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	22a0      	movs	r2, #160	@ 0xa0
 8008632:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fd9c 	bl	800a178 <SDMMC_CmdWriteMultiBlock>
 8008640:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008642:	e009      	b.n	8008658 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2290      	movs	r2, #144	@ 0x90
 8008648:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008650:	4618      	mov	r0, r3
 8008652:	f001 fd6f 	bl	800a134 <SDMMC_CmdWriteSingleBlock>
 8008656:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d012      	beq.n	8008684 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a3b      	ldr	r2, [pc, #236]	@ (8008750 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008664:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800866a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866c:	431a      	orrs	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e05c      	b.n	800873e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0208 	orr.w	r2, r2, #8
 8008692:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008698:	2240      	movs	r2, #64	@ 0x40
 800869a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ac:	689a      	ldr	r2, [r3, #8]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3380      	adds	r3, #128	@ 0x80
 80086c4:	461a      	mov	r2, r3
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	025b      	lsls	r3, r3, #9
 80086ca:	089b      	lsrs	r3, r3, #2
 80086cc:	f7fc faa8 	bl	8004c20 <HAL_DMA_Start_IT>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d01a      	beq.n	800870c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 021a 	bic.w	r2, r2, #26
 80086e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a19      	ldr	r2, [pc, #100]	@ (8008750 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80086ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e018      	b.n	800873e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800870c:	f04f 33ff 	mov.w	r3, #4294967295
 8008710:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	025b      	lsls	r3, r3, #9
 8008716:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008718:	2390      	movs	r3, #144	@ 0x90
 800871a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800871c:	2300      	movs	r3, #0
 800871e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008720:	2300      	movs	r3, #0
 8008722:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008724:	2301      	movs	r3, #1
 8008726:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f107 0210 	add.w	r2, r7, #16
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f001 fc6c 	bl	800a010 <SDMMC_ConfigData>

      return HAL_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	e000      	b.n	800873e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800873c:	2302      	movs	r3, #2
  }
}
 800873e:	4618      	mov	r0, r3
 8008740:	3730      	adds	r7, #48	@ 0x30
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	08008e35 	.word	0x08008e35
 800874c:	08008ed1 	.word	0x08008ed1
 8008750:	004005ff 	.word	0x004005ff

08008754 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008760:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d008      	beq.n	8008782 <HAL_SD_IRQHandler+0x2e>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fdec 	bl	8009358 <SD_Read_IT>
 8008780:	e15a      	b.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 808d 	beq.w	80088ac <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800879a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b9a      	ldr	r3, [pc, #616]	@ (8008a10 <HAL_SD_IRQHandler+0x2bc>)
 80087a8:	400b      	ands	r3, r1
 80087aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0201 	bic.w	r2, r2, #1
 80087ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d039      	beq.n	800883a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f003 0302 	and.w	r3, r3, #2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <HAL_SD_IRQHandler+0x86>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d011      	beq.n	80087fe <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 fcec 	bl	800a1bc <SDMMC_CmdStopTransfer>
 80087e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d008      	beq.n	80087fe <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f921 	bl	8008a40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008806:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <HAL_SD_IRQHandler+0xd6>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f002 fc76 	bl	800b11c <HAL_SD_RxCpltCallback>
 8008830:	e102      	b.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f002 fc68 	bl	800b108 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008838:	e0fe      	b.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 80f9 	beq.w	8008a38 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b00      	cmp	r3, #0
 800884e:	d011      	beq.n	8008874 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4618      	mov	r0, r3
 8008856:	f001 fcb1 	bl	800a1bc <SDMMC_CmdStopTransfer>
 800885a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	431a      	orrs	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f8e6 	bl	8008a40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	f040 80dc 	bne.w	8008a38 <HAL_SD_IRQHandler+0x2e4>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	f040 80d6 	bne.w	8008a38 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0208 	bic.w	r2, r2, #8
 800889a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f002 fc2f 	bl	800b108 <HAL_SD_TxCpltCallback>
}
 80088aa:	e0c5      	b.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d008      	beq.n	80088cc <HAL_SD_IRQHandler+0x178>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fd98 	bl	80093fa <SD_Write_IT>
 80088ca:	e0b5      	b.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 80ae 	beq.w	8008a38 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ee:	f043 0202 	orr.w	r2, r3, #2
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088fc:	f003 0308 	and.w	r3, r3, #8
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008908:	f043 0208 	orr.w	r2, r3, #8
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b00      	cmp	r3, #0
 800891c:	d005      	beq.n	800892a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008922:	f043 0220 	orr.w	r2, r3, #32
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893c:	f043 0210 	orr.w	r2, r3, #16
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f240 523a 	movw	r2, #1338	@ 0x53a
 800894c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800895c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f001 fc2a 	bl	800a1bc <SDMMC_CmdStopTransfer>
 8008968:	4602      	mov	r2, r0
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0308 	and.w	r3, r3, #8
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f857 	bl	8008a40 <HAL_SD_ErrorCallback>
}
 8008992:	e051      	b.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800899a:	2b00      	cmp	r3, #0
 800899c:	d04c      	beq.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f003 0310 	and.w	r3, r3, #16
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d104      	bne.n	80089b2 <HAL_SD_IRQHandler+0x25e>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d011      	beq.n	80089d6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b6:	4a17      	ldr	r2, [pc, #92]	@ (8008a14 <HAL_SD_IRQHandler+0x2c0>)
 80089b8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fc f9fe 	bl	8004dc0 <HAL_DMA_Abort_IT>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d036      	beq.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fad0 	bl	8008f74 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80089d4:	e030      	b.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d104      	bne.n	80089ea <HAL_SD_IRQHandler+0x296>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d018      	beq.n	8008a1c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008a18 <HAL_SD_IRQHandler+0x2c4>)
 80089f0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fc f9e2 	bl	8004dc0 <HAL_DMA_Abort_IT>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01a      	beq.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 faeb 	bl	8008fe2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008a0c:	e014      	b.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
 8008a0e:	bf00      	nop
 8008a10:	ffff3ec5 	.word	0xffff3ec5
 8008a14:	08008f75 	.word	0x08008f75
 8008a18:	08008fe3 	.word	0x08008fe3
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f002 fb5f 	bl	800b0f4 <HAL_SD_AbortCallback>
}
 8008a36:	e7ff      	b.n	8008a38 <HAL_SD_IRQHandler+0x2e4>
 8008a38:	bf00      	nop
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a62:	0f9b      	lsrs	r3, r3, #30
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a6e:	0e9b      	lsrs	r3, r3, #26
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a80:	0e1b      	lsrs	r3, r3, #24
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0303 	and.w	r3, r3, #3
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a92:	0c1b      	lsrs	r3, r3, #16
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a9e:	0a1b      	lsrs	r3, r3, #8
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ab4:	0d1b      	lsrs	r3, r3, #20
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 030f 	and.w	r3, r3, #15
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ad2:	0bdb      	lsrs	r3, r3, #15
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ae4:	0b9b      	lsrs	r3, r3, #14
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008af6:	0b5b      	lsrs	r3, r3, #13
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b08:	0b1b      	lsrs	r3, r3, #12
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d163      	bne.n	8008bec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b28:	009a      	lsls	r2, r3, #2
 8008b2a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008b2e:	4013      	ands	r3, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008b34:	0f92      	lsrs	r2, r2, #30
 8008b36:	431a      	orrs	r2, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b40:	0edb      	lsrs	r3, r3, #27
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	f003 0307 	and.w	r3, r3, #7
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b52:	0e1b      	lsrs	r3, r3, #24
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b64:	0d5b      	lsrs	r3, r3, #21
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	f003 0307 	and.w	r3, r3, #7
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b76:	0c9b      	lsrs	r3, r3, #18
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b88:	0bdb      	lsrs	r3, r3, #15
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	7e1b      	ldrb	r3, [r3, #24]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	3302      	adds	r3, #2
 8008bac:	2201      	movs	r2, #1
 8008bae:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008bb6:	fb03 f202 	mul.w	r2, r3, r2
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	7a1b      	ldrb	r3, [r3, #8]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	2201      	movs	r2, #1
 8008bca:	409a      	lsls	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008bd8:	0a52      	lsrs	r2, r2, #9
 8008bda:	fb03 f202 	mul.w	r2, r3, r2
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008be8:	661a      	str	r2, [r3, #96]	@ 0x60
 8008bea:	e031      	b.n	8008c50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d11d      	bne.n	8008c30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bf8:	041b      	lsls	r3, r3, #16
 8008bfa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c02:	0c1b      	lsrs	r3, r3, #16
 8008c04:	431a      	orrs	r2, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	029a      	lsls	r2, r3, #10
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c24:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8008c2e:	e00f      	b.n	8008c50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a58      	ldr	r2, [pc, #352]	@ (8008d98 <HAL_SD_GetCardCSD+0x344>)
 8008c36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e09d      	b.n	8008d8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c54:	0b9b      	lsrs	r3, r3, #14
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c66:	09db      	lsrs	r3, r3, #7
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c88:	0fdb      	lsrs	r3, r3, #31
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c94:	0f5b      	lsrs	r3, r3, #29
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ca6:	0e9b      	lsrs	r3, r3, #26
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	f003 0307 	and.w	r3, r3, #7
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cb8:	0d9b      	lsrs	r3, r3, #22
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f003 030f 	and.w	r3, r3, #15
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cca:	0d5b      	lsrs	r3, r3, #21
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ce6:	0c1b      	lsrs	r3, r3, #16
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cfa:	0bdb      	lsrs	r3, r3, #15
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d0e:	0b9b      	lsrs	r3, r3, #14
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d22:	0b5b      	lsrs	r3, r3, #13
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d36:	0b1b      	lsrs	r3, r3, #12
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d4a:	0a9b      	lsrs	r3, r3, #10
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	004005ff 	.word	0x004005ff

08008d9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e00:	f107 030c 	add.w	r3, r7, #12
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fa7e 	bl	8009308 <SD_SendStatus>
 8008e0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	0a5b      	lsrs	r3, r3, #9
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e2a:	693b      	ldr	r3, [r7, #16]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e40:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e50:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e70:	2b82      	cmp	r3, #130	@ 0x82
 8008e72:	d111      	bne.n	8008e98 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f001 f99f 	bl	800a1bc <SDMMC_CmdStopTransfer>
 8008e7e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d008      	beq.n	8008e98 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7ff fdd4 	bl	8008a40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0208 	bic.w	r2, r2, #8
 8008ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008eb0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f002 f92b 	bl	800b11c <HAL_SD_RxCpltCallback>
#endif
}
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008edc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7fc f91a 	bl	8005118 <HAL_DMA_GetError>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d03e      	beq.n	8008f68 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d002      	beq.n	8008f06 <SD_DMAError+0x36>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d12d      	bne.n	8008f62 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a19      	ldr	r2, [pc, #100]	@ (8008f70 <SD_DMAError+0xa0>)
 8008f0c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f22:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008f2a:	6978      	ldr	r0, [r7, #20]
 8008f2c:	f7ff ff62 	bl	8008df4 <HAL_SD_GetCardState>
 8008f30:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b06      	cmp	r3, #6
 8008f36:	d002      	beq.n	8008f3e <SD_DMAError+0x6e>
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	d10a      	bne.n	8008f54 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 f93a 	bl	800a1bc <SDMMC_CmdStopTransfer>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008f62:	6978      	ldr	r0, [r7, #20]
 8008f64:	f7ff fd6c 	bl	8008a40 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008f68:	bf00      	nop
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	004005ff 	.word	0x004005ff

08008f74 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f80:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008f8a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f7ff ff31 	bl	8008df4 <HAL_SD_GetCardState>
 8008f92:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b06      	cmp	r3, #6
 8008fa6:	d002      	beq.n	8008fae <SD_DMATxAbort+0x3a>
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b05      	cmp	r3, #5
 8008fac:	d10a      	bne.n	8008fc4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f902 	bl	800a1bc <SDMMC_CmdStopTransfer>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d103      	bne.n	8008fd4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f002 f891 	bl	800b0f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008fd2:	e002      	b.n	8008fda <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7ff fd33 	bl	8008a40 <HAL_SD_ErrorCallback>
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008ff8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f7ff fefa 	bl	8008df4 <HAL_SD_GetCardState>
 8009000:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b06      	cmp	r3, #6
 8009014:	d002      	beq.n	800901c <SD_DMARxAbort+0x3a>
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b05      	cmp	r3, #5
 800901a:	d10a      	bne.n	8009032 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f001 f8cb 	bl	800a1bc <SDMMC_CmdStopTransfer>
 8009026:	4602      	mov	r2, r0
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902c:	431a      	orrs	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009036:	2b00      	cmp	r3, #0
 8009038:	d103      	bne.n	8009042 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f002 f85a 	bl	800b0f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009040:	e002      	b.n	8009048 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff fcfc 	bl	8008a40 <HAL_SD_ErrorCallback>
}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009050:	b5b0      	push	{r4, r5, r7, lr}
 8009052:	b094      	sub	sp, #80	@ 0x50
 8009054:	af04      	add	r7, sp, #16
 8009056:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009058:	2301      	movs	r3, #1
 800905a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 ff7d 	bl	8009f60 <SDMMC_GetPowerState>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d102      	bne.n	8009072 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800906c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009070:	e0b8      	b.n	80091e4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009076:	2b03      	cmp	r3, #3
 8009078:	d02f      	beq.n	80090da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4618      	mov	r0, r3
 8009080:	f001 f964 	bl	800a34c <SDMMC_CmdSendCID>
 8009084:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <SD_InitCard+0x40>
    {
      return errorstate;
 800908c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908e:	e0a9      	b.n	80091e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2100      	movs	r1, #0
 8009096:	4618      	mov	r0, r3
 8009098:	f000 ffa7 	bl	8009fea <SDMMC_GetResponse>
 800909c:	4602      	mov	r2, r0
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2104      	movs	r1, #4
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 ff9e 	bl	8009fea <SDMMC_GetResponse>
 80090ae:	4602      	mov	r2, r0
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2108      	movs	r1, #8
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 ff95 	bl	8009fea <SDMMC_GetResponse>
 80090c0:	4602      	mov	r2, r0
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	210c      	movs	r1, #12
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 ff8c 	bl	8009fea <SDMMC_GetResponse>
 80090d2:	4602      	mov	r2, r0
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d00d      	beq.n	80090fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f107 020e 	add.w	r2, r7, #14
 80090ea:	4611      	mov	r1, r2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f001 f96a 	bl	800a3c6 <SDMMC_CmdSetRelAdd>
 80090f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <SD_InitCard+0xae>
    {
      return errorstate;
 80090fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fc:	e072      	b.n	80091e4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009102:	2b03      	cmp	r3, #3
 8009104:	d036      	beq.n	8009174 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009106:	89fb      	ldrh	r3, [r7, #14]
 8009108:	461a      	mov	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009116:	041b      	lsls	r3, r3, #16
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f001 f934 	bl	800a388 <SDMMC_CmdSendCSD>
 8009120:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912a:	e05b      	b.n	80091e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2100      	movs	r1, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f000 ff59 	bl	8009fea <SDMMC_GetResponse>
 8009138:	4602      	mov	r2, r0
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2104      	movs	r1, #4
 8009144:	4618      	mov	r0, r3
 8009146:	f000 ff50 	bl	8009fea <SDMMC_GetResponse>
 800914a:	4602      	mov	r2, r0
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2108      	movs	r1, #8
 8009156:	4618      	mov	r0, r3
 8009158:	f000 ff47 	bl	8009fea <SDMMC_GetResponse>
 800915c:	4602      	mov	r2, r0
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	210c      	movs	r1, #12
 8009168:	4618      	mov	r0, r3
 800916a:	f000 ff3e 	bl	8009fea <SDMMC_GetResponse>
 800916e:	4602      	mov	r2, r0
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2104      	movs	r1, #4
 800917a:	4618      	mov	r0, r3
 800917c:	f000 ff35 	bl	8009fea <SDMMC_GetResponse>
 8009180:	4603      	mov	r3, r0
 8009182:	0d1a      	lsrs	r2, r3, #20
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009188:	f107 0310 	add.w	r3, r7, #16
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff fc60 	bl	8008a54 <HAL_SD_GetCardCSD>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800919a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800919e:	e021      	b.n	80091e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6819      	ldr	r1, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091a8:	041b      	lsls	r3, r3, #16
 80091aa:	2200      	movs	r2, #0
 80091ac:	461c      	mov	r4, r3
 80091ae:	4615      	mov	r5, r2
 80091b0:	4622      	mov	r2, r4
 80091b2:	462b      	mov	r3, r5
 80091b4:	4608      	mov	r0, r1
 80091b6:	f001 f823 	bl	800a200 <SDMMC_CmdSelDesel>
 80091ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80091bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <SD_InitCard+0x176>
  {
    return errorstate;
 80091c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c4:	e00e      	b.n	80091e4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681d      	ldr	r5, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	466c      	mov	r4, sp
 80091ce:	f103 0210 	add.w	r2, r3, #16
 80091d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80091d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091d8:	3304      	adds	r3, #4
 80091da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091dc:	4628      	mov	r0, r5
 80091de:	f000 fe67 	bl	8009eb0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3740      	adds	r7, #64	@ 0x40
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bdb0      	pop	{r4, r5, r7, pc}

080091ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f81e 	bl	800a246 <SDMMC_CmdGoIdleState>
 800920a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	e072      	b.n	80092fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4618      	mov	r0, r3
 800921c:	f001 f831 	bl	800a282 <SDMMC_CmdOperCond>
 8009220:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00d      	beq.n	8009244 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4618      	mov	r0, r3
 8009234:	f001 f807 	bl	800a246 <SDMMC_CmdGoIdleState>
 8009238:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d004      	beq.n	800924a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	e05b      	b.n	80092fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800924e:	2b01      	cmp	r3, #1
 8009250:	d137      	bne.n	80092c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2100      	movs	r1, #0
 8009258:	4618      	mov	r0, r3
 800925a:	f001 f831 	bl	800a2c0 <SDMMC_CmdAppCommand>
 800925e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d02d      	beq.n	80092c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009266:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800926a:	e047      	b.n	80092fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2100      	movs	r1, #0
 8009272:	4618      	mov	r0, r3
 8009274:	f001 f824 	bl	800a2c0 <SDMMC_CmdAppCommand>
 8009278:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <SD_PowerON+0x98>
    {
      return errorstate;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	e03b      	b.n	80092fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	491e      	ldr	r1, [pc, #120]	@ (8009304 <SD_PowerON+0x118>)
 800928a:	4618      	mov	r0, r3
 800928c:	f001 f83a 	bl	800a304 <SDMMC_CmdAppOperCommand>
 8009290:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009298:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800929c:	e02e      	b.n	80092fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fea0 	bl	8009fea <SDMMC_GetResponse>
 80092aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	0fdb      	lsrs	r3, r3, #31
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <SD_PowerON+0xcc>
 80092b4:	2301      	movs	r3, #1
 80092b6:	e000      	b.n	80092ba <SD_PowerON+0xce>
 80092b8:	2300      	movs	r3, #0
 80092ba:	613b      	str	r3, [r7, #16]

    count++;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	3301      	adds	r3, #1
 80092c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d802      	bhi.n	80092d2 <SD_PowerON+0xe6>
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0cc      	beq.n	800926c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80092d8:	4293      	cmp	r3, r2
 80092da:	d902      	bls.n	80092e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80092dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80092e0:	e00c      	b.n	80092fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80092f2:	e002      	b.n	80092fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	c1100000 	.word	0xc1100000

08009308 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009318:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800931c:	e018      	b.n	8009350 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009326:	041b      	lsls	r3, r3, #16
 8009328:	4619      	mov	r1, r3
 800932a:	4610      	mov	r0, r2
 800932c:	f001 f86c 	bl	800a408 <SDMMC_CmdSendStatus>
 8009330:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	e009      	b.n	8009350 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2100      	movs	r1, #0
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fe51 	bl	8009fea <SDMMC_GetResponse>
 8009348:	4602      	mov	r2, r0
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009364:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d03f      	beq.n	80093f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009372:	2300      	movs	r3, #0
 8009374:	617b      	str	r3, [r7, #20]
 8009376:	e033      	b.n	80093e0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fdc3 	bl	8009f08 <SDMMC_ReadFIFO>
 8009382:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	b2da      	uxtb	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	3301      	adds	r3, #1
 8009390:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	3b01      	subs	r3, #1
 8009396:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	b2da      	uxtb	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	0c1b      	lsrs	r3, r3, #16
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3301      	adds	r3, #1
 80093bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	0e1b      	lsrs	r3, r3, #24
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3301      	adds	r3, #1
 80093d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	3301      	adds	r3, #1
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	2b07      	cmp	r3, #7
 80093e4:	d9c8      	bls.n	8009378 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80093f2:	bf00      	nop
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b086      	sub	sp, #24
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d043      	beq.n	800949c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e037      	b.n	800948a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	3301      	adds	r3, #1
 8009424:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	3b01      	subs	r3, #1
 800942a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	021a      	lsls	r2, r3, #8
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	4313      	orrs	r3, r2
 8009436:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3301      	adds	r3, #1
 800943c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	3b01      	subs	r3, #1
 8009442:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	041a      	lsls	r2, r3, #16
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	4313      	orrs	r3, r2
 800944e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3301      	adds	r3, #1
 8009454:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	3b01      	subs	r3, #1
 800945a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	061a      	lsls	r2, r3, #24
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	4313      	orrs	r3, r2
 8009466:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	3b01      	subs	r3, #1
 8009472:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f107 0208 	add.w	r2, r7, #8
 800947c:	4611      	mov	r1, r2
 800947e:	4618      	mov	r0, r3
 8009480:	f000 fd4f 	bl	8009f22 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	3301      	adds	r3, #1
 8009488:	617b      	str	r3, [r7, #20]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2b07      	cmp	r3, #7
 800948e:	d9c4      	bls.n	800941a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800949c:	bf00      	nop
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e040      	b.n	8009538 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7f8 ffc8 	bl	800245c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2224      	movs	r2, #36	@ 0x24
 80094d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f022 0201 	bic.w	r2, r2, #1
 80094e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fb16 	bl	8009b1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f8af 	bl	8009654 <UART_SetConfig>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d101      	bne.n	8009500 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e01b      	b.n	8009538 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800950e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800951e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0201 	orr.w	r2, r2, #1
 800952e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fb95 	bl	8009c60 <UART_CheckIdleState>
 8009536:	4603      	mov	r3, r0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	@ 0x28
 8009544:	af02      	add	r7, sp, #8
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	4613      	mov	r3, r2
 800954e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009554:	2b20      	cmp	r3, #32
 8009556:	d177      	bne.n	8009648 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <HAL_UART_Transmit+0x24>
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d101      	bne.n	8009568 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e070      	b.n	800964a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2221      	movs	r2, #33	@ 0x21
 8009574:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009576:	f7fb f905 	bl	8004784 <HAL_GetTick>
 800957a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	88fa      	ldrh	r2, [r7, #6]
 8009580:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009594:	d108      	bne.n	80095a8 <HAL_UART_Transmit+0x68>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	61bb      	str	r3, [r7, #24]
 80095a6:	e003      	b.n	80095b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095ac:	2300      	movs	r3, #0
 80095ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80095b0:	e02f      	b.n	8009612 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2200      	movs	r2, #0
 80095ba:	2180      	movs	r1, #128	@ 0x80
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fba6 	bl	8009d0e <UART_WaitOnFlagUntilTimeout>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2220      	movs	r2, #32
 80095cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e03b      	b.n	800964a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10b      	bne.n	80095f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	3302      	adds	r3, #2
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	e007      	b.n	8009600 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	781a      	ldrb	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	3301      	adds	r3, #1
 80095fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009606:	b29b      	uxth	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	b29a      	uxth	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009618:	b29b      	uxth	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1c9      	bne.n	80095b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2200      	movs	r2, #0
 8009626:	2140      	movs	r1, #64	@ 0x40
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fb70 	bl	8009d0e <UART_WaitOnFlagUntilTimeout>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2220      	movs	r2, #32
 8009638:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800963a:	2303      	movs	r3, #3
 800963c:	e005      	b.n	800964a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2220      	movs	r2, #32
 8009642:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	e000      	b.n	800964a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009648:	2302      	movs	r3, #2
  }
}
 800964a:	4618      	mov	r0, r3
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b088      	sub	sp, #32
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689a      	ldr	r2, [r3, #8]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	4313      	orrs	r3, r2
 8009676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	4ba6      	ldr	r3, [pc, #664]	@ (8009918 <UART_SetConfig+0x2c4>)
 8009680:	4013      	ands	r3, r2
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6812      	ldr	r2, [r2, #0]
 8009686:	6979      	ldr	r1, [r7, #20]
 8009688:	430b      	orrs	r3, r1
 800968a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	430a      	orrs	r2, r1
 80096c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a94      	ldr	r2, [pc, #592]	@ (800991c <UART_SetConfig+0x2c8>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d120      	bne.n	8009712 <UART_SetConfig+0xbe>
 80096d0:	4b93      	ldr	r3, [pc, #588]	@ (8009920 <UART_SetConfig+0x2cc>)
 80096d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d6:	f003 0303 	and.w	r3, r3, #3
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d816      	bhi.n	800970c <UART_SetConfig+0xb8>
 80096de:	a201      	add	r2, pc, #4	@ (adr r2, 80096e4 <UART_SetConfig+0x90>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	080096f5 	.word	0x080096f5
 80096e8:	08009701 	.word	0x08009701
 80096ec:	080096fb 	.word	0x080096fb
 80096f0:	08009707 	.word	0x08009707
 80096f4:	2301      	movs	r3, #1
 80096f6:	77fb      	strb	r3, [r7, #31]
 80096f8:	e150      	b.n	800999c <UART_SetConfig+0x348>
 80096fa:	2302      	movs	r3, #2
 80096fc:	77fb      	strb	r3, [r7, #31]
 80096fe:	e14d      	b.n	800999c <UART_SetConfig+0x348>
 8009700:	2304      	movs	r3, #4
 8009702:	77fb      	strb	r3, [r7, #31]
 8009704:	e14a      	b.n	800999c <UART_SetConfig+0x348>
 8009706:	2308      	movs	r3, #8
 8009708:	77fb      	strb	r3, [r7, #31]
 800970a:	e147      	b.n	800999c <UART_SetConfig+0x348>
 800970c:	2310      	movs	r3, #16
 800970e:	77fb      	strb	r3, [r7, #31]
 8009710:	e144      	b.n	800999c <UART_SetConfig+0x348>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a83      	ldr	r2, [pc, #524]	@ (8009924 <UART_SetConfig+0x2d0>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d132      	bne.n	8009782 <UART_SetConfig+0x12e>
 800971c:	4b80      	ldr	r3, [pc, #512]	@ (8009920 <UART_SetConfig+0x2cc>)
 800971e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009722:	f003 030c 	and.w	r3, r3, #12
 8009726:	2b0c      	cmp	r3, #12
 8009728:	d828      	bhi.n	800977c <UART_SetConfig+0x128>
 800972a:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <UART_SetConfig+0xdc>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	08009765 	.word	0x08009765
 8009734:	0800977d 	.word	0x0800977d
 8009738:	0800977d 	.word	0x0800977d
 800973c:	0800977d 	.word	0x0800977d
 8009740:	08009771 	.word	0x08009771
 8009744:	0800977d 	.word	0x0800977d
 8009748:	0800977d 	.word	0x0800977d
 800974c:	0800977d 	.word	0x0800977d
 8009750:	0800976b 	.word	0x0800976b
 8009754:	0800977d 	.word	0x0800977d
 8009758:	0800977d 	.word	0x0800977d
 800975c:	0800977d 	.word	0x0800977d
 8009760:	08009777 	.word	0x08009777
 8009764:	2300      	movs	r3, #0
 8009766:	77fb      	strb	r3, [r7, #31]
 8009768:	e118      	b.n	800999c <UART_SetConfig+0x348>
 800976a:	2302      	movs	r3, #2
 800976c:	77fb      	strb	r3, [r7, #31]
 800976e:	e115      	b.n	800999c <UART_SetConfig+0x348>
 8009770:	2304      	movs	r3, #4
 8009772:	77fb      	strb	r3, [r7, #31]
 8009774:	e112      	b.n	800999c <UART_SetConfig+0x348>
 8009776:	2308      	movs	r3, #8
 8009778:	77fb      	strb	r3, [r7, #31]
 800977a:	e10f      	b.n	800999c <UART_SetConfig+0x348>
 800977c:	2310      	movs	r3, #16
 800977e:	77fb      	strb	r3, [r7, #31]
 8009780:	e10c      	b.n	800999c <UART_SetConfig+0x348>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a68      	ldr	r2, [pc, #416]	@ (8009928 <UART_SetConfig+0x2d4>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d120      	bne.n	80097ce <UART_SetConfig+0x17a>
 800978c:	4b64      	ldr	r3, [pc, #400]	@ (8009920 <UART_SetConfig+0x2cc>)
 800978e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009792:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009796:	2b30      	cmp	r3, #48	@ 0x30
 8009798:	d013      	beq.n	80097c2 <UART_SetConfig+0x16e>
 800979a:	2b30      	cmp	r3, #48	@ 0x30
 800979c:	d814      	bhi.n	80097c8 <UART_SetConfig+0x174>
 800979e:	2b20      	cmp	r3, #32
 80097a0:	d009      	beq.n	80097b6 <UART_SetConfig+0x162>
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	d810      	bhi.n	80097c8 <UART_SetConfig+0x174>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <UART_SetConfig+0x15c>
 80097aa:	2b10      	cmp	r3, #16
 80097ac:	d006      	beq.n	80097bc <UART_SetConfig+0x168>
 80097ae:	e00b      	b.n	80097c8 <UART_SetConfig+0x174>
 80097b0:	2300      	movs	r3, #0
 80097b2:	77fb      	strb	r3, [r7, #31]
 80097b4:	e0f2      	b.n	800999c <UART_SetConfig+0x348>
 80097b6:	2302      	movs	r3, #2
 80097b8:	77fb      	strb	r3, [r7, #31]
 80097ba:	e0ef      	b.n	800999c <UART_SetConfig+0x348>
 80097bc:	2304      	movs	r3, #4
 80097be:	77fb      	strb	r3, [r7, #31]
 80097c0:	e0ec      	b.n	800999c <UART_SetConfig+0x348>
 80097c2:	2308      	movs	r3, #8
 80097c4:	77fb      	strb	r3, [r7, #31]
 80097c6:	e0e9      	b.n	800999c <UART_SetConfig+0x348>
 80097c8:	2310      	movs	r3, #16
 80097ca:	77fb      	strb	r3, [r7, #31]
 80097cc:	e0e6      	b.n	800999c <UART_SetConfig+0x348>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a56      	ldr	r2, [pc, #344]	@ (800992c <UART_SetConfig+0x2d8>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d120      	bne.n	800981a <UART_SetConfig+0x1c6>
 80097d8:	4b51      	ldr	r3, [pc, #324]	@ (8009920 <UART_SetConfig+0x2cc>)
 80097da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80097e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80097e4:	d013      	beq.n	800980e <UART_SetConfig+0x1ba>
 80097e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80097e8:	d814      	bhi.n	8009814 <UART_SetConfig+0x1c0>
 80097ea:	2b80      	cmp	r3, #128	@ 0x80
 80097ec:	d009      	beq.n	8009802 <UART_SetConfig+0x1ae>
 80097ee:	2b80      	cmp	r3, #128	@ 0x80
 80097f0:	d810      	bhi.n	8009814 <UART_SetConfig+0x1c0>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <UART_SetConfig+0x1a8>
 80097f6:	2b40      	cmp	r3, #64	@ 0x40
 80097f8:	d006      	beq.n	8009808 <UART_SetConfig+0x1b4>
 80097fa:	e00b      	b.n	8009814 <UART_SetConfig+0x1c0>
 80097fc:	2300      	movs	r3, #0
 80097fe:	77fb      	strb	r3, [r7, #31]
 8009800:	e0cc      	b.n	800999c <UART_SetConfig+0x348>
 8009802:	2302      	movs	r3, #2
 8009804:	77fb      	strb	r3, [r7, #31]
 8009806:	e0c9      	b.n	800999c <UART_SetConfig+0x348>
 8009808:	2304      	movs	r3, #4
 800980a:	77fb      	strb	r3, [r7, #31]
 800980c:	e0c6      	b.n	800999c <UART_SetConfig+0x348>
 800980e:	2308      	movs	r3, #8
 8009810:	77fb      	strb	r3, [r7, #31]
 8009812:	e0c3      	b.n	800999c <UART_SetConfig+0x348>
 8009814:	2310      	movs	r3, #16
 8009816:	77fb      	strb	r3, [r7, #31]
 8009818:	e0c0      	b.n	800999c <UART_SetConfig+0x348>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a44      	ldr	r2, [pc, #272]	@ (8009930 <UART_SetConfig+0x2dc>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d125      	bne.n	8009870 <UART_SetConfig+0x21c>
 8009824:	4b3e      	ldr	r3, [pc, #248]	@ (8009920 <UART_SetConfig+0x2cc>)
 8009826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800982a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800982e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009832:	d017      	beq.n	8009864 <UART_SetConfig+0x210>
 8009834:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009838:	d817      	bhi.n	800986a <UART_SetConfig+0x216>
 800983a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800983e:	d00b      	beq.n	8009858 <UART_SetConfig+0x204>
 8009840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009844:	d811      	bhi.n	800986a <UART_SetConfig+0x216>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <UART_SetConfig+0x1fe>
 800984a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800984e:	d006      	beq.n	800985e <UART_SetConfig+0x20a>
 8009850:	e00b      	b.n	800986a <UART_SetConfig+0x216>
 8009852:	2300      	movs	r3, #0
 8009854:	77fb      	strb	r3, [r7, #31]
 8009856:	e0a1      	b.n	800999c <UART_SetConfig+0x348>
 8009858:	2302      	movs	r3, #2
 800985a:	77fb      	strb	r3, [r7, #31]
 800985c:	e09e      	b.n	800999c <UART_SetConfig+0x348>
 800985e:	2304      	movs	r3, #4
 8009860:	77fb      	strb	r3, [r7, #31]
 8009862:	e09b      	b.n	800999c <UART_SetConfig+0x348>
 8009864:	2308      	movs	r3, #8
 8009866:	77fb      	strb	r3, [r7, #31]
 8009868:	e098      	b.n	800999c <UART_SetConfig+0x348>
 800986a:	2310      	movs	r3, #16
 800986c:	77fb      	strb	r3, [r7, #31]
 800986e:	e095      	b.n	800999c <UART_SetConfig+0x348>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a2f      	ldr	r2, [pc, #188]	@ (8009934 <UART_SetConfig+0x2e0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d125      	bne.n	80098c6 <UART_SetConfig+0x272>
 800987a:	4b29      	ldr	r3, [pc, #164]	@ (8009920 <UART_SetConfig+0x2cc>)
 800987c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009880:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009884:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009888:	d017      	beq.n	80098ba <UART_SetConfig+0x266>
 800988a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800988e:	d817      	bhi.n	80098c0 <UART_SetConfig+0x26c>
 8009890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009894:	d00b      	beq.n	80098ae <UART_SetConfig+0x25a>
 8009896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800989a:	d811      	bhi.n	80098c0 <UART_SetConfig+0x26c>
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <UART_SetConfig+0x254>
 80098a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098a4:	d006      	beq.n	80098b4 <UART_SetConfig+0x260>
 80098a6:	e00b      	b.n	80098c0 <UART_SetConfig+0x26c>
 80098a8:	2301      	movs	r3, #1
 80098aa:	77fb      	strb	r3, [r7, #31]
 80098ac:	e076      	b.n	800999c <UART_SetConfig+0x348>
 80098ae:	2302      	movs	r3, #2
 80098b0:	77fb      	strb	r3, [r7, #31]
 80098b2:	e073      	b.n	800999c <UART_SetConfig+0x348>
 80098b4:	2304      	movs	r3, #4
 80098b6:	77fb      	strb	r3, [r7, #31]
 80098b8:	e070      	b.n	800999c <UART_SetConfig+0x348>
 80098ba:	2308      	movs	r3, #8
 80098bc:	77fb      	strb	r3, [r7, #31]
 80098be:	e06d      	b.n	800999c <UART_SetConfig+0x348>
 80098c0:	2310      	movs	r3, #16
 80098c2:	77fb      	strb	r3, [r7, #31]
 80098c4:	e06a      	b.n	800999c <UART_SetConfig+0x348>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009938 <UART_SetConfig+0x2e4>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d138      	bne.n	8009942 <UART_SetConfig+0x2ee>
 80098d0:	4b13      	ldr	r3, [pc, #76]	@ (8009920 <UART_SetConfig+0x2cc>)
 80098d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80098da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098de:	d017      	beq.n	8009910 <UART_SetConfig+0x2bc>
 80098e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098e4:	d82a      	bhi.n	800993c <UART_SetConfig+0x2e8>
 80098e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ea:	d00b      	beq.n	8009904 <UART_SetConfig+0x2b0>
 80098ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098f0:	d824      	bhi.n	800993c <UART_SetConfig+0x2e8>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <UART_SetConfig+0x2aa>
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098fa:	d006      	beq.n	800990a <UART_SetConfig+0x2b6>
 80098fc:	e01e      	b.n	800993c <UART_SetConfig+0x2e8>
 80098fe:	2300      	movs	r3, #0
 8009900:	77fb      	strb	r3, [r7, #31]
 8009902:	e04b      	b.n	800999c <UART_SetConfig+0x348>
 8009904:	2302      	movs	r3, #2
 8009906:	77fb      	strb	r3, [r7, #31]
 8009908:	e048      	b.n	800999c <UART_SetConfig+0x348>
 800990a:	2304      	movs	r3, #4
 800990c:	77fb      	strb	r3, [r7, #31]
 800990e:	e045      	b.n	800999c <UART_SetConfig+0x348>
 8009910:	2308      	movs	r3, #8
 8009912:	77fb      	strb	r3, [r7, #31]
 8009914:	e042      	b.n	800999c <UART_SetConfig+0x348>
 8009916:	bf00      	nop
 8009918:	efff69f3 	.word	0xefff69f3
 800991c:	40011000 	.word	0x40011000
 8009920:	40023800 	.word	0x40023800
 8009924:	40004400 	.word	0x40004400
 8009928:	40004800 	.word	0x40004800
 800992c:	40004c00 	.word	0x40004c00
 8009930:	40005000 	.word	0x40005000
 8009934:	40011400 	.word	0x40011400
 8009938:	40007800 	.word	0x40007800
 800993c:	2310      	movs	r3, #16
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e02c      	b.n	800999c <UART_SetConfig+0x348>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a72      	ldr	r2, [pc, #456]	@ (8009b10 <UART_SetConfig+0x4bc>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d125      	bne.n	8009998 <UART_SetConfig+0x344>
 800994c:	4b71      	ldr	r3, [pc, #452]	@ (8009b14 <UART_SetConfig+0x4c0>)
 800994e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009952:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009956:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800995a:	d017      	beq.n	800998c <UART_SetConfig+0x338>
 800995c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009960:	d817      	bhi.n	8009992 <UART_SetConfig+0x33e>
 8009962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009966:	d00b      	beq.n	8009980 <UART_SetConfig+0x32c>
 8009968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800996c:	d811      	bhi.n	8009992 <UART_SetConfig+0x33e>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <UART_SetConfig+0x326>
 8009972:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009976:	d006      	beq.n	8009986 <UART_SetConfig+0x332>
 8009978:	e00b      	b.n	8009992 <UART_SetConfig+0x33e>
 800997a:	2300      	movs	r3, #0
 800997c:	77fb      	strb	r3, [r7, #31]
 800997e:	e00d      	b.n	800999c <UART_SetConfig+0x348>
 8009980:	2302      	movs	r3, #2
 8009982:	77fb      	strb	r3, [r7, #31]
 8009984:	e00a      	b.n	800999c <UART_SetConfig+0x348>
 8009986:	2304      	movs	r3, #4
 8009988:	77fb      	strb	r3, [r7, #31]
 800998a:	e007      	b.n	800999c <UART_SetConfig+0x348>
 800998c:	2308      	movs	r3, #8
 800998e:	77fb      	strb	r3, [r7, #31]
 8009990:	e004      	b.n	800999c <UART_SetConfig+0x348>
 8009992:	2310      	movs	r3, #16
 8009994:	77fb      	strb	r3, [r7, #31]
 8009996:	e001      	b.n	800999c <UART_SetConfig+0x348>
 8009998:	2310      	movs	r3, #16
 800999a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099a4:	d15b      	bne.n	8009a5e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80099a6:	7ffb      	ldrb	r3, [r7, #31]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d828      	bhi.n	80099fe <UART_SetConfig+0x3aa>
 80099ac:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <UART_SetConfig+0x360>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099e9 	.word	0x080099e9
 80099c0:	080099ff 	.word	0x080099ff
 80099c4:	080099ef 	.word	0x080099ef
 80099c8:	080099ff 	.word	0x080099ff
 80099cc:	080099ff 	.word	0x080099ff
 80099d0:	080099ff 	.word	0x080099ff
 80099d4:	080099f7 	.word	0x080099f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099d8:	f7fd fa36 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 80099dc:	61b8      	str	r0, [r7, #24]
        break;
 80099de:	e013      	b.n	8009a08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099e0:	f7fd fa46 	bl	8006e70 <HAL_RCC_GetPCLK2Freq>
 80099e4:	61b8      	str	r0, [r7, #24]
        break;
 80099e6:	e00f      	b.n	8009a08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099e8:	4b4b      	ldr	r3, [pc, #300]	@ (8009b18 <UART_SetConfig+0x4c4>)
 80099ea:	61bb      	str	r3, [r7, #24]
        break;
 80099ec:	e00c      	b.n	8009a08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ee:	f7fd f959 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 80099f2:	61b8      	str	r0, [r7, #24]
        break;
 80099f4:	e008      	b.n	8009a08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099fa:	61bb      	str	r3, [r7, #24]
        break;
 80099fc:	e004      	b.n	8009a08 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	77bb      	strb	r3, [r7, #30]
        break;
 8009a06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d074      	beq.n	8009af8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	005a      	lsls	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	085b      	lsrs	r3, r3, #1
 8009a18:	441a      	add	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	2b0f      	cmp	r3, #15
 8009a28:	d916      	bls.n	8009a58 <UART_SetConfig+0x404>
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a30:	d212      	bcs.n	8009a58 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	f023 030f 	bic.w	r3, r3, #15
 8009a3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	085b      	lsrs	r3, r3, #1
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	89fb      	ldrh	r3, [r7, #14]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	89fa      	ldrh	r2, [r7, #14]
 8009a54:	60da      	str	r2, [r3, #12]
 8009a56:	e04f      	b.n	8009af8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	77bb      	strb	r3, [r7, #30]
 8009a5c:	e04c      	b.n	8009af8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a5e:	7ffb      	ldrb	r3, [r7, #31]
 8009a60:	2b08      	cmp	r3, #8
 8009a62:	d828      	bhi.n	8009ab6 <UART_SetConfig+0x462>
 8009a64:	a201      	add	r2, pc, #4	@ (adr r2, 8009a6c <UART_SetConfig+0x418>)
 8009a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6a:	bf00      	nop
 8009a6c:	08009a91 	.word	0x08009a91
 8009a70:	08009a99 	.word	0x08009a99
 8009a74:	08009aa1 	.word	0x08009aa1
 8009a78:	08009ab7 	.word	0x08009ab7
 8009a7c:	08009aa7 	.word	0x08009aa7
 8009a80:	08009ab7 	.word	0x08009ab7
 8009a84:	08009ab7 	.word	0x08009ab7
 8009a88:	08009ab7 	.word	0x08009ab7
 8009a8c:	08009aaf 	.word	0x08009aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a90:	f7fd f9da 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8009a94:	61b8      	str	r0, [r7, #24]
        break;
 8009a96:	e013      	b.n	8009ac0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a98:	f7fd f9ea 	bl	8006e70 <HAL_RCC_GetPCLK2Freq>
 8009a9c:	61b8      	str	r0, [r7, #24]
        break;
 8009a9e:	e00f      	b.n	8009ac0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8009b18 <UART_SetConfig+0x4c4>)
 8009aa2:	61bb      	str	r3, [r7, #24]
        break;
 8009aa4:	e00c      	b.n	8009ac0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aa6:	f7fd f8fd 	bl	8006ca4 <HAL_RCC_GetSysClockFreq>
 8009aaa:	61b8      	str	r0, [r7, #24]
        break;
 8009aac:	e008      	b.n	8009ac0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ab2:	61bb      	str	r3, [r7, #24]
        break;
 8009ab4:	e004      	b.n	8009ac0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	77bb      	strb	r3, [r7, #30]
        break;
 8009abe:	bf00      	nop
    }

    if (pclk != 0U)
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d018      	beq.n	8009af8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	085a      	lsrs	r2, r3, #1
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	441a      	add	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ad8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	2b0f      	cmp	r3, #15
 8009ade:	d909      	bls.n	8009af4 <UART_SetConfig+0x4a0>
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ae6:	d205      	bcs.n	8009af4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	e001      	b.n	8009af8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009b04:	7fbb      	ldrb	r3, [r7, #30]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3720      	adds	r7, #32
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	40007c00 	.word	0x40007c00
 8009b14:	40023800 	.word	0x40023800
 8009b18:	00f42400 	.word	0x00f42400

08009b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b28:	f003 0308 	and.w	r3, r3, #8
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00a      	beq.n	8009b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00a      	beq.n	8009b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8e:	f003 0304 	and.w	r3, r3, #4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bb0:	f003 0310 	and.w	r3, r3, #16
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00a      	beq.n	8009bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01a      	beq.n	8009c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c1a:	d10a      	bne.n	8009c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	605a      	str	r2, [r3, #4]
  }
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b08c      	sub	sp, #48	@ 0x30
 8009c64:	af02      	add	r7, sp, #8
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c70:	f7fa fd88 	bl	8004784 <HAL_GetTick>
 8009c74:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0308 	and.w	r3, r3, #8
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d12e      	bne.n	8009ce2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f83b 	bl	8009d0e <UART_WaitOnFlagUntilTimeout>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d021      	beq.n	8009ce2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	e853 3f00 	ldrex	r3, [r3]
 8009caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cb2:	623b      	str	r3, [r7, #32]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc0:	69b9      	ldr	r1, [r7, #24]
 8009cc2:	69fa      	ldr	r2, [r7, #28]
 8009cc4:	e841 2300 	strex	r3, r2, [r1]
 8009cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1e6      	bne.n	8009c9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e011      	b.n	8009d06 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3728      	adds	r7, #40	@ 0x28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	60f8      	str	r0, [r7, #12]
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	603b      	str	r3, [r7, #0]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d1e:	e04f      	b.n	8009dc0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d26:	d04b      	beq.n	8009dc0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d28:	f7fa fd2c 	bl	8004784 <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d302      	bcc.n	8009d3e <UART_WaitOnFlagUntilTimeout+0x30>
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e04e      	b.n	8009de0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0304 	and.w	r3, r3, #4
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d037      	beq.n	8009dc0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b80      	cmp	r3, #128	@ 0x80
 8009d54:	d034      	beq.n	8009dc0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b40      	cmp	r3, #64	@ 0x40
 8009d5a:	d031      	beq.n	8009dc0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	f003 0308 	and.w	r3, r3, #8
 8009d66:	2b08      	cmp	r3, #8
 8009d68:	d110      	bne.n	8009d8c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2208      	movs	r2, #8
 8009d70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 f838 	bl	8009de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e029      	b.n	8009de0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d9a:	d111      	bne.n	8009dc0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009da4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f000 f81e 	bl	8009de8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e00f      	b.n	8009de0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	69da      	ldr	r2, [r3, #28]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	4013      	ands	r3, r2
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	bf0c      	ite	eq
 8009dd0:	2301      	moveq	r3, #1
 8009dd2:	2300      	movne	r3, #0
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	79fb      	ldrb	r3, [r7, #7]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d0a0      	beq.n	8009d20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b095      	sub	sp, #84	@ 0x54
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e6      	bne.n	8009df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3308      	adds	r3, #8
 8009e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	e853 3f00 	ldrex	r3, [r3]
 8009e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	f023 0301 	bic.w	r3, r3, #1
 8009e38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1e5      	bne.n	8009e22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d118      	bne.n	8009e90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f023 0310 	bic.w	r3, r3, #16
 8009e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e7c:	61bb      	str	r3, [r7, #24]
 8009e7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6979      	ldr	r1, [r7, #20]
 8009e82:	69ba      	ldr	r2, [r7, #24]
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	613b      	str	r3, [r7, #16]
   return(result);
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e6      	bne.n	8009e5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2220      	movs	r2, #32
 8009e94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009ea4:	bf00      	nop
 8009ea6:	3754      	adds	r7, #84	@ 0x54
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	b480      	push	{r7}
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	f107 001c 	add.w	r0, r7, #28
 8009ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009ec6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009eca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009ece:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009ed2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009ed6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009eda:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	4b07      	ldr	r3, [pc, #28]	@ (8009f04 <SDMMC_Init+0x54>)
 8009ee8:	4013      	ands	r3, r2
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	431a      	orrs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	b004      	add	sp, #16
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	ffff8100 	.word	0xffff8100

08009f08 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009f22:	b480      	push	{r7}
 8009f24:	b083      	sub	sp, #12
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2203      	movs	r2, #3
 8009f50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0303 	and.w	r3, r3, #3
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009fa0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009fa6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	4b06      	ldr	r3, [pc, #24]	@ (8009fcc <SDMMC_SendCommand+0x50>)
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	fffff000 	.word	0xfffff000

08009fd0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	b2db      	uxtb	r3, r3
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b085      	sub	sp, #20
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3314      	adds	r3, #20
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
}  
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a036:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a03c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a042:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	431a      	orrs	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a05a:	2300      	movs	r3, #0

}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a076:	2310      	movs	r3, #16
 800a078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a07a:	2340      	movs	r3, #64	@ 0x40
 800a07c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a07e:	2300      	movs	r3, #0
 800a080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a086:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a088:	f107 0308 	add.w	r3, r7, #8
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7ff ff74 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a094:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a098:	2110      	movs	r1, #16
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f9d6 	bl	800a44c <SDMMC_GetCmdResp1>
 800a0a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a0ba:	2311      	movs	r3, #17
 800a0bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0be:	2340      	movs	r3, #64	@ 0x40
 800a0c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0cc:	f107 0308 	add.w	r3, r7, #8
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff ff52 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a0d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0dc:	2111      	movs	r1, #17
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f9b4 	bl	800a44c <SDMMC_GetCmdResp1>
 800a0e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0e6:	69fb      	ldr	r3, [r7, #28]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3720      	adds	r7, #32
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a0fe:	2312      	movs	r3, #18
 800a100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a102:	2340      	movs	r3, #64	@ 0x40
 800a104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a10e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a110:	f107 0308 	add.w	r3, r7, #8
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff ff30 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a11c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a120:	2112      	movs	r1, #18
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f992 	bl	800a44c <SDMMC_GetCmdResp1>
 800a128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a12a:	69fb      	ldr	r3, [r7, #28]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3720      	adds	r7, #32
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b088      	sub	sp, #32
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a142:	2318      	movs	r3, #24
 800a144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a146:	2340      	movs	r3, #64	@ 0x40
 800a148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a14a:	2300      	movs	r3, #0
 800a14c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a14e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a152:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a154:	f107 0308 	add.w	r3, r7, #8
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7ff ff0e 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a160:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a164:	2118      	movs	r1, #24
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f970 	bl	800a44c <SDMMC_GetCmdResp1>
 800a16c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a16e:	69fb      	ldr	r3, [r7, #28]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3720      	adds	r7, #32
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a186:	2319      	movs	r3, #25
 800a188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a18a:	2340      	movs	r3, #64	@ 0x40
 800a18c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a18e:	2300      	movs	r3, #0
 800a190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a196:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a198:	f107 0308 	add.w	r3, r7, #8
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7ff feec 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a1a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1a8:	2119      	movs	r1, #25
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f94e 	bl	800a44c <SDMMC_GetCmdResp1>
 800a1b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b2:	69fb      	ldr	r3, [r7, #28]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3720      	adds	r7, #32
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a1c8:	230c      	movs	r3, #12
 800a1ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1cc:	2340      	movs	r3, #64	@ 0x40
 800a1ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1da:	f107 0308 	add.w	r3, r7, #8
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff fecb 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a1e6:	4a05      	ldr	r2, [pc, #20]	@ (800a1fc <SDMMC_CmdStopTransfer+0x40>)
 800a1e8:	210c      	movs	r1, #12
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f92e 	bl	800a44c <SDMMC_GetCmdResp1>
 800a1f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3720      	adds	r7, #32
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	05f5e100 	.word	0x05f5e100

0800a200 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08a      	sub	sp, #40	@ 0x28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a210:	2307      	movs	r3, #7
 800a212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a214:	2340      	movs	r3, #64	@ 0x40
 800a216:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a218:	2300      	movs	r3, #0
 800a21a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a21c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a220:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a222:	f107 0310 	add.w	r3, r7, #16
 800a226:	4619      	mov	r1, r3
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff fea7 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a22e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a232:	2107      	movs	r1, #7
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f909 	bl	800a44c <SDMMC_GetCmdResp1>
 800a23a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3728      	adds	r7, #40	@ 0x28
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b088      	sub	sp, #32
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a256:	2300      	movs	r3, #0
 800a258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a25a:	2300      	movs	r3, #0
 800a25c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a25e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a262:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a264:	f107 0308 	add.w	r3, r7, #8
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff fe86 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fb23 	bl	800a8bc <SDMMC_GetCmdError>
 800a276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a278:	69fb      	ldr	r3, [r7, #28]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3720      	adds	r7, #32
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b088      	sub	sp, #32
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a28a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a28e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a290:	2308      	movs	r3, #8
 800a292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a294:	2340      	movs	r3, #64	@ 0x40
 800a296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a29c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2a2:	f107 0308 	add.w	r3, r7, #8
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff fe67 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fab6 	bl	800a820 <SDMMC_GetCmdResp7>
 800a2b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2b6:	69fb      	ldr	r3, [r7, #28]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3720      	adds	r7, #32
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a2ce:	2337      	movs	r3, #55	@ 0x37
 800a2d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2d2:	2340      	movs	r3, #64	@ 0x40
 800a2d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2e0:	f107 0308 	add.w	r3, r7, #8
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff fe48 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a2ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2f0:	2137      	movs	r1, #55	@ 0x37
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f8aa 	bl	800a44c <SDMMC_GetCmdResp1>
 800a2f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3720      	adds	r7, #32
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	4b0d      	ldr	r3, [pc, #52]	@ (800a348 <SDMMC_CmdAppOperCommand+0x44>)
 800a312:	4313      	orrs	r3, r2
 800a314:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a316:	2329      	movs	r3, #41	@ 0x29
 800a318:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a31a:	2340      	movs	r3, #64	@ 0x40
 800a31c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a31e:	2300      	movs	r3, #0
 800a320:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a326:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a328:	f107 0308 	add.w	r3, r7, #8
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff fe24 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f9bf 	bl	800a6b8 <SDMMC_GetCmdResp3>
 800a33a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a33c:	69fb      	ldr	r3, [r7, #28]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3720      	adds	r7, #32
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	80100000 	.word	0x80100000

0800a34c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a358:	2302      	movs	r3, #2
 800a35a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a35c:	23c0      	movs	r3, #192	@ 0xc0
 800a35e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a368:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a36a:	f107 0308 	add.w	r3, r7, #8
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff fe03 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f956 	bl	800a628 <SDMMC_GetCmdResp2>
 800a37c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a37e:	69fb      	ldr	r3, [r7, #28]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3720      	adds	r7, #32
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a396:	2309      	movs	r3, #9
 800a398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a39a:	23c0      	movs	r3, #192	@ 0xc0
 800a39c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3a8:	f107 0308 	add.w	r3, r7, #8
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff fde4 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f937 	bl	800a628 <SDMMC_GetCmdResp2>
 800a3ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3bc:	69fb      	ldr	r3, [r7, #28]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3720      	adds	r7, #32
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b088      	sub	sp, #32
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3d8:	2340      	movs	r3, #64	@ 0x40
 800a3da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3e6:	f107 0308 	add.w	r3, r7, #8
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff fdc5 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	2103      	movs	r1, #3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f99c 	bl	800a734 <SDMMC_GetCmdResp6>
 800a3fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3fe:	69fb      	ldr	r3, [r7, #28]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3720      	adds	r7, #32
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a416:	230d      	movs	r3, #13
 800a418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a41a:	2340      	movs	r3, #64	@ 0x40
 800a41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a41e:	2300      	movs	r3, #0
 800a420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a426:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a428:	f107 0308 	add.w	r3, r7, #8
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff fda4 	bl	8009f7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a434:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a438:	210d      	movs	r1, #13
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f806 	bl	800a44c <SDMMC_GetCmdResp1>
 800a440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a442:	69fb      	ldr	r3, [r7, #28]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3720      	adds	r7, #32
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	460b      	mov	r3, r1
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a45a:	4b70      	ldr	r3, [pc, #448]	@ (800a61c <SDMMC_GetCmdResp1+0x1d0>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a70      	ldr	r2, [pc, #448]	@ (800a620 <SDMMC_GetCmdResp1+0x1d4>)
 800a460:	fba2 2303 	umull	r2, r3, r2, r3
 800a464:	0a5a      	lsrs	r2, r3, #9
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	fb02 f303 	mul.w	r3, r2, r3
 800a46c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	1e5a      	subs	r2, r3, #1
 800a472:	61fa      	str	r2, [r7, #28]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a478:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a47c:	e0c9      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a482:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d0ef      	beq.n	800a46e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1ea      	bne.n	800a46e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d004      	beq.n	800a4ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2204      	movs	r2, #4
 800a4a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4aa:	2304      	movs	r3, #4
 800a4ac:	e0b1      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d004      	beq.n	800a4c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e0a6      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	22c5      	movs	r2, #197	@ 0xc5
 800a4c8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff fd80 	bl	8009fd0 <SDMMC_GetCommandResponse>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d001      	beq.n	800a4de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e099      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a4de:	2100      	movs	r1, #0
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7ff fd82 	bl	8009fea <SDMMC_GetResponse>
 800a4e6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	4b4e      	ldr	r3, [pc, #312]	@ (800a624 <SDMMC_GetCmdResp1+0x1d8>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e08d      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	da02      	bge.n	800a502 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a4fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a500:	e087      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a50c:	2340      	movs	r3, #64	@ 0x40
 800a50e:	e080      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a51a:	2380      	movs	r3, #128	@ 0x80
 800a51c:	e079      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a52c:	e071      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a53c:	e069      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a548:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a54c:	e061      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a558:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a55c:	e059      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a56c:	e051      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a57c:	e049      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a588:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a58c:	e041      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a598:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a59c:	e039      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a5a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a5ac:	e031      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a5b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a5bc:	e029      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a5c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a5cc:	e021      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a5d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a5dc:	e019      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a5e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a5ec:	e011      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a5f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a5fc:	e009      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f003 0308 	and.w	r3, r3, #8
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a608:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a60c:	e001      	b.n	800a612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a60e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a612:	4618      	mov	r0, r3
 800a614:	3720      	adds	r7, #32
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20000000 	.word	0x20000000
 800a620:	10624dd3 	.word	0x10624dd3
 800a624:	fdffe008 	.word	0xfdffe008

0800a628 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a630:	4b1f      	ldr	r3, [pc, #124]	@ (800a6b0 <SDMMC_GetCmdResp2+0x88>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a1f      	ldr	r2, [pc, #124]	@ (800a6b4 <SDMMC_GetCmdResp2+0x8c>)
 800a636:	fba2 2303 	umull	r2, r3, r2, r3
 800a63a:	0a5b      	lsrs	r3, r3, #9
 800a63c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a640:	fb02 f303 	mul.w	r3, r2, r3
 800a644:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	1e5a      	subs	r2, r3, #1
 800a64a:	60fa      	str	r2, [r7, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d102      	bne.n	800a656 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a650:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a654:	e026      	b.n	800a6a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a65a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0ef      	beq.n	800a646 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1ea      	bne.n	800a646 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a674:	f003 0304 	and.w	r3, r3, #4
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d004      	beq.n	800a686 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2204      	movs	r2, #4
 800a680:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a682:	2304      	movs	r3, #4
 800a684:	e00e      	b.n	800a6a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d004      	beq.n	800a69c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a698:	2301      	movs	r3, #1
 800a69a:	e003      	b.n	800a6a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	22c5      	movs	r2, #197	@ 0xc5
 800a6a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	20000000 	.word	0x20000000
 800a6b4:	10624dd3 	.word	0x10624dd3

0800a6b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a72c <SDMMC_GetCmdResp3+0x74>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a730 <SDMMC_GetCmdResp3+0x78>)
 800a6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ca:	0a5b      	lsrs	r3, r3, #9
 800a6cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6d0:	fb02 f303 	mul.w	r3, r2, r3
 800a6d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	1e5a      	subs	r2, r3, #1
 800a6da:	60fa      	str	r2, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6e4:	e01b      	b.n	800a71e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0ef      	beq.n	800a6d6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1ea      	bne.n	800a6d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a704:	f003 0304 	and.w	r3, r3, #4
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d004      	beq.n	800a716 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2204      	movs	r2, #4
 800a710:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a712:	2304      	movs	r3, #4
 800a714:	e003      	b.n	800a71e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	22c5      	movs	r2, #197	@ 0xc5
 800a71a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	20000000 	.word	0x20000000
 800a730:	10624dd3 	.word	0x10624dd3

0800a734 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	460b      	mov	r3, r1
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a742:	4b35      	ldr	r3, [pc, #212]	@ (800a818 <SDMMC_GetCmdResp6+0xe4>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a35      	ldr	r2, [pc, #212]	@ (800a81c <SDMMC_GetCmdResp6+0xe8>)
 800a748:	fba2 2303 	umull	r2, r3, r2, r3
 800a74c:	0a5b      	lsrs	r3, r3, #9
 800a74e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a752:	fb02 f303 	mul.w	r3, r2, r3
 800a756:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	1e5a      	subs	r2, r3, #1
 800a75c:	61fa      	str	r2, [r7, #28]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a762:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a766:	e052      	b.n	800a80e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a76c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a774:	2b00      	cmp	r3, #0
 800a776:	d0ef      	beq.n	800a758 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1ea      	bne.n	800a758 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d004      	beq.n	800a798 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2204      	movs	r2, #4
 800a792:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a794:	2304      	movs	r3, #4
 800a796:	e03a      	b.n	800a80e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d004      	beq.n	800a7ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e02f      	b.n	800a80e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7ff fc0e 	bl	8009fd0 <SDMMC_GetCommandResponse>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	7afb      	ldrb	r3, [r7, #11]
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d001      	beq.n	800a7c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e025      	b.n	800a80e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	22c5      	movs	r2, #197	@ 0xc5
 800a7c6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f7ff fc0d 	bl	8009fea <SDMMC_GetResponse>
 800a7d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d106      	bne.n	800a7ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	0c1b      	lsrs	r3, r3, #16
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	e011      	b.n	800a80e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a7f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a7f8:	e009      	b.n	800a80e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a808:	e001      	b.n	800a80e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a80a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3720      	adds	r7, #32
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20000000 	.word	0x20000000
 800a81c:	10624dd3 	.word	0x10624dd3

0800a820 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a828:	4b22      	ldr	r3, [pc, #136]	@ (800a8b4 <SDMMC_GetCmdResp7+0x94>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a22      	ldr	r2, [pc, #136]	@ (800a8b8 <SDMMC_GetCmdResp7+0x98>)
 800a82e:	fba2 2303 	umull	r2, r3, r2, r3
 800a832:	0a5b      	lsrs	r3, r3, #9
 800a834:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a838:	fb02 f303 	mul.w	r3, r2, r3
 800a83c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1e5a      	subs	r2, r3, #1
 800a842:	60fa      	str	r2, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a848:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a84c:	e02c      	b.n	800a8a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a852:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0ef      	beq.n	800a83e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1ea      	bne.n	800a83e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a86c:	f003 0304 	and.w	r3, r3, #4
 800a870:	2b00      	cmp	r3, #0
 800a872:	d004      	beq.n	800a87e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2204      	movs	r2, #4
 800a878:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a87a:	2304      	movs	r3, #4
 800a87c:	e014      	b.n	800a8a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	d004      	beq.n	800a894 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a890:	2301      	movs	r3, #1
 800a892:	e009      	b.n	800a8a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2240      	movs	r2, #64	@ 0x40
 800a8a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a8a6:	2300      	movs	r3, #0
  
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	20000000 	.word	0x20000000
 800a8b8:	10624dd3 	.word	0x10624dd3

0800a8bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8c4:	4b11      	ldr	r3, [pc, #68]	@ (800a90c <SDMMC_GetCmdError+0x50>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a11      	ldr	r2, [pc, #68]	@ (800a910 <SDMMC_GetCmdError+0x54>)
 800a8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ce:	0a5b      	lsrs	r3, r3, #9
 800a8d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8d4:	fb02 f303 	mul.w	r3, r2, r3
 800a8d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	1e5a      	subs	r2, r3, #1
 800a8de:	60fa      	str	r2, [r7, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d102      	bne.n	800a8ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8e8:	e009      	b.n	800a8fe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0f1      	beq.n	800a8da <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	22c5      	movs	r2, #197	@ 0xc5
 800a8fa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	20000000 	.word	0x20000000
 800a910:	10624dd3 	.word	0x10624dd3

0800a914 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b090      	sub	sp, #64	@ 0x40
 800a918:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800a91e:	4b33      	ldr	r3, [pc, #204]	@ (800a9ec <AUDIO_REC_Start+0xd8>)
 800a920:	2264      	movs	r2, #100	@ 0x64
 800a922:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800a924:	2200      	movs	r2, #0
 800a926:	4932      	ldr	r1, [pc, #200]	@ (800a9f0 <AUDIO_REC_Start+0xdc>)
 800a928:	4832      	ldr	r0, [pc, #200]	@ (800a9f4 <AUDIO_REC_Start+0xe0>)
 800a92a:	f002 faed 	bl	800cf08 <f_mount>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800a934:	f7f7 f9a2 	bl	8001c7c <Error_Handler>
 800a938:	e052      	b.n	800a9e0 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800a93a:	482f      	ldr	r0, [pc, #188]	@ (800a9f8 <AUDIO_REC_Start+0xe4>)
 800a93c:	f009 fac2 	bl	8013ec4 <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800a940:	482e      	ldr	r0, [pc, #184]	@ (800a9fc <AUDIO_REC_Start+0xe8>)
 800a942:	f009 fabf 	bl	8013ec4 <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800a946:	220a      	movs	r2, #10
 800a948:	492d      	ldr	r1, [pc, #180]	@ (800aa00 <AUDIO_REC_Start+0xec>)
 800a94a:	482e      	ldr	r0, [pc, #184]	@ (800aa04 <AUDIO_REC_Start+0xf0>)
 800a94c:	f002 fb22 	bl	800cf94 <f_open>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d144      	bne.n	800a9e0 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800a956:	492c      	ldr	r1, [pc, #176]	@ (800aa08 <AUDIO_REC_Start+0xf4>)
 800a958:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a95c:	f000 f9c6 	bl	800acec <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800a960:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a964:	222c      	movs	r2, #44	@ 0x2c
 800a966:	4928      	ldr	r1, [pc, #160]	@ (800aa08 <AUDIO_REC_Start+0xf4>)
 800a968:	4826      	ldr	r0, [pc, #152]	@ (800aa04 <AUDIO_REC_Start+0xf0>)
 800a96a:	f002 fe0c 	bl	800d586 <f_write>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d135      	bne.n	800a9e0 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800a974:	4825      	ldr	r0, [pc, #148]	@ (800aa0c <AUDIO_REC_Start+0xf8>)
 800a976:	f009 faa5 	bl	8013ec4 <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800a97a:	4b25      	ldr	r3, [pc, #148]	@ (800aa10 <AUDIO_REC_Start+0xfc>)
 800a97c:	2205      	movs	r2, #5
 800a97e:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800a980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a982:	2b00      	cmp	r3, #0
 800a984:	d02c      	beq.n	800a9e0 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800a986:	2202      	movs	r2, #2
 800a988:	2110      	movs	r1, #16
 800a98a:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a98e:	f7f9 fc55 	bl	800423c <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800a992:	4820      	ldr	r0, [pc, #128]	@ (800aa14 <AUDIO_REC_Start+0x100>)
 800a994:	f009 fa96 	bl	8013ec4 <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800a998:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800a99c:	481e      	ldr	r0, [pc, #120]	@ (800aa18 <AUDIO_REC_Start+0x104>)
 800a99e:	f7f9 fccb 	bl	8004338 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800a9a2:	481e      	ldr	r0, [pc, #120]	@ (800aa1c <AUDIO_REC_Start+0x108>)
 800a9a4:	f009 fa8e 	bl	8013ec4 <puts>
			  BufferCtl.fptr = byteswritten;
 800a9a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9aa:	4a1b      	ldr	r2, [pc, #108]	@ (800aa18 <AUDIO_REC_Start+0x104>)
 800a9ac:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a9b0:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800a9b4:	4b18      	ldr	r3, [pc, #96]	@ (800aa18 <AUDIO_REC_Start+0x104>)
 800a9b6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800a9c2:	4b15      	ldr	r3, [pc, #84]	@ (800aa18 <AUDIO_REC_Start+0x104>)
 800a9c4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800a9d0:	4b11      	ldr	r3, [pc, #68]	@ (800aa18 <AUDIO_REC_Start+0x104>)
 800a9d2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	e000      	b.n	800a9e2 <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800a9e0:	2301      	movs	r3, #1
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3740      	adds	r7, #64	@ 0x40
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000040 	.word	0x20000040
 800a9f0:	20005b78 	.word	0x20005b78
 800a9f4:	20005b7c 	.word	0x20005b7c
 800a9f8:	0801616c 	.word	0x0801616c
 800a9fc:	08016180 	.word	0x08016180
 800aa00:	08016194 	.word	0x08016194
 800aa04:	20005944 	.word	0x20005944
 800aa08:	200010dc 	.word	0x200010dc
 800aa0c:	080161a0 	.word	0x080161a0
 800aa10:	200009f0 	.word	0x200009f0
 800aa14:	080161bc 	.word	0x080161bc
 800aa18:	20001108 	.word	0x20001108
 800aa1c:	080161dc 	.word	0x080161dc

0800aa20 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800aa2e:	4b59      	ldr	r3, [pc, #356]	@ (800ab94 <AUDIO_REC_Process+0x174>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b05      	cmp	r3, #5
 800aa34:	d002      	beq.n	800aa3c <AUDIO_REC_Process+0x1c>
 800aa36:	2b0a      	cmp	r3, #10
 800aa38:	d079      	beq.n	800ab2e <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800aa3a:	e0a7      	b.n	800ab8c <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800aa3c:	4b56      	ldr	r3, [pc, #344]	@ (800ab98 <AUDIO_REC_Process+0x178>)
 800aa3e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa42:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa46:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800aa4a:	d303      	bcc.n	800aa54 <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800aa4c:	4b51      	ldr	r3, [pc, #324]	@ (800ab94 <AUDIO_REC_Process+0x174>)
 800aa4e:	220a      	movs	r2, #10
 800aa50:	701a      	strb	r2, [r3, #0]
        break;
 800aa52:	e09b      	b.n	800ab8c <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800aa54:	4b50      	ldr	r3, [pc, #320]	@ (800ab98 <AUDIO_REC_Process+0x178>)
 800aa56:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa5a:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d128      	bne.n	800aab4 <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800aa62:	4b4d      	ldr	r3, [pc, #308]	@ (800ab98 <AUDIO_REC_Process+0x178>)
 800aa64:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa68:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	4a4a      	ldr	r2, [pc, #296]	@ (800ab98 <AUDIO_REC_Process+0x178>)
 800aa70:	1899      	adds	r1, r3, r2
 800aa72:	f107 0314 	add.w	r3, r7, #20
 800aa76:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800aa7a:	4848      	ldr	r0, [pc, #288]	@ (800ab9c <AUDIO_REC_Process+0x17c>)
 800aa7c:	f002 fd83 	bl	800d586 <f_write>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d004      	beq.n	800aa90 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800aa86:	4846      	ldr	r0, [pc, #280]	@ (800aba0 <AUDIO_REC_Process+0x180>)
 800aa88:	f009 fa1c 	bl	8013ec4 <puts>
          return AUDIO_ERROR_IO;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e07d      	b.n	800ab8c <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800aa90:	4b41      	ldr	r3, [pc, #260]	@ (800ab98 <AUDIO_REC_Process+0x178>)
 800aa92:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa96:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	4a3e      	ldr	r2, [pc, #248]	@ (800ab98 <AUDIO_REC_Process+0x178>)
 800aaa0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800aaa4:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800aaa8:	4b3b      	ldr	r3, [pc, #236]	@ (800ab98 <AUDIO_REC_Process+0x178>)
 800aaaa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800aab4:	4b38      	ldr	r3, [pc, #224]	@ (800ab98 <AUDIO_REC_Process+0x178>)
 800aab6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aaba:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aabe:	4a39      	ldr	r2, [pc, #228]	@ (800aba4 <AUDIO_REC_Process+0x184>)
 800aac0:	fba2 2303 	umull	r2, r3, r2, r3
 800aac4:	0b1b      	lsrs	r3, r3, #12
 800aac6:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800aac8:	4b37      	ldr	r3, [pc, #220]	@ (800aba8 <AUDIO_REC_Process+0x188>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	69ba      	ldr	r2, [r7, #24]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d05b      	beq.n	800ab8a <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800aad2:	4a35      	ldr	r2, [pc, #212]	@ (800aba8 <AUDIO_REC_Process+0x188>)
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800aad8:	4834      	ldr	r0, [pc, #208]	@ (800abac <AUDIO_REC_Process+0x18c>)
 800aada:	f009 f9f3 	bl	8013ec4 <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	4a33      	ldr	r2, [pc, #204]	@ (800abb0 <AUDIO_REC_Process+0x190>)
 800aae2:	fba2 2303 	umull	r2, r3, r2, r3
 800aae6:	095b      	lsrs	r3, r3, #5
 800aae8:	4618      	mov	r0, r3
 800aaea:	69b9      	ldr	r1, [r7, #24]
 800aaec:	4b30      	ldr	r3, [pc, #192]	@ (800abb0 <AUDIO_REC_Process+0x190>)
 800aaee:	fba3 2301 	umull	r2, r3, r3, r1
 800aaf2:	095a      	lsrs	r2, r3, #5
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	1a9b      	subs	r3, r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	1aca      	subs	r2, r1, r3
 800aafe:	4613      	mov	r3, r2
 800ab00:	461a      	mov	r2, r3
 800ab02:	4601      	mov	r1, r0
 800ab04:	482b      	ldr	r0, [pc, #172]	@ (800abb4 <AUDIO_REC_Process+0x194>)
 800ab06:	f009 f975 	bl	8013df4 <iprintf>
        printf("File size : \r\n");
 800ab0a:	482b      	ldr	r0, [pc, #172]	@ (800abb8 <AUDIO_REC_Process+0x198>)
 800ab0c:	f009 f9da 	bl	8013ec4 <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800ab10:	4b21      	ldr	r3, [pc, #132]	@ (800ab98 <AUDIO_REC_Process+0x178>)
 800ab12:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab16:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	da01      	bge.n	800ab22 <AUDIO_REC_Process+0x102>
 800ab1e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800ab22:	129b      	asrs	r3, r3, #10
 800ab24:	4619      	mov	r1, r3
 800ab26:	4825      	ldr	r0, [pc, #148]	@ (800abbc <AUDIO_REC_Process+0x19c>)
 800ab28:	f009 f964 	bl	8013df4 <iprintf>
      break;
 800ab2c:	e02d      	b.n	800ab8a <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800ab2e:	2002      	movs	r0, #2
 800ab30:	f7f9 fc1a 	bl	8004368 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800ab34:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ab38:	f7f9 fe30 	bl	800479c <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	4817      	ldr	r0, [pc, #92]	@ (800ab9c <AUDIO_REC_Process+0x17c>)
 800ab40:	f002 ff3e 	bl	800d9c0 <f_lseek>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d113      	bne.n	800ab72 <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800ab4a:	491d      	ldr	r1, [pc, #116]	@ (800abc0 <AUDIO_REC_Process+0x1a0>)
 800ab4c:	481d      	ldr	r0, [pc, #116]	@ (800abc4 <AUDIO_REC_Process+0x1a4>)
 800ab4e:	f000 f9e5 	bl	800af1c <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800ab52:	f107 0314 	add.w	r3, r7, #20
 800ab56:	222c      	movs	r2, #44	@ 0x2c
 800ab58:	491a      	ldr	r1, [pc, #104]	@ (800abc4 <AUDIO_REC_Process+0x1a4>)
 800ab5a:	4810      	ldr	r0, [pc, #64]	@ (800ab9c <AUDIO_REC_Process+0x17c>)
 800ab5c:	f002 fd13 	bl	800d586 <f_write>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800ab66:	2302      	movs	r3, #2
 800ab68:	77fb      	strb	r3, [r7, #31]
 800ab6a:	e004      	b.n	800ab76 <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	77fb      	strb	r3, [r7, #31]
 800ab70:	e001      	b.n	800ab76 <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800ab72:	2301      	movs	r3, #1
 800ab74:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800ab76:	4b07      	ldr	r3, [pc, #28]	@ (800ab94 <AUDIO_REC_Process+0x174>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800ab7c:	4807      	ldr	r0, [pc, #28]	@ (800ab9c <AUDIO_REC_Process+0x17c>)
 800ab7e:	f002 fef5 	bl	800d96c <f_close>
      printf("wave file closed success\r\n");
 800ab82:	4811      	ldr	r0, [pc, #68]	@ (800abc8 <AUDIO_REC_Process+0x1a8>)
 800ab84:	f009 f99e 	bl	8013ec4 <puts>
      break;
 800ab88:	e000      	b.n	800ab8c <AUDIO_REC_Process+0x16c>
      break;
 800ab8a:	bf00      	nop
      return audio_error;
    }
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3720      	adds	r7, #32
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	200009f0 	.word	0x200009f0
 800ab98:	20001108 	.word	0x20001108
 800ab9c:	20005944 	.word	0x20005944
 800aba0:	080161f4 	.word	0x080161f4
 800aba4:	10624dd3 	.word	0x10624dd3
 800aba8:	20000044 	.word	0x20000044
 800abac:	08016208 	.word	0x08016208
 800abb0:	88888889 	.word	0x88888889
 800abb4:	0801621c 	.word	0x0801621c
 800abb8:	0801622c 	.word	0x0801622c
 800abbc:	0801623c 	.word	0x0801623c
 800abc0:	20005918 	.word	0x20005918
 800abc4:	200010dc 	.word	0x200010dc
 800abc8:	08016248 	.word	0x08016248

0800abcc <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800abcc:	b480      	push	{r7}
 800abce:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800abd0:	4b21      	ldr	r3, [pc, #132]	@ (800ac58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800abd2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800abd6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800abda:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800abde:	4a1e      	ldr	r2, [pc, #120]	@ (800ac58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800abe0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800abe4:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800abe8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800abea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800abee:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800abf2:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800abf6:	d10c      	bne.n	800ac12 <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800abf8:	4b17      	ldr	r3, [pc, #92]	@ (800ac58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800abfa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800ac04:	4b14      	ldr	r3, [pc, #80]	@ (800ac58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ac06:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800ac12:	4b11      	ldr	r3, [pc, #68]	@ (800ac58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ac14:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac18:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ac1c:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800ac20:	d314      	bcc.n	800ac4c <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800ac22:	4b0d      	ldr	r3, [pc, #52]	@ (800ac58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ac24:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800ac2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ac30:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac34:	461a      	mov	r2, r3
 800ac36:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800ac3a:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800ac3e:	4b06      	ldr	r3, [pc, #24]	@ (800ac58 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ac40:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac44:	461a      	mov	r2, r3
 800ac46:	2300      	movs	r3, #0
 800ac48:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800ac4c:	bf00      	nop
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	20001108 	.word	0x20001108

0800ac5c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800ac5c:	b480      	push	{r7}
 800ac5e:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800ac60:	4b21      	ldr	r3, [pc, #132]	@ (800ace8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac62:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac66:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ac6a:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800ac6e:	4a1e      	ldr	r2, [pc, #120]	@ (800ace8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac70:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ac74:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800ac78:	4b1b      	ldr	r3, [pc, #108]	@ (800ace8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac7a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac7e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ac82:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800ac86:	d10c      	bne.n	800aca2 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800ac88:	4b17      	ldr	r3, [pc, #92]	@ (800ace8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac8a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800ac94:	4b14      	ldr	r3, [pc, #80]	@ (800ace8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800ac96:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800aca2:	4b11      	ldr	r3, [pc, #68]	@ (800ace8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800aca4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aca8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800acac:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800acb0:	d314      	bcc.n	800acdc <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800acb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ace8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800acb4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800acbe:	4b0a      	ldr	r3, [pc, #40]	@ (800ace8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800acc0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800acc4:	461a      	mov	r2, r3
 800acc6:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800acca:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800acce:	4b06      	ldr	r3, [pc, #24]	@ (800ace8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800acd0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800acd4:	461a      	mov	r2, r3
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800acdc:	bf00      	nop
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	20001108 	.word	0x20001108

0800acec <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800acf6:	4a1b      	ldr	r2, [pc, #108]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800acfc:	4b19      	ldr	r3, [pc, #100]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800acfe:	2202      	movs	r2, #2
 800ad00:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800ad02:	4b18      	ldr	r3, [pc, #96]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad04:	2210      	movs	r2, #16
 800ad06:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800ad08:	4b16      	ldr	r3, [pc, #88]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad0a:	4a17      	ldr	r2, [pc, #92]	@ (800ad68 <WavProcess_EncInit+0x7c>)
 800ad0c:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800ad0e:	4b15      	ldr	r3, [pc, #84]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad10:	222c      	movs	r2, #44	@ 0x2c
 800ad12:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800ad14:	4b13      	ldr	r3, [pc, #76]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad16:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800ad18:	4a12      	ldr	r2, [pc, #72]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad1a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800ad1c:	08d2      	lsrs	r2, r2, #3
 800ad1e:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800ad20:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800ad24:	4a0f      	ldr	r2, [pc, #60]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad26:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800ad28:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800ad2c:	4a0d      	ldr	r2, [pc, #52]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad2e:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800ad30:	4b0c      	ldr	r3, [pc, #48]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad32:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800ad34:	4b0b      	ldr	r3, [pc, #44]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad36:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800ad38:	08db      	lsrs	r3, r3, #3
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	fb12 f303 	smulbb	r3, r2, r3
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	4b08      	ldr	r3, [pc, #32]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad44:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800ad46:	4907      	ldr	r1, [pc, #28]	@ (800ad64 <WavProcess_EncInit+0x78>)
 800ad48:	6838      	ldr	r0, [r7, #0]
 800ad4a:	f000 f80f 	bl	800ad6c <WavProcess_HeaderInit>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <WavProcess_EncInit+0x6c>
  {
    return 1;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e000      	b.n	800ad5a <WavProcess_EncInit+0x6e>
  }
  return 0;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20005918 	.word	0x20005918
 800ad68:	001d4c00 	.word	0x001d4c00

0800ad6c <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2252      	movs	r2, #82	@ 0x52
 800ad7a:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	2249      	movs	r2, #73	@ 0x49
 800ad82:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3302      	adds	r3, #2
 800ad88:	2246      	movs	r2, #70	@ 0x46
 800ad8a:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3303      	adds	r3, #3
 800ad90:	2246      	movs	r2, #70	@ 0x46
 800ad92:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3304      	adds	r3, #4
 800ad98:	2200      	movs	r2, #0
 800ad9a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3305      	adds	r3, #5
 800ada0:	224c      	movs	r2, #76	@ 0x4c
 800ada2:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	3306      	adds	r3, #6
 800ada8:	221d      	movs	r2, #29
 800adaa:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3307      	adds	r3, #7
 800adb0:	2200      	movs	r2, #0
 800adb2:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3308      	adds	r3, #8
 800adb8:	2257      	movs	r2, #87	@ 0x57
 800adba:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3309      	adds	r3, #9
 800adc0:	2241      	movs	r2, #65	@ 0x41
 800adc2:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	330a      	adds	r3, #10
 800adc8:	2256      	movs	r2, #86	@ 0x56
 800adca:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	330b      	adds	r3, #11
 800add0:	2245      	movs	r2, #69	@ 0x45
 800add2:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	330c      	adds	r3, #12
 800add8:	2266      	movs	r2, #102	@ 0x66
 800adda:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	330d      	adds	r3, #13
 800ade0:	226d      	movs	r2, #109	@ 0x6d
 800ade2:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	330e      	adds	r3, #14
 800ade8:	2274      	movs	r2, #116	@ 0x74
 800adea:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	330f      	adds	r3, #15
 800adf0:	2220      	movs	r2, #32
 800adf2:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3310      	adds	r3, #16
 800adf8:	2210      	movs	r2, #16
 800adfa:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3311      	adds	r3, #17
 800ae00:	2200      	movs	r2, #0
 800ae02:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3312      	adds	r3, #18
 800ae08:	2200      	movs	r2, #0
 800ae0a:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3313      	adds	r3, #19
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	3314      	adds	r3, #20
 800ae18:	2201      	movs	r2, #1
 800ae1a:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3315      	adds	r3, #21
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	8ada      	ldrh	r2, [r3, #22]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3316      	adds	r3, #22
 800ae2c:	b2d2      	uxtb	r2, r2
 800ae2e:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	3317      	adds	r3, #23
 800ae34:	2200      	movs	r2, #0
 800ae36:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	699a      	ldr	r2, [r3, #24]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3318      	adds	r3, #24
 800ae40:	b2d2      	uxtb	r2, r2
 800ae42:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	0a1a      	lsrs	r2, r3, #8
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	3319      	adds	r3, #25
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	0c1a      	lsrs	r2, r3, #16
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	331a      	adds	r3, #26
 800ae5c:	b2d2      	uxtb	r2, r2
 800ae5e:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	0e1a      	lsrs	r2, r3, #24
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	331b      	adds	r3, #27
 800ae6a:	b2d2      	uxtb	r2, r2
 800ae6c:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	69da      	ldr	r2, [r3, #28]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	331c      	adds	r3, #28
 800ae76:	b2d2      	uxtb	r2, r2
 800ae78:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	69db      	ldr	r3, [r3, #28]
 800ae7e:	0a1a      	lsrs	r2, r3, #8
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	331d      	adds	r3, #29
 800ae84:	b2d2      	uxtb	r2, r2
 800ae86:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	0c1a      	lsrs	r2, r3, #16
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	331e      	adds	r3, #30
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	0e1a      	lsrs	r2, r3, #24
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	331f      	adds	r3, #31
 800aea0:	b2d2      	uxtb	r2, r2
 800aea2:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	8c1a      	ldrh	r2, [r3, #32]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3320      	adds	r3, #32
 800aeac:	b2d2      	uxtb	r2, r2
 800aeae:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3321      	adds	r3, #33	@ 0x21
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3322      	adds	r3, #34	@ 0x22
 800aec0:	b2d2      	uxtb	r2, r2
 800aec2:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	3323      	adds	r3, #35	@ 0x23
 800aec8:	2200      	movs	r2, #0
 800aeca:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3324      	adds	r3, #36	@ 0x24
 800aed0:	2264      	movs	r2, #100	@ 0x64
 800aed2:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	3325      	adds	r3, #37	@ 0x25
 800aed8:	2261      	movs	r2, #97	@ 0x61
 800aeda:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3326      	adds	r3, #38	@ 0x26
 800aee0:	2274      	movs	r2, #116	@ 0x74
 800aee2:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3327      	adds	r3, #39	@ 0x27
 800aee8:	2261      	movs	r2, #97	@ 0x61
 800aeea:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3328      	adds	r3, #40	@ 0x28
 800aef0:	2200      	movs	r2, #0
 800aef2:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3329      	adds	r3, #41	@ 0x29
 800aef8:	224c      	movs	r2, #76	@ 0x4c
 800aefa:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	332a      	adds	r3, #42	@ 0x2a
 800af00:	221d      	movs	r2, #29
 800af02:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	332b      	adds	r3, #43	@ 0x2b
 800af08:	2200      	movs	r2, #0
 800af0a:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
	...

0800af1c <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800af26:	4b30      	ldr	r3, [pc, #192]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800af28:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af2c:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3304      	adds	r3, #4
 800af34:	b2d2      	uxtb	r2, r2
 800af36:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800af38:	4b2b      	ldr	r3, [pc, #172]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800af3a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af3e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800af42:	0a1a      	lsrs	r2, r3, #8
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3305      	adds	r3, #5
 800af48:	b2d2      	uxtb	r2, r2
 800af4a:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800af4c:	4b26      	ldr	r3, [pc, #152]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800af4e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af52:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800af56:	0c1a      	lsrs	r2, r3, #16
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	3306      	adds	r3, #6
 800af5c:	b2d2      	uxtb	r2, r2
 800af5e:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800af60:	4b21      	ldr	r3, [pc, #132]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800af62:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af66:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800af6a:	0e1a      	lsrs	r2, r3, #24
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3307      	adds	r3, #7
 800af70:	b2d2      	uxtb	r2, r2
 800af72:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800af74:	4b1c      	ldr	r3, [pc, #112]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800af76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af7a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800af7e:	3b2c      	subs	r3, #44	@ 0x2c
 800af80:	4a19      	ldr	r2, [pc, #100]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800af82:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800af86:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800af8a:	4b17      	ldr	r3, [pc, #92]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800af8c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af90:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3328      	adds	r3, #40	@ 0x28
 800af98:	b2d2      	uxtb	r2, r2
 800af9a:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800af9c:	4b12      	ldr	r3, [pc, #72]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800af9e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afa2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800afa6:	0a1a      	lsrs	r2, r3, #8
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	3329      	adds	r3, #41	@ 0x29
 800afac:	b2d2      	uxtb	r2, r2
 800afae:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800afb0:	4b0d      	ldr	r3, [pc, #52]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800afb2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afb6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800afba:	0c1a      	lsrs	r2, r3, #16
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	332a      	adds	r3, #42	@ 0x2a
 800afc0:	b2d2      	uxtb	r2, r2
 800afc2:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800afc4:	4b08      	ldr	r3, [pc, #32]	@ (800afe8 <WavProcess_HeaderUpdate+0xcc>)
 800afc6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afca:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800afce:	0e1a      	lsrs	r2, r3, #24
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	332b      	adds	r3, #43	@ 0x2b
 800afd4:	b2d2      	uxtb	r2, r2
 800afd6:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	20001108 	.word	0x20001108

0800afec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aff0:	4904      	ldr	r1, [pc, #16]	@ (800b004 <MX_FATFS_Init+0x18>)
 800aff2:	4805      	ldr	r0, [pc, #20]	@ (800b008 <MX_FATFS_Init+0x1c>)
 800aff4:	f003 fb66 	bl	800e6c4 <FATFS_LinkDriver>
 800aff8:	4603      	mov	r3, r0
 800affa:	461a      	mov	r2, r3
 800affc:	4b03      	ldr	r3, [pc, #12]	@ (800b00c <MX_FATFS_Init+0x20>)
 800affe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b000:	bf00      	nop
 800b002:	bd80      	pop	{r7, pc}
 800b004:	20005b78 	.word	0x20005b78
 800b008:	080162f8 	.word	0x080162f8
 800b00c:	20005b74 	.word	0x20005b74

0800b010 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b014:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b016:	4618      	mov	r0, r3
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b02a:	f000 f888 	bl	800b13e <BSP_SD_IsDetected>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b01      	cmp	r3, #1
 800b032:	d001      	beq.n	800b038 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b034:	2302      	movs	r3, #2
 800b036:	e005      	b.n	800b044 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b038:	4804      	ldr	r0, [pc, #16]	@ (800b04c <BSP_SD_Init+0x2c>)
 800b03a:	f7fd f90a 	bl	8008252 <HAL_SD_Init>
 800b03e:	4603      	mov	r3, r0
 800b040:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b042:	79fb      	ldrb	r3, [r7, #7]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20000ce0 	.word	0x20000ce0

0800b050 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	68f9      	ldr	r1, [r7, #12]
 800b066:	4806      	ldr	r0, [pc, #24]	@ (800b080 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b068:	f7fd f9ac 	bl	80083c4 <HAL_SD_ReadBlocks_DMA>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	20000ce0 	.word	0x20000ce0

0800b084 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	68f9      	ldr	r1, [r7, #12]
 800b09a:	4806      	ldr	r0, [pc, #24]	@ (800b0b4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b09c:	f7fd fa74 	bl	8008588 <HAL_SD_WriteBlocks_DMA>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	20000ce0 	.word	0x20000ce0

0800b0b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b0bc:	4805      	ldr	r0, [pc, #20]	@ (800b0d4 <BSP_SD_GetCardState+0x1c>)
 800b0be:	f7fd fe99 	bl	8008df4 <HAL_SD_GetCardState>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	bf14      	ite	ne
 800b0c8:	2301      	movne	r3, #1
 800b0ca:	2300      	moveq	r3, #0
 800b0cc:	b2db      	uxtb	r3, r3
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20000ce0 	.word	0x20000ce0

0800b0d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	4803      	ldr	r0, [pc, #12]	@ (800b0f0 <BSP_SD_GetCardInfo+0x18>)
 800b0e4:	f7fd fe5a 	bl	8008d9c <HAL_SD_GetCardInfo>
}
 800b0e8:	bf00      	nop
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20000ce0 	.word	0x20000ce0

0800b0f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b0fc:	f000 f818 	bl	800b130 <BSP_SD_AbortCallback>
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b110:	f000 f9a8 	bl	800b464 <BSP_SD_WriteCpltCallback>
}
 800b114:	bf00      	nop
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b124:	f000 f9aa 	bl	800b47c <BSP_SD_ReadCpltCallback>
}
 800b128:	bf00      	nop
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b130:	b480      	push	{r7}
 800b132:	af00      	add	r7, sp, #0

}
 800b134:	bf00      	nop
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b082      	sub	sp, #8
 800b142:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b144:	2301      	movs	r3, #1
 800b146:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b148:	f000 f80c 	bl	800b164 <BSP_PlatformIsDetected>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d101      	bne.n	800b156 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b152:	2300      	movs	r3, #0
 800b154:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b156:	79fb      	ldrb	r3, [r7, #7]
 800b158:	b2db      	uxtb	r3, r3
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b16a:	2301      	movs	r3, #1
 800b16c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b16e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b172:	4806      	ldr	r0, [pc, #24]	@ (800b18c <BSP_PlatformIsDetected+0x28>)
 800b174:	f7fa fb74 	bl	8005860 <HAL_GPIO_ReadPin>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b17e:	2300      	movs	r3, #0
 800b180:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b182:	79fb      	ldrb	r3, [r7, #7]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	40020800 	.word	0x40020800

0800b190 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b198:	f7f9 faf4 	bl	8004784 <HAL_GetTick>
 800b19c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b19e:	e006      	b.n	800b1ae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1a0:	f7ff ff8a 	bl	800b0b8 <BSP_SD_GetCardState>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e009      	b.n	800b1c2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b1ae:	f7f9 fae9 	bl	8004784 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d8f0      	bhi.n	800b1a0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b1be:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b1d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b204 <SD_CheckStatus+0x38>)
 800b1d8:	2201      	movs	r2, #1
 800b1da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b1dc:	f7ff ff6c 	bl	800b0b8 <BSP_SD_GetCardState>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d107      	bne.n	800b1f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b1e6:	4b07      	ldr	r3, [pc, #28]	@ (800b204 <SD_CheckStatus+0x38>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	f023 0301 	bic.w	r3, r3, #1
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	4b04      	ldr	r3, [pc, #16]	@ (800b204 <SD_CheckStatus+0x38>)
 800b1f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b1f6:	4b03      	ldr	r3, [pc, #12]	@ (800b204 <SD_CheckStatus+0x38>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	b2db      	uxtb	r3, r3
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	20000048 	.word	0x20000048

0800b208 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	4603      	mov	r3, r0
 800b210:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b212:	f7ff ff05 	bl	800b020 <BSP_SD_Init>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d107      	bne.n	800b22c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b21c:	79fb      	ldrb	r3, [r7, #7]
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff ffd4 	bl	800b1cc <SD_CheckStatus>
 800b224:	4603      	mov	r3, r0
 800b226:	461a      	mov	r2, r3
 800b228:	4b04      	ldr	r3, [pc, #16]	@ (800b23c <SD_initialize+0x34>)
 800b22a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b22c:	4b03      	ldr	r3, [pc, #12]	@ (800b23c <SD_initialize+0x34>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	b2db      	uxtb	r3, r3
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20000048 	.word	0x20000048

0800b240 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b24a:	79fb      	ldrb	r3, [r7, #7]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff ffbd 	bl	800b1cc <SD_CheckStatus>
 800b252:	4603      	mov	r3, r0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	607a      	str	r2, [r7, #4]
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	4603      	mov	r3, r0
 800b26a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b270:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b274:	f7ff ff8c 	bl	800b190 <SD_CheckStatusWithTimeout>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	da01      	bge.n	800b282 <SD_read+0x26>
  {
    return res;
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	e03b      	b.n	800b2fa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	6879      	ldr	r1, [r7, #4]
 800b286:	68b8      	ldr	r0, [r7, #8]
 800b288:	f7ff fee2 	bl	800b050 <BSP_SD_ReadBlocks_DMA>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d132      	bne.n	800b2f8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b292:	4b1c      	ldr	r3, [pc, #112]	@ (800b304 <SD_read+0xa8>)
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b298:	f7f9 fa74 	bl	8004784 <HAL_GetTick>
 800b29c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b29e:	bf00      	nop
 800b2a0:	4b18      	ldr	r3, [pc, #96]	@ (800b304 <SD_read+0xa8>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d108      	bne.n	800b2ba <SD_read+0x5e>
 800b2a8:	f7f9 fa6c 	bl	8004784 <HAL_GetTick>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d9f2      	bls.n	800b2a0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b2ba:	4b12      	ldr	r3, [pc, #72]	@ (800b304 <SD_read+0xa8>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d102      	bne.n	800b2c8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	75fb      	strb	r3, [r7, #23]
 800b2c6:	e017      	b.n	800b2f8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b2c8:	4b0e      	ldr	r3, [pc, #56]	@ (800b304 <SD_read+0xa8>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b2ce:	f7f9 fa59 	bl	8004784 <HAL_GetTick>
 800b2d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b2d4:	e007      	b.n	800b2e6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b2d6:	f7ff feef 	bl	800b0b8 <BSP_SD_GetCardState>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d102      	bne.n	800b2e6 <SD_read+0x8a>
          {
            res = RES_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b2e4:	e008      	b.n	800b2f8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b2e6:	f7f9 fa4d 	bl	8004784 <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d9ee      	bls.n	800b2d6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	20005db0 	.word	0x20005db0

0800b308 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	607a      	str	r2, [r7, #4]
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	4603      	mov	r3, r0
 800b316:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b31c:	4b24      	ldr	r3, [pc, #144]	@ (800b3b0 <SD_write+0xa8>)
 800b31e:	2200      	movs	r2, #0
 800b320:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b322:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b326:	f7ff ff33 	bl	800b190 <SD_CheckStatusWithTimeout>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	da01      	bge.n	800b334 <SD_write+0x2c>
  {
    return res;
 800b330:	7dfb      	ldrb	r3, [r7, #23]
 800b332:	e038      	b.n	800b3a6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	68b8      	ldr	r0, [r7, #8]
 800b33a:	f7ff fea3 	bl	800b084 <BSP_SD_WriteBlocks_DMA>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d12f      	bne.n	800b3a4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b344:	f7f9 fa1e 	bl	8004784 <HAL_GetTick>
 800b348:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b34a:	bf00      	nop
 800b34c:	4b18      	ldr	r3, [pc, #96]	@ (800b3b0 <SD_write+0xa8>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d108      	bne.n	800b366 <SD_write+0x5e>
 800b354:	f7f9 fa16 	bl	8004784 <HAL_GetTick>
 800b358:	4602      	mov	r2, r0
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b362:	4293      	cmp	r3, r2
 800b364:	d9f2      	bls.n	800b34c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b366:	4b12      	ldr	r3, [pc, #72]	@ (800b3b0 <SD_write+0xa8>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d102      	bne.n	800b374 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	75fb      	strb	r3, [r7, #23]
 800b372:	e017      	b.n	800b3a4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b374:	4b0e      	ldr	r3, [pc, #56]	@ (800b3b0 <SD_write+0xa8>)
 800b376:	2200      	movs	r2, #0
 800b378:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b37a:	f7f9 fa03 	bl	8004784 <HAL_GetTick>
 800b37e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b380:	e007      	b.n	800b392 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b382:	f7ff fe99 	bl	800b0b8 <BSP_SD_GetCardState>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d102      	bne.n	800b392 <SD_write+0x8a>
          {
            res = RES_OK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	75fb      	strb	r3, [r7, #23]
            break;
 800b390:	e008      	b.n	800b3a4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b392:	f7f9 f9f7 	bl	8004784 <HAL_GetTick>
 800b396:	4602      	mov	r2, r0
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d9ee      	bls.n	800b382 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20005dac 	.word	0x20005dac

0800b3b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08c      	sub	sp, #48	@ 0x30
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	603a      	str	r2, [r7, #0]
 800b3be:	71fb      	strb	r3, [r7, #7]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b3ca:	4b25      	ldr	r3, [pc, #148]	@ (800b460 <SD_ioctl+0xac>)
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	f003 0301 	and.w	r3, r3, #1
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <SD_ioctl+0x28>
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e03c      	b.n	800b456 <SD_ioctl+0xa2>

  switch (cmd)
 800b3dc:	79bb      	ldrb	r3, [r7, #6]
 800b3de:	2b03      	cmp	r3, #3
 800b3e0:	d834      	bhi.n	800b44c <SD_ioctl+0x98>
 800b3e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e8 <SD_ioctl+0x34>)
 800b3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e8:	0800b3f9 	.word	0x0800b3f9
 800b3ec:	0800b401 	.word	0x0800b401
 800b3f0:	0800b419 	.word	0x0800b419
 800b3f4:	0800b433 	.word	0x0800b433
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b3fe:	e028      	b.n	800b452 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b400:	f107 030c 	add.w	r3, r7, #12
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff fe67 	bl	800b0d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b40a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b410:	2300      	movs	r3, #0
 800b412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b416:	e01c      	b.n	800b452 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b418:	f107 030c 	add.w	r3, r7, #12
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff fe5b 	bl	800b0d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b424:	b29a      	uxth	r2, r3
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b42a:	2300      	movs	r3, #0
 800b42c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b430:	e00f      	b.n	800b452 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b432:	f107 030c 	add.w	r3, r7, #12
 800b436:	4618      	mov	r0, r3
 800b438:	f7ff fe4e 	bl	800b0d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43e:	0a5a      	lsrs	r2, r3, #9
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b44a:	e002      	b.n	800b452 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b44c:	2304      	movs	r3, #4
 800b44e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b456:	4618      	mov	r0, r3
 800b458:	3730      	adds	r7, #48	@ 0x30
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20000048 	.word	0x20000048

0800b464 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b464:	b480      	push	{r7}
 800b466:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b468:	4b03      	ldr	r3, [pc, #12]	@ (800b478 <BSP_SD_WriteCpltCallback+0x14>)
 800b46a:	2201      	movs	r2, #1
 800b46c:	601a      	str	r2, [r3, #0]
}
 800b46e:	bf00      	nop
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	20005dac 	.word	0x20005dac

0800b47c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b480:	4b03      	ldr	r3, [pc, #12]	@ (800b490 <BSP_SD_ReadCpltCallback+0x14>)
 800b482:	2201      	movs	r2, #1
 800b484:	601a      	str	r2, [r3, #0]
}
 800b486:	bf00      	nop
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	20005db0 	.word	0x20005db0

0800b494 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b49e:	79fb      	ldrb	r3, [r7, #7]
 800b4a0:	4a08      	ldr	r2, [pc, #32]	@ (800b4c4 <disk_status+0x30>)
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	79fa      	ldrb	r2, [r7, #7]
 800b4ac:	4905      	ldr	r1, [pc, #20]	@ (800b4c4 <disk_status+0x30>)
 800b4ae:	440a      	add	r2, r1
 800b4b0:	7a12      	ldrb	r2, [r2, #8]
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	4798      	blx	r3
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20005ddc 	.word	0x20005ddc

0800b4c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b4d6:	79fb      	ldrb	r3, [r7, #7]
 800b4d8:	4a0d      	ldr	r2, [pc, #52]	@ (800b510 <disk_initialize+0x48>)
 800b4da:	5cd3      	ldrb	r3, [r2, r3]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d111      	bne.n	800b504 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b4e0:	79fb      	ldrb	r3, [r7, #7]
 800b4e2:	4a0b      	ldr	r2, [pc, #44]	@ (800b510 <disk_initialize+0x48>)
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	4a09      	ldr	r2, [pc, #36]	@ (800b510 <disk_initialize+0x48>)
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	79fa      	ldrb	r2, [r7, #7]
 800b4f6:	4906      	ldr	r1, [pc, #24]	@ (800b510 <disk_initialize+0x48>)
 800b4f8:	440a      	add	r2, r1
 800b4fa:	7a12      	ldrb	r2, [r2, #8]
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	4798      	blx	r3
 800b500:	4603      	mov	r3, r0
 800b502:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	20005ddc 	.word	0x20005ddc

0800b514 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b087      	sub	sp, #28
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60b9      	str	r1, [r7, #8]
 800b51c:	607a      	str	r2, [r7, #4]
 800b51e:	603b      	str	r3, [r7, #0]
 800b520:	4603      	mov	r3, r0
 800b522:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	4a0a      	ldr	r2, [pc, #40]	@ (800b550 <disk_read+0x3c>)
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	689c      	ldr	r4, [r3, #8]
 800b530:	7bfb      	ldrb	r3, [r7, #15]
 800b532:	4a07      	ldr	r2, [pc, #28]	@ (800b550 <disk_read+0x3c>)
 800b534:	4413      	add	r3, r2
 800b536:	7a18      	ldrb	r0, [r3, #8]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	68b9      	ldr	r1, [r7, #8]
 800b53e:	47a0      	blx	r4
 800b540:	4603      	mov	r3, r0
 800b542:	75fb      	strb	r3, [r7, #23]
  return res;
 800b544:	7dfb      	ldrb	r3, [r7, #23]
}
 800b546:	4618      	mov	r0, r3
 800b548:	371c      	adds	r7, #28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd90      	pop	{r4, r7, pc}
 800b54e:	bf00      	nop
 800b550:	20005ddc 	.word	0x20005ddc

0800b554 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b554:	b590      	push	{r4, r7, lr}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60b9      	str	r1, [r7, #8]
 800b55c:	607a      	str	r2, [r7, #4]
 800b55e:	603b      	str	r3, [r7, #0]
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	4a0a      	ldr	r2, [pc, #40]	@ (800b590 <disk_write+0x3c>)
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4413      	add	r3, r2
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	68dc      	ldr	r4, [r3, #12]
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	4a07      	ldr	r2, [pc, #28]	@ (800b590 <disk_write+0x3c>)
 800b574:	4413      	add	r3, r2
 800b576:	7a18      	ldrb	r0, [r3, #8]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	68b9      	ldr	r1, [r7, #8]
 800b57e:	47a0      	blx	r4
 800b580:	4603      	mov	r3, r0
 800b582:	75fb      	strb	r3, [r7, #23]
  return res;
 800b584:	7dfb      	ldrb	r3, [r7, #23]
}
 800b586:	4618      	mov	r0, r3
 800b588:	371c      	adds	r7, #28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd90      	pop	{r4, r7, pc}
 800b58e:	bf00      	nop
 800b590:	20005ddc 	.word	0x20005ddc

0800b594 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	603a      	str	r2, [r7, #0]
 800b59e:	71fb      	strb	r3, [r7, #7]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	4a09      	ldr	r2, [pc, #36]	@ (800b5cc <disk_ioctl+0x38>)
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	79fa      	ldrb	r2, [r7, #7]
 800b5b2:	4906      	ldr	r1, [pc, #24]	@ (800b5cc <disk_ioctl+0x38>)
 800b5b4:	440a      	add	r2, r1
 800b5b6:	7a10      	ldrb	r0, [r2, #8]
 800b5b8:	79b9      	ldrb	r1, [r7, #6]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	4798      	blx	r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73fb      	strb	r3, [r7, #15]
  return res;
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	20005ddc 	.word	0x20005ddc

0800b5d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b5e0:	89fb      	ldrh	r3, [r7, #14]
 800b5e2:	021b      	lsls	r3, r3, #8
 800b5e4:	b21a      	sxth	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	b21b      	sxth	r3, r3
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	b21b      	sxth	r3, r3
 800b5f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b5f2:	89fb      	ldrh	r3, [r7, #14]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3303      	adds	r3, #3
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	021b      	lsls	r3, r3, #8
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	3202      	adds	r2, #2
 800b618:	7812      	ldrb	r2, [r2, #0]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	021b      	lsls	r3, r3, #8
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	3201      	adds	r2, #1
 800b626:	7812      	ldrb	r2, [r2, #0]
 800b628:	4313      	orrs	r3, r2
 800b62a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	021b      	lsls	r3, r3, #8
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	7812      	ldrb	r2, [r2, #0]
 800b634:	4313      	orrs	r3, r2
 800b636:	60fb      	str	r3, [r7, #12]
	return rv;
 800b638:	68fb      	ldr	r3, [r7, #12]
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	887a      	ldrh	r2, [r7, #2]
 800b65a:	b2d2      	uxtb	r2, r2
 800b65c:	701a      	strb	r2, [r3, #0]
 800b65e:	887b      	ldrh	r3, [r7, #2]
 800b660:	0a1b      	lsrs	r3, r3, #8
 800b662:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	607a      	str	r2, [r7, #4]
 800b66a:	887a      	ldrh	r2, [r7, #2]
 800b66c:	b2d2      	uxtb	r2, r2
 800b66e:	701a      	strb	r2, [r3, #0]
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	607a      	str	r2, [r7, #4]
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	b2d2      	uxtb	r2, r2
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	0a1b      	lsrs	r3, r3, #8
 800b696:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	1c5a      	adds	r2, r3, #1
 800b69c:	607a      	str	r2, [r7, #4]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	b2d2      	uxtb	r2, r2
 800b6a2:	701a      	strb	r2, [r3, #0]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	0a1b      	lsrs	r3, r3, #8
 800b6a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	1c5a      	adds	r2, r3, #1
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	b2d2      	uxtb	r2, r2
 800b6b4:	701a      	strb	r2, [r3, #0]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	0a1b      	lsrs	r3, r3, #8
 800b6ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	1c5a      	adds	r2, r3, #1
 800b6c0:	607a      	str	r2, [r7, #4]
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	b2d2      	uxtb	r2, r2
 800b6c6:	701a      	strb	r2, [r3, #0]
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b6d4:	b480      	push	{r7}
 800b6d6:	b087      	sub	sp, #28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00d      	beq.n	800b70a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	1c53      	adds	r3, r2, #1
 800b6f2:	613b      	str	r3, [r7, #16]
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	1c59      	adds	r1, r3, #1
 800b6f8:	6179      	str	r1, [r7, #20]
 800b6fa:	7812      	ldrb	r2, [r2, #0]
 800b6fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3b01      	subs	r3, #1
 800b702:	607b      	str	r3, [r7, #4]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1f1      	bne.n	800b6ee <mem_cpy+0x1a>
	}
}
 800b70a:	bf00      	nop
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b716:	b480      	push	{r7}
 800b718:	b087      	sub	sp, #28
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	60b9      	str	r1, [r7, #8]
 800b720:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	617a      	str	r2, [r7, #20]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	b2d2      	uxtb	r2, r2
 800b730:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3b01      	subs	r3, #1
 800b736:	607b      	str	r3, [r7, #4]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1f3      	bne.n	800b726 <mem_set+0x10>
}
 800b73e:	bf00      	nop
 800b740:	bf00      	nop
 800b742:	371c      	adds	r7, #28
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b74c:	b480      	push	{r7}
 800b74e:	b089      	sub	sp, #36	@ 0x24
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	61fb      	str	r3, [r7, #28]
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b760:	2300      	movs	r3, #0
 800b762:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	1c5a      	adds	r2, r3, #1
 800b768:	61fa      	str	r2, [r7, #28]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	4619      	mov	r1, r3
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	61ba      	str	r2, [r7, #24]
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	1acb      	subs	r3, r1, r3
 800b778:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	607b      	str	r3, [r7, #4]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d002      	beq.n	800b78c <mem_cmp+0x40>
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d0eb      	beq.n	800b764 <mem_cmp+0x18>

	return r;
 800b78c:	697b      	ldr	r3, [r7, #20]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3724      	adds	r7, #36	@ 0x24
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b7a4:	e002      	b.n	800b7ac <chk_chr+0x12>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	607b      	str	r3, [r7, #4]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d005      	beq.n	800b7c0 <chk_chr+0x26>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d1f2      	bne.n	800b7a6 <chk_chr+0xc>
	return *str;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60bb      	str	r3, [r7, #8]
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	e029      	b.n	800b838 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b7e4:	4a27      	ldr	r2, [pc, #156]	@ (800b884 <chk_lock+0xb4>)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	4413      	add	r3, r2
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d01d      	beq.n	800b82e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b7f2:	4a24      	ldr	r2, [pc, #144]	@ (800b884 <chk_lock+0xb4>)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	011b      	lsls	r3, r3, #4
 800b7f8:	4413      	add	r3, r2
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	429a      	cmp	r2, r3
 800b802:	d116      	bne.n	800b832 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b804:	4a1f      	ldr	r2, [pc, #124]	@ (800b884 <chk_lock+0xb4>)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	011b      	lsls	r3, r3, #4
 800b80a:	4413      	add	r3, r2
 800b80c:	3304      	adds	r3, #4
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b814:	429a      	cmp	r2, r3
 800b816:	d10c      	bne.n	800b832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b818:	4a1a      	ldr	r2, [pc, #104]	@ (800b884 <chk_lock+0xb4>)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	011b      	lsls	r3, r3, #4
 800b81e:	4413      	add	r3, r2
 800b820:	3308      	adds	r3, #8
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b828:	429a      	cmp	r2, r3
 800b82a:	d102      	bne.n	800b832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b82c:	e007      	b.n	800b83e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b82e:	2301      	movs	r3, #1
 800b830:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d9d2      	bls.n	800b7e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2b02      	cmp	r3, #2
 800b842:	d109      	bne.n	800b858 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <chk_lock+0x80>
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d101      	bne.n	800b854 <chk_lock+0x84>
 800b850:	2300      	movs	r3, #0
 800b852:	e010      	b.n	800b876 <chk_lock+0xa6>
 800b854:	2312      	movs	r3, #18
 800b856:	e00e      	b.n	800b876 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d108      	bne.n	800b870 <chk_lock+0xa0>
 800b85e:	4a09      	ldr	r2, [pc, #36]	@ (800b884 <chk_lock+0xb4>)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	011b      	lsls	r3, r3, #4
 800b864:	4413      	add	r3, r2
 800b866:	330c      	adds	r3, #12
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b86e:	d101      	bne.n	800b874 <chk_lock+0xa4>
 800b870:	2310      	movs	r3, #16
 800b872:	e000      	b.n	800b876 <chk_lock+0xa6>
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	20005dbc 	.word	0x20005dbc

0800b888 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b88e:	2300      	movs	r3, #0
 800b890:	607b      	str	r3, [r7, #4]
 800b892:	e002      	b.n	800b89a <enq_lock+0x12>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3301      	adds	r3, #1
 800b898:	607b      	str	r3, [r7, #4]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d806      	bhi.n	800b8ae <enq_lock+0x26>
 800b8a0:	4a09      	ldr	r2, [pc, #36]	@ (800b8c8 <enq_lock+0x40>)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	4413      	add	r3, r2
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1f2      	bne.n	800b894 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	bf14      	ite	ne
 800b8b4:	2301      	movne	r3, #1
 800b8b6:	2300      	moveq	r3, #0
 800b8b8:	b2db      	uxtb	r3, r3
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	20005dbc 	.word	0x20005dbc

0800b8cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	e01f      	b.n	800b91c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b8dc:	4a41      	ldr	r2, [pc, #260]	@ (800b9e4 <inc_lock+0x118>)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	011b      	lsls	r3, r3, #4
 800b8e2:	4413      	add	r3, r2
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d113      	bne.n	800b916 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b8ee:	4a3d      	ldr	r2, [pc, #244]	@ (800b9e4 <inc_lock+0x118>)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	011b      	lsls	r3, r3, #4
 800b8f4:	4413      	add	r3, r2
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d109      	bne.n	800b916 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b902:	4a38      	ldr	r2, [pc, #224]	@ (800b9e4 <inc_lock+0x118>)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	011b      	lsls	r3, r3, #4
 800b908:	4413      	add	r3, r2
 800b90a:	3308      	adds	r3, #8
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b912:	429a      	cmp	r2, r3
 800b914:	d006      	beq.n	800b924 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3301      	adds	r3, #1
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d9dc      	bls.n	800b8dc <inc_lock+0x10>
 800b922:	e000      	b.n	800b926 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b924:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d132      	bne.n	800b992 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b92c:	2300      	movs	r3, #0
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	e002      	b.n	800b938 <inc_lock+0x6c>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3301      	adds	r3, #1
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d806      	bhi.n	800b94c <inc_lock+0x80>
 800b93e:	4a29      	ldr	r2, [pc, #164]	@ (800b9e4 <inc_lock+0x118>)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	011b      	lsls	r3, r3, #4
 800b944:	4413      	add	r3, r2
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1f2      	bne.n	800b932 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d101      	bne.n	800b956 <inc_lock+0x8a>
 800b952:	2300      	movs	r3, #0
 800b954:	e040      	b.n	800b9d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	4922      	ldr	r1, [pc, #136]	@ (800b9e4 <inc_lock+0x118>)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	011b      	lsls	r3, r3, #4
 800b960:	440b      	add	r3, r1
 800b962:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	689a      	ldr	r2, [r3, #8]
 800b968:	491e      	ldr	r1, [pc, #120]	@ (800b9e4 <inc_lock+0x118>)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	011b      	lsls	r3, r3, #4
 800b96e:	440b      	add	r3, r1
 800b970:	3304      	adds	r3, #4
 800b972:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	695a      	ldr	r2, [r3, #20]
 800b978:	491a      	ldr	r1, [pc, #104]	@ (800b9e4 <inc_lock+0x118>)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	011b      	lsls	r3, r3, #4
 800b97e:	440b      	add	r3, r1
 800b980:	3308      	adds	r3, #8
 800b982:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b984:	4a17      	ldr	r2, [pc, #92]	@ (800b9e4 <inc_lock+0x118>)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	4413      	add	r3, r2
 800b98c:	330c      	adds	r3, #12
 800b98e:	2200      	movs	r2, #0
 800b990:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d009      	beq.n	800b9ac <inc_lock+0xe0>
 800b998:	4a12      	ldr	r2, [pc, #72]	@ (800b9e4 <inc_lock+0x118>)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	011b      	lsls	r3, r3, #4
 800b99e:	4413      	add	r3, r2
 800b9a0:	330c      	adds	r3, #12
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <inc_lock+0xe0>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	e015      	b.n	800b9d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d108      	bne.n	800b9c4 <inc_lock+0xf8>
 800b9b2:	4a0c      	ldr	r2, [pc, #48]	@ (800b9e4 <inc_lock+0x118>)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	011b      	lsls	r3, r3, #4
 800b9b8:	4413      	add	r3, r2
 800b9ba:	330c      	adds	r3, #12
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	e001      	b.n	800b9c8 <inc_lock+0xfc>
 800b9c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9c8:	4906      	ldr	r1, [pc, #24]	@ (800b9e4 <inc_lock+0x118>)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	011b      	lsls	r3, r3, #4
 800b9ce:	440b      	add	r3, r1
 800b9d0:	330c      	adds	r3, #12
 800b9d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	3301      	adds	r3, #1
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	20005dbc 	.word	0x20005dbc

0800b9e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	607b      	str	r3, [r7, #4]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d825      	bhi.n	800ba48 <dec_lock+0x60>
		n = Files[i].ctr;
 800b9fc:	4a17      	ldr	r2, [pc, #92]	@ (800ba5c <dec_lock+0x74>)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	011b      	lsls	r3, r3, #4
 800ba02:	4413      	add	r3, r2
 800ba04:	330c      	adds	r3, #12
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ba0a:	89fb      	ldrh	r3, [r7, #14]
 800ba0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba10:	d101      	bne.n	800ba16 <dec_lock+0x2e>
 800ba12:	2300      	movs	r3, #0
 800ba14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ba16:	89fb      	ldrh	r3, [r7, #14]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <dec_lock+0x3a>
 800ba1c:	89fb      	ldrh	r3, [r7, #14]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ba22:	4a0e      	ldr	r2, [pc, #56]	@ (800ba5c <dec_lock+0x74>)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	4413      	add	r3, r2
 800ba2a:	330c      	adds	r3, #12
 800ba2c:	89fa      	ldrh	r2, [r7, #14]
 800ba2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ba30:	89fb      	ldrh	r3, [r7, #14]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d105      	bne.n	800ba42 <dec_lock+0x5a>
 800ba36:	4a09      	ldr	r2, [pc, #36]	@ (800ba5c <dec_lock+0x74>)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	4413      	add	r3, r2
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	737b      	strb	r3, [r7, #13]
 800ba46:	e001      	b.n	800ba4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ba48:	2302      	movs	r3, #2
 800ba4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ba4c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	20005dbc 	.word	0x20005dbc

0800ba60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ba68:	2300      	movs	r3, #0
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	e010      	b.n	800ba90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ba6e:	4a0d      	ldr	r2, [pc, #52]	@ (800baa4 <clear_lock+0x44>)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	011b      	lsls	r3, r3, #4
 800ba74:	4413      	add	r3, r2
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d105      	bne.n	800ba8a <clear_lock+0x2a>
 800ba7e:	4a09      	ldr	r2, [pc, #36]	@ (800baa4 <clear_lock+0x44>)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	4413      	add	r3, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	60fb      	str	r3, [r7, #12]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d9eb      	bls.n	800ba6e <clear_lock+0xe>
	}
}
 800ba96:	bf00      	nop
 800ba98:	bf00      	nop
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr
 800baa4:	20005dbc 	.word	0x20005dbc

0800baa8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	78db      	ldrb	r3, [r3, #3]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d034      	beq.n	800bb26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	7858      	ldrb	r0, [r3, #1]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bacc:	2301      	movs	r3, #1
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	f7ff fd40 	bl	800b554 <disk_write>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bada:	2301      	movs	r3, #1
 800badc:	73fb      	strb	r3, [r7, #15]
 800bade:	e022      	b.n	800bb26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	1ad2      	subs	r2, r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d217      	bcs.n	800bb26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	789b      	ldrb	r3, [r3, #2]
 800bafa:	613b      	str	r3, [r7, #16]
 800bafc:	e010      	b.n	800bb20 <sync_window+0x78>
					wsect += fs->fsize;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	4413      	add	r3, r2
 800bb06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	7858      	ldrb	r0, [r3, #1]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb12:	2301      	movs	r3, #1
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	f7ff fd1d 	bl	800b554 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	613b      	str	r3, [r7, #16]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d8eb      	bhi.n	800bafe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3718      	adds	r7, #24
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d01b      	beq.n	800bb80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff ffad 	bl	800baa8 <sync_window>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d113      	bne.n	800bb80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	7858      	ldrb	r0, [r3, #1]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb62:	2301      	movs	r3, #1
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	f7ff fcd5 	bl	800b514 <disk_read>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bb70:	f04f 33ff 	mov.w	r3, #4294967295
 800bb74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff ff87 	bl	800baa8 <sync_window>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d158      	bne.n	800bc56 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d148      	bne.n	800bc3e <sync_fs+0xb2>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	791b      	ldrb	r3, [r3, #4]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d144      	bne.n	800bc3e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3330      	adds	r3, #48	@ 0x30
 800bbb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff fda9 	bl	800b716 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3330      	adds	r3, #48	@ 0x30
 800bbc8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bbcc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7ff fd38 	bl	800b646 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	3330      	adds	r3, #48	@ 0x30
 800bbda:	4921      	ldr	r1, [pc, #132]	@ (800bc60 <sync_fs+0xd4>)
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7ff fd4d 	bl	800b67c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3330      	adds	r3, #48	@ 0x30
 800bbe6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bbea:	491e      	ldr	r1, [pc, #120]	@ (800bc64 <sync_fs+0xd8>)
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7ff fd45 	bl	800b67c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	3330      	adds	r3, #48	@ 0x30
 800bbf6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4610      	mov	r0, r2
 800bc02:	f7ff fd3b 	bl	800b67c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3330      	adds	r3, #48	@ 0x30
 800bc0a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	4619      	mov	r1, r3
 800bc14:	4610      	mov	r0, r2
 800bc16:	f7ff fd31 	bl	800b67c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	69db      	ldr	r3, [r3, #28]
 800bc1e:	1c5a      	adds	r2, r3, #1
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	7858      	ldrb	r0, [r3, #1]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc32:	2301      	movs	r3, #1
 800bc34:	f7ff fc8e 	bl	800b554 <disk_write>
			fs->fsi_flag = 0;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	785b      	ldrb	r3, [r3, #1]
 800bc42:	2200      	movs	r2, #0
 800bc44:	2100      	movs	r1, #0
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7ff fca4 	bl	800b594 <disk_ioctl>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <sync_fs+0xca>
 800bc52:	2301      	movs	r3, #1
 800bc54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	41615252 	.word	0x41615252
 800bc64:	61417272 	.word	0x61417272

0800bc68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	3b02      	subs	r3, #2
 800bc76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	695b      	ldr	r3, [r3, #20]
 800bc7c:	3b02      	subs	r3, #2
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d301      	bcc.n	800bc88 <clust2sect+0x20>
 800bc84:	2300      	movs	r3, #0
 800bc86:	e008      	b.n	800bc9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	895b      	ldrh	r3, [r3, #10]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	fb03 f202 	mul.w	r2, r3, r2
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc98:	4413      	add	r3, r2
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b086      	sub	sp, #24
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d904      	bls.n	800bcc6 <get_fat+0x20>
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	695b      	ldr	r3, [r3, #20]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d302      	bcc.n	800bccc <get_fat+0x26>
		val = 1;	/* Internal error */
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	617b      	str	r3, [r7, #20]
 800bcca:	e08e      	b.n	800bdea <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bccc:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d061      	beq.n	800bd9e <get_fat+0xf8>
 800bcda:	2b03      	cmp	r3, #3
 800bcdc:	dc7b      	bgt.n	800bdd6 <get_fat+0x130>
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d002      	beq.n	800bce8 <get_fat+0x42>
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d041      	beq.n	800bd6a <get_fat+0xc4>
 800bce6:	e076      	b.n	800bdd6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	085b      	lsrs	r3, r3, #1
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	6a1a      	ldr	r2, [r3, #32]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	0a5b      	lsrs	r3, r3, #9
 800bcfe:	4413      	add	r3, r2
 800bd00:	4619      	mov	r1, r3
 800bd02:	6938      	ldr	r0, [r7, #16]
 800bd04:	f7ff ff14 	bl	800bb30 <move_window>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d166      	bne.n	800bddc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	1c5a      	adds	r2, r3, #1
 800bd12:	60fa      	str	r2, [r7, #12]
 800bd14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd18:	693a      	ldr	r2, [r7, #16]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	6a1a      	ldr	r2, [r3, #32]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	0a5b      	lsrs	r3, r3, #9
 800bd2a:	4413      	add	r3, r2
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6938      	ldr	r0, [r7, #16]
 800bd30:	f7ff fefe 	bl	800bb30 <move_window>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d152      	bne.n	800bde0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd40:	693a      	ldr	r2, [r7, #16]
 800bd42:	4413      	add	r3, r2
 800bd44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd48:	021b      	lsls	r3, r3, #8
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <get_fat+0xba>
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	091b      	lsrs	r3, r3, #4
 800bd5e:	e002      	b.n	800bd66 <get_fat+0xc0>
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd66:	617b      	str	r3, [r7, #20]
			break;
 800bd68:	e03f      	b.n	800bdea <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	6a1a      	ldr	r2, [r3, #32]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	0a1b      	lsrs	r3, r3, #8
 800bd72:	4413      	add	r3, r2
 800bd74:	4619      	mov	r1, r3
 800bd76:	6938      	ldr	r0, [r7, #16]
 800bd78:	f7ff feda 	bl	800bb30 <move_window>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d130      	bne.n	800bde4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bd90:	4413      	add	r3, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fc1c 	bl	800b5d0 <ld_word>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	617b      	str	r3, [r7, #20]
			break;
 800bd9c:	e025      	b.n	800bdea <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	6a1a      	ldr	r2, [r3, #32]
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	09db      	lsrs	r3, r3, #7
 800bda6:	4413      	add	r3, r2
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6938      	ldr	r0, [r7, #16]
 800bdac:	f7ff fec0 	bl	800bb30 <move_window>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d118      	bne.n	800bde8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bdc4:	4413      	add	r3, r2
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7ff fc1a 	bl	800b600 <ld_dword>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bdd2:	617b      	str	r3, [r7, #20]
			break;
 800bdd4:	e009      	b.n	800bdea <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	617b      	str	r3, [r7, #20]
 800bdda:	e006      	b.n	800bdea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bddc:	bf00      	nop
 800bdde:	e004      	b.n	800bdea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bde0:	bf00      	nop
 800bde2:	e002      	b.n	800bdea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bde4:	bf00      	nop
 800bde6:	e000      	b.n	800bdea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bde8:	bf00      	nop
		}
	}

	return val;
 800bdea:	697b      	ldr	r3, [r7, #20]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3718      	adds	r7, #24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bdf4:	b590      	push	{r4, r7, lr}
 800bdf6:	b089      	sub	sp, #36	@ 0x24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800be00:	2302      	movs	r3, #2
 800be02:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2b01      	cmp	r3, #1
 800be08:	f240 80d9 	bls.w	800bfbe <put_fat+0x1ca>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	429a      	cmp	r2, r3
 800be14:	f080 80d3 	bcs.w	800bfbe <put_fat+0x1ca>
		switch (fs->fs_type) {
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	f000 8096 	beq.w	800bf4e <put_fat+0x15a>
 800be22:	2b03      	cmp	r3, #3
 800be24:	f300 80cb 	bgt.w	800bfbe <put_fat+0x1ca>
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d002      	beq.n	800be32 <put_fat+0x3e>
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	d06e      	beq.n	800bf0e <put_fat+0x11a>
 800be30:	e0c5      	b.n	800bfbe <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	61bb      	str	r3, [r7, #24]
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	085b      	lsrs	r3, r3, #1
 800be3a:	69ba      	ldr	r2, [r7, #24]
 800be3c:	4413      	add	r3, r2
 800be3e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6a1a      	ldr	r2, [r3, #32]
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	0a5b      	lsrs	r3, r3, #9
 800be48:	4413      	add	r3, r2
 800be4a:	4619      	mov	r1, r3
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f7ff fe6f 	bl	800bb30 <move_window>
 800be52:	4603      	mov	r3, r0
 800be54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be56:	7ffb      	ldrb	r3, [r7, #31]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f040 80a9 	bne.w	800bfb0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	1c59      	adds	r1, r3, #1
 800be68:	61b9      	str	r1, [r7, #24]
 800be6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be6e:	4413      	add	r3, r2
 800be70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00d      	beq.n	800be98 <put_fat+0xa4>
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	b25b      	sxtb	r3, r3
 800be82:	f003 030f 	and.w	r3, r3, #15
 800be86:	b25a      	sxtb	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	011b      	lsls	r3, r3, #4
 800be8e:	b25b      	sxtb	r3, r3
 800be90:	4313      	orrs	r3, r2
 800be92:	b25b      	sxtb	r3, r3
 800be94:	b2db      	uxtb	r3, r3
 800be96:	e001      	b.n	800be9c <put_fat+0xa8>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2201      	movs	r2, #1
 800bea4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6a1a      	ldr	r2, [r3, #32]
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	0a5b      	lsrs	r3, r3, #9
 800beae:	4413      	add	r3, r2
 800beb0:	4619      	mov	r1, r3
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7ff fe3c 	bl	800bb30 <move_window>
 800beb8:	4603      	mov	r3, r0
 800beba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bebc:	7ffb      	ldrb	r3, [r7, #31]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d178      	bne.n	800bfb4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bece:	4413      	add	r3, r2
 800bed0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	f003 0301 	and.w	r3, r3, #1
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d003      	beq.n	800bee4 <put_fat+0xf0>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	091b      	lsrs	r3, r3, #4
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	e00e      	b.n	800bf02 <put_fat+0x10e>
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	b25b      	sxtb	r3, r3
 800beea:	f023 030f 	bic.w	r3, r3, #15
 800beee:	b25a      	sxtb	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	0a1b      	lsrs	r3, r3, #8
 800bef4:	b25b      	sxtb	r3, r3
 800bef6:	f003 030f 	and.w	r3, r3, #15
 800befa:	b25b      	sxtb	r3, r3
 800befc:	4313      	orrs	r3, r2
 800befe:	b25b      	sxtb	r3, r3
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	70da      	strb	r2, [r3, #3]
			break;
 800bf0c:	e057      	b.n	800bfbe <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6a1a      	ldr	r2, [r3, #32]
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	0a1b      	lsrs	r3, r3, #8
 800bf16:	4413      	add	r3, r2
 800bf18:	4619      	mov	r1, r3
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	f7ff fe08 	bl	800bb30 <move_window>
 800bf20:	4603      	mov	r3, r0
 800bf22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf24:	7ffb      	ldrb	r3, [r7, #31]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d146      	bne.n	800bfb8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bf38:	4413      	add	r3, r2
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	b292      	uxth	r2, r2
 800bf3e:	4611      	mov	r1, r2
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7ff fb80 	bl	800b646 <st_word>
			fs->wflag = 1;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	70da      	strb	r2, [r3, #3]
			break;
 800bf4c:	e037      	b.n	800bfbe <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6a1a      	ldr	r2, [r3, #32]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	09db      	lsrs	r3, r3, #7
 800bf56:	4413      	add	r3, r2
 800bf58:	4619      	mov	r1, r3
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f7ff fde8 	bl	800bb30 <move_window>
 800bf60:	4603      	mov	r3, r0
 800bf62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf64:	7ffb      	ldrb	r3, [r7, #31]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d128      	bne.n	800bfbc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bf7e:	4413      	add	r3, r2
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7ff fb3d 	bl	800b600 <ld_dword>
 800bf86:	4603      	mov	r3, r0
 800bf88:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bf8c:	4323      	orrs	r3, r4
 800bf8e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bf9e:	4413      	add	r3, r2
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff fb6a 	bl	800b67c <st_dword>
			fs->wflag = 1;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	70da      	strb	r2, [r3, #3]
			break;
 800bfae:	e006      	b.n	800bfbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfb0:	bf00      	nop
 800bfb2:	e004      	b.n	800bfbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfb4:	bf00      	nop
 800bfb6:	e002      	b.n	800bfbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfb8:	bf00      	nop
 800bfba:	e000      	b.n	800bfbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfbc:	bf00      	nop
		}
	}
	return res;
 800bfbe:	7ffb      	ldrb	r3, [r7, #31]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3724      	adds	r7, #36	@ 0x24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd90      	pop	{r4, r7, pc}

0800bfc8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b088      	sub	sp, #32
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d904      	bls.n	800bfee <remove_chain+0x26>
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d301      	bcc.n	800bff2 <remove_chain+0x2a>
 800bfee:	2302      	movs	r3, #2
 800bff0:	e04b      	b.n	800c08a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00c      	beq.n	800c012 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bff8:	f04f 32ff 	mov.w	r2, #4294967295
 800bffc:	6879      	ldr	r1, [r7, #4]
 800bffe:	69b8      	ldr	r0, [r7, #24]
 800c000:	f7ff fef8 	bl	800bdf4 <put_fat>
 800c004:	4603      	mov	r3, r0
 800c006:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c008:	7ffb      	ldrb	r3, [r7, #31]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <remove_chain+0x4a>
 800c00e:	7ffb      	ldrb	r3, [r7, #31]
 800c010:	e03b      	b.n	800c08a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c012:	68b9      	ldr	r1, [r7, #8]
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7ff fe46 	bl	800bca6 <get_fat>
 800c01a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d031      	beq.n	800c086 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d101      	bne.n	800c02c <remove_chain+0x64>
 800c028:	2302      	movs	r3, #2
 800c02a:	e02e      	b.n	800c08a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c032:	d101      	bne.n	800c038 <remove_chain+0x70>
 800c034:	2301      	movs	r3, #1
 800c036:	e028      	b.n	800c08a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c038:	2200      	movs	r2, #0
 800c03a:	68b9      	ldr	r1, [r7, #8]
 800c03c:	69b8      	ldr	r0, [r7, #24]
 800c03e:	f7ff fed9 	bl	800bdf4 <put_fat>
 800c042:	4603      	mov	r3, r0
 800c044:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c046:	7ffb      	ldrb	r3, [r7, #31]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <remove_chain+0x88>
 800c04c:	7ffb      	ldrb	r3, [r7, #31]
 800c04e:	e01c      	b.n	800c08a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	691a      	ldr	r2, [r3, #16]
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	3b02      	subs	r3, #2
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d20b      	bcs.n	800c076 <remove_chain+0xae>
			fs->free_clst++;
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	791b      	ldrb	r3, [r3, #4]
 800c06c:	f043 0301 	orr.w	r3, r3, #1
 800c070:	b2da      	uxtb	r2, r3
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	429a      	cmp	r2, r3
 800c082:	d3c6      	bcc.n	800c012 <remove_chain+0x4a>
 800c084:	e000      	b.n	800c088 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c086:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3720      	adds	r7, #32
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b088      	sub	sp, #32
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10d      	bne.n	800c0c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d004      	beq.n	800c0be <create_chain+0x2c>
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	69ba      	ldr	r2, [r7, #24]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d31b      	bcc.n	800c0f6 <create_chain+0x64>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	61bb      	str	r3, [r7, #24]
 800c0c2:	e018      	b.n	800c0f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff fded 	bl	800bca6 <get_fat>
 800c0cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d801      	bhi.n	800c0d8 <create_chain+0x46>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e070      	b.n	800c1ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0de:	d101      	bne.n	800c0e4 <create_chain+0x52>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	e06a      	b.n	800c1ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	695b      	ldr	r3, [r3, #20]
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d201      	bcs.n	800c0f2 <create_chain+0x60>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	e063      	b.n	800c1ba <create_chain+0x128>
		scl = clst;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	69fa      	ldr	r2, [r7, #28]
 800c106:	429a      	cmp	r2, r3
 800c108:	d307      	bcc.n	800c11a <create_chain+0x88>
				ncl = 2;
 800c10a:	2302      	movs	r3, #2
 800c10c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c10e:	69fa      	ldr	r2, [r7, #28]
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	429a      	cmp	r2, r3
 800c114:	d901      	bls.n	800c11a <create_chain+0x88>
 800c116:	2300      	movs	r3, #0
 800c118:	e04f      	b.n	800c1ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c11a:	69f9      	ldr	r1, [r7, #28]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7ff fdc2 	bl	800bca6 <get_fat>
 800c122:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00e      	beq.n	800c148 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d003      	beq.n	800c138 <create_chain+0xa6>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c136:	d101      	bne.n	800c13c <create_chain+0xaa>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	e03e      	b.n	800c1ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c13c:	69fa      	ldr	r2, [r7, #28]
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	429a      	cmp	r2, r3
 800c142:	d1da      	bne.n	800c0fa <create_chain+0x68>
 800c144:	2300      	movs	r3, #0
 800c146:	e038      	b.n	800c1ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c148:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c14a:	f04f 32ff 	mov.w	r2, #4294967295
 800c14e:	69f9      	ldr	r1, [r7, #28]
 800c150:	6938      	ldr	r0, [r7, #16]
 800c152:	f7ff fe4f 	bl	800bdf4 <put_fat>
 800c156:	4603      	mov	r3, r0
 800c158:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <create_chain+0xe2>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d006      	beq.n	800c174 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c166:	69fa      	ldr	r2, [r7, #28]
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6938      	ldr	r0, [r7, #16]
 800c16c:	f7ff fe42 	bl	800bdf4 <put_fat>
 800c170:	4603      	mov	r3, r0
 800c172:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c174:	7dfb      	ldrb	r3, [r7, #23]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d116      	bne.n	800c1a8 <create_chain+0x116>
		fs->last_clst = ncl;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	69fa      	ldr	r2, [r7, #28]
 800c17e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	691a      	ldr	r2, [r3, #16]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	695b      	ldr	r3, [r3, #20]
 800c188:	3b02      	subs	r3, #2
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d804      	bhi.n	800c198 <create_chain+0x106>
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	1e5a      	subs	r2, r3, #1
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	791b      	ldrb	r3, [r3, #4]
 800c19c:	f043 0301 	orr.w	r3, r3, #1
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	711a      	strb	r2, [r3, #4]
 800c1a6:	e007      	b.n	800c1b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c1a8:	7dfb      	ldrb	r3, [r7, #23]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d102      	bne.n	800c1b4 <create_chain+0x122>
 800c1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b2:	e000      	b.n	800c1b6 <create_chain+0x124>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c1b8:	69fb      	ldr	r3, [r7, #28]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3720      	adds	r7, #32
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b087      	sub	sp, #28
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	0a5b      	lsrs	r3, r3, #9
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	8952      	ldrh	r2, [r2, #10]
 800c1e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1e6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	613a      	str	r2, [r7, #16]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <clmt_clust+0x3a>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	e010      	b.n	800c21e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c1fc:	697a      	ldr	r2, [r7, #20]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	429a      	cmp	r2, r3
 800c202:	d307      	bcc.n	800c214 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c204:	697a      	ldr	r2, [r7, #20]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	617b      	str	r3, [r7, #20]
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	3304      	adds	r3, #4
 800c210:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c212:	e7e9      	b.n	800c1e8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c214:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	4413      	add	r3, r2
}
 800c21e:	4618      	mov	r0, r3
 800c220:	371c      	adds	r7, #28
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b086      	sub	sp, #24
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c240:	d204      	bcs.n	800c24c <dir_sdi+0x22>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	f003 031f 	and.w	r3, r3, #31
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c24c:	2302      	movs	r3, #2
 800c24e:	e063      	b.n	800c318 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	683a      	ldr	r2, [r7, #0]
 800c254:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d106      	bne.n	800c270 <dir_sdi+0x46>
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b02      	cmp	r3, #2
 800c268:	d902      	bls.n	800c270 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c26e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10c      	bne.n	800c290 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	095b      	lsrs	r3, r3, #5
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	8912      	ldrh	r2, [r2, #8]
 800c27e:	4293      	cmp	r3, r2
 800c280:	d301      	bcc.n	800c286 <dir_sdi+0x5c>
 800c282:	2302      	movs	r3, #2
 800c284:	e048      	b.n	800c318 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	61da      	str	r2, [r3, #28]
 800c28e:	e029      	b.n	800c2e4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	895b      	ldrh	r3, [r3, #10]
 800c294:	025b      	lsls	r3, r3, #9
 800c296:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c298:	e019      	b.n	800c2ce <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6979      	ldr	r1, [r7, #20]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7ff fd01 	bl	800bca6 <get_fat>
 800c2a4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d101      	bne.n	800c2b2 <dir_sdi+0x88>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e032      	b.n	800c318 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d904      	bls.n	800c2c2 <dir_sdi+0x98>
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	695b      	ldr	r3, [r3, #20]
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d301      	bcc.n	800c2c6 <dir_sdi+0x9c>
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	e028      	b.n	800c318 <dir_sdi+0xee>
			ofs -= csz;
 800c2c6:	683a      	ldr	r2, [r7, #0]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d2e1      	bcs.n	800c29a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c2d6:	6979      	ldr	r1, [r7, #20]
 800c2d8:	6938      	ldr	r0, [r7, #16]
 800c2da:	f7ff fcc5 	bl	800bc68 <clust2sect>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d101      	bne.n	800c2f6 <dir_sdi+0xcc>
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	e010      	b.n	800c318 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	69da      	ldr	r2, [r3, #28]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	0a5b      	lsrs	r3, r3, #9
 800c2fe:	441a      	add	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c310:	441a      	add	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	3320      	adds	r3, #32
 800c336:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	69db      	ldr	r3, [r3, #28]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <dir_next+0x28>
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c346:	d301      	bcc.n	800c34c <dir_next+0x2c>
 800c348:	2304      	movs	r3, #4
 800c34a:	e0aa      	b.n	800c4a2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c352:	2b00      	cmp	r3, #0
 800c354:	f040 8098 	bne.w	800c488 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d10b      	bne.n	800c382 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	095b      	lsrs	r3, r3, #5
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	8912      	ldrh	r2, [r2, #8]
 800c372:	4293      	cmp	r3, r2
 800c374:	f0c0 8088 	bcc.w	800c488 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	61da      	str	r2, [r3, #28]
 800c37e:	2304      	movs	r3, #4
 800c380:	e08f      	b.n	800c4a2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	0a5b      	lsrs	r3, r3, #9
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	8952      	ldrh	r2, [r2, #10]
 800c38a:	3a01      	subs	r2, #1
 800c38c:	4013      	ands	r3, r2
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d17a      	bne.n	800c488 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	699b      	ldr	r3, [r3, #24]
 800c398:	4619      	mov	r1, r3
 800c39a:	4610      	mov	r0, r2
 800c39c:	f7ff fc83 	bl	800bca6 <get_fat>
 800c3a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d801      	bhi.n	800c3ac <dir_next+0x8c>
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	e07a      	b.n	800c4a2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b2:	d101      	bne.n	800c3b8 <dir_next+0x98>
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e074      	b.n	800c4a2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	695b      	ldr	r3, [r3, #20]
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d358      	bcc.n	800c474 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d104      	bne.n	800c3d2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	61da      	str	r2, [r3, #28]
 800c3ce:	2304      	movs	r3, #4
 800c3d0:	e067      	b.n	800c4a2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4610      	mov	r0, r2
 800c3dc:	f7ff fe59 	bl	800c092 <create_chain>
 800c3e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <dir_next+0xcc>
 800c3e8:	2307      	movs	r3, #7
 800c3ea:	e05a      	b.n	800c4a2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d101      	bne.n	800c3f6 <dir_next+0xd6>
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	e055      	b.n	800c4a2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fc:	d101      	bne.n	800c402 <dir_next+0xe2>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e04f      	b.n	800c4a2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f7ff fb50 	bl	800baa8 <sync_window>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d001      	beq.n	800c412 <dir_next+0xf2>
 800c40e:	2301      	movs	r3, #1
 800c410:	e047      	b.n	800c4a2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	3330      	adds	r3, #48	@ 0x30
 800c416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c41a:	2100      	movs	r1, #0
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff f97a 	bl	800b716 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c422:	2300      	movs	r3, #0
 800c424:	613b      	str	r3, [r7, #16]
 800c426:	6979      	ldr	r1, [r7, #20]
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f7ff fc1d 	bl	800bc68 <clust2sect>
 800c42e:	4602      	mov	r2, r0
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c434:	e012      	b.n	800c45c <dir_next+0x13c>
						fs->wflag = 1;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2201      	movs	r2, #1
 800c43a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f7ff fb33 	bl	800baa8 <sync_window>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d001      	beq.n	800c44c <dir_next+0x12c>
 800c448:	2301      	movs	r3, #1
 800c44a:	e02a      	b.n	800c4a2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	3301      	adds	r3, #1
 800c450:	613b      	str	r3, [r7, #16]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c456:	1c5a      	adds	r2, r3, #1
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	895b      	ldrh	r3, [r3, #10]
 800c460:	461a      	mov	r2, r3
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	4293      	cmp	r3, r2
 800c466:	d3e6      	bcc.n	800c436 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	1ad2      	subs	r2, r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c47a:	6979      	ldr	r1, [r7, #20]
 800c47c:	68f8      	ldr	r0, [r7, #12]
 800c47e:	f7ff fbf3 	bl	800bc68 <clust2sect>
 800c482:	4602      	mov	r2, r0
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c49a:	441a      	add	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b086      	sub	sp, #24
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7ff feb4 	bl	800c22a <dir_sdi>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4c6:	7dfb      	ldrb	r3, [r7, #23]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d12b      	bne.n	800c524 <dir_alloc+0x7a>
		n = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f7ff fb2a 	bl	800bb30 <move_window>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d11d      	bne.n	800c522 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	2be5      	cmp	r3, #229	@ 0xe5
 800c4ee:	d004      	beq.n	800c4fa <dir_alloc+0x50>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a1b      	ldr	r3, [r3, #32]
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d107      	bne.n	800c50a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	613b      	str	r3, [r7, #16]
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	429a      	cmp	r2, r3
 800c506:	d102      	bne.n	800c50e <dir_alloc+0x64>
 800c508:	e00c      	b.n	800c524 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c50a:	2300      	movs	r3, #0
 800c50c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c50e:	2101      	movs	r1, #1
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff ff05 	bl	800c320 <dir_next>
 800c516:	4603      	mov	r3, r0
 800c518:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0d7      	beq.n	800c4d0 <dir_alloc+0x26>
 800c520:	e000      	b.n	800c524 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c522:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c524:	7dfb      	ldrb	r3, [r7, #23]
 800c526:	2b04      	cmp	r3, #4
 800c528:	d101      	bne.n	800c52e <dir_alloc+0x84>
 800c52a:	2307      	movs	r3, #7
 800c52c:	75fb      	strb	r3, [r7, #23]
	return res;
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3718      	adds	r7, #24
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	331a      	adds	r3, #26
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff f842 	bl	800b5d0 <ld_word>
 800c54c:	4603      	mov	r3, r0
 800c54e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	2b03      	cmp	r3, #3
 800c556:	d109      	bne.n	800c56c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	3314      	adds	r3, #20
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7ff f837 	bl	800b5d0 <ld_word>
 800c562:	4603      	mov	r3, r0
 800c564:	041b      	lsls	r3, r3, #16
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4313      	orrs	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c56c:	68fb      	ldr	r3, [r7, #12]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b084      	sub	sp, #16
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	60f8      	str	r0, [r7, #12]
 800c57e:	60b9      	str	r1, [r7, #8]
 800c580:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	331a      	adds	r3, #26
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	b292      	uxth	r2, r2
 800c58a:	4611      	mov	r1, r2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff f85a 	bl	800b646 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	2b03      	cmp	r3, #3
 800c598:	d109      	bne.n	800c5ae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	f103 0214 	add.w	r2, r3, #20
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	0c1b      	lsrs	r3, r3, #16
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	f7ff f84c 	bl	800b646 <st_word>
	}
}
 800c5ae:	bf00      	nop
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b086      	sub	sp, #24
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7ff fe2f 	bl	800c22a <dir_sdi>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c5d0:	7dfb      	ldrb	r3, [r7, #23]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <dir_find+0x24>
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
 800c5d8:	e03e      	b.n	800c658 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	69db      	ldr	r3, [r3, #28]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6938      	ldr	r0, [r7, #16]
 800c5e2:	f7ff faa5 	bl	800bb30 <move_window>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c5ea:	7dfb      	ldrb	r3, [r7, #23]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d12f      	bne.n	800c650 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a1b      	ldr	r3, [r3, #32]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c5f8:	7bfb      	ldrb	r3, [r7, #15]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d102      	bne.n	800c604 <dir_find+0x4e>
 800c5fe:	2304      	movs	r3, #4
 800c600:	75fb      	strb	r3, [r7, #23]
 800c602:	e028      	b.n	800c656 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	330b      	adds	r3, #11
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c610:	b2da      	uxtb	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	330b      	adds	r3, #11
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	f003 0308 	and.w	r3, r3, #8
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10a      	bne.n	800c63c <dir_find+0x86>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a18      	ldr	r0, [r3, #32]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	3324      	adds	r3, #36	@ 0x24
 800c62e:	220b      	movs	r2, #11
 800c630:	4619      	mov	r1, r3
 800c632:	f7ff f88b 	bl	800b74c <mem_cmp>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00b      	beq.n	800c654 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c63c:	2100      	movs	r1, #0
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7ff fe6e 	bl	800c320 <dir_next>
 800c644:	4603      	mov	r3, r0
 800c646:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0c5      	beq.n	800c5da <dir_find+0x24>
 800c64e:	e002      	b.n	800c656 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c650:	bf00      	nop
 800c652:	e000      	b.n	800c656 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c654:	bf00      	nop

	return res;
 800c656:	7dfb      	ldrb	r3, [r7, #23]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c66e:	2101      	movs	r1, #1
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff ff1a 	bl	800c4aa <dir_alloc>
 800c676:	4603      	mov	r3, r0
 800c678:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d11c      	bne.n	800c6ba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	69db      	ldr	r3, [r3, #28]
 800c684:	4619      	mov	r1, r3
 800c686:	68b8      	ldr	r0, [r7, #8]
 800c688:	f7ff fa52 	bl	800bb30 <move_window>
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c690:	7bfb      	ldrb	r3, [r7, #15]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d111      	bne.n	800c6ba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a1b      	ldr	r3, [r3, #32]
 800c69a:	2220      	movs	r2, #32
 800c69c:	2100      	movs	r1, #0
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7ff f839 	bl	800b716 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a18      	ldr	r0, [r3, #32]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3324      	adds	r3, #36	@ 0x24
 800c6ac:	220b      	movs	r2, #11
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f7ff f810 	bl	800b6d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b088      	sub	sp, #32
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	60fb      	str	r3, [r7, #12]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	3324      	adds	r3, #36	@ 0x24
 800c6d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c6da:	220b      	movs	r2, #11
 800c6dc:	2120      	movs	r1, #32
 800c6de:	68b8      	ldr	r0, [r7, #8]
 800c6e0:	f7ff f819 	bl	800b716 <mem_set>
	si = i = 0; ni = 8;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	613b      	str	r3, [r7, #16]
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	61fb      	str	r3, [r7, #28]
 800c6ec:	2308      	movs	r3, #8
 800c6ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	61fa      	str	r2, [r7, #28]
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c6fe:	7efb      	ldrb	r3, [r7, #27]
 800c700:	2b20      	cmp	r3, #32
 800c702:	d94e      	bls.n	800c7a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c704:	7efb      	ldrb	r3, [r7, #27]
 800c706:	2b2f      	cmp	r3, #47	@ 0x2f
 800c708:	d006      	beq.n	800c718 <create_name+0x54>
 800c70a:	7efb      	ldrb	r3, [r7, #27]
 800c70c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c70e:	d110      	bne.n	800c732 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c710:	e002      	b.n	800c718 <create_name+0x54>
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	3301      	adds	r3, #1
 800c716:	61fb      	str	r3, [r7, #28]
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	4413      	add	r3, r2
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	2b2f      	cmp	r3, #47	@ 0x2f
 800c722:	d0f6      	beq.n	800c712 <create_name+0x4e>
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	4413      	add	r3, r2
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c72e:	d0f0      	beq.n	800c712 <create_name+0x4e>
			break;
 800c730:	e038      	b.n	800c7a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c732:	7efb      	ldrb	r3, [r7, #27]
 800c734:	2b2e      	cmp	r3, #46	@ 0x2e
 800c736:	d003      	beq.n	800c740 <create_name+0x7c>
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d30c      	bcc.n	800c75a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	2b0b      	cmp	r3, #11
 800c744:	d002      	beq.n	800c74c <create_name+0x88>
 800c746:	7efb      	ldrb	r3, [r7, #27]
 800c748:	2b2e      	cmp	r3, #46	@ 0x2e
 800c74a:	d001      	beq.n	800c750 <create_name+0x8c>
 800c74c:	2306      	movs	r3, #6
 800c74e:	e044      	b.n	800c7da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c750:	2308      	movs	r3, #8
 800c752:	613b      	str	r3, [r7, #16]
 800c754:	230b      	movs	r3, #11
 800c756:	617b      	str	r3, [r7, #20]
			continue;
 800c758:	e022      	b.n	800c7a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c75a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	da04      	bge.n	800c76c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c762:	7efb      	ldrb	r3, [r7, #27]
 800c764:	3b80      	subs	r3, #128	@ 0x80
 800c766:	4a1f      	ldr	r2, [pc, #124]	@ (800c7e4 <create_name+0x120>)
 800c768:	5cd3      	ldrb	r3, [r2, r3]
 800c76a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c76c:	7efb      	ldrb	r3, [r7, #27]
 800c76e:	4619      	mov	r1, r3
 800c770:	481d      	ldr	r0, [pc, #116]	@ (800c7e8 <create_name+0x124>)
 800c772:	f7ff f812 	bl	800b79a <chk_chr>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <create_name+0xbc>
 800c77c:	2306      	movs	r3, #6
 800c77e:	e02c      	b.n	800c7da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c780:	7efb      	ldrb	r3, [r7, #27]
 800c782:	2b60      	cmp	r3, #96	@ 0x60
 800c784:	d905      	bls.n	800c792 <create_name+0xce>
 800c786:	7efb      	ldrb	r3, [r7, #27]
 800c788:	2b7a      	cmp	r3, #122	@ 0x7a
 800c78a:	d802      	bhi.n	800c792 <create_name+0xce>
 800c78c:	7efb      	ldrb	r3, [r7, #27]
 800c78e:	3b20      	subs	r3, #32
 800c790:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	613a      	str	r2, [r7, #16]
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	4413      	add	r3, r2
 800c79c:	7efa      	ldrb	r2, [r7, #27]
 800c79e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c7a0:	e7a6      	b.n	800c6f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c7a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	441a      	add	r2, r3
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <create_name+0xf4>
 800c7b4:	2306      	movs	r3, #6
 800c7b6:	e010      	b.n	800c7da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	2be5      	cmp	r3, #229	@ 0xe5
 800c7be:	d102      	bne.n	800c7c6 <create_name+0x102>
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2205      	movs	r2, #5
 800c7c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c7c6:	7efb      	ldrb	r3, [r7, #27]
 800c7c8:	2b20      	cmp	r3, #32
 800c7ca:	d801      	bhi.n	800c7d0 <create_name+0x10c>
 800c7cc:	2204      	movs	r2, #4
 800c7ce:	e000      	b.n	800c7d2 <create_name+0x10e>
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	330b      	adds	r3, #11
 800c7d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c7d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3720      	adds	r7, #32
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	0801630c 	.word	0x0801630c
 800c7e8:	08016264 	.word	0x08016264

0800c7ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c800:	e002      	b.n	800c808 <follow_path+0x1c>
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	603b      	str	r3, [r7, #0]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c80e:	d0f8      	beq.n	800c802 <follow_path+0x16>
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	2b5c      	cmp	r3, #92	@ 0x5c
 800c816:	d0f4      	beq.n	800c802 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	2200      	movs	r2, #0
 800c81c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	2b1f      	cmp	r3, #31
 800c824:	d80a      	bhi.n	800c83c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2280      	movs	r2, #128	@ 0x80
 800c82a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c82e:	2100      	movs	r1, #0
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7ff fcfa 	bl	800c22a <dir_sdi>
 800c836:	4603      	mov	r3, r0
 800c838:	75fb      	strb	r3, [r7, #23]
 800c83a:	e043      	b.n	800c8c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c83c:	463b      	mov	r3, r7
 800c83e:	4619      	mov	r1, r3
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7ff ff3f 	bl	800c6c4 <create_name>
 800c846:	4603      	mov	r3, r0
 800c848:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d134      	bne.n	800c8ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff feb0 	bl	800c5b6 <dir_find>
 800c856:	4603      	mov	r3, r0
 800c858:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c860:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c862:	7dfb      	ldrb	r3, [r7, #23]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00a      	beq.n	800c87e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c868:	7dfb      	ldrb	r3, [r7, #23]
 800c86a:	2b04      	cmp	r3, #4
 800c86c:	d127      	bne.n	800c8be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c86e:	7afb      	ldrb	r3, [r7, #11]
 800c870:	f003 0304 	and.w	r3, r3, #4
 800c874:	2b00      	cmp	r3, #0
 800c876:	d122      	bne.n	800c8be <follow_path+0xd2>
 800c878:	2305      	movs	r3, #5
 800c87a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c87c:	e01f      	b.n	800c8be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c87e:	7afb      	ldrb	r3, [r7, #11]
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	d11c      	bne.n	800c8c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	799b      	ldrb	r3, [r3, #6]
 800c88c:	f003 0310 	and.w	r3, r3, #16
 800c890:	2b00      	cmp	r3, #0
 800c892:	d102      	bne.n	800c89a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c894:	2305      	movs	r3, #5
 800c896:	75fb      	strb	r3, [r7, #23]
 800c898:	e014      	b.n	800c8c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8a8:	4413      	add	r3, r2
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f7ff fe43 	bl	800c538 <ld_clust>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c8b8:	e7c0      	b.n	800c83c <follow_path+0x50>
			if (res != FR_OK) break;
 800c8ba:	bf00      	nop
 800c8bc:	e002      	b.n	800c8c4 <follow_path+0xd8>
				break;
 800c8be:	bf00      	nop
 800c8c0:	e000      	b.n	800c8c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c8c2:	bf00      	nop
			}
		}
	}

	return res;
 800c8c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3718      	adds	r7, #24
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c8ce:	b480      	push	{r7}
 800c8d0:	b087      	sub	sp, #28
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d031      	beq.n	800c948 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	617b      	str	r3, [r7, #20]
 800c8ea:	e002      	b.n	800c8f2 <get_ldnumber+0x24>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	617b      	str	r3, [r7, #20]
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	2b20      	cmp	r3, #32
 800c8f8:	d903      	bls.n	800c902 <get_ldnumber+0x34>
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	2b3a      	cmp	r3, #58	@ 0x3a
 800c900:	d1f4      	bne.n	800c8ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	2b3a      	cmp	r3, #58	@ 0x3a
 800c908:	d11c      	bne.n	800c944 <get_ldnumber+0x76>
			tp = *path;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	60fa      	str	r2, [r7, #12]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	3b30      	subs	r3, #48	@ 0x30
 800c91a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	2b09      	cmp	r3, #9
 800c920:	d80e      	bhi.n	800c940 <get_ldnumber+0x72>
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	429a      	cmp	r2, r3
 800c928:	d10a      	bne.n	800c940 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d107      	bne.n	800c940 <get_ldnumber+0x72>
					vol = (int)i;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	3301      	adds	r3, #1
 800c938:	617b      	str	r3, [r7, #20]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	697a      	ldr	r2, [r7, #20]
 800c93e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	e002      	b.n	800c94a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c944:	2300      	movs	r3, #0
 800c946:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c948:	693b      	ldr	r3, [r7, #16]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	371c      	adds	r7, #28
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
	...

0800c958 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	70da      	strb	r2, [r3, #3]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f04f 32ff 	mov.w	r2, #4294967295
 800c96e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f7ff f8dc 	bl	800bb30 <move_window>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <check_fs+0x2a>
 800c97e:	2304      	movs	r3, #4
 800c980:	e038      	b.n	800c9f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	3330      	adds	r3, #48	@ 0x30
 800c986:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fe fe20 	bl	800b5d0 <ld_word>
 800c990:	4603      	mov	r3, r0
 800c992:	461a      	mov	r2, r3
 800c994:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c998:	429a      	cmp	r2, r3
 800c99a:	d001      	beq.n	800c9a0 <check_fs+0x48>
 800c99c:	2303      	movs	r3, #3
 800c99e:	e029      	b.n	800c9f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9a6:	2be9      	cmp	r3, #233	@ 0xe9
 800c9a8:	d009      	beq.n	800c9be <check_fs+0x66>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9b0:	2beb      	cmp	r3, #235	@ 0xeb
 800c9b2:	d11e      	bne.n	800c9f2 <check_fs+0x9a>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c9ba:	2b90      	cmp	r3, #144	@ 0x90
 800c9bc:	d119      	bne.n	800c9f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	3330      	adds	r3, #48	@ 0x30
 800c9c2:	3336      	adds	r3, #54	@ 0x36
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fe fe1b 	bl	800b600 <ld_dword>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c9d0:	4a0a      	ldr	r2, [pc, #40]	@ (800c9fc <check_fs+0xa4>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d101      	bne.n	800c9da <check_fs+0x82>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	e00c      	b.n	800c9f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	3330      	adds	r3, #48	@ 0x30
 800c9de:	3352      	adds	r3, #82	@ 0x52
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fe fe0d 	bl	800b600 <ld_dword>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	4a05      	ldr	r2, [pc, #20]	@ (800ca00 <check_fs+0xa8>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d101      	bne.n	800c9f2 <check_fs+0x9a>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	e000      	b.n	800c9f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c9f2:	2302      	movs	r3, #2
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	00544146 	.word	0x00544146
 800ca00:	33544146 	.word	0x33544146

0800ca04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b096      	sub	sp, #88	@ 0x58
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2200      	movs	r2, #0
 800ca16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f7ff ff58 	bl	800c8ce <get_ldnumber>
 800ca1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	da01      	bge.n	800ca2a <find_volume+0x26>
 800ca26:	230b      	movs	r3, #11
 800ca28:	e22d      	b.n	800ce86 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ca2a:	4aa1      	ldr	r2, [pc, #644]	@ (800ccb0 <find_volume+0x2ac>)
 800ca2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca32:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ca34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <find_volume+0x3a>
 800ca3a:	230c      	movs	r3, #12
 800ca3c:	e223      	b.n	800ce86 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	f023 0301 	bic.w	r3, r3, #1
 800ca4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d01a      	beq.n	800ca8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ca54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca56:	785b      	ldrb	r3, [r3, #1]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe fd1b 	bl	800b494 <disk_status>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ca64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10c      	bne.n	800ca8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d007      	beq.n	800ca86 <find_volume+0x82>
 800ca76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca7a:	f003 0304 	and.w	r3, r3, #4
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ca82:	230a      	movs	r3, #10
 800ca84:	e1ff      	b.n	800ce86 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ca86:	2300      	movs	r3, #0
 800ca88:	e1fd      	b.n	800ce86 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9a:	785b      	ldrb	r3, [r3, #1]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe fd13 	bl	800b4c8 <disk_initialize>
 800caa2:	4603      	mov	r3, r0
 800caa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800caa8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d001      	beq.n	800cab8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cab4:	2303      	movs	r3, #3
 800cab6:	e1e6      	b.n	800ce86 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cab8:	79fb      	ldrb	r3, [r7, #7]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d007      	beq.n	800cace <find_volume+0xca>
 800cabe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cac2:	f003 0304 	and.w	r3, r3, #4
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800caca:	230a      	movs	r3, #10
 800cacc:	e1db      	b.n	800ce86 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cad2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cad4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cad6:	f7ff ff3f 	bl	800c958 <check_fs>
 800cada:	4603      	mov	r3, r0
 800cadc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cae0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d149      	bne.n	800cb7c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cae8:	2300      	movs	r3, #0
 800caea:	643b      	str	r3, [r7, #64]	@ 0x40
 800caec:	e01e      	b.n	800cb2c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800caee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800caf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cafc:	4413      	add	r3, r2
 800cafe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb02:	3304      	adds	r3, #4
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d006      	beq.n	800cb18 <find_volume+0x114>
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0c:	3308      	adds	r3, #8
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe fd76 	bl	800b600 <ld_dword>
 800cb14:	4602      	mov	r2, r0
 800cb16:	e000      	b.n	800cb1a <find_volume+0x116>
 800cb18:	2200      	movs	r2, #0
 800cb1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	3358      	adds	r3, #88	@ 0x58
 800cb20:	443b      	add	r3, r7
 800cb22:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb28:	3301      	adds	r3, #1
 800cb2a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb2e:	2b03      	cmp	r3, #3
 800cb30:	d9dd      	bls.n	800caee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb32:	2300      	movs	r3, #0
 800cb34:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cb36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <find_volume+0x13e>
 800cb3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	3358      	adds	r3, #88	@ 0x58
 800cb48:	443b      	add	r3, r7
 800cb4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb4e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d005      	beq.n	800cb62 <find_volume+0x15e>
 800cb56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb5a:	f7ff fefd 	bl	800c958 <check_fs>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	e000      	b.n	800cb64 <find_volume+0x160>
 800cb62:	2303      	movs	r3, #3
 800cb64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d905      	bls.n	800cb7c <find_volume+0x178>
 800cb70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb72:	3301      	adds	r3, #1
 800cb74:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d9e2      	bls.n	800cb42 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb80:	2b04      	cmp	r3, #4
 800cb82:	d101      	bne.n	800cb88 <find_volume+0x184>
 800cb84:	2301      	movs	r3, #1
 800cb86:	e17e      	b.n	800ce86 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d901      	bls.n	800cb94 <find_volume+0x190>
 800cb90:	230d      	movs	r3, #13
 800cb92:	e178      	b.n	800ce86 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb96:	3330      	adds	r3, #48	@ 0x30
 800cb98:	330b      	adds	r3, #11
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fe fd18 	bl	800b5d0 <ld_word>
 800cba0:	4603      	mov	r3, r0
 800cba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cba6:	d001      	beq.n	800cbac <find_volume+0x1a8>
 800cba8:	230d      	movs	r3, #13
 800cbaa:	e16c      	b.n	800ce86 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbae:	3330      	adds	r3, #48	@ 0x30
 800cbb0:	3316      	adds	r3, #22
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fd0c 	bl	800b5d0 <ld_word>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d106      	bne.n	800cbd0 <find_volume+0x1cc>
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc4:	3330      	adds	r3, #48	@ 0x30
 800cbc6:	3324      	adds	r3, #36	@ 0x24
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe fd19 	bl	800b600 <ld_dword>
 800cbce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbd4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cbd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbde:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe2:	789b      	ldrb	r3, [r3, #2]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d005      	beq.n	800cbf4 <find_volume+0x1f0>
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbea:	789b      	ldrb	r3, [r3, #2]
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d001      	beq.n	800cbf4 <find_volume+0x1f0>
 800cbf0:	230d      	movs	r3, #13
 800cbf2:	e148      	b.n	800ce86 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf6:	789b      	ldrb	r3, [r3, #2]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfc:	fb02 f303 	mul.w	r3, r2, r3
 800cc00:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc08:	461a      	mov	r2, r3
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc10:	895b      	ldrh	r3, [r3, #10]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d008      	beq.n	800cc28 <find_volume+0x224>
 800cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc18:	895b      	ldrh	r3, [r3, #10]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1e:	895b      	ldrh	r3, [r3, #10]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	4013      	ands	r3, r2
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d001      	beq.n	800cc2c <find_volume+0x228>
 800cc28:	230d      	movs	r3, #13
 800cc2a:	e12c      	b.n	800ce86 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2e:	3330      	adds	r3, #48	@ 0x30
 800cc30:	3311      	adds	r3, #17
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fe fccc 	bl	800b5d0 <ld_word>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc42:	891b      	ldrh	r3, [r3, #8]
 800cc44:	f003 030f 	and.w	r3, r3, #15
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d001      	beq.n	800cc52 <find_volume+0x24e>
 800cc4e:	230d      	movs	r3, #13
 800cc50:	e119      	b.n	800ce86 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc54:	3330      	adds	r3, #48	@ 0x30
 800cc56:	3313      	adds	r3, #19
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fe fcb9 	bl	800b5d0 <ld_word>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d106      	bne.n	800cc76 <find_volume+0x272>
 800cc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6a:	3330      	adds	r3, #48	@ 0x30
 800cc6c:	3320      	adds	r3, #32
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fcc6 	bl	800b600 <ld_dword>
 800cc74:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc78:	3330      	adds	r3, #48	@ 0x30
 800cc7a:	330e      	adds	r3, #14
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fe fca7 	bl	800b5d0 <ld_word>
 800cc82:	4603      	mov	r3, r0
 800cc84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cc86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d101      	bne.n	800cc90 <find_volume+0x28c>
 800cc8c:	230d      	movs	r3, #13
 800cc8e:	e0fa      	b.n	800ce86 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc90:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cc92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc94:	4413      	add	r3, r2
 800cc96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc98:	8912      	ldrh	r2, [r2, #8]
 800cc9a:	0912      	lsrs	r2, r2, #4
 800cc9c:	b292      	uxth	r2, r2
 800cc9e:	4413      	add	r3, r2
 800cca0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d204      	bcs.n	800ccb4 <find_volume+0x2b0>
 800ccaa:	230d      	movs	r3, #13
 800ccac:	e0eb      	b.n	800ce86 <find_volume+0x482>
 800ccae:	bf00      	nop
 800ccb0:	20005db4 	.word	0x20005db4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ccb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccbc:	8952      	ldrh	r2, [r2, #10]
 800ccbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccc2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d101      	bne.n	800ccce <find_volume+0x2ca>
 800ccca:	230d      	movs	r3, #13
 800cccc:	e0db      	b.n	800ce86 <find_volume+0x482>
		fmt = FS_FAT32;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d802      	bhi.n	800cce4 <find_volume+0x2e0>
 800ccde:	2302      	movs	r3, #2
 800cce0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d802      	bhi.n	800ccf4 <find_volume+0x2f0>
 800ccee:	2301      	movs	r3, #1
 800ccf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf6:	1c9a      	adds	r2, r3, #2
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd00:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd02:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cd04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd06:	441a      	add	r2, r3
 800cd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cd0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd10:	441a      	add	r2, r3
 800cd12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd14:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cd16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd1a:	2b03      	cmp	r3, #3
 800cd1c:	d11e      	bne.n	800cd5c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	3330      	adds	r3, #48	@ 0x30
 800cd22:	332a      	adds	r3, #42	@ 0x2a
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fe fc53 	bl	800b5d0 <ld_word>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d001      	beq.n	800cd34 <find_volume+0x330>
 800cd30:	230d      	movs	r3, #13
 800cd32:	e0a8      	b.n	800ce86 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd36:	891b      	ldrh	r3, [r3, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <find_volume+0x33c>
 800cd3c:	230d      	movs	r3, #13
 800cd3e:	e0a2      	b.n	800ce86 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd42:	3330      	adds	r3, #48	@ 0x30
 800cd44:	332c      	adds	r3, #44	@ 0x2c
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe fc5a 	bl	800b600 <ld_dword>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd50:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd5a:	e01f      	b.n	800cd9c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5e:	891b      	ldrh	r3, [r3, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d101      	bne.n	800cd68 <find_volume+0x364>
 800cd64:	230d      	movs	r3, #13
 800cd66:	e08e      	b.n	800ce86 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6a:	6a1a      	ldr	r2, [r3, #32]
 800cd6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd6e:	441a      	add	r2, r3
 800cd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd72:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d103      	bne.n	800cd84 <find_volume+0x380>
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	005b      	lsls	r3, r3, #1
 800cd82:	e00a      	b.n	800cd9a <find_volume+0x396>
 800cd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd86:	695a      	ldr	r2, [r3, #20]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	4413      	add	r3, r2
 800cd8e:	085a      	lsrs	r2, r3, #1
 800cd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd92:	695b      	ldr	r3, [r3, #20]
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd9a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	699a      	ldr	r2, [r3, #24]
 800cda0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cda2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800cda6:	0a5b      	lsrs	r3, r3, #9
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d201      	bcs.n	800cdb0 <find_volume+0x3ac>
 800cdac:	230d      	movs	r3, #13
 800cdae:	e06a      	b.n	800ce86 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb6:	611a      	str	r2, [r3, #16]
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdba:	691a      	ldr	r2, [r3, #16]
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdbe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc2:	2280      	movs	r2, #128	@ 0x80
 800cdc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cdc6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cdca:	2b03      	cmp	r3, #3
 800cdcc:	d149      	bne.n	800ce62 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd0:	3330      	adds	r3, #48	@ 0x30
 800cdd2:	3330      	adds	r3, #48	@ 0x30
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fe fbfb 	bl	800b5d0 <ld_word>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d140      	bne.n	800ce62 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cde0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cde2:	3301      	adds	r3, #1
 800cde4:	4619      	mov	r1, r3
 800cde6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cde8:	f7fe fea2 	bl	800bb30 <move_window>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d137      	bne.n	800ce62 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfa:	3330      	adds	r3, #48	@ 0x30
 800cdfc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fe fbe5 	bl	800b5d0 <ld_word>
 800ce06:	4603      	mov	r3, r0
 800ce08:	461a      	mov	r2, r3
 800ce0a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d127      	bne.n	800ce62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce14:	3330      	adds	r3, #48	@ 0x30
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe fbf2 	bl	800b600 <ld_dword>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	4a1c      	ldr	r2, [pc, #112]	@ (800ce90 <find_volume+0x48c>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d11e      	bne.n	800ce62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce26:	3330      	adds	r3, #48	@ 0x30
 800ce28:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fe fbe7 	bl	800b600 <ld_dword>
 800ce32:	4603      	mov	r3, r0
 800ce34:	4a17      	ldr	r2, [pc, #92]	@ (800ce94 <find_volume+0x490>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d113      	bne.n	800ce62 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3c:	3330      	adds	r3, #48	@ 0x30
 800ce3e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe fbdc 	bl	800b600 <ld_dword>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce50:	3330      	adds	r3, #48	@ 0x30
 800ce52:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fe fbd2 	bl	800b600 <ld_dword>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce60:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce64:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ce68:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ce98 <find_volume+0x494>)
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	4b09      	ldr	r3, [pc, #36]	@ (800ce98 <find_volume+0x494>)
 800ce74:	801a      	strh	r2, [r3, #0]
 800ce76:	4b08      	ldr	r3, [pc, #32]	@ (800ce98 <find_volume+0x494>)
 800ce78:	881a      	ldrh	r2, [r3, #0]
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce80:	f7fe fdee 	bl	800ba60 <clear_lock>
#endif
	return FR_OK;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3758      	adds	r7, #88	@ 0x58
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	41615252 	.word	0x41615252
 800ce94:	61417272 	.word	0x61417272
 800ce98:	20005db8 	.word	0x20005db8

0800ce9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cea6:	2309      	movs	r3, #9
 800cea8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d01c      	beq.n	800ceea <validate+0x4e>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d018      	beq.n	800ceea <validate+0x4e>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d013      	beq.n	800ceea <validate+0x4e>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	889a      	ldrh	r2, [r3, #4]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	88db      	ldrh	r3, [r3, #6]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d10c      	bne.n	800ceea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	785b      	ldrb	r3, [r3, #1]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fe fadc 	bl	800b494 <disk_status>
 800cedc:	4603      	mov	r3, r0
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <validate+0x4e>
			res = FR_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ceea:	7bfb      	ldrb	r3, [r7, #15]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d102      	bne.n	800cef6 <validate+0x5a>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	e000      	b.n	800cef8 <validate+0x5c>
 800cef6:	2300      	movs	r3, #0
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	6013      	str	r3, [r2, #0]
	return res;
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
	...

0800cf08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b088      	sub	sp, #32
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	4613      	mov	r3, r2
 800cf14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf1a:	f107 0310 	add.w	r3, r7, #16
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff fcd5 	bl	800c8ce <get_ldnumber>
 800cf24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	da01      	bge.n	800cf30 <f_mount+0x28>
 800cf2c:	230b      	movs	r3, #11
 800cf2e:	e02b      	b.n	800cf88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf30:	4a17      	ldr	r2, [pc, #92]	@ (800cf90 <f_mount+0x88>)
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d005      	beq.n	800cf4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf40:	69b8      	ldr	r0, [r7, #24]
 800cf42:	f7fe fd8d 	bl	800ba60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	490d      	ldr	r1, [pc, #52]	@ (800cf90 <f_mount+0x88>)
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <f_mount+0x66>
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d001      	beq.n	800cf72 <f_mount+0x6a>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	e00a      	b.n	800cf88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf72:	f107 010c 	add.w	r1, r7, #12
 800cf76:	f107 0308 	add.w	r3, r7, #8
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7ff fd41 	bl	800ca04 <find_volume>
 800cf82:	4603      	mov	r3, r0
 800cf84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3720      	adds	r7, #32
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20005db4 	.word	0x20005db4

0800cf94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b098      	sub	sp, #96	@ 0x60
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d101      	bne.n	800cfac <f_open+0x18>
 800cfa8:	2309      	movs	r3, #9
 800cfaa:	e1a9      	b.n	800d300 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cfb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cfb4:	79fa      	ldrb	r2, [r7, #7]
 800cfb6:	f107 0110 	add.w	r1, r7, #16
 800cfba:	f107 0308 	add.w	r3, r7, #8
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff fd20 	bl	800ca04 <find_volume>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cfca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f040 818d 	bne.w	800d2ee <f_open+0x35a>
		dj.obj.fs = fs;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	f107 0314 	add.w	r3, r7, #20
 800cfde:	4611      	mov	r1, r2
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7ff fc03 	bl	800c7ec <follow_path>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cfec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d118      	bne.n	800d026 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cff4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cff8:	b25b      	sxtb	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	da03      	bge.n	800d006 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cffe:	2306      	movs	r3, #6
 800d000:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d004:	e00f      	b.n	800d026 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	2b01      	cmp	r3, #1
 800d00a:	bf8c      	ite	hi
 800d00c:	2301      	movhi	r3, #1
 800d00e:	2300      	movls	r3, #0
 800d010:	b2db      	uxtb	r3, r3
 800d012:	461a      	mov	r2, r3
 800d014:	f107 0314 	add.w	r3, r7, #20
 800d018:	4611      	mov	r1, r2
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe fbd8 	bl	800b7d0 <chk_lock>
 800d020:	4603      	mov	r3, r0
 800d022:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	f003 031c 	and.w	r3, r3, #28
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d07f      	beq.n	800d130 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d030:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d034:	2b00      	cmp	r3, #0
 800d036:	d017      	beq.n	800d068 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d038:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d03c:	2b04      	cmp	r3, #4
 800d03e:	d10e      	bne.n	800d05e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d040:	f7fe fc22 	bl	800b888 <enq_lock>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d006      	beq.n	800d058 <f_open+0xc4>
 800d04a:	f107 0314 	add.w	r3, r7, #20
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fb06 	bl	800c660 <dir_register>
 800d054:	4603      	mov	r3, r0
 800d056:	e000      	b.n	800d05a <f_open+0xc6>
 800d058:	2312      	movs	r3, #18
 800d05a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d05e:	79fb      	ldrb	r3, [r7, #7]
 800d060:	f043 0308 	orr.w	r3, r3, #8
 800d064:	71fb      	strb	r3, [r7, #7]
 800d066:	e010      	b.n	800d08a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d068:	7ebb      	ldrb	r3, [r7, #26]
 800d06a:	f003 0311 	and.w	r3, r3, #17
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d003      	beq.n	800d07a <f_open+0xe6>
					res = FR_DENIED;
 800d072:	2307      	movs	r3, #7
 800d074:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d078:	e007      	b.n	800d08a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d07a:	79fb      	ldrb	r3, [r7, #7]
 800d07c:	f003 0304 	and.w	r3, r3, #4
 800d080:	2b00      	cmp	r3, #0
 800d082:	d002      	beq.n	800d08a <f_open+0xf6>
 800d084:	2308      	movs	r3, #8
 800d086:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d08a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d168      	bne.n	800d164 <f_open+0x1d0>
 800d092:	79fb      	ldrb	r3, [r7, #7]
 800d094:	f003 0308 	and.w	r3, r3, #8
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d063      	beq.n	800d164 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d09c:	f7fd ffb8 	bl	800b010 <get_fattime>
 800d0a0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d0a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0a4:	330e      	adds	r3, #14
 800d0a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe fae7 	bl	800b67c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0b0:	3316      	adds	r3, #22
 800d0b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fe fae1 	bl	800b67c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0bc:	330b      	adds	r3, #11
 800d0be:	2220      	movs	r2, #32
 800d0c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0c6:	4611      	mov	r1, r2
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7ff fa35 	bl	800c538 <ld_clust>
 800d0ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff fa4d 	bl	800c576 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0de:	331c      	adds	r3, #28
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe faca 	bl	800b67c <st_dword>
					fs->wflag = 1;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d0ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d037      	beq.n	800d164 <f_open+0x1d0>
						dw = fs->winsect;
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d0fa:	f107 0314 	add.w	r3, r7, #20
 800d0fe:	2200      	movs	r2, #0
 800d100:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d102:	4618      	mov	r0, r3
 800d104:	f7fe ff60 	bl	800bfc8 <remove_chain>
 800d108:	4603      	mov	r3, r0
 800d10a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d10e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d112:	2b00      	cmp	r3, #0
 800d114:	d126      	bne.n	800d164 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fe fd08 	bl	800bb30 <move_window>
 800d120:	4603      	mov	r3, r0
 800d122:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d12a:	3a01      	subs	r2, #1
 800d12c:	60da      	str	r2, [r3, #12]
 800d12e:	e019      	b.n	800d164 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d130:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d134:	2b00      	cmp	r3, #0
 800d136:	d115      	bne.n	800d164 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d138:	7ebb      	ldrb	r3, [r7, #26]
 800d13a:	f003 0310 	and.w	r3, r3, #16
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <f_open+0x1b6>
					res = FR_NO_FILE;
 800d142:	2304      	movs	r3, #4
 800d144:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d148:	e00c      	b.n	800d164 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d14a:	79fb      	ldrb	r3, [r7, #7]
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d007      	beq.n	800d164 <f_open+0x1d0>
 800d154:	7ebb      	ldrb	r3, [r7, #26]
 800d156:	f003 0301 	and.w	r3, r3, #1
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <f_open+0x1d0>
						res = FR_DENIED;
 800d15e:	2307      	movs	r3, #7
 800d160:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d164:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d126      	bne.n	800d1ba <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d16c:	79fb      	ldrb	r3, [r7, #7]
 800d16e:	f003 0308 	and.w	r3, r3, #8
 800d172:	2b00      	cmp	r3, #0
 800d174:	d003      	beq.n	800d17e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d17c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d186:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d18c:	79fb      	ldrb	r3, [r7, #7]
 800d18e:	2b01      	cmp	r3, #1
 800d190:	bf8c      	ite	hi
 800d192:	2301      	movhi	r3, #1
 800d194:	2300      	movls	r3, #0
 800d196:	b2db      	uxtb	r3, r3
 800d198:	461a      	mov	r2, r3
 800d19a:	f107 0314 	add.w	r3, r7, #20
 800d19e:	4611      	mov	r1, r2
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fe fb93 	bl	800b8cc <inc_lock>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d102      	bne.n	800d1ba <f_open+0x226>
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d1ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f040 8095 	bne.w	800d2ee <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff f9b4 	bl	800c538 <ld_clust>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d8:	331c      	adds	r3, #28
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fa10 	bl	800b600 <ld_dword>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	88da      	ldrh	r2, [r3, #6]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	79fa      	ldrb	r2, [r7, #7]
 800d1fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	3330      	adds	r3, #48	@ 0x30
 800d216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d21a:	2100      	movs	r1, #0
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fa7a 	bl	800b716 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d222:	79fb      	ldrb	r3, [r7, #7]
 800d224:	f003 0320 	and.w	r3, r3, #32
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d060      	beq.n	800d2ee <f_open+0x35a>
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d05c      	beq.n	800d2ee <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	68da      	ldr	r2, [r3, #12]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	895b      	ldrh	r3, [r3, #10]
 800d240:	025b      	lsls	r3, r3, #9
 800d242:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d250:	e016      	b.n	800d280 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fd25 	bl	800bca6 <get_fat>
 800d25c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d25e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d260:	2b01      	cmp	r3, #1
 800d262:	d802      	bhi.n	800d26a <f_open+0x2d6>
 800d264:	2302      	movs	r3, #2
 800d266:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d26a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d270:	d102      	bne.n	800d278 <f_open+0x2e4>
 800d272:	2301      	movs	r3, #1
 800d274:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d278:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d27a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d280:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d284:	2b00      	cmp	r3, #0
 800d286:	d103      	bne.n	800d290 <f_open+0x2fc>
 800d288:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d28a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d8e0      	bhi.n	800d252 <f_open+0x2be>
				}
				fp->clust = clst;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d294:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d296:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d127      	bne.n	800d2ee <f_open+0x35a>
 800d29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d022      	beq.n	800d2ee <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fe fcdb 	bl	800bc68 <clust2sect>
 800d2b2:	6478      	str	r0, [r7, #68]	@ 0x44
 800d2b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d103      	bne.n	800d2c2 <f_open+0x32e>
						res = FR_INT_ERR;
 800d2ba:	2302      	movs	r3, #2
 800d2bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d2c0:	e015      	b.n	800d2ee <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d2c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2c4:	0a5a      	lsrs	r2, r3, #9
 800d2c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2c8:	441a      	add	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	7858      	ldrb	r0, [r3, #1]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6a1a      	ldr	r2, [r3, #32]
 800d2dc:	2301      	movs	r3, #1
 800d2de:	f7fe f919 	bl	800b514 <disk_read>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <f_open+0x35a>
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d2ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <f_open+0x368>
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d2fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d300:	4618      	mov	r0, r3
 800d302:	3760      	adds	r7, #96	@ 0x60
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b08e      	sub	sp, #56	@ 0x38
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
 800d314:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2200      	movs	r2, #0
 800d31e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f107 0214 	add.w	r2, r7, #20
 800d326:	4611      	mov	r1, r2
 800d328:	4618      	mov	r0, r3
 800d32a:	f7ff fdb7 	bl	800ce9c <validate>
 800d32e:	4603      	mov	r3, r0
 800d330:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d334:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d107      	bne.n	800d34c <f_read+0x44>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	7d5b      	ldrb	r3, [r3, #21]
 800d340:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d344:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <f_read+0x4a>
 800d34c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d350:	e115      	b.n	800d57e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	7d1b      	ldrb	r3, [r3, #20]
 800d356:	f003 0301 	and.w	r3, r3, #1
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <f_read+0x5a>
 800d35e:	2307      	movs	r3, #7
 800d360:	e10d      	b.n	800d57e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	68da      	ldr	r2, [r3, #12]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	699b      	ldr	r3, [r3, #24]
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	6a3b      	ldr	r3, [r7, #32]
 800d372:	429a      	cmp	r2, r3
 800d374:	f240 80fe 	bls.w	800d574 <f_read+0x26c>
 800d378:	6a3b      	ldr	r3, [r7, #32]
 800d37a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d37c:	e0fa      	b.n	800d574 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d386:	2b00      	cmp	r3, #0
 800d388:	f040 80c6 	bne.w	800d518 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	0a5b      	lsrs	r3, r3, #9
 800d392:	697a      	ldr	r2, [r7, #20]
 800d394:	8952      	ldrh	r2, [r2, #10]
 800d396:	3a01      	subs	r2, #1
 800d398:	4013      	ands	r3, r2
 800d39a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d12f      	bne.n	800d402 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	699b      	ldr	r3, [r3, #24]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d103      	bne.n	800d3b2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3b0:	e013      	b.n	800d3da <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d007      	beq.n	800d3ca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	4619      	mov	r1, r3
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7fe fefe 	bl	800c1c2 <clmt_clust>
 800d3c6:	6338      	str	r0, [r7, #48]	@ 0x30
 800d3c8:	e007      	b.n	800d3da <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d3ca:	68fa      	ldr	r2, [r7, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	69db      	ldr	r3, [r3, #28]
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	4610      	mov	r0, r2
 800d3d4:	f7fe fc67 	bl	800bca6 <get_fat>
 800d3d8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d804      	bhi.n	800d3ea <f_read+0xe2>
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2202      	movs	r2, #2
 800d3e4:	755a      	strb	r2, [r3, #21]
 800d3e6:	2302      	movs	r3, #2
 800d3e8:	e0c9      	b.n	800d57e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f0:	d104      	bne.n	800d3fc <f_read+0xf4>
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	755a      	strb	r2, [r3, #21]
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e0c0      	b.n	800d57e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d400:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	69db      	ldr	r3, [r3, #28]
 800d408:	4619      	mov	r1, r3
 800d40a:	4610      	mov	r0, r2
 800d40c:	f7fe fc2c 	bl	800bc68 <clust2sect>
 800d410:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d104      	bne.n	800d422 <f_read+0x11a>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2202      	movs	r2, #2
 800d41c:	755a      	strb	r2, [r3, #21]
 800d41e:	2302      	movs	r3, #2
 800d420:	e0ad      	b.n	800d57e <f_read+0x276>
			sect += csect;
 800d422:	69ba      	ldr	r2, [r7, #24]
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	4413      	add	r3, r2
 800d428:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	0a5b      	lsrs	r3, r3, #9
 800d42e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d432:	2b00      	cmp	r3, #0
 800d434:	d039      	beq.n	800d4aa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d436:	69fa      	ldr	r2, [r7, #28]
 800d438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d43a:	4413      	add	r3, r2
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	8952      	ldrh	r2, [r2, #10]
 800d440:	4293      	cmp	r3, r2
 800d442:	d905      	bls.n	800d450 <f_read+0x148>
					cc = fs->csize - csect;
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	895b      	ldrh	r3, [r3, #10]
 800d448:	461a      	mov	r2, r3
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	1ad3      	subs	r3, r2, r3
 800d44e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	7858      	ldrb	r0, [r3, #1]
 800d454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d45a:	f7fe f85b 	bl	800b514 <disk_read>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d004      	beq.n	800d46e <f_read+0x166>
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2201      	movs	r2, #1
 800d468:	755a      	strb	r2, [r3, #21]
 800d46a:	2301      	movs	r3, #1
 800d46c:	e087      	b.n	800d57e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	7d1b      	ldrb	r3, [r3, #20]
 800d472:	b25b      	sxtb	r3, r3
 800d474:	2b00      	cmp	r3, #0
 800d476:	da14      	bge.n	800d4a2 <f_read+0x19a>
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6a1a      	ldr	r2, [r3, #32]
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d482:	429a      	cmp	r2, r3
 800d484:	d90d      	bls.n	800d4a2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6a1a      	ldr	r2, [r3, #32]
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	025b      	lsls	r3, r3, #9
 800d490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d492:	18d0      	adds	r0, r2, r3
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	3330      	adds	r3, #48	@ 0x30
 800d498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d49c:	4619      	mov	r1, r3
 800d49e:	f7fe f919 	bl	800b6d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a4:	025b      	lsls	r3, r3, #9
 800d4a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d4a8:	e050      	b.n	800d54c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6a1b      	ldr	r3, [r3, #32]
 800d4ae:	69ba      	ldr	r2, [r7, #24]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d02e      	beq.n	800d512 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	7d1b      	ldrb	r3, [r3, #20]
 800d4b8:	b25b      	sxtb	r3, r3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	da18      	bge.n	800d4f0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	7858      	ldrb	r0, [r3, #1]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6a1a      	ldr	r2, [r3, #32]
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	f7fe f841 	bl	800b554 <disk_write>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d004      	beq.n	800d4e2 <f_read+0x1da>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	755a      	strb	r2, [r3, #21]
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e04d      	b.n	800d57e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	7d1b      	ldrb	r3, [r3, #20]
 800d4e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	7858      	ldrb	r0, [r3, #1]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	f7fe f809 	bl	800b514 <disk_read>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d004      	beq.n	800d512 <f_read+0x20a>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2201      	movs	r2, #1
 800d50c:	755a      	strb	r2, [r3, #21]
 800d50e:	2301      	movs	r3, #1
 800d510:	e035      	b.n	800d57e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	69ba      	ldr	r2, [r7, #24]
 800d516:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	699b      	ldr	r3, [r3, #24]
 800d51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d520:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d524:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d901      	bls.n	800d532 <f_read+0x22a>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	699b      	ldr	r3, [r3, #24]
 800d53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d540:	4413      	add	r3, r2
 800d542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d544:	4619      	mov	r1, r3
 800d546:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d548:	f7fe f8c4 	bl	800b6d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d54c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d550:	4413      	add	r3, r2
 800d552:	627b      	str	r3, [r7, #36]	@ 0x24
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	699a      	ldr	r2, [r3, #24]
 800d558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55a:	441a      	add	r2, r3
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	619a      	str	r2, [r3, #24]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d566:	441a      	add	r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	601a      	str	r2, [r3, #0]
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	f47f af01 	bne.w	800d37e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3738      	adds	r7, #56	@ 0x38
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b08c      	sub	sp, #48	@ 0x30
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	60f8      	str	r0, [r7, #12]
 800d58e:	60b9      	str	r1, [r7, #8]
 800d590:	607a      	str	r2, [r7, #4]
 800d592:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	2200      	movs	r2, #0
 800d59c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f107 0210 	add.w	r2, r7, #16
 800d5a4:	4611      	mov	r1, r2
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7ff fc78 	bl	800ce9c <validate>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d5b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d107      	bne.n	800d5ca <f_write+0x44>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	7d5b      	ldrb	r3, [r3, #21]
 800d5be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d5c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <f_write+0x4a>
 800d5ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5ce:	e14b      	b.n	800d868 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	7d1b      	ldrb	r3, [r3, #20]
 800d5d4:	f003 0302 	and.w	r3, r3, #2
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d101      	bne.n	800d5e0 <f_write+0x5a>
 800d5dc:	2307      	movs	r3, #7
 800d5de:	e143      	b.n	800d868 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	699a      	ldr	r2, [r3, #24]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	441a      	add	r2, r3
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	699b      	ldr	r3, [r3, #24]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	f080 812d 	bcs.w	800d84c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	699b      	ldr	r3, [r3, #24]
 800d5f6:	43db      	mvns	r3, r3
 800d5f8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d5fa:	e127      	b.n	800d84c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	699b      	ldr	r3, [r3, #24]
 800d600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d604:	2b00      	cmp	r3, #0
 800d606:	f040 80e3 	bne.w	800d7d0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	699b      	ldr	r3, [r3, #24]
 800d60e:	0a5b      	lsrs	r3, r3, #9
 800d610:	693a      	ldr	r2, [r7, #16]
 800d612:	8952      	ldrh	r2, [r2, #10]
 800d614:	3a01      	subs	r2, #1
 800d616:	4013      	ands	r3, r2
 800d618:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d143      	bne.n	800d6a8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	699b      	ldr	r3, [r3, #24]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d10c      	bne.n	800d642 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d630:	2b00      	cmp	r3, #0
 800d632:	d11a      	bne.n	800d66a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2100      	movs	r1, #0
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fe fd2a 	bl	800c092 <create_chain>
 800d63e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d640:	e013      	b.n	800d66a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d646:	2b00      	cmp	r3, #0
 800d648:	d007      	beq.n	800d65a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	699b      	ldr	r3, [r3, #24]
 800d64e:	4619      	mov	r1, r3
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7fe fdb6 	bl	800c1c2 <clmt_clust>
 800d656:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d658:	e007      	b.n	800d66a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	4619      	mov	r1, r3
 800d662:	4610      	mov	r0, r2
 800d664:	f7fe fd15 	bl	800c092 <create_chain>
 800d668:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 80f2 	beq.w	800d856 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d674:	2b01      	cmp	r3, #1
 800d676:	d104      	bne.n	800d682 <f_write+0xfc>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2202      	movs	r2, #2
 800d67c:	755a      	strb	r2, [r3, #21]
 800d67e:	2302      	movs	r3, #2
 800d680:	e0f2      	b.n	800d868 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d688:	d104      	bne.n	800d694 <f_write+0x10e>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2201      	movs	r2, #1
 800d68e:	755a      	strb	r2, [r3, #21]
 800d690:	2301      	movs	r3, #1
 800d692:	e0e9      	b.n	800d868 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d698:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d102      	bne.n	800d6a8 <f_write+0x122>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6a6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	7d1b      	ldrb	r3, [r3, #20]
 800d6ac:	b25b      	sxtb	r3, r3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	da18      	bge.n	800d6e4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	7858      	ldrb	r0, [r3, #1]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	6a1a      	ldr	r2, [r3, #32]
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	f7fd ff47 	bl	800b554 <disk_write>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d004      	beq.n	800d6d6 <f_write+0x150>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	755a      	strb	r2, [r3, #21]
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e0c8      	b.n	800d868 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	7d1b      	ldrb	r3, [r3, #20]
 800d6da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d6e4:	693a      	ldr	r2, [r7, #16]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	f7fe fabb 	bl	800bc68 <clust2sect>
 800d6f2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d104      	bne.n	800d704 <f_write+0x17e>
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	755a      	strb	r2, [r3, #21]
 800d700:	2302      	movs	r3, #2
 800d702:	e0b1      	b.n	800d868 <f_write+0x2e2>
			sect += csect;
 800d704:	697a      	ldr	r2, [r7, #20]
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	4413      	add	r3, r2
 800d70a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	0a5b      	lsrs	r3, r3, #9
 800d710:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d712:	6a3b      	ldr	r3, [r7, #32]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d03c      	beq.n	800d792 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d718:	69ba      	ldr	r2, [r7, #24]
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	4413      	add	r3, r2
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	8952      	ldrh	r2, [r2, #10]
 800d722:	4293      	cmp	r3, r2
 800d724:	d905      	bls.n	800d732 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	895b      	ldrh	r3, [r3, #10]
 800d72a:	461a      	mov	r2, r3
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	7858      	ldrb	r0, [r3, #1]
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	697a      	ldr	r2, [r7, #20]
 800d73a:	69f9      	ldr	r1, [r7, #28]
 800d73c:	f7fd ff0a 	bl	800b554 <disk_write>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d004      	beq.n	800d750 <f_write+0x1ca>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2201      	movs	r2, #1
 800d74a:	755a      	strb	r2, [r3, #21]
 800d74c:	2301      	movs	r3, #1
 800d74e:	e08b      	b.n	800d868 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6a1a      	ldr	r2, [r3, #32]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	6a3a      	ldr	r2, [r7, #32]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d915      	bls.n	800d78a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	6a1a      	ldr	r2, [r3, #32]
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	025b      	lsls	r3, r3, #9
 800d76e:	69fa      	ldr	r2, [r7, #28]
 800d770:	4413      	add	r3, r2
 800d772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d776:	4619      	mov	r1, r3
 800d778:	f7fd ffac 	bl	800b6d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	7d1b      	ldrb	r3, [r3, #20]
 800d780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d784:	b2da      	uxtb	r2, r3
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	025b      	lsls	r3, r3, #9
 800d78e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d790:	e03f      	b.n	800d812 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6a1b      	ldr	r3, [r3, #32]
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d016      	beq.n	800d7ca <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	699a      	ldr	r2, [r3, #24]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d210      	bcs.n	800d7ca <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	7858      	ldrb	r0, [r3, #1]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	697a      	ldr	r2, [r7, #20]
 800d7b6:	f7fd fead 	bl	800b514 <disk_read>
 800d7ba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d004      	beq.n	800d7ca <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	755a      	strb	r2, [r3, #21]
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e04e      	b.n	800d868 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	697a      	ldr	r2, [r7, #20]
 800d7ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	699b      	ldr	r3, [r3, #24]
 800d7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d7dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d7de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d901      	bls.n	800d7ea <f_write+0x264>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f8:	4413      	add	r3, r2
 800d7fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7fc:	69f9      	ldr	r1, [r7, #28]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fd ff68 	bl	800b6d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	7d1b      	ldrb	r3, [r3, #20]
 800d808:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d80c:	b2da      	uxtb	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d812:	69fa      	ldr	r2, [r7, #28]
 800d814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d816:	4413      	add	r3, r2
 800d818:	61fb      	str	r3, [r7, #28]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	699a      	ldr	r2, [r3, #24]
 800d81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d820:	441a      	add	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	619a      	str	r2, [r3, #24]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	68da      	ldr	r2, [r3, #12]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	699b      	ldr	r3, [r3, #24]
 800d82e:	429a      	cmp	r2, r3
 800d830:	bf38      	it	cc
 800d832:	461a      	movcc	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	60da      	str	r2, [r3, #12]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83e:	441a      	add	r2, r3
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f47f aed4 	bne.w	800d5fc <f_write+0x76>
 800d854:	e000      	b.n	800d858 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d856:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	7d1b      	ldrb	r3, [r3, #20]
 800d85c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d860:	b2da      	uxtb	r2, r3
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3730      	adds	r7, #48	@ 0x30
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f107 0208 	add.w	r2, r7, #8
 800d87e:	4611      	mov	r1, r2
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff fb0b 	bl	800ce9c <validate>
 800d886:	4603      	mov	r3, r0
 800d888:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d168      	bne.n	800d962 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	7d1b      	ldrb	r3, [r3, #20]
 800d894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d062      	beq.n	800d962 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	7d1b      	ldrb	r3, [r3, #20]
 800d8a0:	b25b      	sxtb	r3, r3
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	da15      	bge.n	800d8d2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	7858      	ldrb	r0, [r3, #1]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6a1a      	ldr	r2, [r3, #32]
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	f7fd fe4d 	bl	800b554 <disk_write>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d001      	beq.n	800d8c4 <f_sync+0x54>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e04f      	b.n	800d964 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7d1b      	ldrb	r3, [r3, #20]
 800d8c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d8d2:	f7fd fb9d 	bl	800b010 <get_fattime>
 800d8d6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f7fe f925 	bl	800bb30 <move_window>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d8ea:	7dfb      	ldrb	r3, [r7, #23]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d138      	bne.n	800d962 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	330b      	adds	r3, #11
 800d8fa:	781a      	ldrb	r2, [r3, #0]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	330b      	adds	r3, #11
 800d900:	f042 0220 	orr.w	r2, r2, #32
 800d904:	b2d2      	uxtb	r2, r2
 800d906:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6818      	ldr	r0, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	461a      	mov	r2, r3
 800d912:	68f9      	ldr	r1, [r7, #12]
 800d914:	f7fe fe2f 	bl	800c576 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f103 021c 	add.w	r2, r3, #28
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	4619      	mov	r1, r3
 800d924:	4610      	mov	r0, r2
 800d926:	f7fd fea9 	bl	800b67c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	3316      	adds	r3, #22
 800d92e:	6939      	ldr	r1, [r7, #16]
 800d930:	4618      	mov	r0, r3
 800d932:	f7fd fea3 	bl	800b67c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	3312      	adds	r3, #18
 800d93a:	2100      	movs	r1, #0
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fd fe82 	bl	800b646 <st_word>
					fs->wflag = 1;
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2201      	movs	r2, #1
 800d946:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fe f91e 	bl	800bb8c <sync_fs>
 800d950:	4603      	mov	r3, r0
 800d952:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	7d1b      	ldrb	r3, [r3, #20]
 800d958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d962:	7dfb      	ldrb	r3, [r7, #23]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3718      	adds	r7, #24
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7ff ff7b 	bl	800d870 <f_sync>
 800d97a:	4603      	mov	r3, r0
 800d97c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d118      	bne.n	800d9b6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f107 0208 	add.w	r2, r7, #8
 800d98a:	4611      	mov	r1, r2
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff fa85 	bl	800ce9c <validate>
 800d992:	4603      	mov	r3, r0
 800d994:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d10c      	bne.n	800d9b6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe f821 	bl	800b9e8 <dec_lock>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d102      	bne.n	800d9b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b090      	sub	sp, #64	@ 0x40
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f107 0208 	add.w	r2, r7, #8
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff fa62 	bl	800ce9c <validate>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d9de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d103      	bne.n	800d9ee <f_lseek+0x2e>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	7d5b      	ldrb	r3, [r3, #21]
 800d9ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d9ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d002      	beq.n	800d9fc <f_lseek+0x3c>
 800d9f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d9fa:	e1e6      	b.n	800ddca <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 80d1 	beq.w	800dba8 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da0c:	d15a      	bne.n	800dac4 <f_lseek+0x104>
			tbl = fp->cltbl;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da12:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800da14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da16:	1d1a      	adds	r2, r3, #4
 800da18:	627a      	str	r2, [r7, #36]	@ 0x24
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	617b      	str	r3, [r7, #20]
 800da1e:	2302      	movs	r3, #2
 800da20:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800da28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d03a      	beq.n	800daa4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800da2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da30:	613b      	str	r3, [r7, #16]
 800da32:	2300      	movs	r3, #0
 800da34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da38:	3302      	adds	r3, #2
 800da3a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800da3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da42:	3301      	adds	r3, #1
 800da44:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe f92b 	bl	800bca6 <get_fat>
 800da50:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800da52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da54:	2b01      	cmp	r3, #1
 800da56:	d804      	bhi.n	800da62 <f_lseek+0xa2>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2202      	movs	r2, #2
 800da5c:	755a      	strb	r2, [r3, #21]
 800da5e:	2302      	movs	r3, #2
 800da60:	e1b3      	b.n	800ddca <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da68:	d104      	bne.n	800da74 <f_lseek+0xb4>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2201      	movs	r2, #1
 800da6e:	755a      	strb	r2, [r3, #21]
 800da70:	2301      	movs	r3, #1
 800da72:	e1aa      	b.n	800ddca <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	3301      	adds	r3, #1
 800da78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d0de      	beq.n	800da3c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800da7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	429a      	cmp	r2, r3
 800da84:	d809      	bhi.n	800da9a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800da86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da88:	1d1a      	adds	r2, r3, #4
 800da8a:	627a      	str	r2, [r7, #36]	@ 0x24
 800da8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da92:	1d1a      	adds	r2, r3, #4
 800da94:	627a      	str	r2, [r7, #36]	@ 0x24
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d3c4      	bcc.n	800da2e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800daaa:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800daac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d803      	bhi.n	800dabc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab6:	2200      	movs	r2, #0
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	e184      	b.n	800ddc6 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dabc:	2311      	movs	r3, #17
 800dabe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800dac2:	e180      	b.n	800ddc6 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	683a      	ldr	r2, [r7, #0]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d902      	bls.n	800dad4 <f_lseek+0x114>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f000 8172 	beq.w	800ddc6 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	3b01      	subs	r3, #1
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7fe fb6a 	bl	800c1c2 <clmt_clust>
 800daee:	4602      	mov	r2, r0
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	69db      	ldr	r3, [r3, #28]
 800dafa:	4619      	mov	r1, r3
 800dafc:	4610      	mov	r0, r2
 800dafe:	f7fe f8b3 	bl	800bc68 <clust2sect>
 800db02:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d104      	bne.n	800db14 <f_lseek+0x154>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2202      	movs	r2, #2
 800db0e:	755a      	strb	r2, [r3, #21]
 800db10:	2302      	movs	r3, #2
 800db12:	e15a      	b.n	800ddca <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	3b01      	subs	r3, #1
 800db18:	0a5b      	lsrs	r3, r3, #9
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	8952      	ldrh	r2, [r2, #10]
 800db1e:	3a01      	subs	r2, #1
 800db20:	4013      	ands	r3, r2
 800db22:	69ba      	ldr	r2, [r7, #24]
 800db24:	4413      	add	r3, r2
 800db26:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	699b      	ldr	r3, [r3, #24]
 800db2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 8148 	beq.w	800ddc6 <f_lseek+0x406>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a1b      	ldr	r3, [r3, #32]
 800db3a:	69ba      	ldr	r2, [r7, #24]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	f000 8142 	beq.w	800ddc6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	7d1b      	ldrb	r3, [r3, #20]
 800db46:	b25b      	sxtb	r3, r3
 800db48:	2b00      	cmp	r3, #0
 800db4a:	da18      	bge.n	800db7e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	7858      	ldrb	r0, [r3, #1]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1a      	ldr	r2, [r3, #32]
 800db5a:	2301      	movs	r3, #1
 800db5c:	f7fd fcfa 	bl	800b554 <disk_write>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d004      	beq.n	800db70 <f_lseek+0x1b0>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2201      	movs	r2, #1
 800db6a:	755a      	strb	r2, [r3, #21]
 800db6c:	2301      	movs	r3, #1
 800db6e:	e12c      	b.n	800ddca <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	7d1b      	ldrb	r3, [r3, #20]
 800db74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	7858      	ldrb	r0, [r3, #1]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db88:	2301      	movs	r3, #1
 800db8a:	69ba      	ldr	r2, [r7, #24]
 800db8c:	f7fd fcc2 	bl	800b514 <disk_read>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d004      	beq.n	800dba0 <f_lseek+0x1e0>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	755a      	strb	r2, [r3, #21]
 800db9c:	2301      	movs	r3, #1
 800db9e:	e114      	b.n	800ddca <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	69ba      	ldr	r2, [r7, #24]
 800dba4:	621a      	str	r2, [r3, #32]
 800dba6:	e10e      	b.n	800ddc6 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d908      	bls.n	800dbc4 <f_lseek+0x204>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	7d1b      	ldrb	r3, [r3, #20]
 800dbb6:	f003 0302 	and.w	r3, r3, #2
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d102      	bne.n	800dbc4 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbd2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f000 80a7 	beq.w	800dd2a <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	895b      	ldrh	r3, [r3, #10]
 800dbe0:	025b      	lsls	r3, r3, #9
 800dbe2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dbe4:	6a3b      	ldr	r3, [r7, #32]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d01b      	beq.n	800dc22 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	1e5a      	subs	r2, r3, #1
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	fbb2 f2f3 	udiv	r2, r2, r3
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
 800dbf6:	1e59      	subs	r1, r3, #1
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d30f      	bcc.n	800dc22 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800dc02:	6a3b      	ldr	r3, [r7, #32]
 800dc04:	1e5a      	subs	r2, r3, #1
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	425b      	negs	r3, r3
 800dc0a:	401a      	ands	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	699b      	ldr	r3, [r3, #24]
 800dc14:	683a      	ldr	r2, [r7, #0]
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	69db      	ldr	r3, [r3, #28]
 800dc1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc20:	e022      	b.n	800dc68 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d119      	bne.n	800dc62 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2100      	movs	r1, #0
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fe fa2d 	bl	800c092 <create_chain>
 800dc38:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d104      	bne.n	800dc4a <f_lseek+0x28a>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2202      	movs	r2, #2
 800dc44:	755a      	strb	r2, [r3, #21]
 800dc46:	2302      	movs	r3, #2
 800dc48:	e0bf      	b.n	800ddca <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc50:	d104      	bne.n	800dc5c <f_lseek+0x29c>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2201      	movs	r2, #1
 800dc56:	755a      	strb	r2, [r3, #21]
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e0b6      	b.n	800ddca <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc60:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc66:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d05d      	beq.n	800dd2a <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800dc6e:	e03a      	b.n	800dce6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	699a      	ldr	r2, [r3, #24]
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	441a      	add	r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	7d1b      	ldrb	r3, [r3, #20]
 800dc88:	f003 0302 	and.w	r3, r3, #2
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00b      	beq.n	800dca8 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fe f9fc 	bl	800c092 <create_chain>
 800dc9a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d108      	bne.n	800dcb4 <f_lseek+0x2f4>
							ofs = 0; break;
 800dca2:	2300      	movs	r3, #0
 800dca4:	603b      	str	r3, [r7, #0]
 800dca6:	e022      	b.n	800dcee <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fd fffa 	bl	800bca6 <get_fat>
 800dcb2:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcba:	d104      	bne.n	800dcc6 <f_lseek+0x306>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	755a      	strb	r2, [r3, #21]
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e081      	b.n	800ddca <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d904      	bls.n	800dcd6 <f_lseek+0x316>
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	695b      	ldr	r3, [r3, #20]
 800dcd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d304      	bcc.n	800dce0 <f_lseek+0x320>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2202      	movs	r2, #2
 800dcda:	755a      	strb	r2, [r3, #21]
 800dcdc:	2302      	movs	r3, #2
 800dcde:	e074      	b.n	800ddca <f_lseek+0x40a>
					fp->clust = clst;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dce4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dce6:	683a      	ldr	r2, [r7, #0]
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d8c0      	bhi.n	800dc70 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	699a      	ldr	r2, [r3, #24]
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	441a      	add	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d012      	beq.n	800dd2a <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fd ffad 	bl	800bc68 <clust2sect>
 800dd0e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dd10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d104      	bne.n	800dd20 <f_lseek+0x360>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2202      	movs	r2, #2
 800dd1a:	755a      	strb	r2, [r3, #21]
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	e054      	b.n	800ddca <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	0a5b      	lsrs	r3, r3, #9
 800dd24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd26:	4413      	add	r3, r2
 800dd28:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	699a      	ldr	r2, [r3, #24]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d90a      	bls.n	800dd4c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	699a      	ldr	r2, [r3, #24]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	7d1b      	ldrb	r3, [r3, #20]
 800dd42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d036      	beq.n	800ddc6 <f_lseek+0x406>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a1b      	ldr	r3, [r3, #32]
 800dd5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d031      	beq.n	800ddc6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	7d1b      	ldrb	r3, [r3, #20]
 800dd66:	b25b      	sxtb	r3, r3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	da18      	bge.n	800dd9e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	7858      	ldrb	r0, [r3, #1]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a1a      	ldr	r2, [r3, #32]
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	f7fd fbea 	bl	800b554 <disk_write>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d004      	beq.n	800dd90 <f_lseek+0x3d0>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	755a      	strb	r2, [r3, #21]
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e01c      	b.n	800ddca <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	7d1b      	ldrb	r3, [r3, #20]
 800dd94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	7858      	ldrb	r0, [r3, #1]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dda8:	2301      	movs	r3, #1
 800ddaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddac:	f7fd fbb2 	bl	800b514 <disk_read>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d004      	beq.n	800ddc0 <f_lseek+0x400>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	755a      	strb	r2, [r3, #21]
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e004      	b.n	800ddca <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddc4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ddc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3740      	adds	r7, #64	@ 0x40
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
	...

0800ddd4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800ddd4:	b590      	push	{r4, r7, lr}
 800ddd6:	b09d      	sub	sp, #116	@ 0x74
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	607a      	str	r2, [r7, #4]
 800ddde:	603b      	str	r3, [r7, #0]
 800dde0:	460b      	mov	r3, r1
 800dde2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800dde4:	2301      	movs	r3, #1
 800dde6:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800dde8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ddec:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800ddee:	f107 030c 	add.w	r3, r7, #12
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fe fd6b 	bl	800c8ce <get_ldnumber>
 800ddf8:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	da02      	bge.n	800de06 <f_mkfs+0x32>
 800de00:	230b      	movs	r3, #11
 800de02:	f000 bc0d 	b.w	800e620 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800de06:	4a94      	ldr	r2, [pc, #592]	@ (800e058 <f_mkfs+0x284>)
 800de08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d005      	beq.n	800de1e <f_mkfs+0x4a>
 800de12:	4a91      	ldr	r2, [pc, #580]	@ (800e058 <f_mkfs+0x284>)
 800de14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de1a:	2200      	movs	r2, #0
 800de1c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800de1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de20:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800de24:	2300      	movs	r3, #0
 800de26:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800de2a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fd fb4a 	bl	800b4c8 <disk_initialize>
 800de34:	4603      	mov	r3, r0
 800de36:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800de3a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <f_mkfs+0x76>
 800de46:	2303      	movs	r3, #3
 800de48:	e3ea      	b.n	800e620 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800de4a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800de4e:	f003 0304 	and.w	r3, r3, #4
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <f_mkfs+0x86>
 800de56:	230a      	movs	r3, #10
 800de58:	e3e2      	b.n	800e620 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800de5a:	f107 0214 	add.w	r2, r7, #20
 800de5e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800de62:	2103      	movs	r1, #3
 800de64:	4618      	mov	r0, r3
 800de66:	f7fd fb95 	bl	800b594 <disk_ioctl>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d10c      	bne.n	800de8a <f_mkfs+0xb6>
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d009      	beq.n	800de8a <f_mkfs+0xb6>
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de7c:	d805      	bhi.n	800de8a <f_mkfs+0xb6>
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	1e5a      	subs	r2, r3, #1
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	4013      	ands	r3, r2
 800de86:	2b00      	cmp	r3, #0
 800de88:	d001      	beq.n	800de8e <f_mkfs+0xba>
 800de8a:	2301      	movs	r3, #1
 800de8c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800de8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de92:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d003      	beq.n	800dea2 <f_mkfs+0xce>
 800de9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d309      	bcc.n	800deb6 <f_mkfs+0xe2>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dea8:	d805      	bhi.n	800deb6 <f_mkfs+0xe2>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	1e5a      	subs	r2, r3, #1
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4013      	ands	r3, r2
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <f_mkfs+0xe6>
 800deb6:	2313      	movs	r3, #19
 800deb8:	e3b2      	b.n	800e620 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800deba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	fbb2 f3f3 	udiv	r3, r2, r3
 800dec2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800dec8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800deca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dece:	fbb2 f3f3 	udiv	r3, r2, r3
 800ded2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800ded4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ded6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded8:	fb02 f303 	mul.w	r3, r2, r3
 800dedc:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800dede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d101      	bne.n	800dee8 <f_mkfs+0x114>
 800dee4:	230e      	movs	r3, #14
 800dee6:	e39b      	b.n	800e620 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800dee8:	f107 0210 	add.w	r2, r7, #16
 800deec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800def0:	2101      	movs	r1, #1
 800def2:	4618      	mov	r0, r3
 800def4:	f7fd fb4e 	bl	800b594 <disk_ioctl>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <f_mkfs+0x12e>
 800defe:	2301      	movs	r3, #1
 800df00:	e38e      	b.n	800e620 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800df02:	7afb      	ldrb	r3, [r7, #11]
 800df04:	f003 0308 	and.w	r3, r3, #8
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d001      	beq.n	800df10 <f_mkfs+0x13c>
 800df0c:	2300      	movs	r3, #0
 800df0e:	e000      	b.n	800df12 <f_mkfs+0x13e>
 800df10:	233f      	movs	r3, #63	@ 0x3f
 800df12:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df18:	429a      	cmp	r2, r3
 800df1a:	d901      	bls.n	800df20 <f_mkfs+0x14c>
 800df1c:	230e      	movs	r3, #14
 800df1e:	e37f      	b.n	800e620 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800df20:	693a      	ldr	r2, [r7, #16]
 800df22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	2b7f      	cmp	r3, #127	@ 0x7f
 800df2c:	d801      	bhi.n	800df32 <f_mkfs+0x15e>
 800df2e:	230e      	movs	r3, #14
 800df30:	e376      	b.n	800e620 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b80      	cmp	r3, #128	@ 0x80
 800df36:	d901      	bls.n	800df3c <f_mkfs+0x168>
 800df38:	2313      	movs	r3, #19
 800df3a:	e371      	b.n	800e620 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800df3c:	7afb      	ldrb	r3, [r7, #11]
 800df3e:	f003 0302 	and.w	r3, r3, #2
 800df42:	2b00      	cmp	r3, #0
 800df44:	d00d      	beq.n	800df62 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800df46:	7afb      	ldrb	r3, [r7, #11]
 800df48:	f003 0307 	and.w	r3, r3, #7
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d004      	beq.n	800df5a <f_mkfs+0x186>
 800df50:	7afb      	ldrb	r3, [r7, #11]
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	2b00      	cmp	r3, #0
 800df58:	d103      	bne.n	800df62 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800df5a:	2303      	movs	r3, #3
 800df5c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800df60:	e009      	b.n	800df76 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800df62:	7afb      	ldrb	r3, [r7, #11]
 800df64:	f003 0301 	and.w	r3, r3, #1
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d101      	bne.n	800df70 <f_mkfs+0x19c>
 800df6c:	2313      	movs	r3, #19
 800df6e:	e357      	b.n	800e620 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800df70:	2302      	movs	r3, #2
 800df72:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800df7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800df7e:	2b03      	cmp	r3, #3
 800df80:	d13c      	bne.n	800dffc <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800df82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df84:	2b00      	cmp	r3, #0
 800df86:	d11b      	bne.n	800dfc0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	0c5b      	lsrs	r3, r3, #17
 800df8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800df8e:	2300      	movs	r3, #0
 800df90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df92:	2301      	movs	r3, #1
 800df94:	653b      	str	r3, [r7, #80]	@ 0x50
 800df96:	e005      	b.n	800dfa4 <f_mkfs+0x1d0>
 800df98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df9a:	3301      	adds	r3, #1
 800df9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	653b      	str	r3, [r7, #80]	@ 0x50
 800dfa4:	4a2d      	ldr	r2, [pc, #180]	@ (800e05c <f_mkfs+0x288>)
 800dfa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d007      	beq.n	800dfc0 <f_mkfs+0x1ec>
 800dfb0:	4a2a      	ldr	r2, [pc, #168]	@ (800e05c <f_mkfs+0x288>)
 800dfb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfb8:	461a      	mov	r2, r3
 800dfba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d2eb      	bcs.n	800df98 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfc8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	3302      	adds	r3, #2
 800dfce:	009a      	lsls	r2, r3, #2
 800dfd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dfd2:	4413      	add	r3, r2
 800dfd4:	1e5a      	subs	r2, r3, #1
 800dfd6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dfd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfdc:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800dfde:	2320      	movs	r3, #32
 800dfe0:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d903      	bls.n	800dff8 <f_mkfs+0x224>
 800dff0:	6a3b      	ldr	r3, [r7, #32]
 800dff2:	4a1b      	ldr	r2, [pc, #108]	@ (800e060 <f_mkfs+0x28c>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d952      	bls.n	800e09e <f_mkfs+0x2ca>
 800dff8:	230e      	movs	r3, #14
 800dffa:	e311      	b.n	800e620 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800dffc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d11b      	bne.n	800e03a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	0b1b      	lsrs	r3, r3, #12
 800e006:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e008:	2300      	movs	r3, #0
 800e00a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e00c:	2301      	movs	r3, #1
 800e00e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e010:	e005      	b.n	800e01e <f_mkfs+0x24a>
 800e012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e014:	3301      	adds	r3, #1
 800e016:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e01a:	005b      	lsls	r3, r3, #1
 800e01c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e01e:	4a11      	ldr	r2, [pc, #68]	@ (800e064 <f_mkfs+0x290>)
 800e020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d007      	beq.n	800e03a <f_mkfs+0x266>
 800e02a:	4a0e      	ldr	r2, [pc, #56]	@ (800e064 <f_mkfs+0x290>)
 800e02c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e02e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e032:	461a      	mov	r2, r3
 800e034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e036:	4293      	cmp	r3, r2
 800e038:	d2eb      	bcs.n	800e012 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e042:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800e044:	6a3b      	ldr	r3, [r7, #32]
 800e046:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d90c      	bls.n	800e068 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	3302      	adds	r3, #2
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e056:	e012      	b.n	800e07e <f_mkfs+0x2aa>
 800e058:	20005db4 	.word	0x20005db4
 800e05c:	0801638c 	.word	0x0801638c
 800e060:	0ffffff5 	.word	0x0ffffff5
 800e064:	0801639c 	.word	0x0801639c
				} else {
					fmt = FS_FAT12;
 800e068:	2301      	movs	r3, #1
 800e06a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e06e:	6a3a      	ldr	r2, [r7, #32]
 800e070:	4613      	mov	r3, r2
 800e072:	005b      	lsls	r3, r3, #1
 800e074:	4413      	add	r3, r2
 800e076:	3301      	adds	r3, #1
 800e078:	085b      	lsrs	r3, r3, #1
 800e07a:	3303      	adds	r3, #3
 800e07c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e07e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e082:	4413      	add	r3, r2
 800e084:	1e5a      	subs	r2, r3, #1
 800e086:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e088:	fbb2 f3f3 	udiv	r3, r2, r3
 800e08c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800e08e:	2301      	movs	r3, #1
 800e090:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e094:	015a      	lsls	r2, r3, #5
 800e096:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e098:	fbb2 f3f3 	udiv	r3, r2, r3
 800e09c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e09e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0a2:	4413      	add	r3, r2
 800e0a4:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e0a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e0a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0aa:	fb03 f202 	mul.w	r2, r3, r2
 800e0ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0b0:	4413      	add	r3, r2
 800e0b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e0b4:	4413      	add	r3, r2
 800e0b6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e0b8:	697a      	ldr	r2, [r7, #20]
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	4413      	add	r3, r2
 800e0be:	1e5a      	subs	r2, r3, #1
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	425b      	negs	r3, r3
 800e0c4:	401a      	ands	r2, r3
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e0cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d108      	bne.n	800e0e6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800e0d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e0d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0d8:	4413      	add	r3, r2
 800e0da:	657b      	str	r3, [r7, #84]	@ 0x54
 800e0dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e0de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0e0:	4413      	add	r3, r2
 800e0e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e0e4:	e006      	b.n	800e0f4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e0e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e0e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0ee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e0f0:	4413      	add	r3, r2
 800e0f2:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e0f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0f6:	011a      	lsls	r2, r3, #4
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	441a      	add	r2, r3
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0fe:	1ad2      	subs	r2, r2, r3
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	429a      	cmp	r2, r3
 800e104:	d901      	bls.n	800e10a <f_mkfs+0x336>
 800e106:	230e      	movs	r3, #14
 800e108:	e28a      	b.n	800e620 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e10a:	693a      	ldr	r2, [r7, #16]
 800e10c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e10e:	1ad2      	subs	r2, r2, r3
 800e110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e112:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e114:	fb01 f303 	mul.w	r3, r1, r3
 800e118:	1ad2      	subs	r2, r2, r3
 800e11a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e11c:	1ad2      	subs	r2, r2, r3
 800e11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e120:	fbb2 f3f3 	udiv	r3, r2, r3
 800e124:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800e126:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	d10f      	bne.n	800e14e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e12e:	6a3b      	ldr	r3, [r7, #32]
 800e130:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e134:	4293      	cmp	r3, r2
 800e136:	d80a      	bhi.n	800e14e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d105      	bne.n	800e14a <f_mkfs+0x376>
 800e13e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e140:	085b      	lsrs	r3, r3, #1
 800e142:	607b      	str	r3, [r7, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d144      	bne.n	800e1d4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800e14a:	230e      	movs	r3, #14
 800e14c:	e268      	b.n	800e620 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800e14e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e152:	2b02      	cmp	r3, #2
 800e154:	d133      	bne.n	800e1be <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e156:	6a3b      	ldr	r3, [r7, #32]
 800e158:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d91e      	bls.n	800e19e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d107      	bne.n	800e176 <f_mkfs+0x3a2>
 800e166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e168:	005b      	lsls	r3, r3, #1
 800e16a:	2b40      	cmp	r3, #64	@ 0x40
 800e16c:	d803      	bhi.n	800e176 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e16e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e170:	005b      	lsls	r3, r3, #1
 800e172:	607b      	str	r3, [r7, #4]
 800e174:	e033      	b.n	800e1de <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800e176:	7afb      	ldrb	r3, [r7, #11]
 800e178:	f003 0302 	and.w	r3, r3, #2
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d003      	beq.n	800e188 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e180:	2303      	movs	r3, #3
 800e182:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e186:	e02a      	b.n	800e1de <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d105      	bne.n	800e19a <f_mkfs+0x3c6>
 800e18e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e190:	005b      	lsls	r3, r3, #1
 800e192:	607b      	str	r3, [r7, #4]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b80      	cmp	r3, #128	@ 0x80
 800e198:	d91e      	bls.n	800e1d8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800e19a:	230e      	movs	r3, #14
 800e19c:	e240      	b.n	800e620 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e19e:	6a3b      	ldr	r3, [r7, #32]
 800e1a0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d80a      	bhi.n	800e1be <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d105      	bne.n	800e1ba <f_mkfs+0x3e6>
 800e1ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1b0:	005b      	lsls	r3, r3, #1
 800e1b2:	607b      	str	r3, [r7, #4]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b80      	cmp	r3, #128	@ 0x80
 800e1b8:	d910      	bls.n	800e1dc <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800e1ba:	230e      	movs	r3, #14
 800e1bc:	e230      	b.n	800e620 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e1be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d10c      	bne.n	800e1e0 <f_mkfs+0x40c>
 800e1c6:	6a3b      	ldr	r3, [r7, #32]
 800e1c8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d907      	bls.n	800e1e0 <f_mkfs+0x40c>
 800e1d0:	230e      	movs	r3, #14
 800e1d2:	e225      	b.n	800e620 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e1d4:	bf00      	nop
 800e1d6:	e6ce      	b.n	800df76 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e1d8:	bf00      	nop
 800e1da:	e6cc      	b.n	800df76 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e1dc:	bf00      	nop
			pau = au;
 800e1de:	e6ca      	b.n	800df76 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800e1e0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e1e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	2100      	movs	r1, #0
 800e1e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1ea:	f7fd fa94 	bl	800b716 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e1ee:	220b      	movs	r2, #11
 800e1f0:	49b2      	ldr	r1, [pc, #712]	@ (800e4bc <f_mkfs+0x6e8>)
 800e1f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1f4:	f7fd fa6e 	bl	800b6d4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1fa:	330b      	adds	r3, #11
 800e1fc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e1fe:	4611      	mov	r1, r2
 800e200:	4618      	mov	r0, r3
 800e202:	f7fd fa20 	bl	800b646 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e208:	330d      	adds	r3, #13
 800e20a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e20c:	b2d2      	uxtb	r2, r2
 800e20e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e212:	330e      	adds	r3, #14
 800e214:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e216:	b292      	uxth	r2, r2
 800e218:	4611      	mov	r1, r2
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fd fa13 	bl	800b646 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e222:	3310      	adds	r3, #16
 800e224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e226:	b2d2      	uxtb	r2, r2
 800e228:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22c:	f103 0211 	add.w	r2, r3, #17
 800e230:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e234:	2b03      	cmp	r3, #3
 800e236:	d002      	beq.n	800e23e <f_mkfs+0x46a>
 800e238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	e000      	b.n	800e240 <f_mkfs+0x46c>
 800e23e:	2300      	movs	r3, #0
 800e240:	4619      	mov	r1, r3
 800e242:	4610      	mov	r0, r2
 800e244:	f7fd f9ff 	bl	800b646 <st_word>
		if (sz_vol < 0x10000) {
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e24e:	d208      	bcs.n	800e262 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e252:	3313      	adds	r3, #19
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	b292      	uxth	r2, r2
 800e258:	4611      	mov	r1, r2
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fd f9f3 	bl	800b646 <st_word>
 800e260:	e006      	b.n	800e270 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e264:	3320      	adds	r3, #32
 800e266:	693a      	ldr	r2, [r7, #16]
 800e268:	4611      	mov	r1, r2
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fd fa06 	bl	800b67c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e272:	3315      	adds	r3, #21
 800e274:	22f8      	movs	r2, #248	@ 0xf8
 800e276:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e27a:	3318      	adds	r3, #24
 800e27c:	213f      	movs	r1, #63	@ 0x3f
 800e27e:	4618      	mov	r0, r3
 800e280:	f7fd f9e1 	bl	800b646 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e286:	331a      	adds	r3, #26
 800e288:	21ff      	movs	r1, #255	@ 0xff
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7fd f9db 	bl	800b646 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e292:	331c      	adds	r3, #28
 800e294:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e296:	4618      	mov	r0, r3
 800e298:	f7fd f9f0 	bl	800b67c <st_dword>
		if (fmt == FS_FAT32) {
 800e29c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e2a0:	2b03      	cmp	r3, #3
 800e2a2:	d131      	bne.n	800e308 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2a6:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800e2aa:	f7fc feb1 	bl	800b010 <get_fattime>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f7fd f9e2 	bl	800b67c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ba:	3324      	adds	r3, #36	@ 0x24
 800e2bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7fd f9dc 	bl	800b67c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c6:	332c      	adds	r3, #44	@ 0x2c
 800e2c8:	2102      	movs	r1, #2
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fd f9d6 	bl	800b67c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d2:	3330      	adds	r3, #48	@ 0x30
 800e2d4:	2101      	movs	r1, #1
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fd f9b5 	bl	800b646 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2de:	3332      	adds	r3, #50	@ 0x32
 800e2e0:	2106      	movs	r1, #6
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fd f9af 	bl	800b646 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ea:	3340      	adds	r3, #64	@ 0x40
 800e2ec:	2280      	movs	r2, #128	@ 0x80
 800e2ee:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f2:	3342      	adds	r3, #66	@ 0x42
 800e2f4:	2229      	movs	r2, #41	@ 0x29
 800e2f6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fa:	3347      	adds	r3, #71	@ 0x47
 800e2fc:	2213      	movs	r2, #19
 800e2fe:	4970      	ldr	r1, [pc, #448]	@ (800e4c0 <f_mkfs+0x6ec>)
 800e300:	4618      	mov	r0, r3
 800e302:	f7fd f9e7 	bl	800b6d4 <mem_cpy>
 800e306:	e020      	b.n	800e34a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e30a:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800e30e:	f7fc fe7f 	bl	800b010 <get_fattime>
 800e312:	4603      	mov	r3, r0
 800e314:	4619      	mov	r1, r3
 800e316:	4620      	mov	r0, r4
 800e318:	f7fd f9b0 	bl	800b67c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31e:	3316      	adds	r3, #22
 800e320:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e322:	b292      	uxth	r2, r2
 800e324:	4611      	mov	r1, r2
 800e326:	4618      	mov	r0, r3
 800e328:	f7fd f98d 	bl	800b646 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e32e:	3324      	adds	r3, #36	@ 0x24
 800e330:	2280      	movs	r2, #128	@ 0x80
 800e332:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e336:	3326      	adds	r3, #38	@ 0x26
 800e338:	2229      	movs	r2, #41	@ 0x29
 800e33a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33e:	332b      	adds	r3, #43	@ 0x2b
 800e340:	2213      	movs	r2, #19
 800e342:	4960      	ldr	r1, [pc, #384]	@ (800e4c4 <f_mkfs+0x6f0>)
 800e344:	4618      	mov	r0, r3
 800e346:	f7fd f9c5 	bl	800b6d4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e34c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e350:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e354:	4618      	mov	r0, r3
 800e356:	f7fd f976 	bl	800b646 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e35a:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e35e:	2301      	movs	r3, #1
 800e360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e362:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e364:	f7fd f8f6 	bl	800b554 <disk_write>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <f_mkfs+0x59e>
 800e36e:	2301      	movs	r3, #1
 800e370:	e156      	b.n	800e620 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e372:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e376:	2b03      	cmp	r3, #3
 800e378:	d140      	bne.n	800e3fc <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37c:	1d9a      	adds	r2, r3, #6
 800e37e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e382:	2301      	movs	r3, #1
 800e384:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e386:	f7fd f8e5 	bl	800b554 <disk_write>
			mem_set(buf, 0, ss);
 800e38a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e38c:	461a      	mov	r2, r3
 800e38e:	2100      	movs	r1, #0
 800e390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e392:	f7fd f9c0 	bl	800b716 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e396:	494c      	ldr	r1, [pc, #304]	@ (800e4c8 <f_mkfs+0x6f4>)
 800e398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e39a:	f7fd f96f 	bl	800b67c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e3a4:	4949      	ldr	r1, [pc, #292]	@ (800e4cc <f_mkfs+0x6f8>)
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fd f968 	bl	800b67c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ae:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	4610      	mov	r0, r2
 800e3ba:	f7fd f95f 	bl	800b67c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e3c4:	2102      	movs	r1, #2
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd f958 	bl	800b67c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e3d2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fd f935 	bl	800b646 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3de:	1dda      	adds	r2, r3, #7
 800e3e0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e3e8:	f7fd f8b4 	bl	800b554 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ee:	1c5a      	adds	r2, r3, #1
 800e3f0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e3f8:	f7fd f8ac 	bl	800b554 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800e3fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3fe:	2100      	movs	r1, #0
 800e400:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e402:	f7fd f988 	bl	800b716 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800e406:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e408:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e40a:	2300      	movs	r3, #0
 800e40c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e40e:	e04b      	b.n	800e4a8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800e410:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e414:	2b03      	cmp	r3, #3
 800e416:	d113      	bne.n	800e440 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800e418:	f06f 0107 	mvn.w	r1, #7
 800e41c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e41e:	f7fd f92d 	bl	800b67c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800e422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e424:	3304      	adds	r3, #4
 800e426:	f04f 31ff 	mov.w	r1, #4294967295
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fd f926 	bl	800b67c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800e430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e432:	3308      	adds	r3, #8
 800e434:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fd f91f 	bl	800b67c <st_dword>
 800e43e:	e00b      	b.n	800e458 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800e440:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e444:	2b01      	cmp	r3, #1
 800e446:	d101      	bne.n	800e44c <f_mkfs+0x678>
 800e448:	4b21      	ldr	r3, [pc, #132]	@ (800e4d0 <f_mkfs+0x6fc>)
 800e44a:	e001      	b.n	800e450 <f_mkfs+0x67c>
 800e44c:	f06f 0307 	mvn.w	r3, #7
 800e450:	4619      	mov	r1, r3
 800e452:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e454:	f7fd f912 	bl	800b67c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e458:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e45a:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e45c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e460:	4293      	cmp	r3, r2
 800e462:	bf28      	it	cs
 800e464:	4613      	movcs	r3, r2
 800e466:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e468:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e46c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e46e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e470:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e472:	f7fd f86f 	bl	800b554 <disk_write>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d001      	beq.n	800e480 <f_mkfs+0x6ac>
 800e47c:	2301      	movs	r3, #1
 800e47e:	e0cf      	b.n	800e620 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800e480:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e482:	461a      	mov	r2, r3
 800e484:	2100      	movs	r1, #0
 800e486:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e488:	f7fd f945 	bl	800b716 <mem_set>
				sect += n; nsect -= n;
 800e48c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e48e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e490:	4413      	add	r3, r2
 800e492:	667b      	str	r3, [r7, #100]	@ 0x64
 800e494:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800e49c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1dc      	bne.n	800e45c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e4a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d3af      	bcc.n	800e410 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e4b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	d10d      	bne.n	800e4d4 <f_mkfs+0x700>
 800e4b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4ba:	e00c      	b.n	800e4d6 <f_mkfs+0x702>
 800e4bc:	08016274 	.word	0x08016274
 800e4c0:	08016280 	.word	0x08016280
 800e4c4:	08016294 	.word	0x08016294
 800e4c8:	41615252 	.word	0x41615252
 800e4cc:	61417272 	.word	0x61417272
 800e4d0:	00fffff8 	.word	0x00fffff8
 800e4d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4d6:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e4d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	bf28      	it	cs
 800e4e0:	4613      	movcs	r3, r2
 800e4e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e4e4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e4e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e4ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e4ee:	f7fd f831 	bl	800b554 <disk_write>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <f_mkfs+0x728>
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	e091      	b.n	800e620 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800e4fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e4fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e500:	4413      	add	r3, r2
 800e502:	667b      	str	r3, [r7, #100]	@ 0x64
 800e504:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800e50c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e2      	bne.n	800e4d8 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800e512:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e516:	2b03      	cmp	r3, #3
 800e518:	d103      	bne.n	800e522 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800e51a:	230c      	movs	r3, #12
 800e51c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800e520:	e010      	b.n	800e544 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e528:	d303      	bcc.n	800e532 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800e52a:	2306      	movs	r3, #6
 800e52c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800e530:	e008      	b.n	800e544 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800e532:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e536:	2b02      	cmp	r3, #2
 800e538:	d101      	bne.n	800e53e <f_mkfs+0x76a>
 800e53a:	2304      	movs	r3, #4
 800e53c:	e000      	b.n	800e540 <f_mkfs+0x76c>
 800e53e:	2301      	movs	r3, #1
 800e540:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800e544:	7afb      	ldrb	r3, [r7, #11]
 800e546:	f003 0308 	and.w	r3, r3, #8
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d15b      	bne.n	800e606 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800e54e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e550:	461a      	mov	r2, r3
 800e552:	2100      	movs	r1, #0
 800e554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e556:	f7fd f8de 	bl	800b716 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800e55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e560:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e564:	4618      	mov	r0, r3
 800e566:	f7fd f86e 	bl	800b646 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800e56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e570:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	2200      	movs	r2, #0
 800e576:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	3301      	adds	r3, #1
 800e57c:	2201      	movs	r2, #1
 800e57e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	3302      	adds	r3, #2
 800e584:	2201      	movs	r2, #1
 800e586:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800e588:	69bb      	ldr	r3, [r7, #24]
 800e58a:	3303      	adds	r3, #3
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	3304      	adds	r3, #4
 800e594:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800e598:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800e59a:	693a      	ldr	r2, [r7, #16]
 800e59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e59e:	441a      	add	r2, r3
 800e5a0:	4b21      	ldr	r3, [pc, #132]	@ (800e628 <f_mkfs+0x854>)
 800e5a2:	fba3 1302 	umull	r1, r3, r3, r2
 800e5a6:	1ad2      	subs	r2, r2, r3
 800e5a8:	0852      	lsrs	r2, r2, #1
 800e5aa:	4413      	add	r3, r2
 800e5ac:	0b5b      	lsrs	r3, r3, #13
 800e5ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	3305      	adds	r3, #5
 800e5b4:	22fe      	movs	r2, #254	@ 0xfe
 800e5b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800e5b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5ba:	089b      	lsrs	r3, r3, #2
 800e5bc:	b2da      	uxtb	r2, r3
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	3306      	adds	r3, #6
 800e5c2:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800e5c6:	b2d2      	uxtb	r2, r2
 800e5c8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	3307      	adds	r3, #7
 800e5ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e5d0:	b2d2      	uxtb	r2, r2
 800e5d2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fd f84e 	bl	800b67c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	330c      	adds	r3, #12
 800e5e4:	693a      	ldr	r2, [r7, #16]
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7fd f847 	bl	800b67c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800e5ee:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e5f8:	f7fc ffac 	bl	800b554 <disk_write>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d001      	beq.n	800e606 <f_mkfs+0x832>
 800e602:	2301      	movs	r3, #1
 800e604:	e00c      	b.n	800e620 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800e606:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e60a:	2200      	movs	r2, #0
 800e60c:	2100      	movs	r1, #0
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fc ffc0 	bl	800b594 <disk_ioctl>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d001      	beq.n	800e61e <f_mkfs+0x84a>
 800e61a:	2301      	movs	r3, #1
 800e61c:	e000      	b.n	800e620 <f_mkfs+0x84c>

	return FR_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3774      	adds	r7, #116	@ 0x74
 800e624:	46bd      	mov	sp, r7
 800e626:	bd90      	pop	{r4, r7, pc}
 800e628:	0515565b 	.word	0x0515565b

0800e62c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b087      	sub	sp, #28
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e63a:	2301      	movs	r3, #1
 800e63c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e63e:	2300      	movs	r3, #0
 800e640:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e642:	4b1f      	ldr	r3, [pc, #124]	@ (800e6c0 <FATFS_LinkDriverEx+0x94>)
 800e644:	7a5b      	ldrb	r3, [r3, #9]
 800e646:	b2db      	uxtb	r3, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d131      	bne.n	800e6b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e64c:	4b1c      	ldr	r3, [pc, #112]	@ (800e6c0 <FATFS_LinkDriverEx+0x94>)
 800e64e:	7a5b      	ldrb	r3, [r3, #9]
 800e650:	b2db      	uxtb	r3, r3
 800e652:	461a      	mov	r2, r3
 800e654:	4b1a      	ldr	r3, [pc, #104]	@ (800e6c0 <FATFS_LinkDriverEx+0x94>)
 800e656:	2100      	movs	r1, #0
 800e658:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e65a:	4b19      	ldr	r3, [pc, #100]	@ (800e6c0 <FATFS_LinkDriverEx+0x94>)
 800e65c:	7a5b      	ldrb	r3, [r3, #9]
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	4a17      	ldr	r2, [pc, #92]	@ (800e6c0 <FATFS_LinkDriverEx+0x94>)
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	4413      	add	r3, r2
 800e666:	68fa      	ldr	r2, [r7, #12]
 800e668:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e66a:	4b15      	ldr	r3, [pc, #84]	@ (800e6c0 <FATFS_LinkDriverEx+0x94>)
 800e66c:	7a5b      	ldrb	r3, [r3, #9]
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	461a      	mov	r2, r3
 800e672:	4b13      	ldr	r3, [pc, #76]	@ (800e6c0 <FATFS_LinkDriverEx+0x94>)
 800e674:	4413      	add	r3, r2
 800e676:	79fa      	ldrb	r2, [r7, #7]
 800e678:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e67a:	4b11      	ldr	r3, [pc, #68]	@ (800e6c0 <FATFS_LinkDriverEx+0x94>)
 800e67c:	7a5b      	ldrb	r3, [r3, #9]
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	1c5a      	adds	r2, r3, #1
 800e682:	b2d1      	uxtb	r1, r2
 800e684:	4a0e      	ldr	r2, [pc, #56]	@ (800e6c0 <FATFS_LinkDriverEx+0x94>)
 800e686:	7251      	strb	r1, [r2, #9]
 800e688:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e68a:	7dbb      	ldrb	r3, [r7, #22]
 800e68c:	3330      	adds	r3, #48	@ 0x30
 800e68e:	b2da      	uxtb	r2, r3
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	3301      	adds	r3, #1
 800e698:	223a      	movs	r2, #58	@ 0x3a
 800e69a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	3302      	adds	r3, #2
 800e6a0:	222f      	movs	r2, #47	@ 0x2f
 800e6a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	3303      	adds	r3, #3
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e6b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	371c      	adds	r7, #28
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop
 800e6c0:	20005ddc 	.word	0x20005ddc

0800e6c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff ffaa 	bl	800e62c <FATFS_LinkDriverEx>
 800e6d8:	4603      	mov	r3, r0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800e6ee:	683a      	ldr	r2, [r7, #0]
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	4831      	ldr	r0, [pc, #196]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e6f4:	f001 fac0 	bl	800fc78 <ai_platform_get_activations_map>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d051      	beq.n	800e7a2 <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e6fe:	4b2e      	ldr	r3, [pc, #184]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a2e      	ldr	r2, [pc, #184]	@ (800e7bc <network_configure_activations+0xd8>)
 800e704:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e706:	4b2c      	ldr	r3, [pc, #176]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a2c      	ldr	r2, [pc, #176]	@ (800e7bc <network_configure_activations+0xd8>)
 800e70c:	60d3      	str	r3, [r2, #12]
    upsample_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 800e70e:	4b2a      	ldr	r3, [pc, #168]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800e716:	4413      	add	r3, r2
 800e718:	4a29      	ldr	r2, [pc, #164]	@ (800e7c0 <network_configure_activations+0xdc>)
 800e71a:	6093      	str	r3, [r2, #8]
    upsample_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 800e71c:	4b26      	ldr	r3, [pc, #152]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800e724:	4413      	add	r3, r2
 800e726:	4a26      	ldr	r2, [pc, #152]	@ (800e7c0 <network_configure_activations+0xdc>)
 800e728:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e72a:	4b23      	ldr	r3, [pc, #140]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a25      	ldr	r2, [pc, #148]	@ (800e7c4 <network_configure_activations+0xe0>)
 800e730:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e732:	4b21      	ldr	r3, [pc, #132]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a23      	ldr	r2, [pc, #140]	@ (800e7c4 <network_configure_activations+0xe0>)
 800e738:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 800e73a:	4b1f      	ldr	r3, [pc, #124]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	3324      	adds	r3, #36	@ 0x24
 800e740:	4a21      	ldr	r2, [pc, #132]	@ (800e7c8 <network_configure_activations+0xe4>)
 800e742:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 800e744:	4b1c      	ldr	r3, [pc, #112]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3324      	adds	r3, #36	@ 0x24
 800e74a:	4a1f      	ldr	r2, [pc, #124]	@ (800e7c8 <network_configure_activations+0xe4>)
 800e74c:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 800e74e:	4b1a      	ldr	r3, [pc, #104]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800e756:	4a1d      	ldr	r2, [pc, #116]	@ (800e7cc <network_configure_activations+0xe8>)
 800e758:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 800e75a:	4b17      	ldr	r3, [pc, #92]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800e762:	4a1a      	ldr	r2, [pc, #104]	@ (800e7cc <network_configure_activations+0xe8>)
 800e764:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e766:	4b14      	ldr	r3, [pc, #80]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a19      	ldr	r2, [pc, #100]	@ (800e7d0 <network_configure_activations+0xec>)
 800e76c:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e76e:	4b12      	ldr	r3, [pc, #72]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4a17      	ldr	r2, [pc, #92]	@ (800e7d0 <network_configure_activations+0xec>)
 800e774:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800e776:	4b10      	ldr	r3, [pc, #64]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e77e:	4a15      	ldr	r2, [pc, #84]	@ (800e7d4 <network_configure_activations+0xf0>)
 800e780:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800e782:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e78a:	4a12      	ldr	r2, [pc, #72]	@ (800e7d4 <network_configure_activations+0xf0>)
 800e78c:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800e78e:	4b0a      	ldr	r3, [pc, #40]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4a11      	ldr	r2, [pc, #68]	@ (800e7d8 <network_configure_activations+0xf4>)
 800e794:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800e796:	4b08      	ldr	r3, [pc, #32]	@ (800e7b8 <network_configure_activations+0xd4>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a0f      	ldr	r2, [pc, #60]	@ (800e7d8 <network_configure_activations+0xf4>)
 800e79c:	60d3      	str	r3, [r2, #12]
    return true;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	e005      	b.n	800e7ae <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800e7a2:	2213      	movs	r2, #19
 800e7a4:	2130      	movs	r1, #48	@ 0x30
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f001 faca 	bl	800fd40 <ai_platform_network_set_error>
  return false;
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	20005de8 	.word	0x20005de8
 800e7bc:	2000004c 	.word	0x2000004c
 800e7c0:	2000005c 	.word	0x2000005c
 800e7c4:	2000010c 	.word	0x2000010c
 800e7c8:	2000011c 	.word	0x2000011c
 800e7cc:	2000006c 	.word	0x2000006c
 800e7d0:	2000007c 	.word	0x2000007c
 800e7d4:	2000008c 	.word	0x2000008c
 800e7d8:	2000009c 	.word	0x2000009c

0800e7dc <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800e7e6:	683a      	ldr	r2, [r7, #0]
 800e7e8:	2101      	movs	r1, #1
 800e7ea:	483d      	ldr	r0, [pc, #244]	@ (800e8e0 <network_configure_weights+0x104>)
 800e7ec:	f001 f9ec 	bl	800fbc8 <ai_platform_get_weights_map>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d069      	beq.n	800e8ca <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800e7f6:	4b3b      	ldr	r3, [pc, #236]	@ (800e8e4 <network_configure_weights+0x108>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7fe:	4a39      	ldr	r2, [pc, #228]	@ (800e8e4 <network_configure_weights+0x108>)
 800e800:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800e802:	4b37      	ldr	r3, [pc, #220]	@ (800e8e0 <network_configure_weights+0x104>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a37      	ldr	r2, [pc, #220]	@ (800e8e4 <network_configure_weights+0x108>)
 800e808:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800e80a:	4b35      	ldr	r3, [pc, #212]	@ (800e8e0 <network_configure_weights+0x104>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a35      	ldr	r2, [pc, #212]	@ (800e8e4 <network_configure_weights+0x108>)
 800e810:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800e812:	4b35      	ldr	r3, [pc, #212]	@ (800e8e8 <network_configure_weights+0x10c>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e81a:	4a33      	ldr	r2, [pc, #204]	@ (800e8e8 <network_configure_weights+0x10c>)
 800e81c:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800e81e:	4b30      	ldr	r3, [pc, #192]	@ (800e8e0 <network_configure_weights+0x104>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800e826:	4a30      	ldr	r2, [pc, #192]	@ (800e8e8 <network_configure_weights+0x10c>)
 800e828:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800e82a:	4b2d      	ldr	r3, [pc, #180]	@ (800e8e0 <network_configure_weights+0x104>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800e832:	4a2d      	ldr	r2, [pc, #180]	@ (800e8e8 <network_configure_weights+0x10c>)
 800e834:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800e836:	4b2d      	ldr	r3, [pc, #180]	@ (800e8ec <network_configure_weights+0x110>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e83e:	4a2b      	ldr	r2, [pc, #172]	@ (800e8ec <network_configure_weights+0x110>)
 800e840:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800e842:	4b27      	ldr	r3, [pc, #156]	@ (800e8e0 <network_configure_weights+0x104>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e84a:	4a28      	ldr	r2, [pc, #160]	@ (800e8ec <network_configure_weights+0x110>)
 800e84c:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800e84e:	4b24      	ldr	r3, [pc, #144]	@ (800e8e0 <network_configure_weights+0x104>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800e856:	4a25      	ldr	r2, [pc, #148]	@ (800e8ec <network_configure_weights+0x110>)
 800e858:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800e85a:	4b25      	ldr	r3, [pc, #148]	@ (800e8f0 <network_configure_weights+0x114>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e862:	4a23      	ldr	r2, [pc, #140]	@ (800e8f0 <network_configure_weights+0x114>)
 800e864:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 800e866:	4b1e      	ldr	r3, [pc, #120]	@ (800e8e0 <network_configure_weights+0x104>)
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	4b22      	ldr	r3, [pc, #136]	@ (800e8f4 <network_configure_weights+0x118>)
 800e86c:	4413      	add	r3, r2
 800e86e:	4a20      	ldr	r2, [pc, #128]	@ (800e8f0 <network_configure_weights+0x114>)
 800e870:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 800e872:	4b1b      	ldr	r3, [pc, #108]	@ (800e8e0 <network_configure_weights+0x104>)
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	4b1f      	ldr	r3, [pc, #124]	@ (800e8f4 <network_configure_weights+0x118>)
 800e878:	4413      	add	r3, r2
 800e87a:	4a1d      	ldr	r2, [pc, #116]	@ (800e8f0 <network_configure_weights+0x114>)
 800e87c:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800e87e:	4b1e      	ldr	r3, [pc, #120]	@ (800e8f8 <network_configure_weights+0x11c>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e886:	4a1c      	ldr	r2, [pc, #112]	@ (800e8f8 <network_configure_weights+0x11c>)
 800e888:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 800e88a:	4b15      	ldr	r3, [pc, #84]	@ (800e8e0 <network_configure_weights+0x104>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	4b1b      	ldr	r3, [pc, #108]	@ (800e8fc <network_configure_weights+0x120>)
 800e890:	4413      	add	r3, r2
 800e892:	4a19      	ldr	r2, [pc, #100]	@ (800e8f8 <network_configure_weights+0x11c>)
 800e894:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 800e896:	4b12      	ldr	r3, [pc, #72]	@ (800e8e0 <network_configure_weights+0x104>)
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	4b18      	ldr	r3, [pc, #96]	@ (800e8fc <network_configure_weights+0x120>)
 800e89c:	4413      	add	r3, r2
 800e89e:	4a16      	ldr	r2, [pc, #88]	@ (800e8f8 <network_configure_weights+0x11c>)
 800e8a0:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800e8a2:	4b17      	ldr	r3, [pc, #92]	@ (800e900 <network_configure_weights+0x124>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8aa:	4a15      	ldr	r2, [pc, #84]	@ (800e900 <network_configure_weights+0x124>)
 800e8ac:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 800e8ae:	4b0c      	ldr	r3, [pc, #48]	@ (800e8e0 <network_configure_weights+0x104>)
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	4b14      	ldr	r3, [pc, #80]	@ (800e904 <network_configure_weights+0x128>)
 800e8b4:	4413      	add	r3, r2
 800e8b6:	4a12      	ldr	r2, [pc, #72]	@ (800e900 <network_configure_weights+0x124>)
 800e8b8:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 800e8ba:	4b09      	ldr	r3, [pc, #36]	@ (800e8e0 <network_configure_weights+0x104>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	4b11      	ldr	r3, [pc, #68]	@ (800e904 <network_configure_weights+0x128>)
 800e8c0:	4413      	add	r3, r2
 800e8c2:	4a0f      	ldr	r2, [pc, #60]	@ (800e900 <network_configure_weights+0x124>)
 800e8c4:	60d3      	str	r3, [r2, #12]
    return true;
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e005      	b.n	800e8d6 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800e8ca:	2212      	movs	r2, #18
 800e8cc:	2130      	movs	r1, #48	@ 0x30
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f001 fa36 	bl	800fd40 <ai_platform_network_set_error>
  return false;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	20005dec 	.word	0x20005dec
 800e8e4:	200000ac 	.word	0x200000ac
 800e8e8:	200000bc 	.word	0x200000bc
 800e8ec:	200000cc 	.word	0x200000cc
 800e8f0:	200000dc 	.word	0x200000dc
 800e8f4:	000a9280 	.word	0x000a9280
 800e8f8:	200000ec 	.word	0x200000ec
 800e8fc:	000a9380 	.word	0x000a9380
 800e900:	200000fc 	.word	0x200000fc
 800e904:	000a9980 	.word	0x000a9980

0800e908 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f001 fa09 	bl	800fd28 <ai_platform_network_get_error>
 800e916:	4603      	mov	r3, r0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af02      	add	r7, sp, #8
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800e92a:	2300      	movs	r3, #0
 800e92c:	9301      	str	r3, [sp, #4]
 800e92e:	2305      	movs	r3, #5
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	2301      	movs	r3, #1
 800e934:	4a04      	ldr	r2, [pc, #16]	@ (800e948 <ai_network_create+0x28>)
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f001 faf5 	bl	800ff28 <ai_platform_network_create>
 800e93e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800e940:	4618      	mov	r0, r3
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	2000075c 	.word	0x2000075c

0800e94c <ai_network_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d104      	bne.n	800e966 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800e95c:	4b06      	ldr	r3, [pc, #24]	@ (800e978 <ai_network_inputs_get+0x2c>)
 800e95e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	4a06      	ldr	r2, [pc, #24]	@ (800e97c <ai_network_inputs_get+0x30>)
 800e964:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f001 f9ef 	bl	800fd4c <ai_platform_inputs_get>
 800e96e:	4603      	mov	r3, r0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	2000075c 	.word	0x2000075c
 800e97c:	a1c00100 	.word	0xa1c00100

0800e980 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d104      	bne.n	800e99a <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800e990:	4b06      	ldr	r3, [pc, #24]	@ (800e9ac <ai_network_outputs_get+0x2c>)
 800e992:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4a06      	ldr	r2, [pc, #24]	@ (800e9b0 <ai_network_outputs_get+0x30>)
 800e998:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800e99a:	6839      	ldr	r1, [r7, #0]
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f001 fa4d 	bl	800fe3c <ai_platform_outputs_get>
 800e9a2:	4603      	mov	r3, r0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	2000075c 	.word	0x2000075c
 800e9b0:	a1c00100 	.word	0xa1c00100

0800e9b4 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800e9be:	6839      	ldr	r1, [r7, #0]
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f001 faf3 	bl	800ffac <ai_platform_network_init>
 800e9c6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <ai_network_init+0x22>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	e026      	b.n	800ea24 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800e9d6:	6839      	ldr	r1, [r7, #0]
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7ff feff 	bl	800e7dc <network_configure_weights>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	7afb      	ldrb	r3, [r7, #11]
 800e9e4:	4013      	ands	r3, r2
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	bf14      	ite	ne
 800e9ea:	2301      	movne	r3, #1
 800e9ec:	2300      	moveq	r3, #0
 800e9ee:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800e9f0:	6839      	ldr	r1, [r7, #0]
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f7ff fe76 	bl	800e6e4 <network_configure_activations>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	7afb      	ldrb	r3, [r7, #11]
 800e9fe:	4013      	ands	r3, r2
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	bf14      	ite	ne
 800ea04:	2301      	movne	r3, #1
 800ea06:	2300      	moveq	r3, #0
 800ea08:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f001 fb8e 	bl	801012c <ai_platform_network_post_init>
 800ea10:	4603      	mov	r3, r0
 800ea12:	461a      	mov	r2, r3
 800ea14:	7afb      	ldrb	r3, [r7, #11]
 800ea16:	4013      	ands	r3, r2
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	bf14      	ite	ne
 800ea1c:	2301      	movne	r3, #1
 800ea1e:	2300      	moveq	r3, #0
 800ea20:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ea22:	7afb      	ldrb	r3, [r7, #11]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	68b9      	ldr	r1, [r7, #8]
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f001 fba5 	bl	801018c <ai_platform_network_process>
 800ea42:	4603      	mov	r3, r0
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3710      	adds	r7, #16
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 800ea4c:	b4b0      	push	{r4, r5, r7}
 800ea4e:	b08f      	sub	sp, #60	@ 0x3c
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800ea56:	4b15      	ldr	r3, [pc, #84]	@ (800eaac <ai_network_data_activations_buffer_get+0x60>)
 800ea58:	61fb      	str	r3, [r7, #28]
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	623b      	str	r3, [r7, #32]
 800ea5e:	2300      	movs	r3, #0
 800ea60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea62:	2300      	movs	r3, #0
 800ea64:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea66:	4b12      	ldr	r3, [pc, #72]	@ (800eab0 <ai_network_data_activations_buffer_get+0x64>)
 800ea68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800ea70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea72:	2204      	movs	r2, #4
 800ea74:	f362 231f 	bfi	r3, r2, #8, #24
 800ea78:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea7a:	4b0e      	ldr	r3, [pc, #56]	@ (800eab4 <ai_network_data_activations_buffer_get+0x68>)
 800ea7c:	f107 040c 	add.w	r4, r7, #12
 800ea80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ea86:	f107 030c 	add.w	r3, r7, #12
 800ea8a:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	461d      	mov	r5, r3
 800ea90:	f107 041c 	add.w	r4, r7, #28
 800ea94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ea9c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	373c      	adds	r7, #60	@ 0x3c
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bcb0      	pop	{r4, r5, r7}
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	00040440 	.word	0x00040440
 800eab0:	00010630 	.word	0x00010630
 800eab4:	080162a8 	.word	0x080162a8

0800eab8 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 800eab8:	b4b0      	push	{r4, r5, r7}
 800eaba:	b08f      	sub	sp, #60	@ 0x3c
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800eac2:	4b15      	ldr	r3, [pc, #84]	@ (800eb18 <ai_network_data_weights_buffer_get+0x60>)
 800eac4:	61fb      	str	r3, [r7, #28]
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	623b      	str	r3, [r7, #32]
 800eaca:	2300      	movs	r3, #0
 800eacc:	627b      	str	r3, [r7, #36]	@ 0x24
 800eace:	2300      	movs	r3, #0
 800ead0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ead2:	4b12      	ldr	r3, [pc, #72]	@ (800eb1c <ai_network_data_weights_buffer_get+0x64>)
 800ead4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ead6:	2301      	movs	r3, #1
 800ead8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800eadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eade:	2204      	movs	r2, #4
 800eae0:	f362 231f 	bfi	r3, r2, #8, #24
 800eae4:	633b      	str	r3, [r7, #48]	@ 0x30
 800eae6:	4b0e      	ldr	r3, [pc, #56]	@ (800eb20 <ai_network_data_weights_buffer_get+0x68>)
 800eae8:	f107 040c 	add.w	r4, r7, #12
 800eaec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eaee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eaf2:	f107 030c 	add.w	r3, r7, #12
 800eaf6:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	461d      	mov	r5, r3
 800eafc:	f107 041c 	add.w	r4, r7, #28
 800eb00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb04:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800eb08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	373c      	adds	r7, #60	@ 0x3c
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bcb0      	pop	{r4, r5, r7}
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	40040440 	.word	0x40040440
 800eb1c:	000a9998 	.word	0x000a9998
 800eb20:	080162b8 	.word	0x080162b8

0800eb24 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800eb24:	b480      	push	{r7}
 800eb26:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 800eb28:	4b02      	ldr	r3, [pc, #8]	@ (800eb34 <ai_network_data_weights_get+0x10>)

}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	20000800 	.word	0x20000800

0800eb38 <arm_rfft_fast_init_f32>:
 800eb38:	084b      	lsrs	r3, r1, #1
 800eb3a:	2b80      	cmp	r3, #128	@ 0x80
 800eb3c:	b430      	push	{r4, r5}
 800eb3e:	8201      	strh	r1, [r0, #16]
 800eb40:	8003      	strh	r3, [r0, #0]
 800eb42:	d070      	beq.n	800ec26 <arm_rfft_fast_init_f32+0xee>
 800eb44:	d916      	bls.n	800eb74 <arm_rfft_fast_init_f32+0x3c>
 800eb46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb4a:	d05f      	beq.n	800ec0c <arm_rfft_fast_init_f32+0xd4>
 800eb4c:	d936      	bls.n	800ebbc <arm_rfft_fast_init_f32+0x84>
 800eb4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb52:	d026      	beq.n	800eba2 <arm_rfft_fast_init_f32+0x6a>
 800eb54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb58:	d112      	bne.n	800eb80 <arm_rfft_fast_init_f32+0x48>
 800eb5a:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800eb5e:	4c38      	ldr	r4, [pc, #224]	@ (800ec40 <arm_rfft_fast_init_f32+0x108>)
 800eb60:	4938      	ldr	r1, [pc, #224]	@ (800ec44 <arm_rfft_fast_init_f32+0x10c>)
 800eb62:	2300      	movs	r3, #0
 800eb64:	4a38      	ldr	r2, [pc, #224]	@ (800ec48 <arm_rfft_fast_init_f32+0x110>)
 800eb66:	8185      	strh	r5, [r0, #12]
 800eb68:	6084      	str	r4, [r0, #8]
 800eb6a:	6041      	str	r1, [r0, #4]
 800eb6c:	6142      	str	r2, [r0, #20]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	bc30      	pop	{r4, r5}
 800eb72:	4770      	bx	lr
 800eb74:	2b20      	cmp	r3, #32
 800eb76:	d031      	beq.n	800ebdc <arm_rfft_fast_init_f32+0xa4>
 800eb78:	2b40      	cmp	r3, #64	@ 0x40
 800eb7a:	d006      	beq.n	800eb8a <arm_rfft_fast_init_f32+0x52>
 800eb7c:	2b10      	cmp	r3, #16
 800eb7e:	d039      	beq.n	800ebf4 <arm_rfft_fast_init_f32+0xbc>
 800eb80:	f04f 33ff 	mov.w	r3, #4294967295
 800eb84:	bc30      	pop	{r4, r5}
 800eb86:	4618      	mov	r0, r3
 800eb88:	4770      	bx	lr
 800eb8a:	2538      	movs	r5, #56	@ 0x38
 800eb8c:	4c2f      	ldr	r4, [pc, #188]	@ (800ec4c <arm_rfft_fast_init_f32+0x114>)
 800eb8e:	4930      	ldr	r1, [pc, #192]	@ (800ec50 <arm_rfft_fast_init_f32+0x118>)
 800eb90:	2300      	movs	r3, #0
 800eb92:	4a30      	ldr	r2, [pc, #192]	@ (800ec54 <arm_rfft_fast_init_f32+0x11c>)
 800eb94:	8185      	strh	r5, [r0, #12]
 800eb96:	6084      	str	r4, [r0, #8]
 800eb98:	6041      	str	r1, [r0, #4]
 800eb9a:	6142      	str	r2, [r0, #20]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	bc30      	pop	{r4, r5}
 800eba0:	4770      	bx	lr
 800eba2:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800eba6:	4c2c      	ldr	r4, [pc, #176]	@ (800ec58 <arm_rfft_fast_init_f32+0x120>)
 800eba8:	492c      	ldr	r1, [pc, #176]	@ (800ec5c <arm_rfft_fast_init_f32+0x124>)
 800ebaa:	2300      	movs	r3, #0
 800ebac:	4a2c      	ldr	r2, [pc, #176]	@ (800ec60 <arm_rfft_fast_init_f32+0x128>)
 800ebae:	8185      	strh	r5, [r0, #12]
 800ebb0:	6084      	str	r4, [r0, #8]
 800ebb2:	6041      	str	r1, [r0, #4]
 800ebb4:	6142      	str	r2, [r0, #20]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	bc30      	pop	{r4, r5}
 800ebba:	4770      	bx	lr
 800ebbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ebc0:	d1de      	bne.n	800eb80 <arm_rfft_fast_init_f32+0x48>
 800ebc2:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800ebc6:	4c27      	ldr	r4, [pc, #156]	@ (800ec64 <arm_rfft_fast_init_f32+0x12c>)
 800ebc8:	4927      	ldr	r1, [pc, #156]	@ (800ec68 <arm_rfft_fast_init_f32+0x130>)
 800ebca:	2300      	movs	r3, #0
 800ebcc:	4a27      	ldr	r2, [pc, #156]	@ (800ec6c <arm_rfft_fast_init_f32+0x134>)
 800ebce:	8185      	strh	r5, [r0, #12]
 800ebd0:	6084      	str	r4, [r0, #8]
 800ebd2:	6041      	str	r1, [r0, #4]
 800ebd4:	6142      	str	r2, [r0, #20]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	bc30      	pop	{r4, r5}
 800ebda:	4770      	bx	lr
 800ebdc:	2530      	movs	r5, #48	@ 0x30
 800ebde:	4c24      	ldr	r4, [pc, #144]	@ (800ec70 <arm_rfft_fast_init_f32+0x138>)
 800ebe0:	4924      	ldr	r1, [pc, #144]	@ (800ec74 <arm_rfft_fast_init_f32+0x13c>)
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	4a24      	ldr	r2, [pc, #144]	@ (800ec78 <arm_rfft_fast_init_f32+0x140>)
 800ebe6:	8185      	strh	r5, [r0, #12]
 800ebe8:	6084      	str	r4, [r0, #8]
 800ebea:	6041      	str	r1, [r0, #4]
 800ebec:	6142      	str	r2, [r0, #20]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	bc30      	pop	{r4, r5}
 800ebf2:	4770      	bx	lr
 800ebf4:	2514      	movs	r5, #20
 800ebf6:	4c21      	ldr	r4, [pc, #132]	@ (800ec7c <arm_rfft_fast_init_f32+0x144>)
 800ebf8:	4921      	ldr	r1, [pc, #132]	@ (800ec80 <arm_rfft_fast_init_f32+0x148>)
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	4a21      	ldr	r2, [pc, #132]	@ (800ec84 <arm_rfft_fast_init_f32+0x14c>)
 800ebfe:	8185      	strh	r5, [r0, #12]
 800ec00:	6084      	str	r4, [r0, #8]
 800ec02:	6041      	str	r1, [r0, #4]
 800ec04:	6142      	str	r2, [r0, #20]
 800ec06:	4618      	mov	r0, r3
 800ec08:	bc30      	pop	{r4, r5}
 800ec0a:	4770      	bx	lr
 800ec0c:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800ec10:	4c1d      	ldr	r4, [pc, #116]	@ (800ec88 <arm_rfft_fast_init_f32+0x150>)
 800ec12:	491e      	ldr	r1, [pc, #120]	@ (800ec8c <arm_rfft_fast_init_f32+0x154>)
 800ec14:	2300      	movs	r3, #0
 800ec16:	4a1e      	ldr	r2, [pc, #120]	@ (800ec90 <arm_rfft_fast_init_f32+0x158>)
 800ec18:	8185      	strh	r5, [r0, #12]
 800ec1a:	6084      	str	r4, [r0, #8]
 800ec1c:	6041      	str	r1, [r0, #4]
 800ec1e:	6142      	str	r2, [r0, #20]
 800ec20:	4618      	mov	r0, r3
 800ec22:	bc30      	pop	{r4, r5}
 800ec24:	4770      	bx	lr
 800ec26:	25d0      	movs	r5, #208	@ 0xd0
 800ec28:	4c1a      	ldr	r4, [pc, #104]	@ (800ec94 <arm_rfft_fast_init_f32+0x15c>)
 800ec2a:	491b      	ldr	r1, [pc, #108]	@ (800ec98 <arm_rfft_fast_init_f32+0x160>)
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	4a1b      	ldr	r2, [pc, #108]	@ (800ec9c <arm_rfft_fast_init_f32+0x164>)
 800ec30:	8185      	strh	r5, [r0, #12]
 800ec32:	6084      	str	r4, [r0, #8]
 800ec34:	6041      	str	r1, [r0, #4]
 800ec36:	6142      	str	r2, [r0, #20]
 800ec38:	4618      	mov	r0, r3
 800ec3a:	bc30      	pop	{r4, r5}
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	080ceba0 	.word	0x080ceba0
 800ec44:	080bfd98 	.word	0x080bfd98
 800ec48:	080c5f08 	.word	0x080c5f08
 800ec4c:	080c3e98 	.word	0x080c3e98
 800ec50:	080d0960 	.word	0x080d0960
 800ec54:	080d2e50 	.word	0x080d2e50
 800ec58:	080cc888 	.word	0x080cc888
 800ec5c:	080ca788 	.word	0x080ca788
 800ec60:	080c3f08 	.word	0x080c3f08
 800ec64:	080d2ae0 	.word	0x080d2ae0
 800ec68:	080c9f08 	.word	0x080c9f08
 800ec6c:	080d0b60 	.word	0x080d0b60
 800ec70:	080cd740 	.word	0x080cd740
 800ec74:	080cc788 	.word	0x080cc788
 800ec78:	080c3d98 	.word	0x080c3d98
 800ec7c:	080cd698 	.word	0x080cd698
 800ec80:	080ca708 	.word	0x080ca708
 800ec84:	080cd6c0 	.word	0x080cd6c0
 800ec88:	080d1360 	.word	0x080d1360
 800ec8c:	080cdba0 	.word	0x080cdba0
 800ec90:	080d16e0 	.word	0x080d16e0
 800ec94:	080d3050 	.word	0x080d3050
 800ec98:	080cd7a0 	.word	0x080cd7a0
 800ec9c:	080d26e0 	.word	0x080d26e0

0800eca0 <arm_rfft_fast_f32>:
 800eca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca4:	8a05      	ldrh	r5, [r0, #16]
 800eca6:	4606      	mov	r6, r0
 800eca8:	4617      	mov	r7, r2
 800ecaa:	460c      	mov	r4, r1
 800ecac:	086d      	lsrs	r5, r5, #1
 800ecae:	8005      	strh	r5, [r0, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d15e      	bne.n	800ed72 <arm_rfft_fast_f32+0xd2>
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	f000 fbde 	bl	800f478 <arm_cfft_f32>
 800ecbc:	edd4 7a00 	vldr	s15, [r4]
 800ecc0:	ed94 7a01 	vldr	s14, [r4, #4]
 800ecc4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ecc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eccc:	8832      	ldrh	r2, [r6, #0]
 800ecce:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ecd2:	6975      	ldr	r5, [r6, #20]
 800ecd4:	3a01      	subs	r2, #1
 800ecd6:	eeb0 3a46 	vmov.f32	s6, s12
 800ecda:	3510      	adds	r5, #16
 800ecdc:	f107 0610 	add.w	r6, r7, #16
 800ece0:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ece4:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800ece8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ecec:	f104 0310 	add.w	r3, r4, #16
 800ecf0:	3808      	subs	r0, #8
 800ecf2:	ee26 7a86 	vmul.f32	s14, s13, s12
 800ecf6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ecfa:	ed87 7a00 	vstr	s14, [r7]
 800ecfe:	edc7 7a01 	vstr	s15, [r7, #4]
 800ed02:	ed90 7a02 	vldr	s14, [r0, #8]
 800ed06:	3a01      	subs	r2, #1
 800ed08:	ed53 6a02 	vldr	s13, [r3, #-8]
 800ed0c:	f1a0 0008 	sub.w	r0, r0, #8
 800ed10:	ed15 6a02 	vldr	s12, [r5, #-8]
 800ed14:	f103 0308 	add.w	r3, r3, #8
 800ed18:	ee77 7a66 	vsub.f32	s15, s14, s13
 800ed1c:	edd0 3a05 	vldr	s7, [r0, #20]
 800ed20:	ed13 5a03 	vldr	s10, [r3, #-12]
 800ed24:	ee77 4a26 	vadd.f32	s9, s14, s13
 800ed28:	ed55 5a01 	vldr	s11, [r5, #-4]
 800ed2c:	f106 0608 	add.w	r6, r6, #8
 800ed30:	ee66 6a27 	vmul.f32	s13, s12, s15
 800ed34:	f105 0508 	add.w	r5, r5, #8
 800ed38:	ee33 4a85 	vadd.f32	s8, s7, s10
 800ed3c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800ed40:	ee35 5a63 	vsub.f32	s10, s10, s7
 800ed44:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ed48:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ed4c:	ee77 7a05 	vadd.f32	s15, s14, s10
 800ed50:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ed54:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ed58:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800ed5c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800ed60:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ed64:	ed46 7a03 	vstr	s15, [r6, #-12]
 800ed68:	ed06 7a04 	vstr	s14, [r6, #-16]
 800ed6c:	d1c9      	bne.n	800ed02 <arm_rfft_fast_f32+0x62>
 800ed6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed72:	edd1 7a00 	vldr	s15, [r1]
 800ed76:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800ed7a:	edd1 6a01 	vldr	s13, [r1, #4]
 800ed7e:	1e68      	subs	r0, r5, #1
 800ed80:	6975      	ldr	r5, [r6, #20]
 800ed82:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ed86:	00c1      	lsls	r1, r0, #3
 800ed88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ed8c:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ed90:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ed94:	ed82 7a00 	vstr	s14, [r2]
 800ed98:	edc2 7a01 	vstr	s15, [r2, #4]
 800ed9c:	b3e0      	cbz	r0, 800ee18 <arm_rfft_fast_f32+0x178>
 800ed9e:	3908      	subs	r1, #8
 800eda0:	f104 0210 	add.w	r2, r4, #16
 800eda4:	3510      	adds	r5, #16
 800eda6:	440c      	add	r4, r1
 800eda8:	f107 0110 	add.w	r1, r7, #16
 800edac:	ed94 7a02 	vldr	s14, [r4, #8]
 800edb0:	3801      	subs	r0, #1
 800edb2:	ed52 6a02 	vldr	s13, [r2, #-8]
 800edb6:	f1a4 0408 	sub.w	r4, r4, #8
 800edba:	ed15 6a02 	vldr	s12, [r5, #-8]
 800edbe:	f102 0208 	add.w	r2, r2, #8
 800edc2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800edc6:	ed94 4a05 	vldr	s8, [r4, #20]
 800edca:	ed12 5a03 	vldr	s10, [r2, #-12]
 800edce:	ee77 6a26 	vadd.f32	s13, s14, s13
 800edd2:	ed55 5a01 	vldr	s11, [r5, #-4]
 800edd6:	f101 0108 	add.w	r1, r1, #8
 800edda:	ee26 3a27 	vmul.f32	s6, s12, s15
 800edde:	f105 0508 	add.w	r5, r5, #8
 800ede2:	ee74 4a05 	vadd.f32	s9, s8, s10
 800ede6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800edea:	ee35 5a44 	vsub.f32	s10, s10, s8
 800edee:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800edf2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800edf6:	ee77 7a05 	vadd.f32	s15, s14, s10
 800edfa:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800edfe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ee02:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800ee06:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ee0a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ee0e:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ee12:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ee16:	d1c9      	bne.n	800edac <arm_rfft_fast_f32+0x10c>
 800ee18:	461a      	mov	r2, r3
 800ee1a:	4639      	mov	r1, r7
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee24:	f000 bb28 	b.w	800f478 <arm_cfft_f32>

0800ee28 <arm_cfft_radix8by2_f32>:
 800ee28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2c:	4607      	mov	r7, r0
 800ee2e:	4608      	mov	r0, r1
 800ee30:	ed2d 8b06 	vpush	{d8-d10}
 800ee34:	f8b7 e000 	ldrh.w	lr, [r7]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800ee3e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800ee42:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800ee46:	f000 80b0 	beq.w	800efaa <arm_cfft_radix8by2_f32+0x182>
 800ee4a:	008b      	lsls	r3, r1, #2
 800ee4c:	3210      	adds	r2, #16
 800ee4e:	f100 0610 	add.w	r6, r0, #16
 800ee52:	f108 0510 	add.w	r5, r8, #16
 800ee56:	3310      	adds	r3, #16
 800ee58:	18c4      	adds	r4, r0, r3
 800ee5a:	4443      	add	r3, r8
 800ee5c:	ed55 6a04 	vldr	s13, [r5, #-16]
 800ee60:	f1be 0e01 	subs.w	lr, lr, #1
 800ee64:	ed56 4a04 	vldr	s9, [r6, #-16]
 800ee68:	f104 0410 	add.w	r4, r4, #16
 800ee6c:	ed15 7a03 	vldr	s14, [r5, #-12]
 800ee70:	f106 0610 	add.w	r6, r6, #16
 800ee74:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800ee78:	ed55 7a02 	vldr	s15, [r5, #-8]
 800ee7c:	ed55 2a01 	vldr	s5, [r5, #-4]
 800ee80:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800ee84:	ed53 0a04 	vldr	s1, [r3, #-16]
 800ee88:	f102 0210 	add.w	r2, r2, #16
 800ee8c:	ed13 5a03 	vldr	s10, [r3, #-12]
 800ee90:	f105 0510 	add.w	r5, r5, #16
 800ee94:	ed13 3a02 	vldr	s6, [r3, #-8]
 800ee98:	f103 0310 	add.w	r3, r3, #16
 800ee9c:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800eea0:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800eea4:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800eea8:	ee33 8a83 	vadd.f32	s16, s7, s6
 800eeac:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800eeb0:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800eeb4:	ee34 0a06 	vadd.f32	s0, s8, s12
 800eeb8:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800eebc:	ee76 aa87 	vadd.f32	s21, s13, s14
 800eec0:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800eec4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800eec8:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800eecc:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800eed0:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800eed4:	ee71 8a05 	vadd.f32	s17, s2, s10
 800eed8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800eedc:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800eee0:	ee72 9a22 	vadd.f32	s19, s4, s5
 800eee4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800eee8:	ee35 5a41 	vsub.f32	s10, s10, s2
 800eeec:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800eef0:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800eef4:	ee36 6a44 	vsub.f32	s12, s12, s8
 800eef8:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800eefc:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800ef00:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800ef04:	ee72 7a62 	vsub.f32	s15, s4, s5
 800ef08:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800ef0c:	ee73 2a63 	vsub.f32	s5, s6, s7
 800ef10:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800ef14:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800ef18:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800ef1c:	ee24 3a84 	vmul.f32	s6, s9, s8
 800ef20:	ee27 2a26 	vmul.f32	s4, s14, s13
 800ef24:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800ef28:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800ef2c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ef30:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ef34:	ee65 6a26 	vmul.f32	s13, s10, s13
 800ef38:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ef3c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ef40:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800ef44:	ee33 4a02 	vadd.f32	s8, s6, s4
 800ef48:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800ef4c:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800ef50:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800ef54:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800ef58:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800ef5c:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800ef60:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800ef64:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800ef68:	ee27 4a87 	vmul.f32	s8, s15, s14
 800ef6c:	ee61 5a87 	vmul.f32	s11, s3, s14
 800ef70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ef74:	ee22 5a87 	vmul.f32	s10, s5, s14
 800ef78:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ef7c:	ee26 6a26 	vmul.f32	s12, s12, s13
 800ef80:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800ef84:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ef88:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ef8c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ef90:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ef94:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800ef98:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800ef9c:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800efa0:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800efa4:	f47f af5a 	bne.w	800ee5c <arm_cfft_radix8by2_f32+0x34>
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	b28c      	uxth	r4, r1
 800efac:	2302      	movs	r3, #2
 800efae:	4621      	mov	r1, r4
 800efb0:	f000 fada 	bl	800f568 <arm_radix8_butterfly_f32>
 800efb4:	4621      	mov	r1, r4
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	4640      	mov	r0, r8
 800efba:	2302      	movs	r3, #2
 800efbc:	ecbd 8b06 	vpop	{d8-d10}
 800efc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efc4:	f000 bad0 	b.w	800f568 <arm_radix8_butterfly_f32>

0800efc8 <arm_cfft_radix8by4_f32>:
 800efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	ed2d 8b06 	vpush	{d8-d10}
 800efd0:	8804      	ldrh	r4, [r0, #0]
 800efd2:	b08f      	sub	sp, #60	@ 0x3c
 800efd4:	ed91 6a00 	vldr	s12, [r1]
 800efd8:	460a      	mov	r2, r1
 800efda:	0864      	lsrs	r4, r4, #1
 800efdc:	ed91 7a01 	vldr	s14, [r1, #4]
 800efe0:	9101      	str	r1, [sp, #4]
 800efe2:	00a3      	lsls	r3, r4, #2
 800efe4:	6841      	ldr	r1, [r0, #4]
 800efe6:	0864      	lsrs	r4, r4, #1
 800efe8:	900c      	str	r0, [sp, #48]	@ 0x30
 800efea:	9205      	str	r2, [sp, #20]
 800efec:	f101 0610 	add.w	r6, r1, #16
 800eff0:	4625      	mov	r5, r4
 800eff2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eff4:	f101 0408 	add.w	r4, r1, #8
 800eff8:	9602      	str	r6, [sp, #8]
 800effa:	9407      	str	r4, [sp, #28]
 800effc:	18d4      	adds	r4, r2, r3
 800effe:	1eaa      	subs	r2, r5, #2
 800f000:	f101 0518 	add.w	r5, r1, #24
 800f004:	18e0      	adds	r0, r4, r3
 800f006:	edd4 4a00 	vldr	s9, [r4]
 800f00a:	ed94 4a01 	vldr	s8, [r4, #4]
 800f00e:	46a6      	mov	lr, r4
 800f010:	edd0 6a00 	vldr	s13, [r0]
 800f014:	18c7      	adds	r7, r0, r3
 800f016:	edd0 7a01 	vldr	s15, [r0, #4]
 800f01a:	46a0      	mov	r8, r4
 800f01c:	ee76 5a26 	vadd.f32	s11, s12, s13
 800f020:	ed97 5a00 	vldr	s10, [r7]
 800f024:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f028:	4604      	mov	r4, r0
 800f02a:	9506      	str	r5, [sp, #24]
 800f02c:	4605      	mov	r5, r0
 800f02e:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800f032:	900a      	str	r0, [sp, #40]	@ 0x28
 800f034:	9801      	ldr	r0, [sp, #4]
 800f036:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f03a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f03e:	ed97 3a01 	vldr	s6, [r7, #4]
 800f042:	ee72 2a85 	vadd.f32	s5, s5, s10
 800f046:	46bc      	mov	ip, r7
 800f048:	ee76 3a84 	vadd.f32	s7, s13, s8
 800f04c:	9704      	str	r7, [sp, #16]
 800f04e:	ee36 7a44 	vsub.f32	s14, s12, s8
 800f052:	f8cd e00c 	str.w	lr, [sp, #12]
 800f056:	ee12 9a90 	vmov	r9, s5
 800f05a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800f05e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800f062:	1f3e      	subs	r6, r7, #4
 800f064:	f840 9b08 	str.w	r9, [r0], #8
 800f068:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800f06c:	edde 2a01 	vldr	s5, [lr, #4]
 800f070:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800f074:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800f078:	eddc 4a01 	vldr	s9, [ip, #4]
 800f07c:	ee36 6a22 	vadd.f32	s12, s12, s5
 800f080:	9001      	str	r0, [sp, #4]
 800f082:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f086:	9805      	ldr	r0, [sp, #20]
 800f088:	ee13 9a90 	vmov	r9, s7
 800f08c:	ee37 7a43 	vsub.f32	s14, s14, s6
 800f090:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f094:	f1ae 0704 	sub.w	r7, lr, #4
 800f098:	ee74 4a05 	vadd.f32	s9, s8, s10
 800f09c:	ee76 6a83 	vadd.f32	s13, s13, s6
 800f0a0:	ed80 6a01 	vstr	s12, [r0, #4]
 800f0a4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f0a8:	f848 9b08 	str.w	r9, [r8], #8
 800f0ac:	edce 4a01 	vstr	s9, [lr, #4]
 800f0b0:	ee15 ea90 	vmov	lr, s11
 800f0b4:	f844 eb08 	str.w	lr, [r4], #8
 800f0b8:	ee16 ea90 	vmov	lr, s13
 800f0bc:	9408      	str	r4, [sp, #32]
 800f0be:	462c      	mov	r4, r5
 800f0c0:	ed85 7a01 	vstr	s14, [r5, #4]
 800f0c4:	9d04      	ldr	r5, [sp, #16]
 800f0c6:	f84c eb08 	str.w	lr, [ip], #8
 800f0ca:	edc5 7a01 	vstr	s15, [r5, #4]
 800f0ce:	0855      	lsrs	r5, r2, #1
 800f0d0:	9509      	str	r5, [sp, #36]	@ 0x24
 800f0d2:	f000 8130 	beq.w	800f336 <arm_cfft_radix8by4_f32+0x36e>
 800f0d6:	9805      	ldr	r0, [sp, #20]
 800f0d8:	3b08      	subs	r3, #8
 800f0da:	46ab      	mov	fp, r5
 800f0dc:	f1a4 020c 	sub.w	r2, r4, #12
 800f0e0:	f100 0510 	add.w	r5, r0, #16
 800f0e4:	f101 0920 	add.w	r9, r1, #32
 800f0e8:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800f0ec:	f8dd a008 	ldr.w	sl, [sp, #8]
 800f0f0:	4433      	add	r3, r6
 800f0f2:	3410      	adds	r4, #16
 800f0f4:	4660      	mov	r0, ip
 800f0f6:	4641      	mov	r1, r8
 800f0f8:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800f0fc:	ed54 6a02 	vldr	s13, [r4, #-8]
 800f100:	f1bb 0b01 	subs.w	fp, fp, #1
 800f104:	ed55 5a02 	vldr	s11, [r5, #-8]
 800f108:	f10a 0a08 	add.w	sl, sl, #8
 800f10c:	edd1 7a00 	vldr	s15, [r1]
 800f110:	f105 0508 	add.w	r5, r5, #8
 800f114:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800f118:	edd0 2a00 	vldr	s5, [r0]
 800f11c:	ed14 7a01 	vldr	s14, [r4, #-4]
 800f120:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800f124:	ed55 6a03 	vldr	s13, [r5, #-12]
 800f128:	f1a2 0208 	sub.w	r2, r2, #8
 800f12c:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800f130:	ed90 2a01 	vldr	s4, [r0, #4]
 800f134:	ee36 5a87 	vadd.f32	s10, s13, s14
 800f138:	ed91 6a01 	vldr	s12, [r1, #4]
 800f13c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f140:	f109 0910 	add.w	r9, r9, #16
 800f144:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800f148:	f104 0408 	add.w	r4, r4, #8
 800f14c:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800f150:	f10e 0e18 	add.w	lr, lr, #24
 800f154:	ee37 3a67 	vsub.f32	s6, s14, s15
 800f158:	f1a3 0308 	sub.w	r3, r3, #8
 800f15c:	ed45 6a04 	vstr	s13, [r5, #-16]
 800f160:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f164:	edd1 6a01 	vldr	s13, [r1, #4]
 800f168:	ee75 1a86 	vadd.f32	s3, s11, s12
 800f16c:	edd0 4a01 	vldr	s9, [r0, #4]
 800f170:	ee33 3a22 	vadd.f32	s6, s6, s5
 800f174:	ee75 6a26 	vadd.f32	s13, s10, s13
 800f178:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f17c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f180:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f184:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800f188:	ee35 5a42 	vsub.f32	s10, s10, s4
 800f18c:	ed45 6a03 	vstr	s13, [r5, #-12]
 800f190:	ee36 2a02 	vadd.f32	s4, s12, s4
 800f194:	edd6 7a00 	vldr	s15, [r6]
 800f198:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800f19c:	ed97 1a00 	vldr	s2, [r7]
 800f1a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 800f1a4:	ed92 8a04 	vldr	s16, [r2, #16]
 800f1a8:	ee71 8a27 	vadd.f32	s17, s2, s15
 800f1ac:	ed93 aa04 	vldr	s20, [r3, #16]
 800f1b0:	ed16 7a01 	vldr	s14, [r6, #-4]
 800f1b4:	ee71 7a67 	vsub.f32	s15, s2, s15
 800f1b8:	ed57 0a01 	vldr	s1, [r7, #-4]
 800f1bc:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800f1c0:	ee38 6a88 	vadd.f32	s12, s17, s16
 800f1c4:	edd3 9a03 	vldr	s19, [r3, #12]
 800f1c8:	ee30 0a87 	vadd.f32	s0, s1, s14
 800f1cc:	ed92 9a03 	vldr	s18, [r2, #12]
 800f1d0:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800f1d4:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800f1d8:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800f1dc:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800f1e0:	ee16 ca10 	vmov	ip, s12
 800f1e4:	ee30 6a49 	vsub.f32	s12, s0, s18
 800f1e8:	ee77 4a01 	vadd.f32	s9, s14, s2
 800f1ec:	f847 c908 	str.w	ip, [r7], #-8
 800f1f0:	ee34 4a29 	vadd.f32	s8, s8, s19
 800f1f4:	edd2 8a03 	vldr	s17, [r2, #12]
 800f1f8:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800f1fc:	ed93 8a03 	vldr	s16, [r3, #12]
 800f200:	ee71 0a47 	vsub.f32	s1, s2, s14
 800f204:	ee30 0a28 	vadd.f32	s0, s0, s17
 800f208:	ee39 1a67 	vsub.f32	s2, s18, s15
 800f20c:	ee36 6a69 	vsub.f32	s12, s12, s19
 800f210:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f214:	ee75 5aca 	vsub.f32	s11, s11, s20
 800f218:	ed87 0a01 	vstr	s0, [r7, #4]
 800f21c:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800f220:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800f224:	ee21 8a80 	vmul.f32	s16, s3, s0
 800f228:	ee23 7a26 	vmul.f32	s14, s6, s13
 800f22c:	ee64 7a26 	vmul.f32	s15, s8, s13
 800f230:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800f234:	ee24 4a00 	vmul.f32	s8, s8, s0
 800f238:	ee23 3a00 	vmul.f32	s6, s6, s0
 800f23c:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800f240:	ee24 0a80 	vmul.f32	s0, s9, s0
 800f244:	ee38 7a07 	vadd.f32	s14, s16, s14
 800f248:	ee76 6a84 	vadd.f32	s13, s13, s8
 800f24c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f250:	ee33 3a61 	vsub.f32	s6, s6, s3
 800f254:	ee17 ca10 	vmov	ip, s14
 800f258:	f841 cb08 	str.w	ip, [r1], #8
 800f25c:	ed01 3a01 	vstr	s6, [r1, #-4]
 800f260:	ed82 0a04 	vstr	s0, [r2, #16]
 800f264:	edc2 6a03 	vstr	s13, [r2, #12]
 800f268:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800f26c:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800f270:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800f274:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800f278:	ee65 4a27 	vmul.f32	s9, s10, s15
 800f27c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f280:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800f284:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f288:	ee25 5a26 	vmul.f32	s10, s10, s13
 800f28c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f290:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f294:	ee34 6a24 	vadd.f32	s12, s8, s9
 800f298:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800f29c:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f2a0:	ee17 ca90 	vmov	ip, s15
 800f2a4:	ed04 6a04 	vstr	s12, [r4, #-16]
 800f2a8:	ed04 5a03 	vstr	s10, [r4, #-12]
 800f2ac:	f846 c908 	str.w	ip, [r6], #-8
 800f2b0:	edc6 6a01 	vstr	s13, [r6, #4]
 800f2b4:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800f2b8:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800f2bc:	ee62 5a27 	vmul.f32	s11, s4, s15
 800f2c0:	ee22 6a87 	vmul.f32	s12, s5, s14
 800f2c4:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f2c8:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800f2cc:	ee61 6a07 	vmul.f32	s13, s2, s14
 800f2d0:	ee20 7a87 	vmul.f32	s14, s1, s14
 800f2d4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f2d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 800f2dc:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f2e0:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800f2e4:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800f2e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2ec:	ee16 ca10 	vmov	ip, s12
 800f2f0:	f840 cb08 	str.w	ip, [r0], #8
 800f2f4:	ed40 2a01 	vstr	s5, [r0, #-4]
 800f2f8:	edc3 0a04 	vstr	s1, [r3, #16]
 800f2fc:	edc3 7a03 	vstr	s15, [r3, #12]
 800f300:	f47f aefc 	bne.w	800f0fc <arm_cfft_radix8by4_f32+0x134>
 800f304:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f306:	9802      	ldr	r0, [sp, #8]
 800f308:	00cb      	lsls	r3, r1, #3
 800f30a:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800f30e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800f312:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800f316:	4498      	add	r8, r3
 800f318:	449c      	add	ip, r3
 800f31a:	9102      	str	r1, [sp, #8]
 800f31c:	9901      	ldr	r1, [sp, #4]
 800f31e:	4419      	add	r1, r3
 800f320:	9101      	str	r1, [sp, #4]
 800f322:	9907      	ldr	r1, [sp, #28]
 800f324:	4419      	add	r1, r3
 800f326:	9107      	str	r1, [sp, #28]
 800f328:	9908      	ldr	r1, [sp, #32]
 800f32a:	4419      	add	r1, r3
 800f32c:	9b06      	ldr	r3, [sp, #24]
 800f32e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f332:	9108      	str	r1, [sp, #32]
 800f334:	9306      	str	r3, [sp, #24]
 800f336:	9a01      	ldr	r2, [sp, #4]
 800f338:	2304      	movs	r3, #4
 800f33a:	9e08      	ldr	r6, [sp, #32]
 800f33c:	edd2 7a00 	vldr	s15, [r2]
 800f340:	ed96 7a00 	vldr	s14, [r6]
 800f344:	edd8 2a00 	vldr	s5, [r8]
 800f348:	ee77 5a87 	vadd.f32	s11, s15, s14
 800f34c:	ed9c 3a00 	vldr	s6, [ip]
 800f350:	ed92 6a01 	vldr	s12, [r2, #4]
 800f354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f358:	edd6 6a01 	vldr	s13, [r6, #4]
 800f35c:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800f360:	ed9c 2a01 	vldr	s4, [ip, #4]
 800f364:	ee36 5a26 	vadd.f32	s10, s12, s13
 800f368:	edd8 7a01 	vldr	s15, [r8, #4]
 800f36c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f370:	9d02      	ldr	r5, [sp, #8]
 800f372:	ee34 6a83 	vadd.f32	s12, s9, s6
 800f376:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800f37a:	ee37 4a27 	vadd.f32	s8, s14, s15
 800f37e:	9805      	ldr	r0, [sp, #20]
 800f380:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800f384:	4621      	mov	r1, r4
 800f386:	ed82 6a00 	vstr	s12, [r2]
 800f38a:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800f38e:	edd8 3a01 	vldr	s7, [r8, #4]
 800f392:	ee75 5a67 	vsub.f32	s11, s10, s15
 800f396:	eddc 1a01 	vldr	s3, [ip, #4]
 800f39a:	ee34 4a42 	vsub.f32	s8, s8, s4
 800f39e:	ee75 3a23 	vadd.f32	s7, s10, s7
 800f3a2:	ee74 4a83 	vadd.f32	s9, s9, s6
 800f3a6:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800f3aa:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800f3ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f3b2:	ee36 6a43 	vsub.f32	s12, s12, s6
 800f3b6:	ed82 5a01 	vstr	s10, [r2, #4]
 800f3ba:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800f3be:	9a07      	ldr	r2, [sp, #28]
 800f3c0:	ee77 7a02 	vadd.f32	s15, s14, s4
 800f3c4:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800f3c8:	edd2 2a00 	vldr	s5, [r2]
 800f3cc:	ed92 5a01 	vldr	s10, [r2, #4]
 800f3d0:	ee64 3a22 	vmul.f32	s7, s8, s5
 800f3d4:	ee24 4a05 	vmul.f32	s8, s8, s10
 800f3d8:	ee24 5a85 	vmul.f32	s10, s9, s10
 800f3dc:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800f3e0:	ee33 5a85 	vadd.f32	s10, s7, s10
 800f3e4:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800f3e8:	ed88 5a00 	vstr	s10, [r8]
 800f3ec:	edc8 4a01 	vstr	s9, [r8, #4]
 800f3f0:	edd5 4a01 	vldr	s9, [r5, #4]
 800f3f4:	edd5 6a00 	vldr	s13, [r5]
 800f3f8:	9d06      	ldr	r5, [sp, #24]
 800f3fa:	ee26 5a26 	vmul.f32	s10, s12, s13
 800f3fe:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f402:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800f406:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f40a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800f40e:	ee75 5a25 	vadd.f32	s11, s10, s11
 800f412:	ed86 6a01 	vstr	s12, [r6, #4]
 800f416:	edc6 5a00 	vstr	s11, [r6]
 800f41a:	edd5 5a01 	vldr	s11, [r5, #4]
 800f41e:	edd5 6a00 	vldr	s13, [r5]
 800f422:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f424:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800f428:	ee67 6a26 	vmul.f32	s13, s14, s13
 800f42c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f430:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f434:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f438:	ee36 7a07 	vadd.f32	s14, s12, s14
 800f43c:	edcc 7a01 	vstr	s15, [ip, #4]
 800f440:	ed8c 7a00 	vstr	s14, [ip]
 800f444:	6872      	ldr	r2, [r6, #4]
 800f446:	f000 f88f 	bl	800f568 <arm_radix8_butterfly_f32>
 800f44a:	9803      	ldr	r0, [sp, #12]
 800f44c:	4621      	mov	r1, r4
 800f44e:	6872      	ldr	r2, [r6, #4]
 800f450:	2304      	movs	r3, #4
 800f452:	f000 f889 	bl	800f568 <arm_radix8_butterfly_f32>
 800f456:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f458:	4621      	mov	r1, r4
 800f45a:	6872      	ldr	r2, [r6, #4]
 800f45c:	2304      	movs	r3, #4
 800f45e:	f000 f883 	bl	800f568 <arm_radix8_butterfly_f32>
 800f462:	4621      	mov	r1, r4
 800f464:	6872      	ldr	r2, [r6, #4]
 800f466:	2304      	movs	r3, #4
 800f468:	9804      	ldr	r0, [sp, #16]
 800f46a:	b00f      	add	sp, #60	@ 0x3c
 800f46c:	ecbd 8b06 	vpop	{d8-d10}
 800f470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	f000 b878 	b.w	800f568 <arm_radix8_butterfly_f32>

0800f478 <arm_cfft_f32>:
 800f478:	2a01      	cmp	r2, #1
 800f47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47e:	4606      	mov	r6, r0
 800f480:	4617      	mov	r7, r2
 800f482:	460c      	mov	r4, r1
 800f484:	4698      	mov	r8, r3
 800f486:	8805      	ldrh	r5, [r0, #0]
 800f488:	d053      	beq.n	800f532 <arm_cfft_f32+0xba>
 800f48a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800f48e:	d04b      	beq.n	800f528 <arm_cfft_f32+0xb0>
 800f490:	d916      	bls.n	800f4c0 <arm_cfft_f32+0x48>
 800f492:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800f496:	d01a      	beq.n	800f4ce <arm_cfft_f32+0x56>
 800f498:	d95a      	bls.n	800f550 <arm_cfft_f32+0xd8>
 800f49a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800f49e:	d043      	beq.n	800f528 <arm_cfft_f32+0xb0>
 800f4a0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800f4a4:	d105      	bne.n	800f4b2 <arm_cfft_f32+0x3a>
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	6872      	ldr	r2, [r6, #4]
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f000 f85b 	bl	800f568 <arm_radix8_butterfly_f32>
 800f4b2:	f1b8 0f00 	cmp.w	r8, #0
 800f4b6:	d111      	bne.n	800f4dc <arm_cfft_f32+0x64>
 800f4b8:	2f01      	cmp	r7, #1
 800f4ba:	d016      	beq.n	800f4ea <arm_cfft_f32+0x72>
 800f4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c0:	2d20      	cmp	r5, #32
 800f4c2:	d031      	beq.n	800f528 <arm_cfft_f32+0xb0>
 800f4c4:	d948      	bls.n	800f558 <arm_cfft_f32+0xe0>
 800f4c6:	2d40      	cmp	r5, #64	@ 0x40
 800f4c8:	d0ed      	beq.n	800f4a6 <arm_cfft_f32+0x2e>
 800f4ca:	2d80      	cmp	r5, #128	@ 0x80
 800f4cc:	d1f1      	bne.n	800f4b2 <arm_cfft_f32+0x3a>
 800f4ce:	4621      	mov	r1, r4
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	f7ff fca9 	bl	800ee28 <arm_cfft_radix8by2_f32>
 800f4d6:	f1b8 0f00 	cmp.w	r8, #0
 800f4da:	d0ed      	beq.n	800f4b8 <arm_cfft_f32+0x40>
 800f4dc:	68b2      	ldr	r2, [r6, #8]
 800f4de:	4620      	mov	r0, r4
 800f4e0:	89b1      	ldrh	r1, [r6, #12]
 800f4e2:	f7f0 fe95 	bl	8000210 <arm_bitreversal_32>
 800f4e6:	2f01      	cmp	r7, #1
 800f4e8:	d1e8      	bne.n	800f4bc <arm_cfft_f32+0x44>
 800f4ea:	ee07 5a90 	vmov	s15, r5
 800f4ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f4fa:	2d00      	cmp	r5, #0
 800f4fc:	d0de      	beq.n	800f4bc <arm_cfft_f32+0x44>
 800f4fe:	f104 0108 	add.w	r1, r4, #8
 800f502:	2300      	movs	r3, #0
 800f504:	ed11 7a02 	vldr	s14, [r1, #-8]
 800f508:	3301      	adds	r3, #1
 800f50a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800f50e:	3108      	adds	r1, #8
 800f510:	429d      	cmp	r5, r3
 800f512:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f516:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f51a:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f51e:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f522:	d1ef      	bne.n	800f504 <arm_cfft_f32+0x8c>
 800f524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f528:	4621      	mov	r1, r4
 800f52a:	4630      	mov	r0, r6
 800f52c:	f7ff fd4c 	bl	800efc8 <arm_cfft_radix8by4_f32>
 800f530:	e7bf      	b.n	800f4b2 <arm_cfft_f32+0x3a>
 800f532:	b1a5      	cbz	r5, 800f55e <arm_cfft_f32+0xe6>
 800f534:	f101 030c 	add.w	r3, r1, #12
 800f538:	2200      	movs	r2, #0
 800f53a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f53e:	3201      	adds	r2, #1
 800f540:	3308      	adds	r3, #8
 800f542:	eef1 7a67 	vneg.f32	s15, s15
 800f546:	4295      	cmp	r5, r2
 800f548:	ed43 7a04 	vstr	s15, [r3, #-16]
 800f54c:	d1f5      	bne.n	800f53a <arm_cfft_f32+0xc2>
 800f54e:	e79c      	b.n	800f48a <arm_cfft_f32+0x12>
 800f550:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800f554:	d0a7      	beq.n	800f4a6 <arm_cfft_f32+0x2e>
 800f556:	e7ac      	b.n	800f4b2 <arm_cfft_f32+0x3a>
 800f558:	2d10      	cmp	r5, #16
 800f55a:	d0b8      	beq.n	800f4ce <arm_cfft_f32+0x56>
 800f55c:	e7a9      	b.n	800f4b2 <arm_cfft_f32+0x3a>
 800f55e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800f562:	d896      	bhi.n	800f492 <arm_cfft_f32+0x1a>
 800f564:	e7ac      	b.n	800f4c0 <arm_cfft_f32+0x48>
 800f566:	bf00      	nop

0800f568 <arm_radix8_butterfly_f32>:
 800f568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56c:	469e      	mov	lr, r3
 800f56e:	4603      	mov	r3, r0
 800f570:	468a      	mov	sl, r1
 800f572:	468b      	mov	fp, r1
 800f574:	3304      	adds	r3, #4
 800f576:	ed2d 8b10 	vpush	{d8-d15}
 800f57a:	469c      	mov	ip, r3
 800f57c:	b09d      	sub	sp, #116	@ 0x74
 800f57e:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 800f88c <arm_radix8_butterfly_f32+0x324>
 800f582:	9019      	str	r0, [sp, #100]	@ 0x64
 800f584:	921a      	str	r2, [sp, #104]	@ 0x68
 800f586:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f588:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800f58c:	f04f 0800 	mov.w	r8, #0
 800f590:	461a      	mov	r2, r3
 800f592:	9311      	str	r3, [sp, #68]	@ 0x44
 800f594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f598:	4611      	mov	r1, r2
 800f59a:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	0053      	lsls	r3, r2, #1
 800f5a2:	18d5      	adds	r5, r2, r3
 800f5a4:	9301      	str	r3, [sp, #4]
 800f5a6:	0113      	lsls	r3, r2, #4
 800f5a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f5aa:	194c      	adds	r4, r1, r5
 800f5ac:	eb02 0609 	add.w	r6, r2, r9
 800f5b0:	9302      	str	r3, [sp, #8]
 800f5b2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	190a      	adds	r2, r1, r4
 800f5ba:	eb06 0709 	add.w	r7, r6, r9
 800f5be:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f5c2:	1888      	adds	r0, r1, r2
 800f5c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f5c8:	4401      	add	r1, r0
 800f5ca:	3204      	adds	r2, #4
 800f5cc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f5d0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f5d4:	9b00      	ldr	r3, [sp, #0]
 800f5d6:	3104      	adds	r1, #4
 800f5d8:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800f5dc:	44d8      	add	r8, fp
 800f5de:	ed90 7a00 	vldr	s14, [r0]
 800f5e2:	ed94 5a00 	vldr	s10, [r4]
 800f5e6:	45c2      	cmp	sl, r8
 800f5e8:	edd7 3a00 	vldr	s7, [r7]
 800f5ec:	ed96 6a00 	vldr	s12, [r6]
 800f5f0:	ee37 1a85 	vadd.f32	s2, s15, s10
 800f5f4:	ed52 6a01 	vldr	s13, [r2, #-4]
 800f5f8:	ee73 4a87 	vadd.f32	s9, s7, s14
 800f5fc:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800f600:	edd5 7a00 	vldr	s15, [r5]
 800f604:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800f608:	ed11 7a01 	vldr	s14, [r1, #-4]
 800f60c:	ee36 2a26 	vadd.f32	s4, s12, s13
 800f610:	ee37 4a87 	vadd.f32	s8, s15, s14
 800f614:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f618:	ee71 5a24 	vadd.f32	s11, s2, s9
 800f61c:	ee32 6a04 	vadd.f32	s12, s4, s8
 800f620:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f624:	ee31 1a64 	vsub.f32	s2, s2, s9
 800f628:	ee75 4a86 	vadd.f32	s9, s11, s12
 800f62c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800f630:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800f634:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800f638:	ee32 2a44 	vsub.f32	s4, s4, s8
 800f63c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800f640:	ed94 0a01 	vldr	s0, [r4, #4]
 800f644:	edc4 5a00 	vstr	s11, [r4]
 800f648:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f64c:	edd6 5a01 	vldr	s11, [r6, #4]
 800f650:	edd5 2a01 	vldr	s5, [r5, #4]
 800f654:	ee75 1a27 	vadd.f32	s3, s10, s15
 800f658:	ed92 4a00 	vldr	s8, [r2]
 800f65c:	ee75 7a67 	vsub.f32	s15, s10, s15
 800f660:	edd1 4a00 	vldr	s9, [r1]
 800f664:	ee27 7a09 	vmul.f32	s14, s14, s18
 800f668:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800f66c:	ed9c 6a00 	vldr	s12, [ip]
 800f670:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800f674:	edd0 0a01 	vldr	s1, [r0, #4]
 800f678:	ed97 5a01 	vldr	s10, [r7, #4]
 800f67c:	ee35 4a84 	vadd.f32	s8, s11, s8
 800f680:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800f684:	ee73 5a26 	vadd.f32	s11, s6, s13
 800f688:	ee76 2a00 	vadd.f32	s5, s12, s0
 800f68c:	ee73 6a66 	vsub.f32	s13, s6, s13
 800f690:	ee36 6a40 	vsub.f32	s12, s12, s0
 800f694:	ee35 0a20 	vadd.f32	s0, s10, s1
 800f698:	ee65 5a89 	vmul.f32	s11, s11, s18
 800f69c:	ee35 5a60 	vsub.f32	s10, s10, s1
 800f6a0:	ee32 3a80 	vadd.f32	s6, s5, s0
 800f6a4:	ee74 0a24 	vadd.f32	s1, s8, s9
 800f6a8:	ee66 6a89 	vmul.f32	s13, s13, s18
 800f6ac:	ee74 4a64 	vsub.f32	s9, s8, s9
 800f6b0:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800f6b4:	ee75 2a25 	vadd.f32	s5, s10, s11
 800f6b8:	ee33 0a20 	vadd.f32	s0, s6, s1
 800f6bc:	ee75 5a65 	vsub.f32	s11, s10, s11
 800f6c0:	ee33 3a60 	vsub.f32	s6, s6, s1
 800f6c4:	ee36 5a26 	vadd.f32	s10, s12, s13
 800f6c8:	ed8c 0a00 	vstr	s0, [ip]
 800f6cc:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f6d0:	449c      	add	ip, r3
 800f6d2:	ee33 6a87 	vadd.f32	s12, s7, s14
 800f6d6:	ed84 3a01 	vstr	s6, [r4, #4]
 800f6da:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800f6de:	441c      	add	r4, r3
 800f6e0:	ee71 3a24 	vadd.f32	s7, s2, s9
 800f6e4:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f6e8:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800f6ec:	edc7 3a00 	vstr	s7, [r7]
 800f6f0:	ee34 1a42 	vsub.f32	s2, s8, s4
 800f6f4:	edc0 4a00 	vstr	s9, [r0]
 800f6f8:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800f6fc:	ee75 4a46 	vsub.f32	s9, s10, s12
 800f700:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f704:	ed87 1a01 	vstr	s2, [r7, #4]
 800f708:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800f70c:	441f      	add	r7, r3
 800f70e:	ee32 4a04 	vadd.f32	s8, s4, s8
 800f712:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800f716:	ee36 6a05 	vadd.f32	s12, s12, s10
 800f71a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f71e:	ed80 4a01 	vstr	s8, [r0, #4]
 800f722:	ed86 3a00 	vstr	s6, [r6]
 800f726:	4418      	add	r0, r3
 800f728:	ed41 1a01 	vstr	s3, [r1, #-4]
 800f72c:	ed42 3a01 	vstr	s7, [r2, #-4]
 800f730:	edc5 7a00 	vstr	s15, [r5]
 800f734:	edc6 4a01 	vstr	s9, [r6, #4]
 800f738:	441e      	add	r6, r3
 800f73a:	ed81 6a00 	vstr	s12, [r1]
 800f73e:	4419      	add	r1, r3
 800f740:	edc2 5a00 	vstr	s11, [r2]
 800f744:	441a      	add	r2, r3
 800f746:	ed85 7a01 	vstr	s14, [r5, #4]
 800f74a:	441d      	add	r5, r3
 800f74c:	f63f af44 	bhi.w	800f5d8 <arm_radix8_butterfly_f32+0x70>
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f754:	2b07      	cmp	r3, #7
 800f756:	f240 81f4 	bls.w	800fb42 <arm_radix8_butterfly_f32+0x5da>
 800f75a:	9901      	ldr	r1, [sp, #4]
 800f75c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800f760:	9d02      	ldr	r5, [sp, #8]
 800f762:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800f766:	3101      	adds	r1, #1
 800f768:	eb04 000e 	add.w	r0, r4, lr
 800f76c:	00e4      	lsls	r4, r4, #3
 800f76e:	3508      	adds	r5, #8
 800f770:	4419      	add	r1, r3
 800f772:	eb00 0c0e 	add.w	ip, r0, lr
 800f776:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f778:	00c0      	lsls	r0, r0, #3
 800f77a:	185e      	adds	r6, r3, r1
 800f77c:	4617      	mov	r7, r2
 800f77e:	9218      	str	r2, [sp, #96]	@ 0x60
 800f780:	f109 0908 	add.w	r9, r9, #8
 800f784:	199c      	adds	r4, r3, r6
 800f786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f788:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f78a:	9012      	str	r0, [sp, #72]	@ 0x48
 800f78c:	195d      	adds	r5, r3, r5
 800f78e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800f790:	443a      	add	r2, r7
 800f792:	950c      	str	r5, [sp, #48]	@ 0x30
 800f794:	4698      	mov	r8, r3
 800f796:	4420      	add	r0, r4
 800f798:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800f79a:	19d7      	adds	r7, r2, r7
 800f79c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f7a0:	4405      	add	r5, r0
 800f7a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f7a6:	9710      	str	r7, [sp, #64]	@ 0x40
 800f7a8:	eb0c 070e 	add.w	r7, ip, lr
 800f7ac:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800f7b0:	3404      	adds	r4, #4
 800f7b2:	3004      	adds	r0, #4
 800f7b4:	44c8      	add	r8, r9
 800f7b6:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 800f7ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7bc:	940a      	str	r4, [sp, #40]	@ 0x28
 800f7be:	9009      	str	r0, [sp, #36]	@ 0x24
 800f7c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f7c4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800f7c6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f7ca:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800f7cc:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800f7d0:	eb07 080e 	add.w	r8, r7, lr
 800f7d4:	eb04 0900 	add.w	r9, r4, r0
 800f7d8:	00f8      	lsls	r0, r7, #3
 800f7da:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800f7de:	3504      	adds	r5, #4
 800f7e0:	4607      	mov	r7, r0
 800f7e2:	9017      	str	r0, [sp, #92]	@ 0x5c
 800f7e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800f7ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f7ee:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 800f7f2:	18e3      	adds	r3, r4, r3
 800f7f4:	9508      	str	r5, [sp, #32]
 800f7f6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f7f8:	910e      	str	r1, [sp, #56]	@ 0x38
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	eb04 0805 	add.w	r8, r4, r5
 800f800:	9304      	str	r3, [sp, #16]
 800f802:	19e5      	adds	r5, r4, r7
 800f804:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800f808:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f80a:	9316      	str	r3, [sp, #88]	@ 0x58
 800f80c:	190b      	adds	r3, r1, r4
 800f80e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800f810:	9505      	str	r5, [sp, #20]
 800f812:	9303      	str	r3, [sp, #12]
 800f814:	f100 0308 	add.w	r3, r0, #8
 800f818:	9707      	str	r7, [sp, #28]
 800f81a:	4638      	mov	r0, r7
 800f81c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f81e:	2301      	movs	r3, #1
 800f820:	9306      	str	r3, [sp, #24]
 800f822:	9b00      	ldr	r3, [sp, #0]
 800f824:	ed90 fa00 	vldr	s30, [r0]
 800f828:	edd0 ba01 	vldr	s23, [r0, #4]
 800f82c:	9803      	ldr	r0, [sp, #12]
 800f82e:	9903      	ldr	r1, [sp, #12]
 800f830:	ed90 ba01 	vldr	s22, [r0, #4]
 800f834:	9804      	ldr	r0, [sp, #16]
 800f836:	edd1 ea00 	vldr	s29, [r1]
 800f83a:	edd0 aa01 	vldr	s21, [r0, #4]
 800f83e:	9805      	ldr	r0, [sp, #20]
 800f840:	9905      	ldr	r1, [sp, #20]
 800f842:	edd0 7a01 	vldr	s15, [r0, #4]
 800f846:	ed91 da00 	vldr	s26, [r1]
 800f84a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f84c:	9c04      	ldr	r4, [sp, #16]
 800f84e:	edcd 7a01 	vstr	s15, [sp, #4]
 800f852:	edd8 7a01 	vldr	s15, [r8, #4]
 800f856:	9100      	str	r1, [sp, #0]
 800f858:	edd2 fa00 	vldr	s31, [r2]
 800f85c:	ed94 ea00 	vldr	s28, [r4]
 800f860:	ed92 ca01 	vldr	s24, [r2, #4]
 800f864:	f8dd e020 	ldr.w	lr, [sp, #32]
 800f868:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800f86a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f86c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f86e:	edd9 da00 	vldr	s27, [r9]
 800f872:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f874:	edd8 ca00 	vldr	s25, [r8]
 800f878:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f87a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f87c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800f880:	ed99 aa01 	vldr	s20, [r9, #4]
 800f884:	edcd 7a02 	vstr	s15, [sp, #8]
 800f888:	9800      	ldr	r0, [sp, #0]
 800f88a:	e001      	b.n	800f890 <arm_radix8_butterfly_f32+0x328>
 800f88c:	3f3504f3 	.word	0x3f3504f3
 800f890:	edd5 3a00 	vldr	s7, [r5]
 800f894:	44dc      	add	ip, fp
 800f896:	ed91 7a00 	vldr	s14, [r1]
 800f89a:	edd4 8a00 	vldr	s17, [r4]
 800f89e:	45e2      	cmp	sl, ip
 800f8a0:	ed57 7a01 	vldr	s15, [r7, #-4]
 800f8a4:	ed90 5a00 	vldr	s10, [r0]
 800f8a8:	ed56 5a01 	vldr	s11, [r6, #-4]
 800f8ac:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800f8b0:	ed92 1a00 	vldr	s2, [r2]
 800f8b4:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800f8b8:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800f8bc:	ee75 9a25 	vadd.f32	s19, s10, s11
 800f8c0:	ee31 3a07 	vadd.f32	s6, s2, s14
 800f8c4:	ed92 8a01 	vldr	s16, [r2, #4]
 800f8c8:	ee73 6a84 	vadd.f32	s13, s7, s8
 800f8cc:	ee75 5a65 	vsub.f32	s11, s10, s11
 800f8d0:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800f8d4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800f8d8:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800f8dc:	ee75 7a84 	vadd.f32	s15, s11, s8
 800f8e0:	ee31 1a47 	vsub.f32	s2, s2, s14
 800f8e4:	ee31 7a85 	vadd.f32	s14, s3, s10
 800f8e8:	ee67 7a89 	vmul.f32	s15, s15, s18
 800f8ec:	ee33 3a46 	vsub.f32	s6, s6, s12
 800f8f0:	ed82 7a00 	vstr	s14, [r2]
 800f8f4:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800f8f8:	ed96 6a00 	vldr	s12, [r6]
 800f8fc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800f900:	edd5 3a01 	vldr	s7, [r5, #4]
 800f904:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800f908:	ed90 7a01 	vldr	s14, [r0, #4]
 800f90c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800f910:	edde 4a00 	vldr	s9, [lr]
 800f914:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800f918:	ee77 2a46 	vsub.f32	s5, s14, s12
 800f91c:	edd1 6a01 	vldr	s13, [r1, #4]
 800f920:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800f924:	edd7 0a00 	vldr	s1, [r7]
 800f928:	ee77 5a06 	vadd.f32	s11, s14, s12
 800f92c:	ed94 7a01 	vldr	s14, [r4, #4]
 800f930:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800f934:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800f938:	ee78 4a66 	vsub.f32	s9, s16, s13
 800f93c:	ee78 3a26 	vadd.f32	s7, s16, s13
 800f940:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800f944:	ee77 6a20 	vadd.f32	s13, s14, s1
 800f948:	ee24 4a09 	vmul.f32	s8, s8, s18
 800f94c:	ee37 7a60 	vsub.f32	s14, s14, s1
 800f950:	ee20 8a09 	vmul.f32	s16, s0, s18
 800f954:	ee75 0a86 	vadd.f32	s1, s11, s12
 800f958:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800f95c:	ee62 2a89 	vmul.f32	s5, s5, s18
 800f960:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f964:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800f968:	ee77 7a62 	vsub.f32	s15, s14, s5
 800f96c:	ee74 5a88 	vadd.f32	s11, s9, s16
 800f970:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800f974:	ee77 4a22 	vadd.f32	s9, s14, s5
 800f978:	ee71 2a04 	vadd.f32	s5, s2, s8
 800f97c:	ee31 7a44 	vsub.f32	s14, s2, s8
 800f980:	ee30 1a60 	vsub.f32	s2, s0, s1
 800f984:	ee73 1a06 	vadd.f32	s3, s6, s12
 800f988:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f98c:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800f990:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800f994:	ee38 4a68 	vsub.f32	s8, s16, s17
 800f998:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800f99c:	ee72 5a25 	vadd.f32	s11, s4, s11
 800f9a0:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800f9a4:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800f9a8:	ee77 2a27 	vadd.f32	s5, s14, s15
 800f9ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f9b0:	ee78 7a88 	vadd.f32	s15, s17, s16
 800f9b4:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800f9b8:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800f9bc:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800f9c0:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800f9c4:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800f9c8:	ee70 0a20 	vadd.f32	s1, s0, s1
 800f9cc:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800f9d0:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800f9d4:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800f9d8:	edc2 0a01 	vstr	s1, [r2, #4]
 800f9dc:	ee38 8a88 	vadd.f32	s16, s17, s16
 800f9e0:	441a      	add	r2, r3
 800f9e2:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800f9e6:	ee31 5a45 	vsub.f32	s10, s2, s10
 800f9ea:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800f9ee:	ed81 8a00 	vstr	s16, [r1]
 800f9f2:	ee39 0a80 	vadd.f32	s0, s19, s0
 800f9f6:	ee33 3a61 	vsub.f32	s6, s6, s3
 800f9fa:	ed81 5a01 	vstr	s10, [r1, #4]
 800f9fe:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800fa02:	edcd 3a00 	vstr	s7, [sp]
 800fa06:	ed9d 5a02 	vldr	s10, [sp, #8]
 800fa0a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800fa0e:	eddd 3a01 	vldr	s7, [sp, #4]
 800fa12:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800fa16:	ed84 0a00 	vstr	s0, [r4]
 800fa1a:	ee65 4a24 	vmul.f32	s9, s10, s9
 800fa1e:	ed84 3a01 	vstr	s6, [r4, #4]
 800fa22:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800fa26:	ee23 6a86 	vmul.f32	s12, s7, s12
 800fa2a:	eddd 3a00 	vldr	s7, [sp]
 800fa2e:	ee25 5a25 	vmul.f32	s10, s10, s11
 800fa32:	4419      	add	r1, r3
 800fa34:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800fa38:	441c      	add	r4, r3
 800fa3a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800fa3e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800fa42:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800fa46:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800fa4a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800fa4e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800fa52:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800fa56:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800fa5a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800fa5e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800fa62:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800fa66:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800fa6a:	ee38 8a01 	vadd.f32	s16, s16, s2
 800fa6e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800fa72:	ee39 5a85 	vadd.f32	s10, s19, s10
 800fa76:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800fa7a:	ed07 8a01 	vstr	s16, [r7, #-4]
 800fa7e:	ee30 0a21 	vadd.f32	s0, s0, s3
 800fa82:	ed87 6a00 	vstr	s12, [r7]
 800fa86:	ee74 2a62 	vsub.f32	s5, s8, s5
 800fa8a:	edc0 0a00 	vstr	s1, [r0]
 800fa8e:	ee33 3a28 	vadd.f32	s6, s6, s17
 800fa92:	edc0 3a01 	vstr	s7, [r0, #4]
 800fa96:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fa9a:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800fa9e:	edce 4a00 	vstr	s9, [lr]
 800faa2:	4418      	add	r0, r3
 800faa4:	ed06 0a01 	vstr	s0, [r6, #-4]
 800faa8:	441f      	add	r7, r3
 800faaa:	edc6 2a00 	vstr	s5, [r6]
 800faae:	449e      	add	lr, r3
 800fab0:	ed85 3a00 	vstr	s6, [r5]
 800fab4:	441e      	add	r6, r3
 800fab6:	ed85 7a01 	vstr	s14, [r5, #4]
 800faba:	441d      	add	r5, r3
 800fabc:	f63f aee8 	bhi.w	800f890 <arm_radix8_butterfly_f32+0x328>
 800fac0:	9a06      	ldr	r2, [sp, #24]
 800fac2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800fac4:	3201      	adds	r2, #1
 800fac6:	4611      	mov	r1, r2
 800fac8:	9206      	str	r2, [sp, #24]
 800faca:	9a07      	ldr	r2, [sp, #28]
 800facc:	4402      	add	r2, r0
 800face:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800fad0:	9207      	str	r2, [sp, #28]
 800fad2:	9a03      	ldr	r2, [sp, #12]
 800fad4:	4402      	add	r2, r0
 800fad6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fad8:	9203      	str	r2, [sp, #12]
 800fada:	9a04      	ldr	r2, [sp, #16]
 800fadc:	4402      	add	r2, r0
 800fade:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800fae0:	9204      	str	r2, [sp, #16]
 800fae2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fae4:	4491      	add	r9, r2
 800fae6:	9a05      	ldr	r2, [sp, #20]
 800fae8:	4402      	add	r2, r0
 800faea:	9205      	str	r2, [sp, #20]
 800faec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800faee:	4490      	add	r8, r2
 800faf0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800faf2:	3208      	adds	r2, #8
 800faf4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800faf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800faf8:	3208      	adds	r2, #8
 800fafa:	920e      	str	r2, [sp, #56]	@ 0x38
 800fafc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fafe:	3208      	adds	r2, #8
 800fb00:	920d      	str	r2, [sp, #52]	@ 0x34
 800fb02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fb04:	3208      	adds	r2, #8
 800fb06:	920c      	str	r2, [sp, #48]	@ 0x30
 800fb08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb0a:	3208      	adds	r2, #8
 800fb0c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fb0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb10:	3208      	adds	r2, #8
 800fb12:	920a      	str	r2, [sp, #40]	@ 0x28
 800fb14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb16:	3208      	adds	r2, #8
 800fb18:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb1a:	9a08      	ldr	r2, [sp, #32]
 800fb1c:	3208      	adds	r2, #8
 800fb1e:	9208      	str	r2, [sp, #32]
 800fb20:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800fb22:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800fb24:	4622      	mov	r2, r4
 800fb26:	4288      	cmp	r0, r1
 800fb28:	d005      	beq.n	800fb36 <arm_radix8_butterfly_f32+0x5ce>
 800fb2a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800fb2c:	4621      	mov	r1, r4
 800fb2e:	4401      	add	r1, r0
 800fb30:	9807      	ldr	r0, [sp, #28]
 800fb32:	9110      	str	r1, [sp, #64]	@ 0x40
 800fb34:	e676      	b.n	800f824 <arm_radix8_butterfly_f32+0x2bc>
 800fb36:	4683      	mov	fp, r0
 800fb38:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 800fb3c:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 800fb40:	e522      	b.n	800f588 <arm_radix8_butterfly_f32+0x20>
 800fb42:	b01d      	add	sp, #116	@ 0x74
 800fb44:	ecbd 8b10 	vpop	{d8-d15}
 800fb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb4c <ai_buffer_get_size>:
 800fb4c:	b368      	cbz	r0, 800fbaa <ai_buffer_get_size+0x5e>
 800fb4e:	4b17      	ldr	r3, [pc, #92]	@ (800fbac <ai_buffer_get_size+0x60>)
 800fb50:	4a17      	ldr	r2, [pc, #92]	@ (800fbb0 <ai_buffer_get_size+0x64>)
 800fb52:	b410      	push	{r4}
 800fb54:	6804      	ldr	r4, [r0, #0]
 800fb56:	4023      	ands	r3, r4
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d123      	bne.n	800fba4 <ai_buffer_get_size+0x58>
 800fb5c:	b311      	cbz	r1, 800fba4 <ai_buffer_get_size+0x58>
 800fb5e:	6984      	ldr	r4, [r0, #24]
 800fb60:	6862      	ldr	r2, [r4, #4]
 800fb62:	321f      	adds	r2, #31
 800fb64:	f022 021f 	bic.w	r2, r2, #31
 800fb68:	7d03      	ldrb	r3, [r0, #20]
 800fb6a:	6941      	ldr	r1, [r0, #20]
 800fb6c:	f1a3 0301 	sub.w	r3, r3, #1
 800fb70:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800fb74:	fab3 f383 	clz	r3, r3
 800fb78:	095b      	lsrs	r3, r3, #5
 800fb7a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800fb7e:	da0c      	bge.n	800fb9a <ai_buffer_get_size+0x4e>
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d103      	bne.n	800fb8c <ai_buffer_get_size+0x40>
 800fb84:	2802      	cmp	r0, #2
 800fb86:	f04f 0302 	mov.w	r3, #2
 800fb8a:	d006      	beq.n	800fb9a <ai_buffer_get_size+0x4e>
 800fb8c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800fb90:	3301      	adds	r3, #1
 800fb92:	4298      	cmp	r0, r3
 800fb94:	fb01 f202 	mul.w	r2, r1, r2
 800fb98:	d1f2      	bne.n	800fb80 <ai_buffer_get_size+0x34>
 800fb9a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800fb9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba2:	4770      	bx	lr
 800fba4:	6984      	ldr	r4, [r0, #24]
 800fba6:	6862      	ldr	r2, [r4, #4]
 800fba8:	e7de      	b.n	800fb68 <ai_buffer_get_size+0x1c>
 800fbaa:	4770      	bx	lr
 800fbac:	017fffff 	.word	0x017fffff
 800fbb0:	000400c0 	.word	0x000400c0

0800fbb4 <ai_buffer_array_sane>:
 800fbb4:	b138      	cbz	r0, 800fbc6 <ai_buffer_array_sane+0x12>
 800fbb6:	6843      	ldr	r3, [r0, #4]
 800fbb8:	b123      	cbz	r3, 800fbc4 <ai_buffer_array_sane+0x10>
 800fbba:	8840      	ldrh	r0, [r0, #2]
 800fbbc:	3800      	subs	r0, #0
 800fbbe:	bf18      	it	ne
 800fbc0:	2001      	movne	r0, #1
 800fbc2:	4770      	bx	lr
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	4770      	bx	lr

0800fbc8 <ai_platform_get_weights_map>:
 800fbc8:	2900      	cmp	r1, #0
 800fbca:	bf18      	it	ne
 800fbcc:	2800      	cmpne	r0, #0
 800fbce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbd0:	bf0c      	ite	eq
 800fbd2:	2401      	moveq	r4, #1
 800fbd4:	2400      	movne	r4, #0
 800fbd6:	2a00      	cmp	r2, #0
 800fbd8:	bf08      	it	eq
 800fbda:	f044 0401 	orreq.w	r4, r4, #1
 800fbde:	b114      	cbz	r4, 800fbe6 <ai_platform_get_weights_map+0x1e>
 800fbe0:	2400      	movs	r4, #0
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbe6:	4616      	mov	r6, r2
 800fbe8:	4b22      	ldr	r3, [pc, #136]	@ (800fc74 <ai_platform_get_weights_map+0xac>)
 800fbea:	6812      	ldr	r2, [r2, #0]
 800fbec:	4605      	mov	r5, r0
 800fbee:	460f      	mov	r7, r1
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d022      	beq.n	800fc3a <ai_platform_get_weights_map+0x72>
 800fbf4:	6870      	ldr	r0, [r6, #4]
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d0f2      	beq.n	800fbe0 <ai_platform_get_weights_map+0x18>
 800fbfa:	6806      	ldr	r6, [r0, #0]
 800fbfc:	429e      	cmp	r6, r3
 800fbfe:	d006      	beq.n	800fc0e <ai_platform_get_weights_map+0x46>
 800fc00:	f1a1 0401 	sub.w	r4, r1, #1
 800fc04:	6028      	str	r0, [r5, #0]
 800fc06:	fab4 f484 	clz	r4, r4
 800fc0a:	0964      	lsrs	r4, r4, #5
 800fc0c:	e7e9      	b.n	800fbe2 <ai_platform_get_weights_map+0x1a>
 800fc0e:	3d04      	subs	r5, #4
 800fc10:	4602      	mov	r2, r0
 800fc12:	4621      	mov	r1, r4
 800fc14:	e000      	b.n	800fc18 <ai_platform_get_weights_map+0x50>
 800fc16:	4619      	mov	r1, r3
 800fc18:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800fc1c:	42b3      	cmp	r3, r6
 800fc1e:	d025      	beq.n	800fc6c <ai_platform_get_weights_map+0xa4>
 800fc20:	f845 3f04 	str.w	r3, [r5, #4]!
 800fc24:	1c4b      	adds	r3, r1, #1
 800fc26:	429f      	cmp	r7, r3
 800fc28:	d8f5      	bhi.n	800fc16 <ai_platform_get_weights_map+0x4e>
 800fc2a:	d1da      	bne.n	800fbe2 <ai_platform_get_weights_map+0x1a>
 800fc2c:	3102      	adds	r1, #2
 800fc2e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800fc32:	42b3      	cmp	r3, r6
 800fc34:	d1d5      	bne.n	800fbe2 <ai_platform_get_weights_map+0x1a>
 800fc36:	2401      	movs	r4, #1
 800fc38:	e7d3      	b.n	800fbe2 <ai_platform_get_weights_map+0x1a>
 800fc3a:	1d30      	adds	r0, r6, #4
 800fc3c:	f7ff ffba 	bl	800fbb4 <ai_buffer_array_sane>
 800fc40:	2800      	cmp	r0, #0
 800fc42:	d0cd      	beq.n	800fbe0 <ai_platform_get_weights_map+0x18>
 800fc44:	88f3      	ldrh	r3, [r6, #6]
 800fc46:	429f      	cmp	r7, r3
 800fc48:	d1ca      	bne.n	800fbe0 <ai_platform_get_weights_map+0x18>
 800fc4a:	3d04      	subs	r5, #4
 800fc4c:	4622      	mov	r2, r4
 800fc4e:	68b3      	ldr	r3, [r6, #8]
 800fc50:	4423      	add	r3, r4
 800fc52:	341c      	adds	r4, #28
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	b123      	cbz	r3, 800fc62 <ai_platform_get_weights_map+0x9a>
 800fc58:	3201      	adds	r2, #1
 800fc5a:	f845 3f04 	str.w	r3, [r5, #4]!
 800fc5e:	4297      	cmp	r7, r2
 800fc60:	d8f5      	bhi.n	800fc4e <ai_platform_get_weights_map+0x86>
 800fc62:	1abc      	subs	r4, r7, r2
 800fc64:	fab4 f484 	clz	r4, r4
 800fc68:	0964      	lsrs	r4, r4, #5
 800fc6a:	e7ba      	b.n	800fbe2 <ai_platform_get_weights_map+0x1a>
 800fc6c:	428f      	cmp	r7, r1
 800fc6e:	d1b8      	bne.n	800fbe2 <ai_platform_get_weights_map+0x1a>
 800fc70:	e7e1      	b.n	800fc36 <ai_platform_get_weights_map+0x6e>
 800fc72:	bf00      	nop
 800fc74:	a1facade 	.word	0xa1facade

0800fc78 <ai_platform_get_activations_map>:
 800fc78:	2900      	cmp	r1, #0
 800fc7a:	bf18      	it	ne
 800fc7c:	2800      	cmpne	r0, #0
 800fc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc80:	bf0c      	ite	eq
 800fc82:	2401      	moveq	r4, #1
 800fc84:	2400      	movne	r4, #0
 800fc86:	2a00      	cmp	r2, #0
 800fc88:	bf08      	it	eq
 800fc8a:	f044 0401 	orreq.w	r4, r4, #1
 800fc8e:	b114      	cbz	r4, 800fc96 <ai_platform_get_activations_map+0x1e>
 800fc90:	2400      	movs	r4, #0
 800fc92:	4620      	mov	r0, r4
 800fc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc96:	4616      	mov	r6, r2
 800fc98:	4b22      	ldr	r3, [pc, #136]	@ (800fd24 <ai_platform_get_activations_map+0xac>)
 800fc9a:	6812      	ldr	r2, [r2, #0]
 800fc9c:	4605      	mov	r5, r0
 800fc9e:	460f      	mov	r7, r1
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d022      	beq.n	800fcea <ai_platform_get_activations_map+0x72>
 800fca4:	6a30      	ldr	r0, [r6, #32]
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d0f2      	beq.n	800fc90 <ai_platform_get_activations_map+0x18>
 800fcaa:	6806      	ldr	r6, [r0, #0]
 800fcac:	429e      	cmp	r6, r3
 800fcae:	d006      	beq.n	800fcbe <ai_platform_get_activations_map+0x46>
 800fcb0:	f1a1 0401 	sub.w	r4, r1, #1
 800fcb4:	6028      	str	r0, [r5, #0]
 800fcb6:	fab4 f484 	clz	r4, r4
 800fcba:	0964      	lsrs	r4, r4, #5
 800fcbc:	e7e9      	b.n	800fc92 <ai_platform_get_activations_map+0x1a>
 800fcbe:	3d04      	subs	r5, #4
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	e000      	b.n	800fcc8 <ai_platform_get_activations_map+0x50>
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800fccc:	42b3      	cmp	r3, r6
 800fcce:	d026      	beq.n	800fd1e <ai_platform_get_activations_map+0xa6>
 800fcd0:	f845 3f04 	str.w	r3, [r5, #4]!
 800fcd4:	1c4b      	adds	r3, r1, #1
 800fcd6:	429f      	cmp	r7, r3
 800fcd8:	d8f5      	bhi.n	800fcc6 <ai_platform_get_activations_map+0x4e>
 800fcda:	d1da      	bne.n	800fc92 <ai_platform_get_activations_map+0x1a>
 800fcdc:	3102      	adds	r1, #2
 800fcde:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800fce2:	42b3      	cmp	r3, r6
 800fce4:	d1d5      	bne.n	800fc92 <ai_platform_get_activations_map+0x1a>
 800fce6:	2401      	movs	r4, #1
 800fce8:	e7d3      	b.n	800fc92 <ai_platform_get_activations_map+0x1a>
 800fcea:	f106 000c 	add.w	r0, r6, #12
 800fcee:	f7ff ff61 	bl	800fbb4 <ai_buffer_array_sane>
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	d0cc      	beq.n	800fc90 <ai_platform_get_activations_map+0x18>
 800fcf6:	89f3      	ldrh	r3, [r6, #14]
 800fcf8:	429f      	cmp	r7, r3
 800fcfa:	d1c9      	bne.n	800fc90 <ai_platform_get_activations_map+0x18>
 800fcfc:	3d04      	subs	r5, #4
 800fcfe:	4622      	mov	r2, r4
 800fd00:	6933      	ldr	r3, [r6, #16]
 800fd02:	4423      	add	r3, r4
 800fd04:	341c      	adds	r4, #28
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	b123      	cbz	r3, 800fd14 <ai_platform_get_activations_map+0x9c>
 800fd0a:	3201      	adds	r2, #1
 800fd0c:	f845 3f04 	str.w	r3, [r5, #4]!
 800fd10:	4297      	cmp	r7, r2
 800fd12:	d8f5      	bhi.n	800fd00 <ai_platform_get_activations_map+0x88>
 800fd14:	1abc      	subs	r4, r7, r2
 800fd16:	fab4 f484 	clz	r4, r4
 800fd1a:	0964      	lsrs	r4, r4, #5
 800fd1c:	e7b9      	b.n	800fc92 <ai_platform_get_activations_map+0x1a>
 800fd1e:	428f      	cmp	r7, r1
 800fd20:	d1b7      	bne.n	800fc92 <ai_platform_get_activations_map+0x1a>
 800fd22:	e7e0      	b.n	800fce6 <ai_platform_get_activations_map+0x6e>
 800fd24:	a1facade 	.word	0xa1facade

0800fd28 <ai_platform_network_get_error>:
 800fd28:	4b04      	ldr	r3, [pc, #16]	@ (800fd3c <ai_platform_network_get_error+0x14>)
 800fd2a:	6802      	ldr	r2, [r0, #0]
 800fd2c:	4393      	bics	r3, r2
 800fd2e:	d102      	bne.n	800fd36 <ai_platform_network_get_error+0xe>
 800fd30:	300c      	adds	r0, #12
 800fd32:	f000 bc73 	b.w	801061c <core_get_error>
 800fd36:	f241 0010 	movw	r0, #4112	@ 0x1010
 800fd3a:	4770      	bx	lr
 800fd3c:	a1c00100 	.word	0xa1c00100

0800fd40 <ai_platform_network_set_error>:
 800fd40:	b110      	cbz	r0, 800fd48 <ai_platform_network_set_error+0x8>
 800fd42:	300c      	adds	r0, #12
 800fd44:	f000 bc70 	b.w	8010628 <core_set_error>
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop

0800fd4c <ai_platform_inputs_get>:
 800fd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd50:	4b39      	ldr	r3, [pc, #228]	@ (800fe38 <ai_platform_inputs_get+0xec>)
 800fd52:	b085      	sub	sp, #20
 800fd54:	6802      	ldr	r2, [r0, #0]
 800fd56:	4393      	bics	r3, r2
 800fd58:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800fd5c:	d162      	bne.n	800fe24 <ai_platform_inputs_get+0xd8>
 800fd5e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d051      	beq.n	800fe08 <ai_platform_inputs_get+0xbc>
 800fd64:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800fd68:	f1ba 0f00 	cmp.w	sl, #0
 800fd6c:	d04c      	beq.n	800fe08 <ai_platform_inputs_get+0xbc>
 800fd6e:	f04f 0900 	mov.w	r9, #0
 800fd72:	464d      	mov	r5, r9
 800fd74:	e016      	b.n	800fda4 <ai_platform_inputs_get+0x58>
 800fd76:	9901      	ldr	r1, [sp, #4]
 800fd78:	2301      	movs	r3, #1
 800fd7a:	f848 3001 	str.w	r3, [r8, r1]
 800fd7e:	69b1      	ldr	r1, [r6, #24]
 800fd80:	f04f 0301 	mov.w	r3, #1
 800fd84:	684e      	ldr	r6, [r1, #4]
 800fd86:	3501      	adds	r5, #1
 800fd88:	f109 091c 	add.w	r9, r9, #28
 800fd8c:	7523      	strb	r3, [r4, #20]
 800fd8e:	2300      	movs	r3, #0
 800fd90:	6961      	ldr	r1, [r4, #20]
 800fd92:	6020      	str	r0, [r4, #0]
 800fd94:	f36b 211f 	bfi	r1, fp, #8, #24
 800fd98:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800fd9c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800fda0:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800fda4:	f8ba 3000 	ldrh.w	r3, [sl]
 800fda8:	b2ac      	uxth	r4, r5
 800fdaa:	42ab      	cmp	r3, r5
 800fdac:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fdb0:	9301      	str	r3, [sp, #4]
 800fdb2:	d93b      	bls.n	800fe2c <ai_platform_inputs_get+0xe0>
 800fdb4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d037      	beq.n	800fe2c <ai_platform_inputs_get+0xe0>
 800fdbc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800fdc0:	2e00      	cmp	r6, #0
 800fdc2:	d033      	beq.n	800fe2c <ai_platform_inputs_get+0xe0>
 800fdc4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fdc8:	69b2      	ldr	r2, [r6, #24]
 800fdca:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800fdce:	6810      	ldr	r0, [r2, #0]
 800fdd0:	68b3      	ldr	r3, [r6, #8]
 800fdd2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800fdd6:	68f2      	ldr	r2, [r6, #12]
 800fdd8:	444c      	add	r4, r9
 800fdda:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fdde:	9200      	str	r2, [sp, #0]
 800fde0:	f002 fffa 	bl	8012dd8 <ai_array_to_buffer_fmt>
 800fde4:	69b1      	ldr	r1, [r6, #24]
 800fde6:	9a00      	ldr	r2, [sp, #0]
 800fde8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800fdec:	2f00      	cmp	r7, #0
 800fdee:	d0c7      	beq.n	800fd80 <ai_platform_inputs_get+0x34>
 800fdf0:	2100      	movs	r1, #0
 800fdf2:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800fdf6:	6831      	ldr	r1, [r6, #0]
 800fdf8:	6079      	str	r1, [r7, #4]
 800fdfa:	b111      	cbz	r1, 800fe02 <ai_platform_inputs_get+0xb6>
 800fdfc:	8849      	ldrh	r1, [r1, #2]
 800fdfe:	2900      	cmp	r1, #0
 800fe00:	d1b9      	bne.n	800fd76 <ai_platform_inputs_get+0x2a>
 800fe02:	69b1      	ldr	r1, [r6, #24]
 800fe04:	2700      	movs	r7, #0
 800fe06:	e7bb      	b.n	800fd80 <ai_platform_inputs_get+0x34>
 800fe08:	9803      	ldr	r0, [sp, #12]
 800fe0a:	2400      	movs	r4, #0
 800fe0c:	2218      	movs	r2, #24
 800fe0e:	2111      	movs	r1, #17
 800fe10:	300c      	adds	r0, #12
 800fe12:	f000 fc09 	bl	8010628 <core_set_error>
 800fe16:	4620      	mov	r0, r4
 800fe18:	9b02      	ldr	r3, [sp, #8]
 800fe1a:	b103      	cbz	r3, 800fe1e <ai_platform_inputs_get+0xd2>
 800fe1c:	801c      	strh	r4, [r3, #0]
 800fe1e:	b005      	add	sp, #20
 800fe20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe24:	2000      	movs	r0, #0
 800fe26:	b005      	add	sp, #20
 800fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2c:	2c00      	cmp	r4, #0
 800fe2e:	d0eb      	beq.n	800fe08 <ai_platform_inputs_get+0xbc>
 800fe30:	f8da 3008 	ldr.w	r3, [sl, #8]
 800fe34:	6858      	ldr	r0, [r3, #4]
 800fe36:	e7ef      	b.n	800fe18 <ai_platform_inputs_get+0xcc>
 800fe38:	a1c00100 	.word	0xa1c00100

0800fe3c <ai_platform_outputs_get>:
 800fe3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe40:	4b38      	ldr	r3, [pc, #224]	@ (800ff24 <ai_platform_outputs_get+0xe8>)
 800fe42:	b085      	sub	sp, #20
 800fe44:	6802      	ldr	r2, [r0, #0]
 800fe46:	4393      	bics	r3, r2
 800fe48:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800fe4c:	d15f      	bne.n	800ff0e <ai_platform_outputs_get+0xd2>
 800fe4e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d94e      	bls.n	800fef2 <ai_platform_outputs_get+0xb6>
 800fe54:	f04f 0900 	mov.w	r9, #0
 800fe58:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800fe5c:	464d      	mov	r5, r9
 800fe5e:	e016      	b.n	800fe8e <ai_platform_outputs_get+0x52>
 800fe60:	9901      	ldr	r1, [sp, #4]
 800fe62:	2301      	movs	r3, #1
 800fe64:	f848 3001 	str.w	r3, [r8, r1]
 800fe68:	69b1      	ldr	r1, [r6, #24]
 800fe6a:	f04f 0301 	mov.w	r3, #1
 800fe6e:	684e      	ldr	r6, [r1, #4]
 800fe70:	3501      	adds	r5, #1
 800fe72:	f109 091c 	add.w	r9, r9, #28
 800fe76:	7523      	strb	r3, [r4, #20]
 800fe78:	2300      	movs	r3, #0
 800fe7a:	6961      	ldr	r1, [r4, #20]
 800fe7c:	6020      	str	r0, [r4, #0]
 800fe7e:	f36b 211f 	bfi	r1, fp, #8, #24
 800fe82:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800fe86:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800fe8a:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800fe8e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800fe92:	b2ac      	uxth	r4, r5
 800fe94:	42ab      	cmp	r3, r5
 800fe96:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800fe9a:	9301      	str	r3, [sp, #4]
 800fe9c:	d93b      	bls.n	800ff16 <ai_platform_outputs_get+0xda>
 800fe9e:	f8da 3010 	ldr.w	r3, [sl, #16]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d037      	beq.n	800ff16 <ai_platform_outputs_get+0xda>
 800fea6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800feaa:	2e00      	cmp	r6, #0
 800feac:	d033      	beq.n	800ff16 <ai_platform_outputs_get+0xda>
 800feae:	f8da 3014 	ldr.w	r3, [sl, #20]
 800feb2:	69b2      	ldr	r2, [r6, #24]
 800feb4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800feb8:	6810      	ldr	r0, [r2, #0]
 800feba:	68b3      	ldr	r3, [r6, #8]
 800febc:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800fec0:	68f2      	ldr	r2, [r6, #12]
 800fec2:	444c      	add	r4, r9
 800fec4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800fec8:	9200      	str	r2, [sp, #0]
 800feca:	f002 ff85 	bl	8012dd8 <ai_array_to_buffer_fmt>
 800fece:	69b1      	ldr	r1, [r6, #24]
 800fed0:	9a00      	ldr	r2, [sp, #0]
 800fed2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800fed6:	2f00      	cmp	r7, #0
 800fed8:	d0c7      	beq.n	800fe6a <ai_platform_outputs_get+0x2e>
 800feda:	2100      	movs	r1, #0
 800fedc:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800fee0:	6831      	ldr	r1, [r6, #0]
 800fee2:	6079      	str	r1, [r7, #4]
 800fee4:	b111      	cbz	r1, 800feec <ai_platform_outputs_get+0xb0>
 800fee6:	8849      	ldrh	r1, [r1, #2]
 800fee8:	2900      	cmp	r1, #0
 800feea:	d1b9      	bne.n	800fe60 <ai_platform_outputs_get+0x24>
 800feec:	69b1      	ldr	r1, [r6, #24]
 800feee:	2700      	movs	r7, #0
 800fef0:	e7bb      	b.n	800fe6a <ai_platform_outputs_get+0x2e>
 800fef2:	9803      	ldr	r0, [sp, #12]
 800fef4:	2400      	movs	r4, #0
 800fef6:	2218      	movs	r2, #24
 800fef8:	2111      	movs	r1, #17
 800fefa:	300c      	adds	r0, #12
 800fefc:	f000 fb94 	bl	8010628 <core_set_error>
 800ff00:	4620      	mov	r0, r4
 800ff02:	9b02      	ldr	r3, [sp, #8]
 800ff04:	b103      	cbz	r3, 800ff08 <ai_platform_outputs_get+0xcc>
 800ff06:	801c      	strh	r4, [r3, #0]
 800ff08:	b005      	add	sp, #20
 800ff0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0e:	2000      	movs	r0, #0
 800ff10:	b005      	add	sp, #20
 800ff12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff16:	2c00      	cmp	r4, #0
 800ff18:	d0eb      	beq.n	800fef2 <ai_platform_outputs_get+0xb6>
 800ff1a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ff1e:	6858      	ldr	r0, [r3, #4]
 800ff20:	e7ef      	b.n	800ff02 <ai_platform_outputs_get+0xc6>
 800ff22:	bf00      	nop
 800ff24:	a1c00100 	.word	0xa1c00100

0800ff28 <ai_platform_network_create>:
 800ff28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff2c:	b083      	sub	sp, #12
 800ff2e:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800ff32:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800ff36:	b320      	cbz	r0, 800ff82 <ai_platform_network_create+0x5a>
 800ff38:	6002      	str	r2, [r0, #0]
 800ff3a:	4616      	mov	r6, r2
 800ff3c:	461f      	mov	r7, r3
 800ff3e:	4604      	mov	r4, r0
 800ff40:	f000 fb6a 	bl	8010618 <core_init>
 800ff44:	b970      	cbnz	r0, 800ff64 <ai_platform_network_create+0x3c>
 800ff46:	2530      	movs	r5, #48	@ 0x30
 800ff48:	2300      	movs	r3, #0
 800ff4a:	6023      	str	r3, [r4, #0]
 800ff4c:	2410      	movs	r4, #16
 800ff4e:	464a      	mov	r2, r9
 800ff50:	4641      	mov	r1, r8
 800ff52:	4638      	mov	r0, r7
 800ff54:	f002 ffea 	bl	8012f2c <ai_version_get>
 800ff58:	60b0      	str	r0, [r6, #8]
 800ff5a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800ff5e:	b003      	add	sp, #12
 800ff60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff64:	2200      	movs	r2, #0
 800ff66:	4641      	mov	r1, r8
 800ff68:	4638      	mov	r0, r7
 800ff6a:	f002 ffdf 	bl	8012f2c <ai_version_get>
 800ff6e:	4605      	mov	r5, r0
 800ff70:	2200      	movs	r2, #0
 800ff72:	2105      	movs	r1, #5
 800ff74:	2001      	movs	r0, #1
 800ff76:	f002 ffd9 	bl	8012f2c <ai_version_get>
 800ff7a:	4285      	cmp	r5, r0
 800ff7c:	d008      	beq.n	800ff90 <ai_platform_network_create+0x68>
 800ff7e:	2501      	movs	r5, #1
 800ff80:	e7e2      	b.n	800ff48 <ai_platform_network_create+0x20>
 800ff82:	2510      	movs	r5, #16
 800ff84:	462c      	mov	r4, r5
 800ff86:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800ff8a:	b003      	add	sp, #12
 800ff8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff90:	4b05      	ldr	r3, [pc, #20]	@ (800ffa8 <ai_platform_network_create+0x80>)
 800ff92:	a801      	add	r0, sp, #4
 800ff94:	9301      	str	r3, [sp, #4]
 800ff96:	f000 fb53 	bl	8010640 <ai_check_custom_types>
 800ff9a:	b110      	cbz	r0, 800ffa2 <ai_platform_network_create+0x7a>
 800ff9c:	2400      	movs	r4, #0
 800ff9e:	4625      	mov	r5, r4
 800ffa0:	e7d5      	b.n	800ff4e <ai_platform_network_create+0x26>
 800ffa2:	2502      	movs	r5, #2
 800ffa4:	e7d0      	b.n	800ff48 <ai_platform_network_create+0x20>
 800ffa6:	bf00      	nop
 800ffa8:	84048403 	.word	0x84048403

0800ffac <ai_platform_network_init>:
 800ffac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb0:	4a5c      	ldr	r2, [pc, #368]	@ (8010124 <ai_platform_network_init+0x178>)
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	6801      	ldr	r1, [r0, #0]
 800ffb6:	438a      	bics	r2, r1
 800ffb8:	d133      	bne.n	8010022 <ai_platform_network_init+0x76>
 800ffba:	4605      	mov	r5, r0
 800ffbc:	2c00      	cmp	r4, #0
 800ffbe:	f000 8093 	beq.w	80100e8 <ai_platform_network_init+0x13c>
 800ffc2:	f8d4 b000 	ldr.w	fp, [r4]
 800ffc6:	4a58      	ldr	r2, [pc, #352]	@ (8010128 <ai_platform_network_init+0x17c>)
 800ffc8:	4593      	cmp	fp, r2
 800ffca:	d10f      	bne.n	800ffec <ai_platform_network_init+0x40>
 800ffcc:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800ffd0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ffd4:	4b53      	ldr	r3, [pc, #332]	@ (8010124 <ai_platform_network_init+0x178>)
 800ffd6:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800ffda:	0c32      	lsrs	r2, r6, #16
 800ffdc:	4299      	cmp	r1, r3
 800ffde:	d02c      	beq.n	801003a <ai_platform_network_init+0x8e>
 800ffe0:	2303      	movs	r3, #3
 800ffe2:	462c      	mov	r4, r5
 800ffe4:	612b      	str	r3, [r5, #16]
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffec:	4627      	mov	r7, r4
 800ffee:	2101      	movs	r1, #1
 800fff0:	6864      	ldr	r4, [r4, #4]
 800fff2:	4638      	mov	r0, r7
 800fff4:	f107 081c 	add.w	r8, r7, #28
 800fff8:	f7ff fda8 	bl	800fb4c <ai_buffer_get_size>
 800fffc:	4606      	mov	r6, r0
 800fffe:	2101      	movs	r1, #1
 8010000:	4640      	mov	r0, r8
 8010002:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8010006:	f7ff fda1 	bl	800fb4c <ai_buffer_get_size>
 801000a:	b976      	cbnz	r6, 801002a <ai_platform_network_init+0x7e>
 801000c:	2800      	cmp	r0, #0
 801000e:	d150      	bne.n	80100b2 <ai_platform_network_init+0x106>
 8010010:	4680      	mov	r8, r0
 8010012:	4686      	mov	lr, r0
 8010014:	4606      	mov	r6, r0
 8010016:	4607      	mov	r7, r0
 8010018:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 801001c:	6829      	ldr	r1, [r5, #0]
 801001e:	0436      	lsls	r6, r6, #16
 8010020:	e7d8      	b.n	800ffd4 <ai_platform_network_init+0x28>
 8010022:	2400      	movs	r4, #0
 8010024:	4620      	mov	r0, r4
 8010026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002a:	2800      	cmp	r0, #0
 801002c:	d13b      	bne.n	80100a6 <ai_platform_network_init+0xfa>
 801002e:	4680      	mov	r8, r0
 8010030:	4686      	mov	lr, r0
 8010032:	2c00      	cmp	r4, #0
 8010034:	d05e      	beq.n	80100f4 <ai_platform_network_init+0x148>
 8010036:	2601      	movs	r6, #1
 8010038:	e7ee      	b.n	8010018 <ai_platform_network_init+0x6c>
 801003a:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 801003c:	4293      	cmp	r3, r2
 801003e:	4b3a      	ldr	r3, [pc, #232]	@ (8010128 <ai_platform_network_init+0x17c>)
 8010040:	d33e      	bcc.n	80100c0 <ai_platform_network_init+0x114>
 8010042:	459b      	cmp	fp, r3
 8010044:	d03e      	beq.n	80100c4 <ai_platform_network_init+0x118>
 8010046:	b1a2      	cbz	r2, 8010072 <ai_platform_network_init+0xc6>
 8010048:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801004c:	f04f 0c00 	mov.w	ip, #0
 8010050:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8010054:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8010056:	eb07 0b0c 	add.w	fp, r7, ip
 801005a:	4464      	add	r4, ip
 801005c:	f10c 0c1c 	add.w	ip, ip, #28
 8010060:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8010064:	45cc      	cmp	ip, r9
 8010066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010068:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 801006c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010070:	d1f0      	bne.n	8010054 <ai_platform_network_init+0xa8>
 8010072:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8010074:	622e      	str	r6, [r5, #32]
 8010076:	4553      	cmp	r3, sl
 8010078:	d34b      	bcc.n	8010112 <ai_platform_network_init+0x166>
 801007a:	f1ba 0f00 	cmp.w	sl, #0
 801007e:	d025      	beq.n	80100cc <ai_platform_network_init+0x120>
 8010080:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8010084:	2700      	movs	r7, #0
 8010086:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801008a:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 801008c:	eb08 0607 	add.w	r6, r8, r7
 8010090:	443c      	add	r4, r7
 8010092:	371c      	adds	r7, #28
 8010094:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010096:	4557      	cmp	r7, sl
 8010098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801009a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801009e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80100a2:	d1f2      	bne.n	801008a <ai_platform_network_init+0xde>
 80100a4:	e012      	b.n	80100cc <ai_platform_network_init+0x120>
 80100a6:	f1b9 0f00 	cmp.w	r9, #0
 80100aa:	d015      	beq.n	80100d8 <ai_platform_network_init+0x12c>
 80100ac:	f04f 0e01 	mov.w	lr, #1
 80100b0:	e7bf      	b.n	8010032 <ai_platform_network_init+0x86>
 80100b2:	f1b9 0f00 	cmp.w	r9, #0
 80100b6:	d00f      	beq.n	80100d8 <ai_platform_network_init+0x12c>
 80100b8:	f04f 0e01 	mov.w	lr, #1
 80100bc:	4637      	mov	r7, r6
 80100be:	e7ab      	b.n	8010018 <ai_platform_network_init+0x6c>
 80100c0:	459b      	cmp	fp, r3
 80100c2:	d11e      	bne.n	8010102 <ai_platform_network_init+0x156>
 80100c4:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 80100c8:	e9c5 6708 	strd	r6, r7, [r5, #32]
 80100cc:	4628      	mov	r0, r5
 80100ce:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 80100d2:	f000 fadd 	bl	8010690 <ai_layers_init_all>
 80100d6:	e783      	b.n	800ffe0 <ai_platform_network_init+0x34>
 80100d8:	2213      	movs	r2, #19
 80100da:	2110      	movs	r1, #16
 80100dc:	f105 000c 	add.w	r0, r5, #12
 80100e0:	2400      	movs	r4, #0
 80100e2:	f000 faa1 	bl	8010628 <core_set_error>
 80100e6:	e77e      	b.n	800ffe6 <ai_platform_network_init+0x3a>
 80100e8:	2211      	movs	r2, #17
 80100ea:	2110      	movs	r1, #16
 80100ec:	300c      	adds	r0, #12
 80100ee:	f000 fa9b 	bl	8010628 <core_set_error>
 80100f2:	e778      	b.n	800ffe6 <ai_platform_network_init+0x3a>
 80100f4:	2212      	movs	r2, #18
 80100f6:	2110      	movs	r1, #16
 80100f8:	f105 000c 	add.w	r0, r5, #12
 80100fc:	f000 fa94 	bl	8010628 <core_set_error>
 8010100:	e771      	b.n	800ffe6 <ai_platform_network_init+0x3a>
 8010102:	2212      	movs	r2, #18
 8010104:	2116      	movs	r1, #22
 8010106:	f105 000c 	add.w	r0, r5, #12
 801010a:	2400      	movs	r4, #0
 801010c:	f000 fa8c 	bl	8010628 <core_set_error>
 8010110:	e769      	b.n	800ffe6 <ai_platform_network_init+0x3a>
 8010112:	2213      	movs	r2, #19
 8010114:	2116      	movs	r1, #22
 8010116:	f105 000c 	add.w	r0, r5, #12
 801011a:	2400      	movs	r4, #0
 801011c:	f000 fa84 	bl	8010628 <core_set_error>
 8010120:	e761      	b.n	800ffe6 <ai_platform_network_init+0x3a>
 8010122:	bf00      	nop
 8010124:	a1c00100 	.word	0xa1c00100
 8010128:	a1facade 	.word	0xa1facade

0801012c <ai_platform_network_post_init>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4b16      	ldr	r3, [pc, #88]	@ (8010188 <ai_platform_network_post_init+0x5c>)
 8010130:	6802      	ldr	r2, [r0, #0]
 8010132:	ea02 0103 	and.w	r1, r2, r3
 8010136:	4393      	bics	r3, r2
 8010138:	d108      	bne.n	801014c <ai_platform_network_post_init+0x20>
 801013a:	6903      	ldr	r3, [r0, #16]
 801013c:	4604      	mov	r4, r0
 801013e:	f013 0502 	ands.w	r5, r3, #2
 8010142:	d005      	beq.n	8010150 <ai_platform_network_post_init+0x24>
 8010144:	428a      	cmp	r2, r1
 8010146:	d00a      	beq.n	801015e <ai_platform_network_post_init+0x32>
 8010148:	2001      	movs	r0, #1
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	2000      	movs	r0, #0
 801014e:	bd38      	pop	{r3, r4, r5, pc}
 8010150:	2210      	movs	r2, #16
 8010152:	2111      	movs	r1, #17
 8010154:	300c      	adds	r0, #12
 8010156:	f000 fa67 	bl	8010628 <core_set_error>
 801015a:	4628      	mov	r0, r5
 801015c:	bd38      	pop	{r3, r4, r5, pc}
 801015e:	f000 faa5 	bl	80106ac <ai_layers_post_init_all>
 8010162:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010164:	2b00      	cmp	r3, #0
 8010166:	d0ef      	beq.n	8010148 <ai_platform_network_post_init+0x1c>
 8010168:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801016a:	e008      	b.n	801017e <ai_platform_network_post_init+0x52>
 801016c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8010170:	4798      	blx	r3
 8010172:	692b      	ldr	r3, [r5, #16]
 8010174:	42ab      	cmp	r3, r5
 8010176:	461d      	mov	r5, r3
 8010178:	d0e6      	beq.n	8010148 <ai_platform_network_post_init+0x1c>
 801017a:	2b00      	cmp	r3, #0
 801017c:	d0e4      	beq.n	8010148 <ai_platform_network_post_init+0x1c>
 801017e:	4629      	mov	r1, r5
 8010180:	2000      	movs	r0, #0
 8010182:	2d00      	cmp	r5, #0
 8010184:	d1f2      	bne.n	801016c <ai_platform_network_post_init+0x40>
 8010186:	e7df      	b.n	8010148 <ai_platform_network_post_init+0x1c>
 8010188:	a1c00100 	.word	0xa1c00100

0801018c <ai_platform_network_process>:
 801018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010190:	b085      	sub	sp, #20
 8010192:	4bb7      	ldr	r3, [pc, #732]	@ (8010470 <ai_platform_network_process+0x2e4>)
 8010194:	9202      	str	r2, [sp, #8]
 8010196:	6802      	ldr	r2, [r0, #0]
 8010198:	4393      	bics	r3, r2
 801019a:	f040 8142 	bne.w	8010422 <ai_platform_network_process+0x296>
 801019e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80101a0:	4605      	mov	r5, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f000 8126 	beq.w	80103f4 <ai_platform_network_process+0x268>
 80101a8:	6903      	ldr	r3, [r0, #16]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 80101b0:	f003 0303 	and.w	r3, r3, #3
 80101b4:	6182      	str	r2, [r0, #24]
 80101b6:	2b03      	cmp	r3, #3
 80101b8:	f040 8122 	bne.w	8010400 <ai_platform_network_process+0x274>
 80101bc:	2900      	cmp	r1, #0
 80101be:	f000 8136 	beq.w	801042e <ai_platform_network_process+0x2a2>
 80101c2:	fab8 f788 	clz	r7, r8
 80101c6:	097f      	lsrs	r7, r7, #5
 80101c8:	f1b8 0f00 	cmp.w	r8, #0
 80101cc:	f000 812f 	beq.w	801042e <ai_platform_network_process+0x2a2>
 80101d0:	f8b8 3000 	ldrh.w	r3, [r8]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f000 812a 	beq.w	801042e <ai_platform_network_process+0x2a2>
 80101da:	698b      	ldr	r3, [r1, #24]
 80101dc:	460e      	mov	r6, r1
 80101de:	9003      	str	r0, [sp, #12]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	9301      	str	r3, [sp, #4]
 80101e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d072      	beq.n	80102d2 <ai_platform_network_process+0x146>
 80101ec:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80101f0:	2c00      	cmp	r4, #0
 80101f2:	d06e      	beq.n	80102d2 <ai_platform_network_process+0x146>
 80101f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101f8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80101fc:	f8d3 a000 	ldr.w	sl, [r3]
 8010200:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8010204:	f000 8112 	beq.w	801042c <ai_platform_network_process+0x2a0>
 8010208:	69a3      	ldr	r3, [r4, #24]
 801020a:	2101      	movs	r1, #1
 801020c:	4630      	mov	r0, r6
 801020e:	685d      	ldr	r5, [r3, #4]
 8010210:	f7ff fc9c 	bl	800fb4c <ai_buffer_get_size>
 8010214:	4285      	cmp	r5, r0
 8010216:	f0c0 8115 	bcc.w	8010444 <ai_platform_network_process+0x2b8>
 801021a:	68e0      	ldr	r0, [r4, #12]
 801021c:	69b1      	ldr	r1, [r6, #24]
 801021e:	68c2      	ldr	r2, [r0, #12]
 8010220:	68cb      	ldr	r3, [r1, #12]
 8010222:	429a      	cmp	r2, r3
 8010224:	f040 810e 	bne.w	8010444 <ai_platform_network_process+0x2b8>
 8010228:	6882      	ldr	r2, [r0, #8]
 801022a:	688b      	ldr	r3, [r1, #8]
 801022c:	429a      	cmp	r2, r3
 801022e:	f040 8109 	bne.w	8010444 <ai_platform_network_process+0x2b8>
 8010232:	6842      	ldr	r2, [r0, #4]
 8010234:	684b      	ldr	r3, [r1, #4]
 8010236:	429a      	cmp	r2, r3
 8010238:	f040 8104 	bne.w	8010444 <ai_platform_network_process+0x2b8>
 801023c:	69a3      	ldr	r3, [r4, #24]
 801023e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010242:	f002 fe61 	bl	8012f08 <ai_array_get_data_byte_size>
 8010246:	4605      	mov	r5, r0
 8010248:	4620      	mov	r0, r4
 801024a:	f002 fe75 	bl	8012f38 <get_tensor_byte_size>
 801024e:	4285      	cmp	r5, r0
 8010250:	f0c0 80f8 	bcc.w	8010444 <ai_platform_network_process+0x2b8>
 8010254:	69a3      	ldr	r3, [r4, #24]
 8010256:	6818      	ldr	r0, [r3, #0]
 8010258:	f002 fdbe 	bl	8012dd8 <ai_array_to_buffer_fmt>
 801025c:	6833      	ldr	r3, [r6, #0]
 801025e:	4058      	eors	r0, r3
 8010260:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8010264:	f040 81a4 	bne.w	80105b0 <ai_platform_network_process+0x424>
 8010268:	6873      	ldr	r3, [r6, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	f000 80de 	beq.w	801042c <ai_platform_network_process+0x2a0>
 8010270:	69b3      	ldr	r3, [r6, #24]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	f000 81a4 	beq.w	80105c2 <ai_platform_network_process+0x436>
 801027a:	9a01      	ldr	r2, [sp, #4]
 801027c:	4620      	mov	r0, r4
 801027e:	3701      	adds	r7, #1
 8010280:	361c      	adds	r6, #28
 8010282:	429a      	cmp	r2, r3
 8010284:	bf38      	it	cc
 8010286:	461a      	movcc	r2, r3
 8010288:	9201      	str	r2, [sp, #4]
 801028a:	f002 fe55 	bl	8012f38 <get_tensor_byte_size>
 801028e:	f8c9 0008 	str.w	r0, [r9, #8]
 8010292:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	fb00 f303 	mul.w	r3, r0, r3
 801029c:	f8c9 300c 	str.w	r3, [r9, #12]
 80102a0:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80102a4:	440b      	add	r3, r1
 80102a6:	f8c9 1004 	str.w	r1, [r9, #4]
 80102aa:	f84a 300b 	str.w	r3, [sl, fp]
 80102ae:	69a0      	ldr	r0, [r4, #24]
 80102b0:	6803      	ldr	r3, [r0, #0]
 80102b2:	009a      	lsls	r2, r3, #2
 80102b4:	f100 80af 	bmi.w	8010416 <ai_platform_network_process+0x28a>
 80102b8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80102bc:	1a9b      	subs	r3, r3, r2
 80102be:	4419      	add	r1, r3
 80102c0:	6081      	str	r1, [r0, #8]
 80102c2:	69a3      	ldr	r3, [r4, #24]
 80102c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80102c8:	60da      	str	r2, [r3, #12]
 80102ca:	f8b8 3000 	ldrh.w	r3, [r8]
 80102ce:	42bb      	cmp	r3, r7
 80102d0:	d888      	bhi.n	80101e4 <ai_platform_network_process+0x58>
 80102d2:	9d03      	ldr	r5, [sp, #12]
 80102d4:	9b02      	ldr	r3, [sp, #8]
 80102d6:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f000 817b 	beq.w	80105d4 <ai_platform_network_process+0x448>
 80102de:	2a01      	cmp	r2, #1
 80102e0:	f240 80bd 	bls.w	801045e <ai_platform_network_process+0x2d2>
 80102e4:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 80102e8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	f000 80b6 	beq.w	801045e <ai_platform_network_process+0x2d2>
 80102f2:	2700      	movs	r7, #0
 80102f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80102f8:	9502      	str	r5, [sp, #8]
 80102fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f000 80bd 	beq.w	801047e <ai_platform_network_process+0x2f2>
 8010304:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8010308:	2e00      	cmp	r6, #0
 801030a:	f000 80b8 	beq.w	801047e <ai_platform_network_process+0x2f2>
 801030e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010312:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8010316:	681c      	ldr	r4, [r3, #0]
 8010318:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 801031c:	f000 8170 	beq.w	8010600 <ai_platform_network_process+0x474>
 8010320:	69b3      	ldr	r3, [r6, #24]
 8010322:	2101      	movs	r1, #1
 8010324:	4658      	mov	r0, fp
 8010326:	685d      	ldr	r5, [r3, #4]
 8010328:	f7ff fc10 	bl	800fb4c <ai_buffer_get_size>
 801032c:	4285      	cmp	r5, r0
 801032e:	f0c0 8095 	bcc.w	801045c <ai_platform_network_process+0x2d0>
 8010332:	68f0      	ldr	r0, [r6, #12]
 8010334:	f8db 1018 	ldr.w	r1, [fp, #24]
 8010338:	68c2      	ldr	r2, [r0, #12]
 801033a:	68cb      	ldr	r3, [r1, #12]
 801033c:	429a      	cmp	r2, r3
 801033e:	f040 808d 	bne.w	801045c <ai_platform_network_process+0x2d0>
 8010342:	6882      	ldr	r2, [r0, #8]
 8010344:	688b      	ldr	r3, [r1, #8]
 8010346:	429a      	cmp	r2, r3
 8010348:	f040 8088 	bne.w	801045c <ai_platform_network_process+0x2d0>
 801034c:	6842      	ldr	r2, [r0, #4]
 801034e:	684b      	ldr	r3, [r1, #4]
 8010350:	429a      	cmp	r2, r3
 8010352:	f040 8083 	bne.w	801045c <ai_platform_network_process+0x2d0>
 8010356:	69b3      	ldr	r3, [r6, #24]
 8010358:	e9d3 0100 	ldrd	r0, r1, [r3]
 801035c:	f002 fdd4 	bl	8012f08 <ai_array_get_data_byte_size>
 8010360:	9003      	str	r0, [sp, #12]
 8010362:	4630      	mov	r0, r6
 8010364:	f002 fde8 	bl	8012f38 <get_tensor_byte_size>
 8010368:	9b03      	ldr	r3, [sp, #12]
 801036a:	4283      	cmp	r3, r0
 801036c:	d376      	bcc.n	801045c <ai_platform_network_process+0x2d0>
 801036e:	69b3      	ldr	r3, [r6, #24]
 8010370:	6818      	ldr	r0, [r3, #0]
 8010372:	f002 fd31 	bl	8012dd8 <ai_array_to_buffer_fmt>
 8010376:	f8db 3000 	ldr.w	r3, [fp]
 801037a:	4058      	eors	r0, r3
 801037c:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8010380:	f040 812c 	bne.w	80105dc <ai_platform_network_process+0x450>
 8010384:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	f000 8139 	beq.w	8010600 <ai_platform_network_process+0x474>
 801038e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	f000 812a 	beq.w	80105ee <ai_platform_network_process+0x462>
 801039a:	9a01      	ldr	r2, [sp, #4]
 801039c:	4630      	mov	r0, r6
 801039e:	3701      	adds	r7, #1
 80103a0:	f10b 0b1c 	add.w	fp, fp, #28
 80103a4:	429a      	cmp	r2, r3
 80103a6:	bf38      	it	cc
 80103a8:	461a      	movcc	r2, r3
 80103aa:	9201      	str	r2, [sp, #4]
 80103ac:	f002 fdc4 	bl	8012f38 <get_tensor_byte_size>
 80103b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80103b4:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	fb00 f303 	mul.w	r3, r0, r3
 80103be:	f8c8 300c 	str.w	r3, [r8, #12]
 80103c2:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 80103c6:	440b      	add	r3, r1
 80103c8:	f8c8 1004 	str.w	r1, [r8, #4]
 80103cc:	f844 300a 	str.w	r3, [r4, sl]
 80103d0:	69b0      	ldr	r0, [r6, #24]
 80103d2:	6803      	ldr	r3, [r0, #0]
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	d44d      	bmi.n	8010474 <ai_platform_network_process+0x2e8>
 80103d8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80103dc:	1a9b      	subs	r3, r3, r2
 80103de:	4419      	add	r1, r3
 80103e0:	6081      	str	r1, [r0, #8]
 80103e2:	69b3      	ldr	r3, [r6, #24]
 80103e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80103e8:	60da      	str	r2, [r3, #12]
 80103ea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80103ee:	42bb      	cmp	r3, r7
 80103f0:	d883      	bhi.n	80102fa <ai_platform_network_process+0x16e>
 80103f2:	e044      	b.n	801047e <ai_platform_network_process+0x2f2>
 80103f4:	6902      	ldr	r2, [r0, #16]
 80103f6:	6183      	str	r3, [r0, #24]
 80103f8:	f002 0203 	and.w	r2, r2, #3
 80103fc:	2a03      	cmp	r2, #3
 80103fe:	d016      	beq.n	801042e <ai_platform_network_process+0x2a2>
 8010400:	2230      	movs	r2, #48	@ 0x30
 8010402:	2111      	movs	r1, #17
 8010404:	f105 000c 	add.w	r0, r5, #12
 8010408:	2400      	movs	r4, #0
 801040a:	f000 f90d 	bl	8010628 <core_set_error>
 801040e:	4620      	mov	r0, r4
 8010410:	b005      	add	sp, #20
 8010412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010416:	f8b8 3000 	ldrh.w	r3, [r8]
 801041a:	429f      	cmp	r7, r3
 801041c:	f4ff aee2 	bcc.w	80101e4 <ai_platform_network_process+0x58>
 8010420:	e757      	b.n	80102d2 <ai_platform_network_process+0x146>
 8010422:	2400      	movs	r4, #0
 8010424:	4620      	mov	r0, r4
 8010426:	b005      	add	sp, #20
 8010428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042c:	9d03      	ldr	r5, [sp, #12]
 801042e:	2400      	movs	r4, #0
 8010430:	2217      	movs	r2, #23
 8010432:	2112      	movs	r1, #18
 8010434:	f105 000c 	add.w	r0, r5, #12
 8010438:	f000 f8f6 	bl	8010628 <core_set_error>
 801043c:	4620      	mov	r0, r4
 801043e:	b005      	add	sp, #20
 8010440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010444:	9d03      	ldr	r5, [sp, #12]
 8010446:	2400      	movs	r4, #0
 8010448:	2218      	movs	r2, #24
 801044a:	2112      	movs	r1, #18
 801044c:	f105 000c 	add.w	r0, r5, #12
 8010450:	f000 f8ea 	bl	8010628 <core_set_error>
 8010454:	4620      	mov	r0, r4
 8010456:	b005      	add	sp, #20
 8010458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045c:	9d02      	ldr	r5, [sp, #8]
 801045e:	2218      	movs	r2, #24
 8010460:	2113      	movs	r1, #19
 8010462:	f105 000c 	add.w	r0, r5, #12
 8010466:	2400      	movs	r4, #0
 8010468:	f000 f8de 	bl	8010628 <core_set_error>
 801046c:	e7cf      	b.n	801040e <ai_platform_network_process+0x282>
 801046e:	bf00      	nop
 8010470:	a1c00100 	.word	0xa1c00100
 8010474:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010478:	429f      	cmp	r7, r3
 801047a:	f4ff af3e 	bcc.w	80102fa <ai_platform_network_process+0x16e>
 801047e:	9d02      	ldr	r5, [sp, #8]
 8010480:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010484:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8010486:	832b      	strh	r3, [r5, #24]
 8010488:	2a00      	cmp	r2, #0
 801048a:	f040 808b 	bne.w	80105a4 <ai_platform_network_process+0x418>
 801048e:	4616      	mov	r6, r2
 8010490:	4617      	mov	r7, r2
 8010492:	8b6c      	ldrh	r4, [r5, #26]
 8010494:	429c      	cmp	r4, r3
 8010496:	d2ba      	bcs.n	801040e <ai_platform_network_process+0x282>
 8010498:	46ab      	mov	fp, r5
 801049a:	2e00      	cmp	r6, #0
 801049c:	d030      	beq.n	8010500 <ai_platform_network_process+0x374>
 801049e:	f04f 0800 	mov.w	r8, #0
 80104a2:	e014      	b.n	80104ce <ai_platform_network_process+0x342>
 80104a4:	6882      	ldr	r2, [r0, #8]
 80104a6:	68c5      	ldr	r5, [r0, #12]
 80104a8:	6863      	ldr	r3, [r4, #4]
 80104aa:	1b52      	subs	r2, r2, r5
 80104ac:	4413      	add	r3, r2
 80104ae:	6083      	str	r3, [r0, #8]
 80104b0:	698b      	ldr	r3, [r1, #24]
 80104b2:	6862      	ldr	r2, [r4, #4]
 80104b4:	60da      	str	r2, [r3, #12]
 80104b6:	f859 200a 	ldr.w	r2, [r9, sl]
 80104ba:	f108 0801 	add.w	r8, r8, #1
 80104be:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80104c2:	440b      	add	r3, r1
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d301      	bcc.n	80104cc <ai_platform_network_process+0x340>
 80104c8:	68e3      	ldr	r3, [r4, #12]
 80104ca:	1ad3      	subs	r3, r2, r3
 80104cc:	6063      	str	r3, [r4, #4]
 80104ce:	8833      	ldrh	r3, [r6, #0]
 80104d0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80104d4:	4543      	cmp	r3, r8
 80104d6:	d913      	bls.n	8010500 <ai_platform_network_process+0x374>
 80104d8:	6873      	ldr	r3, [r6, #4]
 80104da:	b18b      	cbz	r3, 8010500 <ai_platform_network_process+0x374>
 80104dc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80104e0:	b171      	cbz	r1, 8010500 <ai_platform_network_process+0x374>
 80104e2:	6988      	ldr	r0, [r1, #24]
 80104e4:	68b2      	ldr	r2, [r6, #8]
 80104e6:	6803      	ldr	r3, [r0, #0]
 80104e8:	f8d2 9000 	ldr.w	r9, [r2]
 80104ec:	009d      	lsls	r5, r3, #2
 80104ee:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80104f2:	d5d7      	bpl.n	80104a4 <ai_platform_network_process+0x318>
 80104f4:	6881      	ldr	r1, [r0, #8]
 80104f6:	68a2      	ldr	r2, [r4, #8]
 80104f8:	6860      	ldr	r0, [r4, #4]
 80104fa:	f002 fbe5 	bl	8012cc8 <st_int8_copy>
 80104fe:	e7da      	b.n	80104b6 <ai_platform_network_process+0x32a>
 8010500:	4658      	mov	r0, fp
 8010502:	f000 f8e7 	bl	80106d4 <ai_layers_forward_all>
 8010506:	2f00      	cmp	r7, #0
 8010508:	d03d      	beq.n	8010586 <ai_platform_network_process+0x3fa>
 801050a:	2400      	movs	r4, #0
 801050c:	e016      	b.n	801053c <ai_platform_network_process+0x3b0>
 801050e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8010512:	f859 100a 	ldr.w	r1, [r9, sl]
 8010516:	4413      	add	r3, r2
 8010518:	428b      	cmp	r3, r1
 801051a:	d302      	bcc.n	8010522 <ai_platform_network_process+0x396>
 801051c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010520:	1acb      	subs	r3, r1, r3
 8010522:	f8c8 3004 	str.w	r3, [r8, #4]
 8010526:	6981      	ldr	r1, [r0, #24]
 8010528:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 801052c:	1b52      	subs	r2, r2, r5
 801052e:	4413      	add	r3, r2
 8010530:	608b      	str	r3, [r1, #8]
 8010532:	6983      	ldr	r3, [r0, #24]
 8010534:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010538:	60da      	str	r2, [r3, #12]
 801053a:	3401      	adds	r4, #1
 801053c:	883b      	ldrh	r3, [r7, #0]
 801053e:	42a3      	cmp	r3, r4
 8010540:	d921      	bls.n	8010586 <ai_platform_network_process+0x3fa>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	b1fb      	cbz	r3, 8010586 <ai_platform_network_process+0x3fa>
 8010546:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801054a:	b1e0      	cbz	r0, 8010586 <ai_platform_network_process+0x3fa>
 801054c:	68ba      	ldr	r2, [r7, #8]
 801054e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8010552:	6983      	ldr	r3, [r0, #24]
 8010554:	f8d2 9000 	ldr.w	r9, [r2]
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801055e:	0092      	lsls	r2, r2, #2
 8010560:	d5d5      	bpl.n	801050e <ai_platform_network_process+0x382>
 8010562:	6898      	ldr	r0, [r3, #8]
 8010564:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8010568:	f002 fbae 	bl	8012cc8 <st_int8_copy>
 801056c:	f859 200a 	ldr.w	r2, [r9, sl]
 8010570:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8010574:	440b      	add	r3, r1
 8010576:	4293      	cmp	r3, r2
 8010578:	d302      	bcc.n	8010580 <ai_platform_network_process+0x3f4>
 801057a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	f8c8 3004 	str.w	r3, [r8, #4]
 8010584:	e7d9      	b.n	801053a <ai_platform_network_process+0x3ae>
 8010586:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 801058a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801058e:	3401      	adds	r4, #1
 8010590:	b2a4      	uxth	r4, r4
 8010592:	42a3      	cmp	r3, r4
 8010594:	f8ab 401a 	strh.w	r4, [fp, #26]
 8010598:	f63f af7f 	bhi.w	801049a <ai_platform_network_process+0x30e>
 801059c:	4620      	mov	r0, r4
 801059e:	b005      	add	sp, #20
 80105a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a4:	2a01      	cmp	r2, #1
 80105a6:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80105a8:	d033      	beq.n	8010612 <ai_platform_network_process+0x486>
 80105aa:	f106 070c 	add.w	r7, r6, #12
 80105ae:	e770      	b.n	8010492 <ai_platform_network_process+0x306>
 80105b0:	9d03      	ldr	r5, [sp, #12]
 80105b2:	2219      	movs	r2, #25
 80105b4:	2112      	movs	r1, #18
 80105b6:	2400      	movs	r4, #0
 80105b8:	f105 000c 	add.w	r0, r5, #12
 80105bc:	f000 f834 	bl	8010628 <core_set_error>
 80105c0:	e725      	b.n	801040e <ai_platform_network_process+0x282>
 80105c2:	9d03      	ldr	r5, [sp, #12]
 80105c4:	4604      	mov	r4, r0
 80105c6:	2221      	movs	r2, #33	@ 0x21
 80105c8:	2112      	movs	r1, #18
 80105ca:	f105 000c 	add.w	r0, r5, #12
 80105ce:	f000 f82b 	bl	8010628 <core_set_error>
 80105d2:	e71c      	b.n	801040e <ai_platform_network_process+0x282>
 80105d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80105d8:	832b      	strh	r3, [r5, #24]
 80105da:	e755      	b.n	8010488 <ai_platform_network_process+0x2fc>
 80105dc:	9d02      	ldr	r5, [sp, #8]
 80105de:	2219      	movs	r2, #25
 80105e0:	2113      	movs	r1, #19
 80105e2:	2400      	movs	r4, #0
 80105e4:	f105 000c 	add.w	r0, r5, #12
 80105e8:	f000 f81e 	bl	8010628 <core_set_error>
 80105ec:	e70f      	b.n	801040e <ai_platform_network_process+0x282>
 80105ee:	9d02      	ldr	r5, [sp, #8]
 80105f0:	4604      	mov	r4, r0
 80105f2:	2221      	movs	r2, #33	@ 0x21
 80105f4:	2113      	movs	r1, #19
 80105f6:	f105 000c 	add.w	r0, r5, #12
 80105fa:	f000 f815 	bl	8010628 <core_set_error>
 80105fe:	e706      	b.n	801040e <ai_platform_network_process+0x282>
 8010600:	9d02      	ldr	r5, [sp, #8]
 8010602:	2217      	movs	r2, #23
 8010604:	2113      	movs	r1, #19
 8010606:	2400      	movs	r4, #0
 8010608:	f105 000c 	add.w	r0, r5, #12
 801060c:	f000 f80c 	bl	8010628 <core_set_error>
 8010610:	e6fd      	b.n	801040e <ai_platform_network_process+0x282>
 8010612:	2700      	movs	r7, #0
 8010614:	e73d      	b.n	8010492 <ai_platform_network_process+0x306>
 8010616:	bf00      	nop

08010618 <core_init>:
 8010618:	2001      	movs	r0, #1
 801061a:	4770      	bx	lr

0801061c <core_get_error>:
 801061c:	4603      	mov	r3, r0
 801061e:	2200      	movs	r2, #0
 8010620:	6800      	ldr	r0, [r0, #0]
 8010622:	601a      	str	r2, [r3, #0]
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop

08010628 <core_set_error>:
 8010628:	4603      	mov	r3, r0
 801062a:	7800      	ldrb	r0, [r0, #0]
 801062c:	b108      	cbz	r0, 8010632 <core_set_error+0xa>
 801062e:	2000      	movs	r0, #0
 8010630:	4770      	bx	lr
 8010632:	7019      	strb	r1, [r3, #0]
 8010634:	2001      	movs	r0, #1
 8010636:	6819      	ldr	r1, [r3, #0]
 8010638:	f362 211f 	bfi	r1, r2, #8, #24
 801063c:	6019      	str	r1, [r3, #0]
 801063e:	4770      	bx	lr

08010640 <ai_check_custom_types>:
 8010640:	b082      	sub	sp, #8
 8010642:	4b12      	ldr	r3, [pc, #72]	@ (801068c <ai_check_custom_types+0x4c>)
 8010644:	9301      	str	r3, [sp, #4]
 8010646:	b118      	cbz	r0, 8010650 <ai_check_custom_types+0x10>
 8010648:	7803      	ldrb	r3, [r0, #0]
 801064a:	2b03      	cmp	r3, #3
 801064c:	d002      	beq.n	8010654 <ai_check_custom_types+0x14>
 801064e:	2000      	movs	r0, #0
 8010650:	b002      	add	sp, #8
 8010652:	4770      	bx	lr
 8010654:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010658:	4293      	cmp	r3, r2
 801065a:	d004      	beq.n	8010666 <ai_check_custom_types+0x26>
 801065c:	2001      	movs	r0, #1
 801065e:	f080 0001 	eor.w	r0, r0, #1
 8010662:	b002      	add	sp, #8
 8010664:	4770      	bx	lr
 8010666:	7842      	ldrb	r2, [r0, #1]
 8010668:	3001      	adds	r0, #1
 801066a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801066e:	429a      	cmp	r2, r3
 8010670:	d1f4      	bne.n	801065c <ai_check_custom_types+0x1c>
 8010672:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010676:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801067a:	429a      	cmp	r2, r3
 801067c:	d1ee      	bne.n	801065c <ai_check_custom_types+0x1c>
 801067e:	7842      	ldrb	r2, [r0, #1]
 8010680:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010684:	429a      	cmp	r2, r3
 8010686:	d1e9      	bne.n	801065c <ai_check_custom_types+0x1c>
 8010688:	2000      	movs	r0, #0
 801068a:	e7e8      	b.n	801065e <ai_check_custom_types+0x1e>
 801068c:	84048403 	.word	0x84048403

08010690 <ai_layers_init_all>:
 8010690:	2100      	movs	r1, #0
 8010692:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010694:	b13b      	cbz	r3, 80106a6 <ai_layers_init_all+0x16>
 8010696:	691a      	ldr	r2, [r3, #16]
 8010698:	3101      	adds	r1, #1
 801069a:	60d8      	str	r0, [r3, #12]
 801069c:	429a      	cmp	r2, r3
 801069e:	4613      	mov	r3, r2
 80106a0:	d001      	beq.n	80106a6 <ai_layers_init_all+0x16>
 80106a2:	2a00      	cmp	r2, #0
 80106a4:	d1f6      	bne.n	8010694 <ai_layers_init_all+0x4>
 80106a6:	4608      	mov	r0, r1
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop

080106ac <ai_layers_post_init_all>:
 80106ac:	b538      	push	{r3, r4, r5, lr}
 80106ae:	2500      	movs	r5, #0
 80106b0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80106b2:	b16c      	cbz	r4, 80106d0 <ai_layers_post_init_all+0x24>
 80106b4:	6863      	ldr	r3, [r4, #4]
 80106b6:	07db      	lsls	r3, r3, #31
 80106b8:	d504      	bpl.n	80106c4 <ai_layers_post_init_all+0x18>
 80106ba:	6a23      	ldr	r3, [r4, #32]
 80106bc:	4620      	mov	r0, r4
 80106be:	b10b      	cbz	r3, 80106c4 <ai_layers_post_init_all+0x18>
 80106c0:	3501      	adds	r5, #1
 80106c2:	4798      	blx	r3
 80106c4:	6923      	ldr	r3, [r4, #16]
 80106c6:	42a3      	cmp	r3, r4
 80106c8:	461c      	mov	r4, r3
 80106ca:	d001      	beq.n	80106d0 <ai_layers_post_init_all+0x24>
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d1f0      	bne.n	80106b2 <ai_layers_post_init_all+0x6>
 80106d0:	4628      	mov	r0, r5
 80106d2:	bd38      	pop	{r3, r4, r5, pc}

080106d4 <ai_layers_forward_all>:
 80106d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80106dc:	4604      	mov	r4, r0
 80106de:	f1b8 0f00 	cmp.w	r8, #0
 80106e2:	d02a      	beq.n	801073a <ai_layers_forward_all+0x66>
 80106e4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80106e6:	63c1      	str	r1, [r0, #60]	@ 0x3c
 80106e8:	b319      	cbz	r1, 8010732 <ai_layers_forward_all+0x5e>
 80106ea:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80106ec:	2001      	movs	r0, #1
 80106ee:	47c0      	blx	r8
 80106f0:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80106f2:	b1f6      	cbz	r6, 8010732 <ai_layers_forward_all+0x5e>
 80106f4:	2700      	movs	r7, #0
 80106f6:	4631      	mov	r1, r6
 80106f8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80106fa:	2002      	movs	r0, #2
 80106fc:	47c0      	blx	r8
 80106fe:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8010700:	4628      	mov	r0, r5
 8010702:	696b      	ldr	r3, [r5, #20]
 8010704:	4798      	blx	r3
 8010706:	692e      	ldr	r6, [r5, #16]
 8010708:	2003      	movs	r0, #3
 801070a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801070c:	42b5      	cmp	r5, r6
 801070e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8010710:	d007      	beq.n	8010722 <ai_layers_forward_all+0x4e>
 8010712:	47c0      	blx	r8
 8010714:	3701      	adds	r7, #1
 8010716:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8010718:	2e00      	cmp	r6, #0
 801071a:	d1ec      	bne.n	80106f6 <ai_layers_forward_all+0x22>
 801071c:	4638      	mov	r0, r7
 801071e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010722:	2003      	movs	r0, #3
 8010724:	3701      	adds	r7, #1
 8010726:	47c0      	blx	r8
 8010728:	2300      	movs	r3, #0
 801072a:	4638      	mov	r0, r7
 801072c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010732:	2700      	movs	r7, #0
 8010734:	4638      	mov	r0, r7
 8010736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801073a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801073c:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801073e:	2d00      	cmp	r5, #0
 8010740:	d0f7      	beq.n	8010732 <ai_layers_forward_all+0x5e>
 8010742:	4647      	mov	r7, r8
 8010744:	696b      	ldr	r3, [r5, #20]
 8010746:	4628      	mov	r0, r5
 8010748:	4798      	blx	r3
 801074a:	462b      	mov	r3, r5
 801074c:	692d      	ldr	r5, [r5, #16]
 801074e:	429d      	cmp	r5, r3
 8010750:	d004      	beq.n	801075c <ai_layers_forward_all+0x88>
 8010752:	3701      	adds	r7, #1
 8010754:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8010756:	2d00      	cmp	r5, #0
 8010758:	d1f4      	bne.n	8010744 <ai_layers_forward_all+0x70>
 801075a:	e7df      	b.n	801071c <ai_layers_forward_all+0x48>
 801075c:	2300      	movs	r3, #0
 801075e:	3701      	adds	r7, #1
 8010760:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010762:	e7db      	b.n	801071c <ai_layers_forward_all+0x48>

08010764 <forward_conv2d_if32of32wf32_nl_pool>:
 8010764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010768:	f8d0 c018 	ldr.w	ip, [r0, #24]
 801076c:	b0c3      	sub	sp, #268	@ 0x10c
 801076e:	f8bc 3000 	ldrh.w	r3, [ip]
 8010772:	9321      	str	r3, [sp, #132]	@ 0x84
 8010774:	2b00      	cmp	r3, #0
 8010776:	f000 813c 	beq.w	80109f2 <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 801077a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801077e:	4604      	mov	r4, r0
 8010780:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8010784:	f1bb 0f00 	cmp.w	fp, #0
 8010788:	d001      	beq.n	801078e <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 801078a:	f8db b000 	ldr.w	fp, [fp]
 801078e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010790:	2a01      	cmp	r2, #1
 8010792:	f000 812d 	beq.w	80109f0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8010796:	f8d3 a010 	ldr.w	sl, [r3, #16]
 801079a:	f1ba 0f00 	cmp.w	sl, #0
 801079e:	d001      	beq.n	80107a4 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 80107a0:	f8da a000 	ldr.w	sl, [sl]
 80107a4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80107a6:	2a02      	cmp	r2, #2
 80107a8:	f000 8122 	beq.w	80109f0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 80107ac:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80107b0:	8b1b      	ldrh	r3, [r3, #24]
 80107b2:	f1b8 0f00 	cmp.w	r8, #0
 80107b6:	f000 812f 	beq.w	8010a18 <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	f8d8 2000 	ldr.w	r2, [r8]
 80107c0:	f240 8130 	bls.w	8010a24 <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 80107c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80107c8:	9340      	str	r3, [sp, #256]	@ 0x100
 80107ca:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80107ce:	f8db 100c 	ldr.w	r1, [fp, #12]
 80107d2:	f8da 000c 	ldr.w	r0, [sl, #12]
 80107d6:	9122      	str	r1, [sp, #136]	@ 0x88
 80107d8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80107dc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80107e0:	9130      	str	r1, [sp, #192]	@ 0xc0
 80107e2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80107e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80107e8:	9131      	str	r1, [sp, #196]	@ 0xc4
 80107ea:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80107ee:	f8de 7004 	ldr.w	r7, [lr, #4]
 80107f2:	9132      	str	r1, [sp, #200]	@ 0xc8
 80107f4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80107f8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80107fa:	9133      	str	r1, [sp, #204]	@ 0xcc
 80107fc:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8010800:	681e      	ldr	r6, [r3, #0]
 8010802:	9123      	str	r1, [sp, #140]	@ 0x8c
 8010804:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010808:	972a      	str	r7, [sp, #168]	@ 0xa8
 801080a:	9124      	str	r1, [sp, #144]	@ 0x90
 801080c:	f8de 7008 	ldr.w	r7, [lr, #8]
 8010810:	9628      	str	r6, [sp, #160]	@ 0xa0
 8010812:	972f      	str	r7, [sp, #188]	@ 0xbc
 8010814:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 8010818:	fa1f f189 	uxth.w	r1, r9
 801081c:	9527      	str	r5, [sp, #156]	@ 0x9c
 801081e:	685d      	ldr	r5, [r3, #4]
 8010820:	9134      	str	r1, [sp, #208]	@ 0xd0
 8010822:	9529      	str	r5, [sp, #164]	@ 0xa4
 8010824:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 8010828:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 801082c:	9135      	str	r1, [sp, #212]	@ 0xd4
 801082e:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 8010832:	9136      	str	r1, [sp, #216]	@ 0xd8
 8010834:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8010838:	9137      	str	r1, [sp, #220]	@ 0xdc
 801083a:	6899      	ldr	r1, [r3, #8]
 801083c:	68db      	ldr	r3, [r3, #12]
 801083e:	912d      	str	r1, [sp, #180]	@ 0xb4
 8010840:	932e      	str	r3, [sp, #184]	@ 0xb8
 8010842:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8010846:	9338      	str	r3, [sp, #224]	@ 0xe0
 8010848:	b2ab      	uxth	r3, r5
 801084a:	9339      	str	r3, [sp, #228]	@ 0xe4
 801084c:	b2b3      	uxth	r3, r6
 801084e:	933a      	str	r3, [sp, #232]	@ 0xe8
 8010850:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 8010854:	9325      	str	r3, [sp, #148]	@ 0x94
 8010856:	b23b      	sxth	r3, r7
 8010858:	9326      	str	r3, [sp, #152]	@ 0x98
 801085a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 801085e:	933b      	str	r3, [sp, #236]	@ 0xec
 8010860:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8010864:	933c      	str	r3, [sp, #240]	@ 0xf0
 8010866:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 801086a:	933d      	str	r3, [sp, #244]	@ 0xf4
 801086c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801086e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010872:	933e      	str	r3, [sp, #248]	@ 0xf8
 8010874:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010876:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801087a:	933f      	str	r3, [sp, #252]	@ 0xfc
 801087c:	6a23      	ldr	r3, [r4, #32]
 801087e:	9322      	str	r3, [sp, #136]	@ 0x88
 8010880:	f1b8 0f00 	cmp.w	r8, #0
 8010884:	f000 80b7 	beq.w	80109f6 <forward_conv2d_if32of32wf32_nl_pool+0x292>
 8010888:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801088c:	2b00      	cmp	r3, #0
 801088e:	f000 80ba 	beq.w	8010a06 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 8010892:	9221      	str	r2, [sp, #132]	@ 0x84
 8010894:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010898:	689b      	ldr	r3, [r3, #8]
 801089a:	9322      	str	r3, [sp, #136]	@ 0x88
 801089c:	f002 fb0c 	bl	8012eb8 <ai_array_get_byte_size>
 80108a0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80108a4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80108a6:	902c      	str	r0, [sp, #176]	@ 0xb0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f000 80be 	beq.w	8010a2a <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 80108ae:	9241      	str	r2, [sp, #260]	@ 0x104
 80108b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108b4:	f002 fb00 	bl	8012eb8 <ai_array_get_byte_size>
 80108b8:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80108bc:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80108be:	f8bc 3000 	ldrh.w	r3, [ip]
 80108c2:	902b      	str	r0, [sp, #172]	@ 0xac
 80108c4:	9321      	str	r3, [sp, #132]	@ 0x84
 80108c6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80108c8:	b2ad      	uxth	r5, r5
 80108ca:	b2b6      	uxth	r6, r6
 80108cc:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 80108ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80108d2:	3d01      	subs	r5, #1
 80108d4:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 80108d6:	3e01      	subs	r6, #1
 80108d8:	fa1f f989 	uxth.w	r9, r9
 80108dc:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 80108e0:	fb15 7508 	smlabb	r5, r5, r8, r7
 80108e4:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 80108e6:	699b      	ldr	r3, [r3, #24]
 80108e8:	fa0f f885 	sxth.w	r8, r5
 80108ec:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80108ee:	f8db 0018 	ldr.w	r0, [fp, #24]
 80108f2:	3d01      	subs	r5, #1
 80108f4:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80108f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80108fa:	fb16 7605 	smlabb	r6, r6, r5, r7
 80108fe:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8010900:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8010902:	2b03      	cmp	r3, #3
 8010904:	eba5 0508 	sub.w	r5, r5, r8
 8010908:	b236      	sxth	r6, r6
 801090a:	f8da 1018 	ldr.w	r1, [sl, #24]
 801090e:	fa15 f587 	uxtah	r5, r5, r7
 8010912:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8010914:	6992      	ldr	r2, [r2, #24]
 8010916:	fa15 f587 	uxtah	r5, r5, r7
 801091a:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 801091c:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 8010920:	6880      	ldr	r0, [r0, #8]
 8010922:	6889      	ldr	r1, [r1, #8]
 8010924:	6892      	ldr	r2, [r2, #8]
 8010926:	fb95 f5f9 	sdiv	r5, r5, r9
 801092a:	eba7 0906 	sub.w	r9, r7, r6
 801092e:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8010930:	f105 0501 	add.w	r5, r5, #1
 8010934:	fa19 f987 	uxtah	r9, r9, r7
 8010938:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 801093a:	b22d      	sxth	r5, r5
 801093c:	fa19 f987 	uxtah	r9, r9, r7
 8010940:	fb99 f9fe 	sdiv	r9, r9, lr
 8010944:	f109 0e01 	add.w	lr, r9, #1
 8010948:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 801094c:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8010950:	d94e      	bls.n	80109f0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8010952:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8010956:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 801095a:	f1bc 0f00 	cmp.w	ip, #0
 801095e:	d06f      	beq.n	8010a40 <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 8010960:	f8dc 7000 	ldr.w	r7, [ip]
 8010964:	b10f      	cbz	r7, 801096a <forward_conv2d_if32of32wf32_nl_pool+0x206>
 8010966:	69bf      	ldr	r7, [r7, #24]
 8010968:	68bf      	ldr	r7, [r7, #8]
 801096a:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 801096c:	9513      	str	r5, [sp, #76]	@ 0x4c
 801096e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010970:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8010972:	960e      	str	r6, [sp, #56]	@ 0x38
 8010974:	931e      	str	r3, [sp, #120]	@ 0x78
 8010976:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8010978:	931d      	str	r3, [sp, #116]	@ 0x74
 801097a:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 801097c:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8010980:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8010982:	fa0f f48e 	sxth.w	r4, lr
 8010986:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 801098a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801098c:	9318      	str	r3, [sp, #96]	@ 0x60
 801098e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8010990:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010992:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010994:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8010998:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 801099a:	9312      	str	r3, [sp, #72]	@ 0x48
 801099c:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 801099e:	9311      	str	r3, [sp, #68]	@ 0x44
 80109a0:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80109a2:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 80109a6:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80109a8:	930d      	str	r3, [sp, #52]	@ 0x34
 80109aa:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80109ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80109ae:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 80109b0:	9414      	str	r4, [sp, #80]	@ 0x50
 80109b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109b4:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80109b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80109b8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80109ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80109bc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80109be:	9308      	str	r3, [sp, #32]
 80109c0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80109c2:	9307      	str	r3, [sp, #28]
 80109c4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80109c6:	9306      	str	r3, [sp, #24]
 80109c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80109ca:	9305      	str	r3, [sp, #20]
 80109cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80109ce:	9304      	str	r3, [sp, #16]
 80109d0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80109d2:	9303      	str	r3, [sp, #12]
 80109d4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80109d6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80109da:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80109de:	465b      	mov	r3, fp
 80109e0:	69a4      	ldr	r4, [r4, #24]
 80109e2:	68a4      	ldr	r4, [r4, #8]
 80109e4:	9400      	str	r4, [sp, #0]
 80109e6:	f000 f9cf 	bl	8010d88 <forward_lite_conv2d_if32of32wf32_pool>
 80109ea:	b043      	add	sp, #268	@ 0x10c
 80109ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f0:	2300      	movs	r3, #0
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	deff      	udf	#255	@ 0xff
 80109f6:	b10b      	cbz	r3, 80109fc <forward_conv2d_if32of32wf32_nl_pool+0x298>
 80109f8:	689b      	ldr	r3, [r3, #8]
 80109fa:	9322      	str	r3, [sp, #136]	@ 0x88
 80109fc:	2301      	movs	r3, #1
 80109fe:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 8010a02:	932b      	str	r3, [sp, #172]	@ 0xac
 8010a04:	e75f      	b.n	80108c6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8010a06:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010a08:	b10b      	cbz	r3, 8010a0e <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 8010a0a:	689b      	ldr	r3, [r3, #8]
 8010a0c:	9322      	str	r3, [sp, #136]	@ 0x88
 8010a0e:	2301      	movs	r3, #1
 8010a10:	2100      	movs	r1, #0
 8010a12:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 8010a16:	e756      	b.n	80108c6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d90e      	bls.n	8010a3a <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 8010a1c:	4642      	mov	r2, r8
 8010a1e:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 8010a22:	e6d4      	b.n	80107ce <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 8010a24:	2300      	movs	r3, #0
 8010a26:	9340      	str	r3, [sp, #256]	@ 0x100
 8010a28:	e6cf      	b.n	80107ca <forward_conv2d_if32of32wf32_nl_pool+0x66>
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8010a30:	932b      	str	r3, [sp, #172]	@ 0xac
 8010a32:	f8bc 3000 	ldrh.w	r3, [ip]
 8010a36:	9321      	str	r3, [sp, #132]	@ 0x84
 8010a38:	e745      	b.n	80108c6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8010a3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a3e:	deff      	udf	#255	@ 0xff
 8010a40:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8010a44:	deff      	udf	#255	@ 0xff
 8010a46:	bf00      	nop

08010a48 <forward_dense>:
 8010a48:	6982      	ldr	r2, [r0, #24]
 8010a4a:	8813      	ldrh	r3, [r2, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d043      	beq.n	8010ad8 <forward_dense+0x90>
 8010a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a54:	6855      	ldr	r5, [r2, #4]
 8010a56:	b08e      	sub	sp, #56	@ 0x38
 8010a58:	6869      	ldr	r1, [r5, #4]
 8010a5a:	b101      	cbz	r1, 8010a5e <forward_dense+0x16>
 8010a5c:	6809      	ldr	r1, [r1, #0]
 8010a5e:	2b01      	cmp	r3, #1
 8010a60:	d069      	beq.n	8010b36 <forward_dense+0xee>
 8010a62:	692a      	ldr	r2, [r5, #16]
 8010a64:	b102      	cbz	r2, 8010a68 <forward_dense+0x20>
 8010a66:	6812      	ldr	r2, [r2, #0]
 8010a68:	2b02      	cmp	r3, #2
 8010a6a:	d061      	beq.n	8010b30 <forward_dense+0xe8>
 8010a6c:	69ec      	ldr	r4, [r5, #28]
 8010a6e:	2c00      	cmp	r4, #0
 8010a70:	d057      	beq.n	8010b22 <forward_dense+0xda>
 8010a72:	8b2e      	ldrh	r6, [r5, #24]
 8010a74:	6820      	ldr	r0, [r4, #0]
 8010a76:	2e01      	cmp	r6, #1
 8010a78:	d955      	bls.n	8010b26 <forward_dense+0xde>
 8010a7a:	6864      	ldr	r4, [r4, #4]
 8010a7c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8010a80:	2b03      	cmp	r3, #3
 8010a82:	68d0      	ldr	r0, [r2, #12]
 8010a84:	68cf      	ldr	r7, [r1, #12]
 8010a86:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8010a8a:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8010a8e:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8010a92:	f8d9 0000 	ldr.w	r0, [r9]
 8010a96:	fb06 f807 	mul.w	r8, r6, r7
 8010a9a:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8010a9e:	d044      	beq.n	8010b2a <forward_dense+0xe2>
 8010aa0:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8010aa2:	b11d      	cbz	r5, 8010aac <forward_dense+0x64>
 8010aa4:	682d      	ldr	r5, [r5, #0]
 8010aa6:	b10d      	cbz	r5, 8010aac <forward_dense+0x64>
 8010aa8:	69ab      	ldr	r3, [r5, #24]
 8010aaa:	689d      	ldr	r5, [r3, #8]
 8010aac:	6992      	ldr	r2, [r2, #24]
 8010aae:	698b      	ldr	r3, [r1, #24]
 8010ab0:	6890      	ldr	r0, [r2, #8]
 8010ab2:	6899      	ldr	r1, [r3, #8]
 8010ab4:	b10c      	cbz	r4, 8010aba <forward_dense+0x72>
 8010ab6:	69a3      	ldr	r3, [r4, #24]
 8010ab8:	689c      	ldr	r4, [r3, #8]
 8010aba:	4b20      	ldr	r3, [pc, #128]	@ (8010b3c <forward_dense+0xf4>)
 8010abc:	459c      	cmp	ip, r3
 8010abe:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8010ac2:	d023      	beq.n	8010b0c <forward_dense+0xc4>
 8010ac4:	4e1e      	ldr	r6, [pc, #120]	@ (8010b40 <forward_dense+0xf8>)
 8010ac6:	45b4      	cmp	ip, r6
 8010ac8:	d015      	beq.n	8010af6 <forward_dense+0xae>
 8010aca:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8010ace:	459c      	cmp	ip, r3
 8010ad0:	d004      	beq.n	8010adc <forward_dense+0x94>
 8010ad2:	b00e      	add	sp, #56	@ 0x38
 8010ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	deff      	udf	#255	@ 0xff
 8010adc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8010ae0:	a807      	add	r0, sp, #28
 8010ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ae4:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8010ae8:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8010aec:	f001 fb98 	bl	8012220 <forward_lite_dense_if32of32wf32>
 8010af0:	b00e      	add	sp, #56	@ 0x38
 8010af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010af6:	464b      	mov	r3, r9
 8010af8:	9500      	str	r5, [sp, #0]
 8010afa:	e9cd e803 	strd	lr, r8, [sp, #12]
 8010afe:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8010b02:	f001 fceb 	bl	80124dc <forward_lite_dense_if32of32wf32_lut4>
 8010b06:	b00e      	add	sp, #56	@ 0x38
 8010b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b0c:	464b      	mov	r3, r9
 8010b0e:	9500      	str	r5, [sp, #0]
 8010b10:	e9cd e803 	strd	lr, r8, [sp, #12]
 8010b14:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8010b18:	f001 fe0a 	bl	8012730 <forward_lite_dense_if32of32wf32_lut8>
 8010b1c:	b00e      	add	sp, #56	@ 0x38
 8010b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b22:	4620      	mov	r0, r4
 8010b24:	e7aa      	b.n	8010a7c <forward_dense+0x34>
 8010b26:	2400      	movs	r4, #0
 8010b28:	e7a8      	b.n	8010a7c <forward_dense+0x34>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	deff      	udf	#255	@ 0xff
 8010b30:	2300      	movs	r3, #0
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	deff      	udf	#255	@ 0xff
 8010b36:	2300      	movs	r3, #0
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	deff      	udf	#255	@ 0xff
 8010b3c:	01d01040 	.word	0x01d01040
 8010b40:	01e81040 	.word	0x01e81040

08010b44 <forward_relu>:
 8010b44:	6982      	ldr	r2, [r0, #24]
 8010b46:	8813      	ldrh	r3, [r2, #0]
 8010b48:	b323      	cbz	r3, 8010b94 <forward_relu+0x50>
 8010b4a:	6851      	ldr	r1, [r2, #4]
 8010b4c:	684a      	ldr	r2, [r1, #4]
 8010b4e:	b102      	cbz	r2, 8010b52 <forward_relu+0xe>
 8010b50:	6812      	ldr	r2, [r2, #0]
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	f000 8086 	beq.w	8010c64 <forward_relu+0x120>
 8010b58:	b470      	push	{r4, r5, r6}
 8010b5a:	690b      	ldr	r3, [r1, #16]
 8010b5c:	b103      	cbz	r3, 8010b60 <forward_relu+0x1c>
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	69c6      	ldr	r6, [r0, #28]
 8010b62:	b1ce      	cbz	r6, 8010b98 <forward_relu+0x54>
 8010b64:	6871      	ldr	r1, [r6, #4]
 8010b66:	6998      	ldr	r0, [r3, #24]
 8010b68:	2901      	cmp	r1, #1
 8010b6a:	d03f      	beq.n	8010bec <forward_relu+0xa8>
 8010b6c:	6893      	ldr	r3, [r2, #8]
 8010b6e:	6991      	ldr	r1, [r2, #24]
 8010b70:	0a1b      	lsrs	r3, r3, #8
 8010b72:	6880      	ldr	r0, [r0, #8]
 8010b74:	6889      	ldr	r1, [r1, #8]
 8010b76:	d06c      	beq.n	8010c52 <forward_relu+0x10e>
 8010b78:	68d5      	ldr	r5, [r2, #12]
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010b80:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8010b84:	429d      	cmp	r5, r3
 8010b86:	fb04 f202 	mul.w	r2, r4, r2
 8010b8a:	d1f9      	bne.n	8010b80 <forward_relu+0x3c>
 8010b8c:	68b3      	ldr	r3, [r6, #8]
 8010b8e:	bc70      	pop	{r4, r5, r6}
 8010b90:	f000 bd04 	b.w	801159c <forward_lite_nl_relu_generic_if32of32_kernel>
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	deff      	udf	#255	@ 0xff
 8010b98:	6999      	ldr	r1, [r3, #24]
 8010b9a:	6893      	ldr	r3, [r2, #8]
 8010b9c:	6990      	ldr	r0, [r2, #24]
 8010b9e:	0a1b      	lsrs	r3, r3, #8
 8010ba0:	6889      	ldr	r1, [r1, #8]
 8010ba2:	6884      	ldr	r4, [r0, #8]
 8010ba4:	d057      	beq.n	8010c56 <forward_relu+0x112>
 8010ba6:	68d5      	ldr	r5, [r2, #12]
 8010ba8:	2201      	movs	r2, #1
 8010baa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010bae:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8010bb2:	429d      	cmp	r5, r3
 8010bb4:	fb00 f202 	mul.w	r2, r0, r2
 8010bb8:	d1f9      	bne.n	8010bae <forward_relu+0x6a>
 8010bba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010bbe:	4413      	add	r3, r2
 8010bc0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010bc4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010bc8:	4294      	cmp	r4, r2
 8010bca:	d80d      	bhi.n	8010be8 <forward_relu+0xa4>
 8010bcc:	3204      	adds	r2, #4
 8010bce:	3104      	adds	r1, #4
 8010bd0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8010c6c <forward_relu+0x128>
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	ed72 7a01 	vldmdb	r2!, {s15}
 8010bda:	3b08      	subs	r3, #8
 8010bdc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010be0:	ed61 7a01 	vstmdb	r1!, {s15}
 8010be4:	429c      	cmp	r4, r3
 8010be6:	d9f5      	bls.n	8010bd4 <forward_relu+0x90>
 8010be8:	bc70      	pop	{r4, r5, r6}
 8010bea:	4770      	bx	lr
 8010bec:	6993      	ldr	r3, [r2, #24]
 8010bee:	6880      	ldr	r0, [r0, #8]
 8010bf0:	689c      	ldr	r4, [r3, #8]
 8010bf2:	6893      	ldr	r3, [r2, #8]
 8010bf4:	0a1b      	lsrs	r3, r3, #8
 8010bf6:	d030      	beq.n	8010c5a <forward_relu+0x116>
 8010bf8:	68d5      	ldr	r5, [r2, #12]
 8010bfa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010bfe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010c02:	429d      	cmp	r5, r3
 8010c04:	fb02 f101 	mul.w	r1, r2, r1
 8010c08:	d1f9      	bne.n	8010bfe <forward_relu+0xba>
 8010c0a:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8010c0e:	68b3      	ldr	r3, [r6, #8]
 8010c10:	440a      	add	r2, r1
 8010c12:	ed93 7a00 	vldr	s14, [r3]
 8010c16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c1a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8010c1e:	429c      	cmp	r4, r3
 8010c20:	d8e2      	bhi.n	8010be8 <forward_relu+0xa4>
 8010c22:	1d02      	adds	r2, r0, #4
 8010c24:	3304      	adds	r3, #4
 8010c26:	2000      	movs	r0, #0
 8010c28:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010c2c:	1f19      	subs	r1, r3, #4
 8010c2e:	3b08      	subs	r3, #8
 8010c30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c38:	d405      	bmi.n	8010c46 <forward_relu+0x102>
 8010c3a:	429c      	cmp	r4, r3
 8010c3c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8010c40:	d8d2      	bhi.n	8010be8 <forward_relu+0xa4>
 8010c42:	460b      	mov	r3, r1
 8010c44:	e7f0      	b.n	8010c28 <forward_relu+0xe4>
 8010c46:	429c      	cmp	r4, r3
 8010c48:	ed62 7a01 	vstmdb	r2!, {s15}
 8010c4c:	d8cc      	bhi.n	8010be8 <forward_relu+0xa4>
 8010c4e:	460b      	mov	r3, r1
 8010c50:	e7ea      	b.n	8010c28 <forward_relu+0xe4>
 8010c52:	2201      	movs	r2, #1
 8010c54:	e79a      	b.n	8010b8c <forward_relu+0x48>
 8010c56:	4622      	mov	r2, r4
 8010c58:	e7b8      	b.n	8010bcc <forward_relu+0x88>
 8010c5a:	68b2      	ldr	r2, [r6, #8]
 8010c5c:	4623      	mov	r3, r4
 8010c5e:	ed92 7a00 	vldr	s14, [r2]
 8010c62:	e7de      	b.n	8010c22 <forward_relu+0xde>
 8010c64:	2300      	movs	r3, #0
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	deff      	udf	#255	@ 0xff
 8010c6a:	bf00      	nop
 8010c6c:	00000000 	.word	0x00000000

08010c70 <forward_upsample_bilinear>:
 8010c70:	6983      	ldr	r3, [r0, #24]
 8010c72:	881a      	ldrh	r2, [r3, #0]
 8010c74:	2a00      	cmp	r2, #0
 8010c76:	d04e      	beq.n	8010d16 <forward_upsample_bilinear+0xa6>
 8010c78:	6859      	ldr	r1, [r3, #4]
 8010c7a:	4684      	mov	ip, r0
 8010c7c:	684b      	ldr	r3, [r1, #4]
 8010c7e:	b103      	cbz	r3, 8010c82 <forward_upsample_bilinear+0x12>
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	2a01      	cmp	r2, #1
 8010c84:	d073      	beq.n	8010d6e <forward_upsample_bilinear+0xfe>
 8010c86:	690a      	ldr	r2, [r1, #16]
 8010c88:	2a00      	cmp	r2, #0
 8010c8a:	d073      	beq.n	8010d74 <forward_upsample_bilinear+0x104>
 8010c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c90:	699c      	ldr	r4, [r3, #24]
 8010c92:	b084      	sub	sp, #16
 8010c94:	68d8      	ldr	r0, [r3, #12]
 8010c96:	6821      	ldr	r1, [r4, #0]
 8010c98:	6815      	ldr	r5, [r2, #0]
 8010c9a:	f8dc 3020 	ldr.w	r3, [ip, #32]
 8010c9e:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 8010ca2:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8010d84 <forward_upsample_bilinear+0x114>
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	68ee      	ldr	r6, [r5, #12]
 8010caa:	4541      	cmp	r1, r8
 8010cac:	edd3 0a00 	vldr	s1, [r3]
 8010cb0:	ed93 0a01 	vldr	s0, [r3, #4]
 8010cb4:	6882      	ldr	r2, [r0, #8]
 8010cb6:	68c3      	ldr	r3, [r0, #12]
 8010cb8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8010cbc:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 8010cc0:	d047      	beq.n	8010d52 <forward_upsample_bilinear+0xe2>
 8010cc2:	dd13      	ble.n	8010cec <forward_upsample_bilinear+0x7c>
 8010cc4:	482c      	ldr	r0, [pc, #176]	@ (8010d78 <forward_upsample_bilinear+0x108>)
 8010cc6:	4281      	cmp	r1, r0
 8010cc8:	d035      	beq.n	8010d36 <forward_upsample_bilinear+0xc6>
 8010cca:	482c      	ldr	r0, [pc, #176]	@ (8010d7c <forward_upsample_bilinear+0x10c>)
 8010ccc:	4281      	cmp	r1, r0
 8010cce:	d10a      	bne.n	8010ce6 <forward_upsample_bilinear+0x76>
 8010cd0:	69a9      	ldr	r1, [r5, #24]
 8010cd2:	68a0      	ldr	r0, [r4, #8]
 8010cd4:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010cd8:	6889      	ldr	r1, [r1, #8]
 8010cda:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010cde:	e9cd 6700 	strd	r6, r7, [sp]
 8010ce2:	f000 fed9 	bl	8011a98 <forward_lite_upsample_bilinear_if32of32>
 8010ce6:	b004      	add	sp, #16
 8010ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cec:	4824      	ldr	r0, [pc, #144]	@ (8010d80 <forward_upsample_bilinear+0x110>)
 8010cee:	4281      	cmp	r1, r0
 8010cf0:	d013      	beq.n	8010d1a <forward_upsample_bilinear+0xaa>
 8010cf2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8010cf6:	4281      	cmp	r1, r0
 8010cf8:	d1f5      	bne.n	8010ce6 <forward_upsample_bilinear+0x76>
 8010cfa:	69a9      	ldr	r1, [r5, #24]
 8010cfc:	68a0      	ldr	r0, [r4, #8]
 8010cfe:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010d02:	6889      	ldr	r1, [r1, #8]
 8010d04:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010d08:	e9cd 6700 	strd	r6, r7, [sp]
 8010d0c:	f001 f9c8 	bl	80120a0 <forward_lite_upsample_bilinear_iu16ou16>
 8010d10:	b004      	add	sp, #16
 8010d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d16:	6853      	ldr	r3, [r2, #4]
 8010d18:	deff      	udf	#255	@ 0xff
 8010d1a:	69a9      	ldr	r1, [r5, #24]
 8010d1c:	68a0      	ldr	r0, [r4, #8]
 8010d1e:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010d22:	6889      	ldr	r1, [r1, #8]
 8010d24:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010d28:	e9cd 6700 	strd	r6, r7, [sp]
 8010d2c:	f001 f836 	bl	8011d9c <forward_lite_upsample_bilinear_iu8ou8>
 8010d30:	b004      	add	sp, #16
 8010d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d36:	69a9      	ldr	r1, [r5, #24]
 8010d38:	68a0      	ldr	r0, [r4, #8]
 8010d3a:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010d3e:	6889      	ldr	r1, [r1, #8]
 8010d40:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010d44:	e9cd 6700 	strd	r6, r7, [sp]
 8010d48:	f001 f8ea 	bl	8011f20 <forward_lite_upsample_bilinear_is16os16>
 8010d4c:	b004      	add	sp, #16
 8010d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d52:	69a9      	ldr	r1, [r5, #24]
 8010d54:	68a0      	ldr	r0, [r4, #8]
 8010d56:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010d5a:	6889      	ldr	r1, [r1, #8]
 8010d5c:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010d60:	e9cd 6700 	strd	r6, r7, [sp]
 8010d64:	f000 ff58 	bl	8011c18 <forward_lite_upsample_bilinear_is8os8>
 8010d68:	b004      	add	sp, #16
 8010d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d6e:	2300      	movs	r3, #0
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	deff      	udf	#255	@ 0xff
 8010d74:	68d3      	ldr	r3, [r2, #12]
 8010d76:	deff      	udf	#255	@ 0xff
 8010d78:	00840840 	.word	0x00840840
 8010d7c:	01821040 	.word	0x01821040
 8010d80:	00040440 	.word	0x00040440
 8010d84:	00840440 	.word	0x00840440

08010d88 <forward_lite_conv2d_if32of32wf32_pool>:
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	ed2d 8b0e 	vpush	{d8-d14}
 8010d90:	b0c9      	sub	sp, #292	@ 0x124
 8010d92:	4696      	mov	lr, r2
 8010d94:	4680      	mov	r8, r0
 8010d96:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 8010d9a:	9323      	str	r3, [sp, #140]	@ 0x8c
 8010d9c:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 8010da0:	9138      	str	r1, [sp, #224]	@ 0xe0
 8010da2:	9239      	str	r2, [sp, #228]	@ 0xe4
 8010da4:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 8010da8:	fb05 f203 	mul.w	r2, r5, r3
 8010dac:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 8010db0:	9129      	str	r1, [sp, #164]	@ 0xa4
 8010db2:	460e      	mov	r6, r1
 8010db4:	fb01 f202 	mul.w	r2, r1, r2
 8010db8:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 8010dbc:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 8010dc0:	9142      	str	r1, [sp, #264]	@ 0x108
 8010dc2:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 8010dc6:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 8010dca:	932d      	str	r3, [sp, #180]	@ 0xb4
 8010dcc:	942a      	str	r4, [sp, #168]	@ 0xa8
 8010dce:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 8010dd2:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 8010dd6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010dd8:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8010ddc:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 8010de0:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 8010de4:	9041      	str	r0, [sp, #260]	@ 0x104
 8010de6:	933a      	str	r3, [sp, #232]	@ 0xe8
 8010de8:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 8010dec:	912b      	str	r1, [sp, #172]	@ 0xac
 8010dee:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 8010df2:	4243      	negs	r3, r0
 8010df4:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010df6:	9418      	str	r4, [sp, #96]	@ 0x60
 8010df8:	9714      	str	r7, [sp, #80]	@ 0x50
 8010dfa:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 8010dfe:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 8010e02:	931e      	str	r3, [sp, #120]	@ 0x78
 8010e04:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 8010e08:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 8010e0c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8010e0e:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 8010e12:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 8010e1c:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 8010e20:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 8010e24:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 8010e28:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 8010e2c:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 8010e30:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 8010e34:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8010e38:	f340 80a9 	ble.w	8010f8e <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8010e3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010e3e:	3901      	subs	r1, #1
 8010e40:	9020      	str	r0, [sp, #128]	@ 0x80
 8010e42:	fb03 f309 	mul.w	r3, r3, r9
 8010e46:	fa1f fc81 	uxth.w	ip, r1
 8010e4a:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8010e4c:	fb04 f303 	mul.w	r3, r4, r3
 8010e50:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 8010f98 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 8010e54:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 8010e58:	0099      	lsls	r1, r3, #2
 8010e5a:	9124      	str	r1, [sp, #144]	@ 0x90
 8010e5c:	4631      	mov	r1, r6
 8010e5e:	b2b6      	uxth	r6, r6
 8010e60:	fb00 f301 	mul.w	r3, r0, r1
 8010e64:	9636      	str	r6, [sp, #216]	@ 0xd8
 8010e66:	00a6      	lsls	r6, r4, #2
 8010e68:	fb05 f303 	mul.w	r3, r5, r3
 8010e6c:	fb05 f501 	mul.w	r5, r5, r1
 8010e70:	0098      	lsls	r0, r3, #2
 8010e72:	9616      	str	r6, [sp, #88]	@ 0x58
 8010e74:	953d      	str	r5, [sp, #244]	@ 0xf4
 8010e76:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8010e7a:	903e      	str	r0, [sp, #248]	@ 0xf8
 8010e7c:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8010e7e:	953b      	str	r5, [sp, #236]	@ 0xec
 8010e80:	1e43      	subs	r3, r0, #1
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	3301      	adds	r3, #1
 8010e86:	0098      	lsls	r0, r3, #2
 8010e88:	9035      	str	r0, [sp, #212]	@ 0xd4
 8010e8a:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8010e8c:	fb00 f307 	mul.w	r3, r0, r7
 8010e90:	fb04 f303 	mul.w	r3, r4, r3
 8010e94:	0098      	lsls	r0, r3, #2
 8010e96:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8010e98:	9034      	str	r0, [sp, #208]	@ 0xd0
 8010e9a:	0090      	lsls	r0, r2, #2
 8010e9c:	fb01 f303 	mul.w	r3, r1, r3
 8010ea0:	0089      	lsls	r1, r1, #2
 8010ea2:	9032      	str	r0, [sp, #200]	@ 0xc8
 8010ea4:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8010ea6:	9112      	str	r1, [sp, #72]	@ 0x48
 8010ea8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010eac:	0098      	lsls	r0, r3, #2
 8010eae:	fb07 f306 	mul.w	r3, r7, r6
 8010eb2:	921f      	str	r2, [sp, #124]	@ 0x7c
 8010eb4:	903c      	str	r0, [sp, #240]	@ 0xf0
 8010eb6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8010eb8:	fb00 8703 	mla	r7, r0, r3, r8
 8010ebc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8010ebe:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8010ec0:	9722      	str	r7, [sp, #136]	@ 0x88
 8010ec2:	425f      	negs	r7, r3
 8010ec4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010ec6:	4241      	negs	r1, r0
 8010ec8:	9731      	str	r7, [sp, #196]	@ 0xc4
 8010eca:	fb03 f304 	mul.w	r3, r3, r4
 8010ece:	9125      	str	r1, [sp, #148]	@ 0x94
 8010ed0:	009c      	lsls	r4, r3, #2
 8010ed2:	fb06 f107 	mul.w	r1, r6, r7
 8010ed6:	9417      	str	r4, [sp, #92]	@ 0x5c
 8010ed8:	2400      	movs	r4, #0
 8010eda:	9137      	str	r1, [sp, #220]	@ 0xdc
 8010edc:	9960      	ldr	r1, [sp, #384]	@ 0x180
 8010ede:	9427      	str	r4, [sp, #156]	@ 0x9c
 8010ee0:	911b      	str	r1, [sp, #108]	@ 0x6c
 8010ee2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010ee4:	9428      	str	r4, [sp, #160]	@ 0xa0
 8010ee6:	9333      	str	r3, [sp, #204]	@ 0xcc
 8010ee8:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 8010eea:	932f      	str	r3, [sp, #188]	@ 0xbc
 8010eec:	1e53      	subs	r3, r2, #1
 8010eee:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010ef0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	b21b      	sxth	r3, r3
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	dc68      	bgt.n	8010fcc <forward_lite_conv2d_if32of32wf32_pool+0x244>
 8010efa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010efc:	041b      	lsls	r3, r3, #16
 8010efe:	f100 81d5 	bmi.w	80112ac <forward_lite_conv2d_if32of32wf32_pool+0x524>
 8010f02:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8010f04:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8010f06:	42b2      	cmp	r2, r6
 8010f08:	dc48      	bgt.n	8010f9c <forward_lite_conv2d_if32of32wf32_pool+0x214>
 8010f0a:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8010f0c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010f0e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8010f10:	3301      	adds	r3, #1
 8010f12:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8010f14:	4420      	add	r0, r4
 8010f16:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8010f18:	b21d      	sxth	r5, r3
 8010f1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010f1c:	901e      	str	r0, [sp, #120]	@ 0x78
 8010f1e:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8010f20:	1b1b      	subs	r3, r3, r4
 8010f22:	9108      	str	r1, [sp, #32]
 8010f24:	4401      	add	r1, r0
 8010f26:	9320      	str	r3, [sp, #128]	@ 0x80
 8010f28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010f2a:	9138      	str	r1, [sp, #224]	@ 0xe0
 8010f2c:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8010f2e:	9528      	str	r5, [sp, #160]	@ 0xa0
 8010f30:	440b      	add	r3, r1
 8010f32:	9322      	str	r3, [sp, #136]	@ 0x88
 8010f34:	b293      	uxth	r3, r2
 8010f36:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8010f38:	9301      	str	r3, [sp, #4]
 8010f3a:	1a9b      	subs	r3, r3, r2
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	b2bb      	uxth	r3, r7
 8010f40:	1af1      	subs	r1, r6, r3
 8010f42:	9305      	str	r3, [sp, #20]
 8010f44:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 8010f46:	b20b      	sxth	r3, r1
 8010f48:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8010f4c:	931d      	str	r3, [sp, #116]	@ 0x74
 8010f4e:	b2b3      	uxth	r3, r6
 8010f50:	9303      	str	r3, [sp, #12]
 8010f52:	2301      	movs	r3, #1
 8010f54:	9307      	str	r3, [sp, #28]
 8010f56:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 8010f5a:	9306      	str	r3, [sp, #24]
 8010f5c:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 8010f60:	9304      	str	r3, [sp, #16]
 8010f62:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 8010f66:	9302      	str	r3, [sp, #8]
 8010f68:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 8010f6c:	9300      	str	r3, [sp, #0]
 8010f6e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8010f70:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8010f72:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 8010f74:	47a0      	blx	r4
 8010f76:	1bf3      	subs	r3, r6, r7
 8010f78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010f7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f7e:	3a01      	subs	r2, #1
 8010f80:	b21b      	sxth	r3, r3
 8010f82:	b292      	uxth	r2, r2
 8010f84:	9333      	str	r3, [sp, #204]	@ 0xcc
 8010f86:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8010f88:	9221      	str	r2, [sp, #132]	@ 0x84
 8010f8a:	42ab      	cmp	r3, r5
 8010f8c:	dcb0      	bgt.n	8010ef0 <forward_lite_conv2d_if32of32wf32_pool+0x168>
 8010f8e:	b049      	add	sp, #292	@ 0x124
 8010f90:	ecbd 8b0e 	vpop	{d8-d14}
 8010f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f98:	00000000 	.word	0x00000000
 8010f9c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8010f9e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010fa0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010fa2:	440a      	add	r2, r1
 8010fa4:	3b01      	subs	r3, #1
 8010fa6:	921e      	str	r2, [sp, #120]	@ 0x78
 8010fa8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	1a52      	subs	r2, r2, r1
 8010fae:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8010fb0:	9321      	str	r3, [sp, #132]	@ 0x84
 8010fb2:	9220      	str	r2, [sp, #128]	@ 0x80
 8010fb4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010fb6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8010fb8:	440a      	add	r2, r1
 8010fba:	9222      	str	r2, [sp, #136]	@ 0x88
 8010fbc:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	dde5      	ble.n	8010f8e <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8010fc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	b21b      	sxth	r3, r3
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	dd96      	ble.n	8010efa <forward_lite_conv2d_if32of32wf32_pool+0x172>
 8010fcc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	f2c0 82d1 	blt.w	8011576 <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 8010fd4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010fd6:	931c      	str	r3, [sp, #112]	@ 0x70
 8010fd8:	2300      	movs	r3, #0
 8010fda:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8010fdc:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8010fde:	440a      	add	r2, r1
 8010fe0:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8010fe2:	428a      	cmp	r2, r1
 8010fe4:	bfd4      	ite	le
 8010fe6:	ebc3 0b02 	rsble	fp, r3, r2
 8010fea:	ebc3 0b01 	rsbgt	fp, r3, r1
 8010fee:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 8010ff0:	2a00      	cmp	r2, #0
 8010ff2:	f000 819d 	beq.w	8011330 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8010ff6:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8010ff8:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8010ffc:	f0c0 8198 	bcc.w	8011330 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8011000:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011002:	2a00      	cmp	r2, #0
 8011004:	f340 8115 	ble.w	8011232 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8011008:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801100a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 801100c:	fb02 f303 	mul.w	r3, r2, r3
 8011010:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8011012:	9319      	str	r3, [sp, #100]	@ 0x64
 8011014:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011016:	189a      	adds	r2, r3, r2
 8011018:	9326      	str	r3, [sp, #152]	@ 0x98
 801101a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801101c:	923f      	str	r2, [sp, #252]	@ 0xfc
 801101e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011020:	9330      	str	r3, [sp, #192]	@ 0xc0
 8011022:	440a      	add	r2, r1
 8011024:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011026:	9240      	str	r2, [sp, #256]	@ 0x100
 8011028:	931a      	str	r3, [sp, #104]	@ 0x68
 801102a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801102c:	9961      	ldr	r1, [sp, #388]	@ 0x184
 801102e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8011030:	f001 fe4a 	bl	8012cc8 <st_int8_copy>
 8011034:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011036:	2b00      	cmp	r3, #0
 8011038:	f000 8135 	beq.w	80112a6 <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 801103c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801103e:	ecf3 1a01 	vldmia	r3!, {s3}
 8011042:	9330      	str	r3, [sp, #192]	@ 0xc0
 8011044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011046:	2b00      	cmp	r3, #0
 8011048:	f000 80e8 	beq.w	801121c <forward_lite_conv2d_if32of32wf32_pool+0x494>
 801104c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801104e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011050:	189a      	adds	r2, r3, r2
 8011052:	920c      	str	r2, [sp, #48]	@ 0x30
 8011054:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8011056:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 801105a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801105c:	9310      	str	r3, [sp, #64]	@ 0x40
 801105e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8011060:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011062:	2300      	movs	r3, #0
 8011064:	9311      	str	r3, [sp, #68]	@ 0x44
 8011066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011068:	2b00      	cmp	r3, #0
 801106a:	f2c0 8113 	blt.w	8011294 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 801106e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011070:	2600      	movs	r6, #0
 8011072:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011074:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8011076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011078:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 801107a:	4298      	cmp	r0, r3
 801107c:	bf94      	ite	ls
 801107e:	ebc6 0600 	rsbls	r6, r6, r0
 8011082:	ebc6 0603 	rsbhi	r6, r6, r3
 8011086:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011088:	f1bb 0f00 	cmp.w	fp, #0
 801108c:	eba0 0906 	sub.w	r9, r0, r6
 8011090:	fb02 4203 	mla	r2, r2, r3, r4
 8011094:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8011096:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8011098:	eba4 0a06 	sub.w	sl, r4, r6
 801109c:	fb00 f606 	mul.w	r6, r0, r6
 80110a0:	f340 80fe 	ble.w	80112a0 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 80110a4:	f026 070f 	bic.w	r7, r6, #15
 80110a8:	eeb0 7a61 	vmov.f32	s14, s3
 80110ac:	fb0a fa03 	mul.w	sl, sl, r3
 80110b0:	f04f 0c00 	mov.w	ip, #0
 80110b4:	f107 38ff 	add.w	r8, r7, #4294967295
 80110b8:	fb09 f903 	mul.w	r9, r9, r3
 80110bc:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80110c0:	f108 0801 	add.w	r8, r8, #1
 80110c4:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80110c8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80110cc:	2f00      	cmp	r7, #0
 80110ce:	f340 80df 	ble.w	8011290 <forward_lite_conv2d_if32of32wf32_pool+0x508>
 80110d2:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 80110d6:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80110da:	2400      	movs	r4, #0
 80110dc:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 80110e0:	3410      	adds	r4, #16
 80110e2:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 80110e6:	3340      	adds	r3, #64	@ 0x40
 80110e8:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 80110ec:	42bc      	cmp	r4, r7
 80110ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80110f2:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 80110f6:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 80110fa:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 80110fe:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8011102:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011106:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 801110a:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 801110e:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 8011112:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 8011116:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 801111a:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 801111e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011122:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 8011126:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 801112a:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 801112e:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 8011132:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 8011136:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 801113a:	eeee 7a26 	vfma.f32	s15, s28, s13
 801113e:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 8011142:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 8011146:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 801114a:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 801114e:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 8011152:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8011156:	eeed 7a8d 	vfma.f32	s15, s27, s26
 801115a:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 801115e:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8011162:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8011166:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 801116a:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 801116e:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8011172:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8011176:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 801117a:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 801117e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011182:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011186:	eee9 7a89 	vfma.f32	s15, s19, s18
 801118a:	eee8 7a80 	vfma.f32	s15, s17, s0
 801118e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8011192:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011196:	eee3 7a23 	vfma.f32	s15, s6, s7
 801119a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801119e:	eee5 7a25 	vfma.f32	s15, s10, s11
 80111a2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80111a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80111aa:	db97      	blt.n	80110dc <forward_lite_conv2d_if32of32wf32_pool+0x354>
 80111ac:	4471      	add	r1, lr
 80111ae:	4472      	add	r2, lr
 80111b0:	4645      	mov	r5, r8
 80111b2:	42ae      	cmp	r6, r5
 80111b4:	dd10      	ble.n	80111d8 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 80111b6:	462b      	mov	r3, r5
 80111b8:	460c      	mov	r4, r1
 80111ba:	4610      	mov	r0, r2
 80111bc:	3301      	adds	r3, #1
 80111be:	ecf0 6a01 	vldmia	r0!, {s13}
 80111c2:	ecf4 7a01 	vldmia	r4!, {s15}
 80111c6:	429e      	cmp	r6, r3
 80111c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80111cc:	d1f6      	bne.n	80111bc <forward_lite_conv2d_if32of32wf32_pool+0x434>
 80111ce:	1b75      	subs	r5, r6, r5
 80111d0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80111d4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80111d8:	f10c 0c01 	add.w	ip, ip, #1
 80111dc:	4451      	add	r1, sl
 80111de:	444a      	add	r2, r9
 80111e0:	45e3      	cmp	fp, ip
 80111e2:	f47f af73 	bne.w	80110cc <forward_lite_conv2d_if32of32wf32_pool+0x344>
 80111e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80111e8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80111ea:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80111ec:	4410      	add	r0, r2
 80111ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80111f0:	ed81 7a00 	vstr	s14, [r1]
 80111f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80111f6:	3301      	adds	r3, #1
 80111f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80111fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80111fc:	4401      	add	r1, r0
 80111fe:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011200:	9110      	str	r1, [sp, #64]	@ 0x40
 8011202:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011204:	1a89      	subs	r1, r1, r2
 8011206:	910e      	str	r1, [sp, #56]	@ 0x38
 8011208:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801120a:	4401      	add	r1, r0
 801120c:	910d      	str	r1, [sp, #52]	@ 0x34
 801120e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011210:	1a8a      	subs	r2, r1, r2
 8011212:	920c      	str	r2, [sp, #48]	@ 0x30
 8011214:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011216:	429a      	cmp	r2, r3
 8011218:	f47f af25 	bne.w	8011066 <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 801121c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801121e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8011220:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011222:	440a      	add	r2, r1
 8011224:	3304      	adds	r3, #4
 8011226:	921a      	str	r2, [sp, #104]	@ 0x68
 8011228:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801122a:	9326      	str	r3, [sp, #152]	@ 0x98
 801122c:	4293      	cmp	r3, r2
 801122e:	f47f aefc 	bne.w	801102a <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 8011232:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011234:	2b00      	cmp	r3, #0
 8011236:	dd26      	ble.n	8011286 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 8011238:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 801123a:	2b00      	cmp	r3, #0
 801123c:	f000 819f 	beq.w	801157e <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 8011240:	4699      	mov	r9, r3
 8011242:	2400      	movs	r4, #0
 8011244:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 8011246:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 801124a:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 801124c:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 8011250:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 8011254:	462b      	mov	r3, r5
 8011256:	4455      	add	r5, sl
 8011258:	463a      	mov	r2, r7
 801125a:	4641      	mov	r1, r8
 801125c:	4640      	mov	r0, r8
 801125e:	3401      	adds	r4, #1
 8011260:	47c8      	blx	r9
 8011262:	1bab      	subs	r3, r5, r6
 8011264:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011266:	b224      	sxth	r4, r4
 8011268:	455b      	cmp	r3, fp
 801126a:	bfa8      	it	ge
 801126c:	4635      	movge	r5, r6
 801126e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011270:	4490      	add	r8, r2
 8011272:	4543      	cmp	r3, r8
 8011274:	d801      	bhi.n	801127a <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 8011276:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8011278:	4498      	add	r8, r3
 801127a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801127c:	42a3      	cmp	r3, r4
 801127e:	d1e9      	bne.n	8011254 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 8011280:	952f      	str	r5, [sp, #188]	@ 0xbc
 8011282:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 8011286:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011288:	3301      	adds	r3, #1
 801128a:	b21b      	sxth	r3, r3
 801128c:	931d      	str	r3, [sp, #116]	@ 0x74
 801128e:	e638      	b.n	8010f02 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8011290:	2500      	movs	r5, #0
 8011292:	e78e      	b.n	80111b2 <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 8011294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011296:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011298:	4616      	mov	r6, r2
 801129a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801129c:	189a      	adds	r2, r3, r2
 801129e:	e6e9      	b.n	8011074 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 80112a0:	eeb0 7a61 	vmov.f32	s14, s3
 80112a4:	e79f      	b.n	80111e6 <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 80112a6:	eef0 1a48 	vmov.f32	s3, s16
 80112aa:	e6cb      	b.n	8011044 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 80112ac:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 80112ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80112b0:	fb02 f303 	mul.w	r3, r2, r3
 80112b4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80112b6:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 80112ba:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 80112bc:	429a      	cmp	r2, r3
 80112be:	d901      	bls.n	80112c4 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 80112c0:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80112c2:	4413      	add	r3, r2
 80112c4:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d217      	bcs.n	80112fa <forward_lite_conv2d_if32of32wf32_pool+0x572>
 80112ca:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80112cc:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80112ce:	428a      	cmp	r2, r1
 80112d0:	d013      	beq.n	80112fa <forward_lite_conv2d_if32of32wf32_pool+0x572>
 80112d2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d910      	bls.n	80112fa <forward_lite_conv2d_if32of32wf32_pool+0x572>
 80112d8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80112da:	461a      	mov	r2, r3
 80112dc:	f852 0b04 	ldr.w	r0, [r2], #4
 80112e0:	f841 0b04 	str.w	r0, [r1], #4
 80112e4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80112e6:	4290      	cmp	r0, r2
 80112e8:	d8f8      	bhi.n	80112dc <forward_lite_conv2d_if32of32wf32_pool+0x554>
 80112ea:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80112f0:	f023 0303 	bic.w	r3, r3, #3
 80112f4:	3304      	adds	r3, #4
 80112f6:	441a      	add	r2, r3
 80112f8:	921b      	str	r2, [sp, #108]	@ 0x6c
 80112fa:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80112fc:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80112fe:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8011302:	440a      	add	r2, r1
 8011304:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8011306:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011308:	1ad2      	subs	r2, r2, r3
 801130a:	4401      	add	r1, r0
 801130c:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 801130e:	b212      	sxth	r2, r2
 8011310:	4403      	add	r3, r0
 8011312:	911b      	str	r1, [sp, #108]	@ 0x6c
 8011314:	9227      	str	r2, [sp, #156]	@ 0x9c
 8011316:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8011318:	b21b      	sxth	r3, r3
 801131a:	428a      	cmp	r2, r1
 801131c:	931d      	str	r3, [sp, #116]	@ 0x74
 801131e:	460b      	mov	r3, r1
 8011320:	f63f adef 	bhi.w	8010f02 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8011324:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8011326:	440b      	add	r3, r1
 8011328:	429a      	cmp	r2, r3
 801132a:	d9fc      	bls.n	8011326 <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 801132c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801132e:	e5e8      	b.n	8010f02 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8011330:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011332:	2a00      	cmp	r2, #0
 8011334:	f77f af7d 	ble.w	8011232 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8011338:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801133a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 801133c:	fb02 f303 	mul.w	r3, r2, r3
 8011340:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8011342:	931a      	str	r3, [sp, #104]	@ 0x68
 8011344:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011346:	189a      	adds	r2, r3, r2
 8011348:	9326      	str	r3, [sp, #152]	@ 0x98
 801134a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801134c:	923f      	str	r2, [sp, #252]	@ 0xfc
 801134e:	9330      	str	r3, [sp, #192]	@ 0xc0
 8011350:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011352:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011354:	440a      	add	r2, r1
 8011356:	9319      	str	r3, [sp, #100]	@ 0x64
 8011358:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801135a:	9240      	str	r2, [sp, #256]	@ 0x100
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 80fc 	beq.w	801155a <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 8011362:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8011364:	ecf3 1a01 	vldmia	r3!, {s3}
 8011368:	9330      	str	r3, [sp, #192]	@ 0xc0
 801136a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801136c:	2b00      	cmp	r3, #0
 801136e:	f000 80e5 	beq.w	801153c <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 8011372:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8011374:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011376:	189a      	adds	r2, r3, r2
 8011378:	920c      	str	r2, [sp, #48]	@ 0x30
 801137a:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801137c:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8011380:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011382:	9310      	str	r3, [sp, #64]	@ 0x40
 8011384:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8011386:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011388:	2300      	movs	r3, #0
 801138a:	9311      	str	r3, [sp, #68]	@ 0x44
 801138c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801138e:	2b00      	cmp	r3, #0
 8011390:	f2c0 80e8 	blt.w	8011564 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 8011394:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011396:	2000      	movs	r0, #0
 8011398:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801139a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801139c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801139e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80113a0:	428c      	cmp	r4, r1
 80113a2:	bf94      	ite	ls
 80113a4:	ebc0 0004 	rsbls	r0, r0, r4
 80113a8:	ebc0 0001 	rsbhi	r0, r0, r1
 80113ac:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80113ae:	f1bb 0f00 	cmp.w	fp, #0
 80113b2:	eba4 0900 	sub.w	r9, r4, r0
 80113b6:	fb03 5301 	mla	r3, r3, r1, r5
 80113ba:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80113bc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80113be:	eba5 0a00 	sub.w	sl, r5, r0
 80113c2:	fb04 f000 	mul.w	r0, r4, r0
 80113c6:	f340 80d3 	ble.w	8011570 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 80113ca:	f020 080f 	bic.w	r8, r0, #15
 80113ce:	eeb0 7a61 	vmov.f32	s14, s3
 80113d2:	fb0a fa01 	mul.w	sl, sl, r1
 80113d6:	2400      	movs	r4, #0
 80113d8:	f108 37ff 	add.w	r7, r8, #4294967295
 80113dc:	fb09 f901 	mul.w	r9, r9, r1
 80113e0:	093f      	lsrs	r7, r7, #4
 80113e2:	3701      	adds	r7, #1
 80113e4:	01be      	lsls	r6, r7, #6
 80113e6:	013f      	lsls	r7, r7, #4
 80113e8:	f1b8 0f00 	cmp.w	r8, #0
 80113ec:	f340 80b8 	ble.w	8011560 <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 80113f0:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 80113f4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80113f8:	f04f 0c00 	mov.w	ip, #0
 80113fc:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 8011400:	f10c 0c10 	add.w	ip, ip, #16
 8011404:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 8011408:	3140      	adds	r1, #64	@ 0x40
 801140a:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 801140e:	45c4      	cmp	ip, r8
 8011410:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011414:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 8011418:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 801141c:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8011420:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 8011424:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011428:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 801142c:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 8011430:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 8011434:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 8011438:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 801143c:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 8011440:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011444:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 8011448:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 801144c:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 8011450:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 8011454:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 8011458:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 801145c:	eeee 7a26 	vfma.f32	s15, s28, s13
 8011460:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 8011464:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8011468:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 801146c:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8011470:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 8011474:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 8011478:	eeed 7a8d 	vfma.f32	s15, s27, s26
 801147c:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 8011480:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8011484:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 8011488:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 801148c:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 8011490:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8011494:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8011498:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 801149c:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 80114a0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80114a4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80114a8:	eee9 7a89 	vfma.f32	s15, s19, s18
 80114ac:	eee8 7a80 	vfma.f32	s15, s17, s0
 80114b0:	eee0 7a81 	vfma.f32	s15, s1, s2
 80114b4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80114b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80114bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80114c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80114c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80114c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114cc:	db96      	blt.n	80113fc <forward_lite_conv2d_if32of32wf32_pool+0x674>
 80114ce:	4432      	add	r2, r6
 80114d0:	4433      	add	r3, r6
 80114d2:	4639      	mov	r1, r7
 80114d4:	4288      	cmp	r0, r1
 80114d6:	dd10      	ble.n	80114fa <forward_lite_conv2d_if32of32wf32_pool+0x772>
 80114d8:	460d      	mov	r5, r1
 80114da:	4696      	mov	lr, r2
 80114dc:	469c      	mov	ip, r3
 80114de:	3501      	adds	r5, #1
 80114e0:	ecfc 6a01 	vldmia	ip!, {s13}
 80114e4:	ecfe 7a01 	vldmia	lr!, {s15}
 80114e8:	42a8      	cmp	r0, r5
 80114ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80114ee:	d1f6      	bne.n	80114de <forward_lite_conv2d_if32of32wf32_pool+0x756>
 80114f0:	1a41      	subs	r1, r0, r1
 80114f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80114f6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80114fa:	3401      	adds	r4, #1
 80114fc:	4452      	add	r2, sl
 80114fe:	444b      	add	r3, r9
 8011500:	45a3      	cmp	fp, r4
 8011502:	f47f af71 	bne.w	80113e8 <forward_lite_conv2d_if32of32wf32_pool+0x660>
 8011506:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011508:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801150a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801150c:	4410      	add	r0, r2
 801150e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011510:	ed81 7a00 	vstr	s14, [r1]
 8011514:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011516:	3301      	adds	r3, #1
 8011518:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801151a:	9311      	str	r3, [sp, #68]	@ 0x44
 801151c:	4401      	add	r1, r0
 801151e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011520:	9110      	str	r1, [sp, #64]	@ 0x40
 8011522:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011524:	1a89      	subs	r1, r1, r2
 8011526:	910e      	str	r1, [sp, #56]	@ 0x38
 8011528:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801152a:	4401      	add	r1, r0
 801152c:	910d      	str	r1, [sp, #52]	@ 0x34
 801152e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011530:	1a8a      	subs	r2, r1, r2
 8011532:	920c      	str	r2, [sp, #48]	@ 0x30
 8011534:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011536:	429a      	cmp	r2, r3
 8011538:	f47f af28 	bne.w	801138c <forward_lite_conv2d_if32of32wf32_pool+0x604>
 801153c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801153e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8011540:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011542:	440a      	add	r2, r1
 8011544:	3304      	adds	r3, #4
 8011546:	9219      	str	r2, [sp, #100]	@ 0x64
 8011548:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801154a:	9326      	str	r3, [sp, #152]	@ 0x98
 801154c:	4293      	cmp	r3, r2
 801154e:	f43f ae70 	beq.w	8011232 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8011552:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011554:	2b00      	cmp	r3, #0
 8011556:	f47f af04 	bne.w	8011362 <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 801155a:	eef0 1a48 	vmov.f32	s3, s16
 801155e:	e704      	b.n	801136a <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 8011560:	2100      	movs	r1, #0
 8011562:	e7b7      	b.n	80114d4 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 8011564:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011566:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011568:	4610      	mov	r0, r2
 801156a:	4413      	add	r3, r2
 801156c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801156e:	e714      	b.n	801139a <forward_lite_conv2d_if32of32wf32_pool+0x612>
 8011570:	eeb0 7a61 	vmov.f32	s14, s3
 8011574:	e7c7      	b.n	8011506 <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 8011576:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011578:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801157a:	921c      	str	r2, [sp, #112]	@ 0x70
 801157c:	e52d      	b.n	8010fda <forward_lite_conv2d_if32of32wf32_pool+0x252>
 801157e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011580:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011582:	3301      	adds	r3, #1
 8011584:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8011586:	440a      	add	r2, r1
 8011588:	b219      	sxth	r1, r3
 801158a:	4290      	cmp	r0, r2
 801158c:	d801      	bhi.n	8011592 <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 801158e:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8011590:	4402      	add	r2, r0
 8011592:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8011594:	4281      	cmp	r1, r0
 8011596:	dbf3      	blt.n	8011580 <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 8011598:	921b      	str	r2, [sp, #108]	@ 0x6c
 801159a:	e674      	b.n	8011286 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

0801159c <forward_lite_nl_relu_generic_if32of32_kernel>:
 801159c:	edd3 6a02 	vldr	s13, [r3, #8]
 80115a0:	ed93 7a00 	vldr	s14, [r3]
 80115a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80115a8:	ed93 6a01 	vldr	s12, [r3, #4]
 80115ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b0:	d42b      	bmi.n	801160a <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80115b2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80115b6:	4413      	add	r3, r2
 80115b8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80115bc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80115c0:	4291      	cmp	r1, r2
 80115c2:	d821      	bhi.n	8011608 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80115c4:	f10c 0104 	add.w	r1, ip, #4
 80115c8:	1d13      	adds	r3, r2, #4
 80115ca:	eba2 020c 	sub.w	r2, r2, ip
 80115ce:	4408      	add	r0, r1
 80115d0:	e00c      	b.n	80115ec <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80115d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80115d6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80115da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115de:	db01      	blt.n	80115e4 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 80115e0:	ee65 7a86 	vmul.f32	s15, s11, s12
 80115e4:	4293      	cmp	r3, r2
 80115e6:	ed60 7a01 	vstmdb	r0!, {s15}
 80115ea:	d00c      	beq.n	8011606 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 80115ec:	ed73 7a01 	vldmdb	r3!, {s15}
 80115f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80115f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f8:	daeb      	bge.n	80115d2 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 80115fa:	eef0 7a66 	vmov.f32	s15, s13
 80115fe:	4293      	cmp	r3, r2
 8011600:	ed60 7a01 	vstmdb	r0!, {s15}
 8011604:	d1f2      	bne.n	80115ec <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8011606:	4770      	bx	lr
 8011608:	4770      	bx	lr
 801160a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801160e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011612:	4413      	add	r3, r2
 8011614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011618:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 801161c:	b500      	push	{lr}
 801161e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8011622:	d019      	beq.n	8011658 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8011624:	4561      	cmp	r1, ip
 8011626:	d815      	bhi.n	8011654 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011628:	f10e 0204 	add.w	r2, lr, #4
 801162c:	f10c 0304 	add.w	r3, ip, #4
 8011630:	ebac 010e 	sub.w	r1, ip, lr
 8011634:	4402      	add	r2, r0
 8011636:	ed73 7a01 	vldmdb	r3!, {s15}
 801163a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801163e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011646:	ee66 6a86 	vmul.f32	s13, s13, s12
 801164a:	d827      	bhi.n	801169c <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 801164c:	428b      	cmp	r3, r1
 801164e:	ed62 6a01 	vstmdb	r2!, {s13}
 8011652:	d1f0      	bne.n	8011636 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8011654:	f85d fb04 	ldr.w	pc, [sp], #4
 8011658:	4561      	cmp	r1, ip
 801165a:	d8fb      	bhi.n	8011654 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 801165c:	f10e 0204 	add.w	r2, lr, #4
 8011660:	f10c 0304 	add.w	r3, ip, #4
 8011664:	ebac 010e 	sub.w	r1, ip, lr
 8011668:	f04f 0c00 	mov.w	ip, #0
 801166c:	4402      	add	r2, r0
 801166e:	ed73 7a01 	vldmdb	r3!, {s15}
 8011672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801167a:	d40a      	bmi.n	8011692 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 801167c:	428b      	cmp	r3, r1
 801167e:	f842 cd04 	str.w	ip, [r2, #-4]!
 8011682:	d0e7      	beq.n	8011654 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011684:	ed73 7a01 	vldmdb	r3!, {s15}
 8011688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011690:	d5f4      	bpl.n	801167c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8011692:	428b      	cmp	r3, r1
 8011694:	ed62 7a01 	vstmdb	r2!, {s15}
 8011698:	d1e9      	bne.n	801166e <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 801169a:	e7db      	b.n	8011654 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 801169c:	428b      	cmp	r3, r1
 801169e:	ed62 7a01 	vstmdb	r2!, {s15}
 80116a2:	d1c8      	bne.n	8011636 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80116a4:	e7d6      	b.n	8011654 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80116a6:	bf00      	nop

080116a8 <pool_func_mp_array_f32>:
 80116a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ac:	b091      	sub	sp, #68	@ 0x44
 80116ae:	468b      	mov	fp, r1
 80116b0:	469c      	mov	ip, r3
 80116b2:	4690      	mov	r8, r2
 80116b4:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 80116b8:	4681      	mov	r9, r0
 80116ba:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80116be:	9101      	str	r1, [sp, #4]
 80116c0:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80116c4:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 80116c8:	9105      	str	r1, [sp, #20]
 80116ca:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80116ce:	9304      	str	r3, [sp, #16]
 80116d0:	9106      	str	r1, [sp, #24]
 80116d2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80116d6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80116da:	ea52 0403 	orrs.w	r4, r2, r3
 80116de:	9102      	str	r1, [sp, #8]
 80116e0:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80116e4:	9103      	str	r1, [sp, #12]
 80116e6:	d173      	bne.n	80117d0 <pool_func_mp_array_f32+0x128>
 80116e8:	9904      	ldr	r1, [sp, #16]
 80116ea:	9d02      	ldr	r5, [sp, #8]
 80116ec:	eba1 000b 	sub.w	r0, r1, fp
 80116f0:	9e05      	ldr	r6, [sp, #20]
 80116f2:	1e69      	subs	r1, r5, #1
 80116f4:	3801      	subs	r0, #1
 80116f6:	fb11 0106 	smlabb	r1, r1, r6, r0
 80116fa:	0409      	lsls	r1, r1, #16
 80116fc:	d568      	bpl.n	80117d0 <pool_func_mp_array_f32+0x128>
 80116fe:	9901      	ldr	r1, [sp, #4]
 8011700:	9e03      	ldr	r6, [sp, #12]
 8011702:	eba1 0008 	sub.w	r0, r1, r8
 8011706:	9f06      	ldr	r7, [sp, #24]
 8011708:	1e71      	subs	r1, r6, #1
 801170a:	3801      	subs	r0, #1
 801170c:	fb11 0107 	smlabb	r1, r1, r7, r0
 8011710:	040f      	lsls	r7, r1, #16
 8011712:	d55d      	bpl.n	80117d0 <pool_func_mp_array_f32+0x128>
 8011714:	2e00      	cmp	r6, #0
 8011716:	d058      	beq.n	80117ca <pool_func_mp_array_f32+0x122>
 8011718:	2d00      	cmp	r5, #0
 801171a:	d056      	beq.n	80117ca <pool_func_mp_array_f32+0x122>
 801171c:	4663      	mov	r3, ip
 801171e:	2b00      	cmp	r3, #0
 8011720:	d053      	beq.n	80117ca <pool_func_mp_array_f32+0x122>
 8011722:	2b01      	cmp	r3, #1
 8011724:	f040 814a 	bne.w	80119bc <pool_func_mp_array_f32+0x314>
 8011728:	46a2      	mov	sl, r4
 801172a:	4623      	mov	r3, r4
 801172c:	9407      	str	r4, [sp, #28]
 801172e:	9a02      	ldr	r2, [sp, #8]
 8011730:	2700      	movs	r7, #0
 8011732:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8011736:	fb02 f303 	mul.w	r3, r2, r3
 801173a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801173e:	46be      	mov	lr, r7
 8011740:	46bc      	mov	ip, r7
 8011742:	9308      	str	r3, [sp, #32]
 8011744:	fa0f f38a 	sxth.w	r3, sl
 8011748:	9309      	str	r3, [sp, #36]	@ 0x24
 801174a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801174c:	b23d      	sxth	r5, r7
 801174e:	9b08      	ldr	r3, [sp, #32]
 8011750:	fa0f f088 	sxth.w	r0, r8
 8011754:	42b4      	cmp	r4, r6
 8011756:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80119b8 <pool_func_mp_array_f32+0x310>
 801175a:	449c      	add	ip, r3
 801175c:	da12      	bge.n	8011784 <pool_func_mp_array_f32+0xdc>
 801175e:	4285      	cmp	r5, r0
 8011760:	da0c      	bge.n	801177c <pool_func_mp_array_f32+0xd4>
 8011762:	fb04 520b 	mla	r2, r4, fp, r5
 8011766:	462b      	mov	r3, r5
 8011768:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801176c:	3301      	adds	r3, #1
 801176e:	ecb2 7a01 	vldmia	r2!, {s14}
 8011772:	b219      	sxth	r1, r3
 8011774:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011778:	4281      	cmp	r1, r0
 801177a:	dbf7      	blt.n	801176c <pool_func_mp_array_f32+0xc4>
 801177c:	3401      	adds	r4, #1
 801177e:	b224      	sxth	r4, r4
 8011780:	42b4      	cmp	r4, r6
 8011782:	dbec      	blt.n	801175e <pool_func_mp_array_f32+0xb6>
 8011784:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011786:	f10e 0e01 	add.w	lr, lr, #1
 801178a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801178e:	9b05      	ldr	r3, [sp, #20]
 8011790:	fa0f fe8e 	sxth.w	lr, lr
 8011794:	4498      	add	r8, r3
 8011796:	441f      	add	r7, r3
 8011798:	9b02      	ldr	r3, [sp, #8]
 801179a:	edcc 7a00 	vstr	s15, [ip]
 801179e:	fa1f f888 	uxth.w	r8, r8
 80117a2:	4573      	cmp	r3, lr
 80117a4:	b2bf      	uxth	r7, r7
 80117a6:	46f4      	mov	ip, lr
 80117a8:	dccf      	bgt.n	801174a <pool_func_mp_array_f32+0xa2>
 80117aa:	9a07      	ldr	r2, [sp, #28]
 80117ac:	9906      	ldr	r1, [sp, #24]
 80117ae:	9b01      	ldr	r3, [sp, #4]
 80117b0:	3201      	adds	r2, #1
 80117b2:	448a      	add	sl, r1
 80117b4:	b212      	sxth	r2, r2
 80117b6:	440b      	add	r3, r1
 80117b8:	9903      	ldr	r1, [sp, #12]
 80117ba:	fa1f fa8a 	uxth.w	sl, sl
 80117be:	b29b      	uxth	r3, r3
 80117c0:	9207      	str	r2, [sp, #28]
 80117c2:	4291      	cmp	r1, r2
 80117c4:	9301      	str	r3, [sp, #4]
 80117c6:	4613      	mov	r3, r2
 80117c8:	dcb1      	bgt.n	801172e <pool_func_mp_array_f32+0x86>
 80117ca:	b011      	add	sp, #68	@ 0x44
 80117cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d0:	9903      	ldr	r1, [sp, #12]
 80117d2:	2900      	cmp	r1, #0
 80117d4:	d0f9      	beq.n	80117ca <pool_func_mp_array_f32+0x122>
 80117d6:	9902      	ldr	r1, [sp, #8]
 80117d8:	2900      	cmp	r1, #0
 80117da:	d0f6      	beq.n	80117ca <pool_func_mp_array_f32+0x122>
 80117dc:	4661      	mov	r1, ip
 80117de:	2900      	cmp	r1, #0
 80117e0:	d0f3      	beq.n	80117ca <pool_func_mp_array_f32+0x122>
 80117e2:	2901      	cmp	r1, #1
 80117e4:	9901      	ldr	r1, [sp, #4]
 80117e6:	d163      	bne.n	80118b0 <pool_func_mp_array_f32+0x208>
 80117e8:	1a8a      	subs	r2, r1, r2
 80117ea:	9904      	ldr	r1, [sp, #16]
 80117ec:	1ac9      	subs	r1, r1, r3
 80117ee:	425b      	negs	r3, r3
 80117f0:	b292      	uxth	r2, r2
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	9204      	str	r2, [sp, #16]
 80117f6:	b28a      	uxth	r2, r1
 80117f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117fa:	2300      	movs	r3, #0
 80117fc:	920a      	str	r2, [sp, #40]	@ 0x28
 80117fe:	9307      	str	r3, [sp, #28]
 8011800:	9a02      	ldr	r2, [sp, #8]
 8011802:	2700      	movs	r7, #0
 8011804:	fb02 f303 	mul.w	r3, r2, r3
 8011808:	9a04      	ldr	r2, [sp, #16]
 801180a:	46bc      	mov	ip, r7
 801180c:	9308      	str	r3, [sp, #32]
 801180e:	b216      	sxth	r6, r2
 8011810:	9b01      	ldr	r3, [sp, #4]
 8011812:	1ad3      	subs	r3, r2, r3
 8011814:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 8011818:	b21b      	sxth	r3, r3
 801181a:	9309      	str	r3, [sp, #36]	@ 0x24
 801181c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801181e:	fa0f f58e 	sxth.w	r5, lr
 8011822:	9b08      	ldr	r3, [sp, #32]
 8011824:	fa0f f48a 	sxth.w	r4, sl
 8011828:	428e      	cmp	r6, r1
 801182a:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80119b8 <pool_func_mp_array_f32+0x310>
 801182e:	449c      	add	ip, r3
 8011830:	dd1c      	ble.n	801186c <pool_func_mp_array_f32+0x1c4>
 8011832:	42a5      	cmp	r5, r4
 8011834:	da16      	bge.n	8011864 <pool_func_mp_array_f32+0x1bc>
 8011836:	4588      	cmp	r8, r1
 8011838:	fb01 f20b 	mul.w	r2, r1, fp
 801183c:	dd12      	ble.n	8011864 <pool_func_mp_array_f32+0x1bc>
 801183e:	442a      	add	r2, r5
 8011840:	462b      	mov	r3, r5
 8011842:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011846:	ea41 0003 	orr.w	r0, r1, r3
 801184a:	0400      	lsls	r0, r0, #16
 801184c:	d405      	bmi.n	801185a <pool_func_mp_array_f32+0x1b2>
 801184e:	459b      	cmp	fp, r3
 8011850:	dd03      	ble.n	801185a <pool_func_mp_array_f32+0x1b2>
 8011852:	ed92 7a00 	vldr	s14, [r2]
 8011856:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801185a:	3301      	adds	r3, #1
 801185c:	3204      	adds	r2, #4
 801185e:	b218      	sxth	r0, r3
 8011860:	42a0      	cmp	r0, r4
 8011862:	dbf0      	blt.n	8011846 <pool_func_mp_array_f32+0x19e>
 8011864:	3101      	adds	r1, #1
 8011866:	b209      	sxth	r1, r1
 8011868:	42b1      	cmp	r1, r6
 801186a:	dbe2      	blt.n	8011832 <pool_func_mp_array_f32+0x18a>
 801186c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801186e:	3701      	adds	r7, #1
 8011870:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8011874:	9b05      	ldr	r3, [sp, #20]
 8011876:	b23f      	sxth	r7, r7
 8011878:	449a      	add	sl, r3
 801187a:	449e      	add	lr, r3
 801187c:	9b02      	ldr	r3, [sp, #8]
 801187e:	edcc 7a00 	vstr	s15, [ip]
 8011882:	fa1f fa8a 	uxth.w	sl, sl
 8011886:	42bb      	cmp	r3, r7
 8011888:	fa1f fe8e 	uxth.w	lr, lr
 801188c:	46bc      	mov	ip, r7
 801188e:	dcc5      	bgt.n	801181c <pool_func_mp_array_f32+0x174>
 8011890:	9a07      	ldr	r2, [sp, #28]
 8011892:	9b04      	ldr	r3, [sp, #16]
 8011894:	9906      	ldr	r1, [sp, #24]
 8011896:	3201      	adds	r2, #1
 8011898:	440b      	add	r3, r1
 801189a:	b212      	sxth	r2, r2
 801189c:	9903      	ldr	r1, [sp, #12]
 801189e:	b29b      	uxth	r3, r3
 80118a0:	9207      	str	r2, [sp, #28]
 80118a2:	4291      	cmp	r1, r2
 80118a4:	9304      	str	r3, [sp, #16]
 80118a6:	4613      	mov	r3, r2
 80118a8:	dcaa      	bgt.n	8011800 <pool_func_mp_array_f32+0x158>
 80118aa:	b011      	add	sp, #68	@ 0x44
 80118ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b0:	1a88      	subs	r0, r1, r2
 80118b2:	9904      	ldr	r1, [sp, #16]
 80118b4:	4252      	negs	r2, r2
 80118b6:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80118ba:	1ac9      	subs	r1, r1, r3
 80118bc:	425b      	negs	r3, r3
 80118be:	b292      	uxth	r2, r2
 80118c0:	46e6      	mov	lr, ip
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	b280      	uxth	r0, r0
 80118c6:	9208      	str	r2, [sp, #32]
 80118c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80118ca:	b28a      	uxth	r2, r1
 80118cc:	2300      	movs	r3, #0
 80118ce:	9007      	str	r0, [sp, #28]
 80118d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80118d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80118d4:	9a02      	ldr	r2, [sp, #8]
 80118d6:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 80118da:	fb02 f303 	mul.w	r3, r2, r3
 80118de:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80118e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80118e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80118e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80118e8:	2300      	movs	r3, #0
 80118ea:	9201      	str	r2, [sp, #4]
 80118ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80118ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80118f0:	9204      	str	r2, [sp, #16]
 80118f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80118f4:	f04f 0c00 	mov.w	ip, #0
 80118f8:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 80118fc:	4413      	add	r3, r2
 80118fe:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8011902:	4667      	mov	r7, ip
 8011904:	fb0e f303 	mul.w	r3, lr, r3
 8011908:	9309      	str	r3, [sp, #36]	@ 0x24
 801190a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801190c:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80119b8 <pool_func_mp_array_f32+0x310>
 8011910:	42b1      	cmp	r1, r6
 8011912:	da1e      	bge.n	8011952 <pool_func_mp_array_f32+0x2aa>
 8011914:	42a5      	cmp	r5, r4
 8011916:	da18      	bge.n	801194a <pool_func_mp_array_f32+0x2a2>
 8011918:	4541      	cmp	r1, r8
 801191a:	fb01 f30b 	mul.w	r3, r1, fp
 801191e:	da14      	bge.n	801194a <pool_func_mp_array_f32+0x2a2>
 8011920:	195a      	adds	r2, r3, r5
 8011922:	462b      	mov	r3, r5
 8011924:	fb0e 7202 	mla	r2, lr, r2, r7
 8011928:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801192c:	ea41 0003 	orr.w	r0, r1, r3
 8011930:	0400      	lsls	r0, r0, #16
 8011932:	d405      	bmi.n	8011940 <pool_func_mp_array_f32+0x298>
 8011934:	459b      	cmp	fp, r3
 8011936:	dd03      	ble.n	8011940 <pool_func_mp_array_f32+0x298>
 8011938:	ed92 7a00 	vldr	s14, [r2]
 801193c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011940:	3301      	adds	r3, #1
 8011942:	4452      	add	r2, sl
 8011944:	b218      	sxth	r0, r3
 8011946:	42a0      	cmp	r0, r4
 8011948:	dbf0      	blt.n	801192c <pool_func_mp_array_f32+0x284>
 801194a:	3101      	adds	r1, #1
 801194c:	b209      	sxth	r1, r1
 801194e:	42b1      	cmp	r1, r6
 8011950:	dbe0      	blt.n	8011914 <pool_func_mp_array_f32+0x26c>
 8011952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011954:	f10c 0c01 	add.w	ip, ip, #1
 8011958:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801195a:	443b      	add	r3, r7
 801195c:	fa0f fc8c 	sxth.w	ip, ip
 8011960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011964:	45f4      	cmp	ip, lr
 8011966:	4667      	mov	r7, ip
 8011968:	edc3 7a00 	vstr	s15, [r3]
 801196c:	dbcd      	blt.n	801190a <pool_func_mp_array_f32+0x262>
 801196e:	9a01      	ldr	r2, [sp, #4]
 8011970:	9805      	ldr	r0, [sp, #20]
 8011972:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011974:	4402      	add	r2, r0
 8011976:	9b04      	ldr	r3, [sp, #16]
 8011978:	3101      	adds	r1, #1
 801197a:	b292      	uxth	r2, r2
 801197c:	4403      	add	r3, r0
 801197e:	b209      	sxth	r1, r1
 8011980:	9201      	str	r2, [sp, #4]
 8011982:	b29b      	uxth	r3, r3
 8011984:	9a02      	ldr	r2, [sp, #8]
 8011986:	9304      	str	r3, [sp, #16]
 8011988:	460b      	mov	r3, r1
 801198a:	428a      	cmp	r2, r1
 801198c:	910c      	str	r1, [sp, #48]	@ 0x30
 801198e:	dcb0      	bgt.n	80118f2 <pool_func_mp_array_f32+0x24a>
 8011990:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011992:	9b08      	ldr	r3, [sp, #32]
 8011994:	3101      	adds	r1, #1
 8011996:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 801199a:	b209      	sxth	r1, r1
 801199c:	4402      	add	r2, r0
 801199e:	4403      	add	r3, r0
 80119a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80119a2:	b292      	uxth	r2, r2
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	9207      	str	r2, [sp, #28]
 80119a8:	9a03      	ldr	r2, [sp, #12]
 80119aa:	9308      	str	r3, [sp, #32]
 80119ac:	460b      	mov	r3, r1
 80119ae:	428a      	cmp	r2, r1
 80119b0:	dc90      	bgt.n	80118d4 <pool_func_mp_array_f32+0x22c>
 80119b2:	b011      	add	sp, #68	@ 0x44
 80119b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b8:	cf000000 	.word	0xcf000000
 80119bc:	4623      	mov	r3, r4
 80119be:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80119c2:	46e0      	mov	r8, ip
 80119c4:	9408      	str	r4, [sp, #32]
 80119c6:	9409      	str	r4, [sp, #36]	@ 0x24
 80119c8:	9a02      	ldr	r2, [sp, #8]
 80119ca:	f04f 0c00 	mov.w	ip, #0
 80119ce:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80119d2:	fb02 f303 	mul.w	r3, r2, r3
 80119d6:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80119da:	930c      	str	r3, [sp, #48]	@ 0x30
 80119dc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80119e0:	930d      	str	r3, [sp, #52]	@ 0x34
 80119e2:	9b04      	ldr	r3, [sp, #16]
 80119e4:	9307      	str	r3, [sp, #28]
 80119e6:	4663      	mov	r3, ip
 80119e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80119ea:	f04f 0e00 	mov.w	lr, #0
 80119ee:	fa0f f58c 	sxth.w	r5, ip
 80119f2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80119f6:	4413      	add	r3, r2
 80119f8:	4676      	mov	r6, lr
 80119fa:	fb08 f303 	mul.w	r3, r8, r3
 80119fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a00:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8011a02:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 80119b8 <pool_func_mp_array_f32+0x310>
 8011a06:	42bc      	cmp	r4, r7
 8011a08:	da15      	bge.n	8011a36 <pool_func_mp_array_f32+0x38e>
 8011a0a:	4285      	cmp	r5, r0
 8011a0c:	da0f      	bge.n	8011a2e <pool_func_mp_array_f32+0x386>
 8011a0e:	fb0b 5304 	mla	r3, fp, r4, r5
 8011a12:	462a      	mov	r2, r5
 8011a14:	fb08 6303 	mla	r3, r8, r3, r6
 8011a18:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8011a1c:	3201      	adds	r2, #1
 8011a1e:	ed93 7a00 	vldr	s14, [r3]
 8011a22:	4453      	add	r3, sl
 8011a24:	b211      	sxth	r1, r2
 8011a26:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011a2a:	4281      	cmp	r1, r0
 8011a2c:	dbf6      	blt.n	8011a1c <pool_func_mp_array_f32+0x374>
 8011a2e:	3401      	adds	r4, #1
 8011a30:	b224      	sxth	r4, r4
 8011a32:	42bc      	cmp	r4, r7
 8011a34:	dbe9      	blt.n	8011a0a <pool_func_mp_array_f32+0x362>
 8011a36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a38:	f10e 0e01 	add.w	lr, lr, #1
 8011a3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011a3e:	4433      	add	r3, r6
 8011a40:	fa0f fe8e 	sxth.w	lr, lr
 8011a44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a48:	45c6      	cmp	lr, r8
 8011a4a:	4676      	mov	r6, lr
 8011a4c:	edc3 7a00 	vstr	s15, [r3]
 8011a50:	dbd6      	blt.n	8011a00 <pool_func_mp_array_f32+0x358>
 8011a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a54:	9905      	ldr	r1, [sp, #20]
 8011a56:	9b07      	ldr	r3, [sp, #28]
 8011a58:	3201      	adds	r2, #1
 8011a5a:	448c      	add	ip, r1
 8011a5c:	b212      	sxth	r2, r2
 8011a5e:	440b      	add	r3, r1
 8011a60:	9902      	ldr	r1, [sp, #8]
 8011a62:	fa1f fc8c 	uxth.w	ip, ip
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	920a      	str	r2, [sp, #40]	@ 0x28
 8011a6a:	4291      	cmp	r1, r2
 8011a6c:	9307      	str	r3, [sp, #28]
 8011a6e:	4613      	mov	r3, r2
 8011a70:	dcba      	bgt.n	80119e8 <pool_func_mp_array_f32+0x340>
 8011a72:	9a01      	ldr	r2, [sp, #4]
 8011a74:	9806      	ldr	r0, [sp, #24]
 8011a76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a78:	4402      	add	r2, r0
 8011a7a:	9b08      	ldr	r3, [sp, #32]
 8011a7c:	3101      	adds	r1, #1
 8011a7e:	b292      	uxth	r2, r2
 8011a80:	4403      	add	r3, r0
 8011a82:	b209      	sxth	r1, r1
 8011a84:	9201      	str	r2, [sp, #4]
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	9a03      	ldr	r2, [sp, #12]
 8011a8a:	9308      	str	r3, [sp, #32]
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	428a      	cmp	r2, r1
 8011a90:	9109      	str	r1, [sp, #36]	@ 0x24
 8011a92:	dc99      	bgt.n	80119c8 <pool_func_mp_array_f32+0x320>
 8011a94:	e699      	b.n	80117ca <pool_func_mp_array_f32+0x122>
 8011a96:	bf00      	nop

08011a98 <forward_lite_upsample_bilinear_if32of32>:
 8011a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a9c:	ed2d 8b0a 	vpush	{d8-d12}
 8011aa0:	b08f      	sub	sp, #60	@ 0x3c
 8011aa2:	4683      	mov	fp, r0
 8011aa4:	9104      	str	r1, [sp, #16]
 8011aa6:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011aaa:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011aae:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8011ab2:	9206      	str	r2, [sp, #24]
 8011ab4:	2900      	cmp	r1, #0
 8011ab6:	f000 80a7 	beq.w	8011c08 <forward_lite_upsample_bilinear_if32of32+0x170>
 8011aba:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011abe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011ac2:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011ac6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011aca:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011ace:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011ad2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011ad6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011ad8:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8011adc:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8011ae0:	2a00      	cmp	r2, #0
 8011ae2:	f000 808c 	beq.w	8011bfe <forward_lite_upsample_bilinear_if32of32+0x166>
 8011ae6:	3b01      	subs	r3, #1
 8011ae8:	ea4f 068a 	mov.w	r6, sl, lsl #2
 8011aec:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8011c14 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8011af0:	ee07 3a90 	vmov	s15, r3
 8011af4:	9b06      	ldr	r3, [sp, #24]
 8011af6:	1e5a      	subs	r2, r3, #1
 8011af8:	fb0a f303 	mul.w	r3, sl, r3
 8011afc:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8011b00:	ee0c 2a90 	vmov	s25, r2
 8011b04:	9305      	str	r3, [sp, #20]
 8011b06:	2300      	movs	r3, #0
 8011b08:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011b0c:	9303      	str	r3, [sp, #12]
 8011b0e:	fb06 f308 	mul.w	r3, r6, r8
 8011b12:	9307      	str	r3, [sp, #28]
 8011b14:	eddd 7a03 	vldr	s15, [sp, #12]
 8011b18:	9b05      	ldr	r3, [sp, #20]
 8011b1a:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011b1e:	ee7b baea 	vsub.f32	s23, s23, s21
 8011b22:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011b26:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011b2a:	fecb baca 	vminnm.f32	s23, s23, s20
 8011b2e:	eef4 ba4a 	vcmp.f32	s23, s20
 8011b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b36:	bf14      	ite	ne
 8011b38:	4699      	movne	r9, r3
 8011b3a:	f04f 0900 	moveq.w	r9, #0
 8011b3e:	f1b8 0f00 	cmp.w	r8, #0
 8011b42:	d056      	beq.n	8011bf2 <forward_lite_upsample_bilinear_if32of32+0x15a>
 8011b44:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011b48:	9b06      	ldr	r3, [sp, #24]
 8011b4a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8011b4e:	9d04      	ldr	r5, [sp, #16]
 8011b50:	2400      	movs	r4, #0
 8011b52:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011b56:	ee17 7a10 	vmov	r7, s14
 8011b5a:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8011b5e:	fb03 f707 	mul.w	r7, r3, r7
 8011b62:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011b66:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011b6a:	ee07 4a90 	vmov	s15, r4
 8011b6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011b70:	3401      	adds	r4, #1
 8011b72:	4629      	mov	r1, r5
 8011b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b78:	9300      	str	r3, [sp, #0]
 8011b7a:	4652      	mov	r2, sl
 8011b7c:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8011b80:	4435      	add	r5, r6
 8011b82:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011b86:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8011b8a:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8011b8e:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011b92:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011b96:	eef4 7a6c 	vcmp.f32	s15, s25
 8011b9a:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011b9e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011ba2:	ee16 0a90 	vmov	r0, s13
 8011ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011baa:	4438      	add	r0, r7
 8011bac:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011bb0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011bb4:	bf14      	ite	ne
 8011bb6:	4653      	movne	r3, sl
 8011bb8:	2300      	moveq	r3, #0
 8011bba:	fb06 b000 	mla	r0, r6, r0, fp
 8011bbe:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8011bc2:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8011bc6:	9308      	str	r3, [sp, #32]
 8011bc8:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011bcc:	ab08      	add	r3, sp, #32
 8011bce:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011bd2:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8011bd6:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8011bda:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8011bde:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8011be2:	f001 f9bf 	bl	8012f64 <lite_bilinear_if32of32_kernel>
 8011be6:	45a0      	cmp	r8, r4
 8011be8:	d1bf      	bne.n	8011b6a <forward_lite_upsample_bilinear_if32of32+0xd2>
 8011bea:	9b04      	ldr	r3, [sp, #16]
 8011bec:	9a07      	ldr	r2, [sp, #28]
 8011bee:	4413      	add	r3, r2
 8011bf0:	9304      	str	r3, [sp, #16]
 8011bf2:	9b03      	ldr	r3, [sp, #12]
 8011bf4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	9303      	str	r3, [sp, #12]
 8011bfc:	d18a      	bne.n	8011b14 <forward_lite_upsample_bilinear_if32of32+0x7c>
 8011bfe:	b00f      	add	sp, #60	@ 0x3c
 8011c00:	ecbd 8b0a 	vpop	{d8-d12}
 8011c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c08:	eddf aa02 	vldr	s21, [pc, #8]	@ 8011c14 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8011c0c:	eeb0 9a6a 	vmov.f32	s18, s21
 8011c10:	e75f      	b.n	8011ad2 <forward_lite_upsample_bilinear_if32of32+0x3a>
 8011c12:	bf00      	nop
 8011c14:	00000000 	.word	0x00000000

08011c18 <forward_lite_upsample_bilinear_is8os8>:
 8011c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c1c:	ed2d 8b0a 	vpush	{d8-d12}
 8011c20:	b08f      	sub	sp, #60	@ 0x3c
 8011c22:	4682      	mov	sl, r0
 8011c24:	9104      	str	r1, [sp, #16]
 8011c26:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011c2a:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8011c2c:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8011c30:	9206      	str	r2, [sp, #24]
 8011c32:	2900      	cmp	r1, #0
 8011c34:	f000 80aa 	beq.w	8011d8c <forward_lite_upsample_bilinear_is8os8+0x174>
 8011c38:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011c3c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011c40:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011c44:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011c48:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011c4c:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011c50:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011c54:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011c56:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8011c5a:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8011c5e:	2a00      	cmp	r2, #0
 8011c60:	f000 808f 	beq.w	8011d82 <forward_lite_upsample_bilinear_is8os8+0x16a>
 8011c64:	3b01      	subs	r3, #1
 8011c66:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8011d98 <forward_lite_upsample_bilinear_is8os8+0x180>
 8011c6a:	ee07 3a90 	vmov	s15, r3
 8011c6e:	9b06      	ldr	r3, [sp, #24]
 8011c70:	1e5a      	subs	r2, r3, #1
 8011c72:	fb0b f303 	mul.w	r3, fp, r3
 8011c76:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8011c7a:	ee0c 2a90 	vmov	s25, r2
 8011c7e:	9305      	str	r3, [sp, #20]
 8011c80:	fb07 f30b 	mul.w	r3, r7, fp
 8011c84:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011c88:	9307      	str	r3, [sp, #28]
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	9303      	str	r3, [sp, #12]
 8011c8e:	eddd 7a03 	vldr	s15, [sp, #12]
 8011c92:	9b05      	ldr	r3, [sp, #20]
 8011c94:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011c98:	ee7b baea 	vsub.f32	s23, s23, s21
 8011c9c:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011ca0:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011ca4:	fecb baca 	vminnm.f32	s23, s23, s20
 8011ca8:	eef4 ba4a 	vcmp.f32	s23, s20
 8011cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb0:	bf14      	ite	ne
 8011cb2:	4698      	movne	r8, r3
 8011cb4:	f04f 0800 	moveq.w	r8, #0
 8011cb8:	2f00      	cmp	r7, #0
 8011cba:	d05c      	beq.n	8011d76 <forward_lite_upsample_bilinear_is8os8+0x15e>
 8011cbc:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011cc0:	9b06      	ldr	r3, [sp, #24]
 8011cc2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8011cc6:	9722      	str	r7, [sp, #136]	@ 0x88
 8011cc8:	9d04      	ldr	r5, [sp, #16]
 8011cca:	4647      	mov	r7, r8
 8011ccc:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011cd0:	ee17 6a10 	vmov	r6, s14
 8011cd4:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8011cd8:	2400      	movs	r4, #0
 8011cda:	fb03 f606 	mul.w	r6, r3, r6
 8011cde:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8011ce2:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011ce6:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011cea:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011cee:	ee07 4a90 	vmov	s15, r4
 8011cf2:	3401      	adds	r4, #1
 8011cf4:	4629      	mov	r1, r5
 8011cf6:	465a      	mov	r2, fp
 8011cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011cfc:	f8cd 9000 	str.w	r9, [sp]
 8011d00:	9709      	str	r7, [sp, #36]	@ 0x24
 8011d02:	445d      	add	r5, fp
 8011d04:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011d08:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8011d0c:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8011d10:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011d14:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011d18:	eef4 7a6c 	vcmp.f32	s15, s25
 8011d1c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011d20:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011d24:	ee16 0a90 	vmov	r0, s13
 8011d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2c:	4430      	add	r0, r6
 8011d2e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011d32:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011d36:	bf14      	ite	ne
 8011d38:	465b      	movne	r3, fp
 8011d3a:	2300      	moveq	r3, #0
 8011d3c:	fb0b a000 	mla	r0, fp, r0, sl
 8011d40:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8011d44:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8011d48:	9308      	str	r3, [sp, #32]
 8011d4a:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011d4e:	ab08      	add	r3, sp, #32
 8011d50:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011d54:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8011d58:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8011d5c:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8011d60:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8011d64:	f001 f92e 	bl	8012fc4 <lite_bilinear_is8os8_kernel>
 8011d68:	45a0      	cmp	r8, r4
 8011d6a:	d1c0      	bne.n	8011cee <forward_lite_upsample_bilinear_is8os8+0xd6>
 8011d6c:	9b04      	ldr	r3, [sp, #16]
 8011d6e:	4647      	mov	r7, r8
 8011d70:	9a07      	ldr	r2, [sp, #28]
 8011d72:	4413      	add	r3, r2
 8011d74:	9304      	str	r3, [sp, #16]
 8011d76:	9b03      	ldr	r3, [sp, #12]
 8011d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	9303      	str	r3, [sp, #12]
 8011d80:	d185      	bne.n	8011c8e <forward_lite_upsample_bilinear_is8os8+0x76>
 8011d82:	b00f      	add	sp, #60	@ 0x3c
 8011d84:	ecbd 8b0a 	vpop	{d8-d12}
 8011d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d8c:	eddf aa02 	vldr	s21, [pc, #8]	@ 8011d98 <forward_lite_upsample_bilinear_is8os8+0x180>
 8011d90:	eeb0 9a6a 	vmov.f32	s18, s21
 8011d94:	e75c      	b.n	8011c50 <forward_lite_upsample_bilinear_is8os8+0x38>
 8011d96:	bf00      	nop
 8011d98:	00000000 	.word	0x00000000

08011d9c <forward_lite_upsample_bilinear_iu8ou8>:
 8011d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da0:	ed2d 8b0a 	vpush	{d8-d12}
 8011da4:	b08f      	sub	sp, #60	@ 0x3c
 8011da6:	4682      	mov	sl, r0
 8011da8:	9104      	str	r1, [sp, #16]
 8011daa:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011dae:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8011db0:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8011db4:	9206      	str	r2, [sp, #24]
 8011db6:	2900      	cmp	r1, #0
 8011db8:	f000 80aa 	beq.w	8011f10 <forward_lite_upsample_bilinear_iu8ou8+0x174>
 8011dbc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011dc0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011dc4:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011dc8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011dcc:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011dd0:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011dd4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011dd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011dda:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8011dde:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8011de2:	2a00      	cmp	r2, #0
 8011de4:	f000 808f 	beq.w	8011f06 <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 8011de8:	3b01      	subs	r3, #1
 8011dea:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8011f1c <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8011dee:	ee07 3a90 	vmov	s15, r3
 8011df2:	9b06      	ldr	r3, [sp, #24]
 8011df4:	1e5a      	subs	r2, r3, #1
 8011df6:	fb0b f303 	mul.w	r3, fp, r3
 8011dfa:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8011dfe:	ee0c 2a90 	vmov	s25, r2
 8011e02:	9305      	str	r3, [sp, #20]
 8011e04:	fb07 f30b 	mul.w	r3, r7, fp
 8011e08:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011e0c:	9307      	str	r3, [sp, #28]
 8011e0e:	2300      	movs	r3, #0
 8011e10:	9303      	str	r3, [sp, #12]
 8011e12:	eddd 7a03 	vldr	s15, [sp, #12]
 8011e16:	9b05      	ldr	r3, [sp, #20]
 8011e18:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011e1c:	ee7b baea 	vsub.f32	s23, s23, s21
 8011e20:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011e24:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011e28:	fecb baca 	vminnm.f32	s23, s23, s20
 8011e2c:	eef4 ba4a 	vcmp.f32	s23, s20
 8011e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e34:	bf14      	ite	ne
 8011e36:	4698      	movne	r8, r3
 8011e38:	f04f 0800 	moveq.w	r8, #0
 8011e3c:	2f00      	cmp	r7, #0
 8011e3e:	d05c      	beq.n	8011efa <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 8011e40:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011e44:	9b06      	ldr	r3, [sp, #24]
 8011e46:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8011e4a:	9722      	str	r7, [sp, #136]	@ 0x88
 8011e4c:	9d04      	ldr	r5, [sp, #16]
 8011e4e:	4647      	mov	r7, r8
 8011e50:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011e54:	ee17 6a10 	vmov	r6, s14
 8011e58:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8011e5c:	2400      	movs	r4, #0
 8011e5e:	fb03 f606 	mul.w	r6, r3, r6
 8011e62:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8011e66:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011e6a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011e6e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011e72:	ee07 4a90 	vmov	s15, r4
 8011e76:	3401      	adds	r4, #1
 8011e78:	4629      	mov	r1, r5
 8011e7a:	465a      	mov	r2, fp
 8011e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e80:	f8cd 9000 	str.w	r9, [sp]
 8011e84:	9709      	str	r7, [sp, #36]	@ 0x24
 8011e86:	445d      	add	r5, fp
 8011e88:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011e8c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8011e90:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8011e94:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011e98:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011e9c:	eef4 7a6c 	vcmp.f32	s15, s25
 8011ea0:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011ea4:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011ea8:	ee16 0a90 	vmov	r0, s13
 8011eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb0:	4430      	add	r0, r6
 8011eb2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011eb6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011eba:	bf14      	ite	ne
 8011ebc:	465b      	movne	r3, fp
 8011ebe:	2300      	moveq	r3, #0
 8011ec0:	fb0b a000 	mla	r0, fp, r0, sl
 8011ec4:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8011ec8:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8011ecc:	9308      	str	r3, [sp, #32]
 8011ece:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011ed2:	ab08      	add	r3, sp, #32
 8011ed4:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011ed8:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8011edc:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8011ee0:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8011ee4:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8011ee8:	f001 f8ca 	bl	8013080 <lite_bilinear_iu8ou8_kernel>
 8011eec:	45a0      	cmp	r8, r4
 8011eee:	d1c0      	bne.n	8011e72 <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 8011ef0:	9b04      	ldr	r3, [sp, #16]
 8011ef2:	4647      	mov	r7, r8
 8011ef4:	9a07      	ldr	r2, [sp, #28]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	9304      	str	r3, [sp, #16]
 8011efa:	9b03      	ldr	r3, [sp, #12]
 8011efc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011efe:	3301      	adds	r3, #1
 8011f00:	429a      	cmp	r2, r3
 8011f02:	9303      	str	r3, [sp, #12]
 8011f04:	d185      	bne.n	8011e12 <forward_lite_upsample_bilinear_iu8ou8+0x76>
 8011f06:	b00f      	add	sp, #60	@ 0x3c
 8011f08:	ecbd 8b0a 	vpop	{d8-d12}
 8011f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f10:	eddf aa02 	vldr	s21, [pc, #8]	@ 8011f1c <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8011f14:	eeb0 9a6a 	vmov.f32	s18, s21
 8011f18:	e75c      	b.n	8011dd4 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 8011f1a:	bf00      	nop
 8011f1c:	00000000 	.word	0x00000000

08011f20 <forward_lite_upsample_bilinear_is16os16>:
 8011f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f24:	ed2d 8b0a 	vpush	{d8-d12}
 8011f28:	b08f      	sub	sp, #60	@ 0x3c
 8011f2a:	4683      	mov	fp, r0
 8011f2c:	9104      	str	r1, [sp, #16]
 8011f2e:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011f32:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011f36:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8011f3a:	9206      	str	r2, [sp, #24]
 8011f3c:	2900      	cmp	r1, #0
 8011f3e:	f000 80a7 	beq.w	8012090 <forward_lite_upsample_bilinear_is16os16+0x170>
 8011f42:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011f46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011f4a:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011f4e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011f52:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011f56:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011f5a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011f5e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011f60:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8011f64:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8011f68:	2a00      	cmp	r2, #0
 8011f6a:	f000 808c 	beq.w	8012086 <forward_lite_upsample_bilinear_is16os16+0x166>
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8011f74:	eddf 8a49 	vldr	s17, [pc, #292]	@ 801209c <forward_lite_upsample_bilinear_is16os16+0x17c>
 8011f78:	ee07 3a90 	vmov	s15, r3
 8011f7c:	9b06      	ldr	r3, [sp, #24]
 8011f7e:	1e5a      	subs	r2, r3, #1
 8011f80:	fb0a f303 	mul.w	r3, sl, r3
 8011f84:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8011f88:	ee0c 2a90 	vmov	s25, r2
 8011f8c:	9305      	str	r3, [sp, #20]
 8011f8e:	2300      	movs	r3, #0
 8011f90:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011f94:	9303      	str	r3, [sp, #12]
 8011f96:	fb06 f308 	mul.w	r3, r6, r8
 8011f9a:	9307      	str	r3, [sp, #28]
 8011f9c:	eddd 7a03 	vldr	s15, [sp, #12]
 8011fa0:	9b05      	ldr	r3, [sp, #20]
 8011fa2:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011fa6:	ee7b baea 	vsub.f32	s23, s23, s21
 8011faa:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011fae:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011fb2:	fecb baca 	vminnm.f32	s23, s23, s20
 8011fb6:	eef4 ba4a 	vcmp.f32	s23, s20
 8011fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fbe:	bf14      	ite	ne
 8011fc0:	4699      	movne	r9, r3
 8011fc2:	f04f 0900 	moveq.w	r9, #0
 8011fc6:	f1b8 0f00 	cmp.w	r8, #0
 8011fca:	d056      	beq.n	801207a <forward_lite_upsample_bilinear_is16os16+0x15a>
 8011fcc:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011fd0:	9b06      	ldr	r3, [sp, #24]
 8011fd2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8011fd6:	9d04      	ldr	r5, [sp, #16]
 8011fd8:	2400      	movs	r4, #0
 8011fda:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011fde:	ee17 7a10 	vmov	r7, s14
 8011fe2:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8011fe6:	fb03 f707 	mul.w	r7, r3, r7
 8011fea:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011fee:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011ff2:	ee07 4a90 	vmov	s15, r4
 8011ff6:	ab0a      	add	r3, sp, #40	@ 0x28
 8011ff8:	3401      	adds	r4, #1
 8011ffa:	4629      	mov	r1, r5
 8011ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012000:	9300      	str	r3, [sp, #0]
 8012002:	4652      	mov	r2, sl
 8012004:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012008:	4435      	add	r5, r6
 801200a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801200e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012012:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8012016:	fec7 7aec 	vminnm.f32	s15, s15, s25
 801201a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 801201e:	eef4 7a6c 	vcmp.f32	s15, s25
 8012022:	ee38 7a67 	vsub.f32	s14, s16, s15
 8012026:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 801202a:	ee16 0a90 	vmov	r0, s13
 801202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012032:	4438      	add	r0, r7
 8012034:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012038:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801203c:	bf14      	ite	ne
 801203e:	4653      	movne	r3, sl
 8012040:	2300      	moveq	r3, #0
 8012042:	fb06 b000 	mla	r0, r6, r0, fp
 8012046:	ee67 5a0c 	vmul.f32	s11, s14, s24
 801204a:	ee27 6a8c 	vmul.f32	s12, s15, s24
 801204e:	9308      	str	r3, [sp, #32]
 8012050:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8012054:	ab08      	add	r3, sp, #32
 8012056:	ee67 7aab 	vmul.f32	s15, s15, s23
 801205a:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 801205e:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8012062:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8012066:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801206a:	f001 f853 	bl	8013114 <lite_bilinear_is16os16_kernel>
 801206e:	45a0      	cmp	r8, r4
 8012070:	d1bf      	bne.n	8011ff2 <forward_lite_upsample_bilinear_is16os16+0xd2>
 8012072:	9b04      	ldr	r3, [sp, #16]
 8012074:	9a07      	ldr	r2, [sp, #28]
 8012076:	4413      	add	r3, r2
 8012078:	9304      	str	r3, [sp, #16]
 801207a:	9b03      	ldr	r3, [sp, #12]
 801207c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801207e:	3301      	adds	r3, #1
 8012080:	429a      	cmp	r2, r3
 8012082:	9303      	str	r3, [sp, #12]
 8012084:	d18a      	bne.n	8011f9c <forward_lite_upsample_bilinear_is16os16+0x7c>
 8012086:	b00f      	add	sp, #60	@ 0x3c
 8012088:	ecbd 8b0a 	vpop	{d8-d12}
 801208c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012090:	eddf aa02 	vldr	s21, [pc, #8]	@ 801209c <forward_lite_upsample_bilinear_is16os16+0x17c>
 8012094:	eeb0 9a6a 	vmov.f32	s18, s21
 8012098:	e75f      	b.n	8011f5a <forward_lite_upsample_bilinear_is16os16+0x3a>
 801209a:	bf00      	nop
 801209c:	00000000 	.word	0x00000000

080120a0 <forward_lite_upsample_bilinear_iu16ou16>:
 80120a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a4:	ed2d 8b0a 	vpush	{d8-d12}
 80120a8:	b08f      	sub	sp, #60	@ 0x3c
 80120aa:	4683      	mov	fp, r0
 80120ac:	9104      	str	r1, [sp, #16]
 80120ae:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80120b2:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80120b6:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 80120ba:	9206      	str	r2, [sp, #24]
 80120bc:	2900      	cmp	r1, #0
 80120be:	f000 80a7 	beq.w	8012210 <forward_lite_upsample_bilinear_iu16ou16+0x170>
 80120c2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80120c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80120ca:	ee70 aae7 	vsub.f32	s21, s1, s15
 80120ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 80120d2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80120d6:	ee27 9a87 	vmul.f32	s18, s15, s14
 80120da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80120de:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80120e0:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80120e4:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	f000 808c 	beq.w	8012206 <forward_lite_upsample_bilinear_iu16ou16+0x166>
 80120ee:	3b01      	subs	r3, #1
 80120f0:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80120f4:	eddf 8a49 	vldr	s17, [pc, #292]	@ 801221c <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 80120f8:	ee07 3a90 	vmov	s15, r3
 80120fc:	9b06      	ldr	r3, [sp, #24]
 80120fe:	1e5a      	subs	r2, r3, #1
 8012100:	fb0a f303 	mul.w	r3, sl, r3
 8012104:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012108:	ee0c 2a90 	vmov	s25, r2
 801210c:	9305      	str	r3, [sp, #20]
 801210e:	2300      	movs	r3, #0
 8012110:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012114:	9303      	str	r3, [sp, #12]
 8012116:	fb06 f308 	mul.w	r3, r6, r8
 801211a:	9307      	str	r3, [sp, #28]
 801211c:	eddd 7a03 	vldr	s15, [sp, #12]
 8012120:	9b05      	ldr	r3, [sp, #20]
 8012122:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8012126:	ee7b baea 	vsub.f32	s23, s23, s21
 801212a:	ee6b ba8b 	vmul.f32	s23, s23, s22
 801212e:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8012132:	fecb baca 	vminnm.f32	s23, s23, s20
 8012136:	eef4 ba4a 	vcmp.f32	s23, s20
 801213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801213e:	bf14      	ite	ne
 8012140:	4699      	movne	r9, r3
 8012142:	f04f 0900 	moveq.w	r9, #0
 8012146:	f1b8 0f00 	cmp.w	r8, #0
 801214a:	d056      	beq.n	80121fa <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 801214c:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8012150:	9b06      	ldr	r3, [sp, #24]
 8012152:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8012156:	9d04      	ldr	r5, [sp, #16]
 8012158:	2400      	movs	r4, #0
 801215a:	eef8 7a47 	vcvt.f32.u32	s15, s14
 801215e:	ee17 7a10 	vmov	r7, s14
 8012162:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8012166:	fb03 f707 	mul.w	r7, r3, r7
 801216a:	ee7b bae7 	vsub.f32	s23, s23, s15
 801216e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8012172:	ee07 4a90 	vmov	s15, r4
 8012176:	ab0a      	add	r3, sp, #40	@ 0x28
 8012178:	3401      	adds	r4, #1
 801217a:	4629      	mov	r1, r5
 801217c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	4652      	mov	r2, sl
 8012184:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012188:	4435      	add	r5, r6
 801218a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801218e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012192:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8012196:	fec7 7aec 	vminnm.f32	s15, s15, s25
 801219a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 801219e:	eef4 7a6c 	vcmp.f32	s15, s25
 80121a2:	ee38 7a67 	vsub.f32	s14, s16, s15
 80121a6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80121aa:	ee16 0a90 	vmov	r0, s13
 80121ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b2:	4438      	add	r0, r7
 80121b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80121b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80121bc:	bf14      	ite	ne
 80121be:	4653      	movne	r3, sl
 80121c0:	2300      	moveq	r3, #0
 80121c2:	fb06 b000 	mla	r0, r6, r0, fp
 80121c6:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80121ca:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80121ce:	9308      	str	r3, [sp, #32]
 80121d0:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80121d4:	ab08      	add	r3, sp, #32
 80121d6:	ee67 7aab 	vmul.f32	s15, s15, s23
 80121da:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80121de:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80121e2:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80121e6:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 80121ea:	f000 ffe9 	bl	80131c0 <lite_bilinear_iu16ou16_kernel>
 80121ee:	45a0      	cmp	r8, r4
 80121f0:	d1bf      	bne.n	8012172 <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 80121f2:	9b04      	ldr	r3, [sp, #16]
 80121f4:	9a07      	ldr	r2, [sp, #28]
 80121f6:	4413      	add	r3, r2
 80121f8:	9304      	str	r3, [sp, #16]
 80121fa:	9b03      	ldr	r3, [sp, #12]
 80121fc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80121fe:	3301      	adds	r3, #1
 8012200:	429a      	cmp	r2, r3
 8012202:	9303      	str	r3, [sp, #12]
 8012204:	d18a      	bne.n	801211c <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 8012206:	b00f      	add	sp, #60	@ 0x3c
 8012208:	ecbd 8b0a 	vpop	{d8-d12}
 801220c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012210:	eddf aa02 	vldr	s21, [pc, #8]	@ 801221c <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8012214:	eeb0 9a6a 	vmov.f32	s18, s21
 8012218:	e75f      	b.n	80120da <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 801221a:	bf00      	nop
 801221c:	00000000 	.word	0x00000000

08012220 <forward_lite_dense_if32of32wf32>:
 8012220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012224:	ed2d 8b0c 	vpush	{d8-d13}
 8012228:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 801222c:	6801      	ldr	r1, [r0, #0]
 801222e:	b083      	sub	sp, #12
 8012230:	fb02 f303 	mul.w	r3, r2, r3
 8012234:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012238:	9100      	str	r1, [sp, #0]
 801223a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801223e:	4299      	cmp	r1, r3
 8012240:	9301      	str	r3, [sp, #4]
 8012242:	f080 811c 	bcs.w	801247e <forward_lite_dense_if32of32wf32+0x25e>
 8012246:	4607      	mov	r7, r0
 8012248:	6904      	ldr	r4, [r0, #16]
 801224a:	0096      	lsls	r6, r2, #2
 801224c:	9b00      	ldr	r3, [sp, #0]
 801224e:	68bd      	ldr	r5, [r7, #8]
 8012250:	eb03 0e06 	add.w	lr, r3, r6
 8012254:	461e      	mov	r6, r3
 8012256:	459e      	cmp	lr, r3
 8012258:	f240 8103 	bls.w	8012462 <forward_lite_dense_if32of32wf32+0x242>
 801225c:	f1a4 0c10 	sub.w	ip, r4, #16
 8012260:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8012264:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8012268:	f10c 0c01 	add.w	ip, ip, #1
 801226c:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8012270:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8012274:	2c0f      	cmp	r4, #15
 8012276:	f240 8107 	bls.w	8012488 <forward_lite_dense_if32of32wf32+0x268>
 801227a:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 801227e:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8012282:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80124d8 <forward_lite_dense_if32of32wf32+0x2b8>
 8012286:	4621      	mov	r1, r4
 8012288:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 801228c:	3910      	subs	r1, #16
 801228e:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8012292:	3340      	adds	r3, #64	@ 0x40
 8012294:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8012298:	290f      	cmp	r1, #15
 801229a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801229e:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 80122a2:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 80122a6:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80122aa:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 80122ae:	eee4 7a85 	vfma.f32	s15, s9, s10
 80122b2:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 80122b6:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 80122ba:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 80122be:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 80122c2:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 80122c6:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 80122ca:	eee5 7a86 	vfma.f32	s15, s11, s12
 80122ce:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 80122d2:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 80122d6:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 80122da:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 80122de:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 80122e2:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 80122e6:	eeed 7a26 	vfma.f32	s15, s26, s13
 80122ea:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 80122ee:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 80122f2:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 80122f6:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 80122fa:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 80122fe:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8012302:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8012306:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 801230a:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 801230e:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8012312:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8012316:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 801231a:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 801231e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8012322:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8012326:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 801232a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801232e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8012332:	eee8 7a88 	vfma.f32	s15, s17, s16
 8012336:	eee0 7a20 	vfma.f32	s15, s0, s1
 801233a:	eee1 7a21 	vfma.f32	s15, s2, s3
 801233e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8012342:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012346:	eee4 7a24 	vfma.f32	s15, s8, s9
 801234a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801234e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012352:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012356:	d897      	bhi.n	8012288 <forward_lite_dense_if32of32wf32+0x68>
 8012358:	eb05 020b 	add.w	r2, r5, fp
 801235c:	f004 010f 	and.w	r1, r4, #15
 8012360:	4663      	mov	r3, ip
 8012362:	2903      	cmp	r1, #3
 8012364:	d95f      	bls.n	8012426 <forward_lite_dense_if32of32wf32+0x206>
 8012366:	edd2 6a01 	vldr	s13, [r2, #4]
 801236a:	1f08      	subs	r0, r1, #4
 801236c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012370:	ed93 4a00 	vldr	s8, [r3]
 8012374:	2803      	cmp	r0, #3
 8012376:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801237a:	edd2 4a00 	vldr	s9, [r2]
 801237e:	ed93 5a02 	vldr	s10, [r3, #8]
 8012382:	edd2 5a02 	vldr	s11, [r2, #8]
 8012386:	eee4 7a24 	vfma.f32	s15, s8, s9
 801238a:	ed93 6a03 	vldr	s12, [r3, #12]
 801238e:	edd2 6a03 	vldr	s13, [r2, #12]
 8012392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012396:	eee5 7a25 	vfma.f32	s15, s10, s11
 801239a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801239e:	eeb0 7a67 	vmov.f32	s14, s15
 80123a2:	d938      	bls.n	8012416 <forward_lite_dense_if32of32wf32+0x1f6>
 80123a4:	edd2 6a05 	vldr	s13, [r2, #20]
 80123a8:	f1a1 0a08 	sub.w	sl, r1, #8
 80123ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80123b0:	ed93 4a04 	vldr	s8, [r3, #16]
 80123b4:	f1ba 0f03 	cmp.w	sl, #3
 80123b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80123bc:	edd2 4a04 	vldr	s9, [r2, #16]
 80123c0:	ed93 5a06 	vldr	s10, [r3, #24]
 80123c4:	edd2 5a06 	vldr	s11, [r2, #24]
 80123c8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80123cc:	ed93 6a07 	vldr	s12, [r3, #28]
 80123d0:	edd2 6a07 	vldr	s13, [r2, #28]
 80123d4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80123d8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80123dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123e0:	d919      	bls.n	8012416 <forward_lite_dense_if32of32wf32+0x1f6>
 80123e2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80123e6:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80123ea:	ed92 4a08 	vldr	s8, [r2, #32]
 80123ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80123f2:	edd3 4a08 	vldr	s9, [r3, #32]
 80123f6:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80123fa:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80123fe:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012402:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8012406:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801240a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801240e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012412:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012416:	0880      	lsrs	r0, r0, #2
 8012418:	f001 0103 	and.w	r1, r1, #3
 801241c:	3001      	adds	r0, #1
 801241e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8012422:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8012426:	b1a9      	cbz	r1, 8012454 <forward_lite_dense_if32of32wf32+0x234>
 8012428:	edd3 6a00 	vldr	s13, [r3]
 801242c:	3901      	subs	r1, #1
 801242e:	edd2 7a00 	vldr	s15, [r2]
 8012432:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012436:	d00d      	beq.n	8012454 <forward_lite_dense_if32of32wf32+0x234>
 8012438:	edd3 6a01 	vldr	s13, [r3, #4]
 801243c:	2901      	cmp	r1, #1
 801243e:	edd2 7a01 	vldr	s15, [r2, #4]
 8012442:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012446:	d005      	beq.n	8012454 <forward_lite_dense_if32of32wf32+0x234>
 8012448:	edd2 6a02 	vldr	s13, [r2, #8]
 801244c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012450:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012454:	eca6 7a01 	vstmia	r6!, {s14}
 8012458:	45b6      	cmp	lr, r6
 801245a:	444d      	add	r5, r9
 801245c:	f63f af0a 	bhi.w	8012274 <forward_lite_dense_if32of32wf32+0x54>
 8012460:	697a      	ldr	r2, [r7, #20]
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	b9b3      	cbnz	r3, 8012494 <forward_lite_dense_if32of32wf32+0x274>
 8012466:	9b00      	ldr	r3, [sp, #0]
 8012468:	0096      	lsls	r6, r2, #2
 801246a:	9901      	ldr	r1, [sp, #4]
 801246c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012470:	693c      	ldr	r4, [r7, #16]
 8012472:	4299      	cmp	r1, r3
 8012474:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	f63f aee7 	bhi.w	801224c <forward_lite_dense_if32of32wf32+0x2c>
 801247e:	b003      	add	sp, #12
 8012480:	ecbd 8b0c 	vpop	{d8-d13}
 8012484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012488:	4621      	mov	r1, r4
 801248a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80124d8 <forward_lite_dense_if32of32wf32+0x2b8>
 801248e:	462a      	mov	r2, r5
 8012490:	4643      	mov	r3, r8
 8012492:	e766      	b.n	8012362 <forward_lite_dense_if32of32wf32+0x142>
 8012494:	2a00      	cmp	r2, #0
 8012496:	d0e6      	beq.n	8012466 <forward_lite_dense_if32of32wf32+0x246>
 8012498:	9a00      	ldr	r2, [sp, #0]
 801249a:	ed93 7a00 	vldr	s14, [r3]
 801249e:	edd2 7a00 	vldr	s15, [r2]
 80124a2:	4613      	mov	r3, r2
 80124a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124a8:	edc2 7a00 	vstr	s15, [r2]
 80124ac:	697a      	ldr	r2, [r7, #20]
 80124ae:	2a01      	cmp	r2, #1
 80124b0:	d9d9      	bls.n	8012466 <forward_lite_dense_if32of32wf32+0x246>
 80124b2:	1d19      	adds	r1, r3, #4
 80124b4:	2301      	movs	r3, #1
 80124b6:	68fa      	ldr	r2, [r7, #12]
 80124b8:	ed91 7a00 	vldr	s14, [r1]
 80124bc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80124c0:	3301      	adds	r3, #1
 80124c2:	edd2 7a00 	vldr	s15, [r2]
 80124c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124ca:	ece1 7a01 	vstmia	r1!, {s15}
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d8f0      	bhi.n	80124b6 <forward_lite_dense_if32of32wf32+0x296>
 80124d4:	e7c7      	b.n	8012466 <forward_lite_dense_if32of32wf32+0x246>
 80124d6:	bf00      	nop
 80124d8:	00000000 	.word	0x00000000

080124dc <forward_lite_dense_if32of32wf32_lut4>:
 80124dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e0:	b08d      	sub	sp, #52	@ 0x34
 80124e2:	4605      	mov	r5, r0
 80124e4:	460c      	mov	r4, r1
 80124e6:	9005      	str	r0, [sp, #20]
 80124e8:	4618      	mov	r0, r3
 80124ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80124ec:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80124ee:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 80124f2:	fb02 f303 	mul.w	r3, r2, r3
 80124f6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80124fa:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80124fc:	9308      	str	r3, [sp, #32]
 80124fe:	b126      	cbz	r6, 801250a <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8012500:	2240      	movs	r2, #64	@ 0x40
 8012502:	4631      	mov	r1, r6
 8012504:	f000 fbe0 	bl	8012cc8 <st_int8_copy>
 8012508:	4630      	mov	r0, r6
 801250a:	9b05      	ldr	r3, [sp, #20]
 801250c:	9a08      	ldr	r2, [sp, #32]
 801250e:	4293      	cmp	r3, r2
 8012510:	f080 80f7 	bcs.w	8012702 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8012514:	08eb      	lsrs	r3, r5, #3
 8012516:	f005 0101 	and.w	r1, r5, #1
 801251a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801251c:	f025 0801 	bic.w	r8, r5, #1
 8012520:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8012524:	9301      	str	r3, [sp, #4]
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	9102      	str	r1, [sp, #8]
 801252a:	0092      	lsls	r2, r2, #2
 801252c:	f104 0b20 	add.w	fp, r4, #32
 8012530:	00a9      	lsls	r1, r5, #2
 8012532:	9304      	str	r3, [sp, #16]
 8012534:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8012538:	9b05      	ldr	r3, [sp, #20]
 801253a:	9207      	str	r2, [sp, #28]
 801253c:	9109      	str	r1, [sp, #36]	@ 0x24
 801253e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012540:	9a07      	ldr	r2, [sp, #28]
 8012542:	eb03 0902 	add.w	r9, r3, r2
 8012546:	f1ab 0220 	sub.w	r2, fp, #32
 801254a:	4599      	cmp	r9, r3
 801254c:	9206      	str	r2, [sp, #24]
 801254e:	f240 80db 	bls.w	8012708 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8012552:	469e      	mov	lr, r3
 8012554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012556:	f108 33ff 	add.w	r3, r8, #4294967295
 801255a:	9303      	str	r3, [sp, #12]
 801255c:	9b01      	ldr	r3, [sp, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	f000 80b4 	beq.w	80126cc <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8012564:	9b04      	ldr	r3, [sp, #16]
 8012566:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 801272c <forward_lite_dense_if32of32wf32_lut4+0x250>
 801256a:	18d4      	adds	r4, r2, r3
 801256c:	465b      	mov	r3, fp
 801256e:	7816      	ldrb	r6, [r2, #0]
 8012570:	3204      	adds	r2, #4
 8012572:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8012576:	3320      	adds	r3, #32
 8012578:	f006 070f 	and.w	r7, r6, #15
 801257c:	0936      	lsrs	r6, r6, #4
 801257e:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8012582:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8012586:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 801258a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801258e:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8012592:	edd7 7a00 	vldr	s15, [r7]
 8012596:	ed96 3a00 	vldr	s6, [r6]
 801259a:	092e      	lsrs	r6, r5, #4
 801259c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80125a0:	f005 050f 	and.w	r5, r5, #15
 80125a4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80125a8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80125ac:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80125b0:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 80125b4:	eee3 7a04 	vfma.f32	s15, s6, s8
 80125b8:	ed96 3a00 	vldr	s6, [r6]
 80125bc:	ed95 4a00 	vldr	s8, [r5]
 80125c0:	090d      	lsrs	r5, r1, #4
 80125c2:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 80125c6:	f001 010f 	and.w	r1, r1, #15
 80125ca:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80125ce:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 80125d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80125d6:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 80125da:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 80125de:	eee3 7a23 	vfma.f32	s15, s6, s7
 80125e2:	eee4 7a05 	vfma.f32	s15, s8, s10
 80125e6:	ed95 4a00 	vldr	s8, [r5]
 80125ea:	ed91 5a00 	vldr	s10, [r1]
 80125ee:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80125f2:	42a2      	cmp	r2, r4
 80125f4:	ea4f 1511 	mov.w	r5, r1, lsr #4
 80125f8:	f001 010f 	and.w	r1, r1, #15
 80125fc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012600:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012604:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012608:	eee5 7a06 	vfma.f32	s15, s10, s12
 801260c:	ed95 5a00 	vldr	s10, [r5]
 8012610:	ed91 6a00 	vldr	s12, [r1]
 8012614:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012618:	eee6 7a26 	vfma.f32	s15, s12, s13
 801261c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012620:	d1a5      	bne.n	801256e <forward_lite_dense_if32of32wf32_lut4+0x92>
 8012622:	4656      	mov	r6, sl
 8012624:	4546      	cmp	r6, r8
 8012626:	d257      	bcs.n	80126d8 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8012628:	9b03      	ldr	r3, [sp, #12]
 801262a:	f106 0208 	add.w	r2, r6, #8
 801262e:	1e61      	subs	r1, r4, #1
 8012630:	1b9d      	subs	r5, r3, r6
 8012632:	08ef      	lsrs	r7, r5, #3
 8012634:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8012638:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801263c:	3208      	adds	r2, #8
 801263e:	ed52 5a03 	vldr	s11, [r2, #-12]
 8012642:	f003 0c0f 	and.w	ip, r3, #15
 8012646:	091b      	lsrs	r3, r3, #4
 8012648:	ed52 6a04 	vldr	s13, [r2, #-16]
 801264c:	42a9      	cmp	r1, r5
 801264e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8012652:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012656:	eddc 7a00 	vldr	s15, [ip]
 801265a:	ed93 6a00 	vldr	s12, [r3]
 801265e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012662:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012666:	ee37 7a27 	vadd.f32	s14, s14, s15
 801266a:	d1e5      	bne.n	8012638 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 801266c:	3701      	adds	r7, #1
 801266e:	19e2      	adds	r2, r4, r7
 8012670:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8012674:	9b02      	ldr	r3, [sp, #8]
 8012676:	b30b      	cbz	r3, 80126bc <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8012678:	f812 3b01 	ldrb.w	r3, [r2], #1
 801267c:	edd6 7a00 	vldr	s15, [r6]
 8012680:	091b      	lsrs	r3, r3, #4
 8012682:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012686:	edd3 6a00 	vldr	s13, [r3]
 801268a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801268e:	ecae 7a01 	vstmia	lr!, {s14}
 8012692:	45f1      	cmp	r9, lr
 8012694:	f63f af62 	bhi.w	801255c <forward_lite_dense_if32of32wf32_lut4+0x80>
 8012698:	9b05      	ldr	r3, [sp, #20]
 801269a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801269c:	1899      	adds	r1, r3, r2
 801269e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80126a0:	b9e3      	cbnz	r3, 80126dc <forward_lite_dense_if32of32wf32_lut4+0x200>
 80126a2:	9b08      	ldr	r3, [sp, #32]
 80126a4:	428b      	cmp	r3, r1
 80126a6:	d92c      	bls.n	8012702 <forward_lite_dense_if32of32wf32_lut4+0x226>
 80126a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126aa:	4498      	add	r8, r3
 80126ac:	449a      	add	sl, r3
 80126ae:	449b      	add	fp, r3
 80126b0:	9b05      	ldr	r3, [sp, #20]
 80126b2:	4599      	cmp	r9, r3
 80126b4:	d92a      	bls.n	801270c <forward_lite_dense_if32of32wf32_lut4+0x230>
 80126b6:	460b      	mov	r3, r1
 80126b8:	9105      	str	r1, [sp, #20]
 80126ba:	e741      	b.n	8012540 <forward_lite_dense_if32of32wf32_lut4+0x64>
 80126bc:	ecae 7a01 	vstmia	lr!, {s14}
 80126c0:	45f1      	cmp	r9, lr
 80126c2:	d9e9      	bls.n	8012698 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 80126c4:	9b01      	ldr	r3, [sp, #4]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	f47f af4c 	bne.w	8012564 <forward_lite_dense_if32of32wf32_lut4+0x88>
 80126cc:	9e06      	ldr	r6, [sp, #24]
 80126ce:	4614      	mov	r4, r2
 80126d0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 801272c <forward_lite_dense_if32of32wf32_lut4+0x250>
 80126d4:	4546      	cmp	r6, r8
 80126d6:	d3a7      	bcc.n	8012628 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 80126d8:	4622      	mov	r2, r4
 80126da:	e7cb      	b.n	8012674 <forward_lite_dense_if32of32wf32_lut4+0x198>
 80126dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d0df      	beq.n	80126a2 <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 80126e2:	9b07      	ldr	r3, [sp, #28]
 80126e4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80126e6:	1acb      	subs	r3, r1, r3
 80126e8:	edd3 7a00 	vldr	s15, [r3]
 80126ec:	ecb2 7a01 	vldmia	r2!, {s14}
 80126f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126f4:	ece3 7a01 	vstmia	r3!, {s15}
 80126f8:	428b      	cmp	r3, r1
 80126fa:	d1f5      	bne.n	80126e8 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 80126fc:	9b08      	ldr	r3, [sp, #32]
 80126fe:	428b      	cmp	r3, r1
 8012700:	d8d2      	bhi.n	80126a8 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 8012702:	b00d      	add	sp, #52	@ 0x34
 8012704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012708:	4619      	mov	r1, r3
 801270a:	e7c8      	b.n	801269e <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 801270c:	9b07      	ldr	r3, [sp, #28]
 801270e:	1acb      	subs	r3, r1, r3
 8012710:	461a      	mov	r2, r3
 8012712:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8012714:	ed92 7a00 	vldr	s14, [r2]
 8012718:	ecf0 7a01 	vldmia	r0!, {s15}
 801271c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012720:	ece2 7a01 	vstmia	r2!, {s15}
 8012724:	428a      	cmp	r2, r1
 8012726:	d1f5      	bne.n	8012714 <forward_lite_dense_if32of32wf32_lut4+0x238>
 8012728:	e7f2      	b.n	8012710 <forward_lite_dense_if32of32wf32_lut4+0x234>
 801272a:	bf00      	nop
 801272c:	00000000 	.word	0x00000000

08012730 <forward_lite_dense_if32of32wf32_lut8>:
 8012730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012734:	b091      	sub	sp, #68	@ 0x44
 8012736:	4699      	mov	r9, r3
 8012738:	468b      	mov	fp, r1
 801273a:	920e      	str	r2, [sp, #56]	@ 0x38
 801273c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801273e:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8012742:	9003      	str	r0, [sp, #12]
 8012744:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 8012748:	fb02 f303 	mul.w	r3, r2, r3
 801274c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012750:	930c      	str	r3, [sp, #48]	@ 0x30
 8012752:	b134      	cbz	r4, 8012762 <forward_lite_dense_if32of32wf32_lut8+0x32>
 8012754:	4648      	mov	r0, r9
 8012756:	46a1      	mov	r9, r4
 8012758:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801275c:	4621      	mov	r1, r4
 801275e:	f000 fab3 	bl	8012cc8 <st_int8_copy>
 8012762:	9b03      	ldr	r3, [sp, #12]
 8012764:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012766:	4293      	cmp	r3, r2
 8012768:	f080 8084 	bcs.w	8012874 <forward_lite_dense_if32of32wf32_lut8+0x144>
 801276c:	4bb7      	ldr	r3, [pc, #732]	@ (8012a4c <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 801276e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012770:	4443      	add	r3, r8
 8012772:	9d03      	ldr	r5, [sp, #12]
 8012774:	0092      	lsls	r2, r2, #2
 8012776:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8012a50 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801277a:	009b      	lsls	r3, r3, #2
 801277c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801277e:	f103 0120 	add.w	r1, r3, #32
 8012782:	930d      	str	r3, [sp, #52]	@ 0x34
 8012784:	445b      	add	r3, fp
 8012786:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012788:	9105      	str	r1, [sp, #20]
 801278a:	9300      	str	r3, [sp, #0]
 801278c:	eb0b 0301 	add.w	r3, fp, r1
 8012790:	469a      	mov	sl, r3
 8012792:	469e      	mov	lr, r3
 8012794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012796:	eb05 0c03 	add.w	ip, r5, r3
 801279a:	45ac      	cmp	ip, r5
 801279c:	d952      	bls.n	8012844 <forward_lite_dense_if32of32wf32_lut8+0x114>
 801279e:	9800      	ldr	r0, [sp, #0]
 80127a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80127a2:	f100 011f 	add.w	r1, r0, #31
 80127a6:	eba0 020b 	sub.w	r2, r0, fp
 80127aa:	445b      	add	r3, fp
 80127ac:	9101      	str	r1, [sp, #4]
 80127ae:	eba1 010b 	sub.w	r1, r1, fp
 80127b2:	0952      	lsrs	r2, r2, #5
 80127b4:	9306      	str	r3, [sp, #24]
 80127b6:	0889      	lsrs	r1, r1, #2
 80127b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127ba:	3101      	adds	r1, #1
 80127bc:	9102      	str	r1, [sp, #8]
 80127be:	1c51      	adds	r1, r2, #1
 80127c0:	00d2      	lsls	r2, r2, #3
 80127c2:	3210      	adds	r2, #16
 80127c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80127c6:	00ca      	lsls	r2, r1, #3
 80127c8:	9208      	str	r2, [sp, #32]
 80127ca:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 80127ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80127d0:	1f02      	subs	r2, r0, #4
 80127d2:	9204      	str	r2, [sp, #16]
 80127d4:	f10b 0204 	add.w	r2, fp, #4
 80127d8:	9207      	str	r2, [sp, #28]
 80127da:	f1b8 0f07 	cmp.w	r8, #7
 80127de:	d84c      	bhi.n	801287a <forward_lite_dense_if32of32wf32_lut8+0x14a>
 80127e0:	45d3      	cmp	fp, sl
 80127e2:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8012a50 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80127e6:	d20f      	bcs.n	8012808 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80127e8:	4659      	mov	r1, fp
 80127ea:	4618      	mov	r0, r3
 80127ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127f0:	ecf1 7a01 	vldmia	r1!, {s15}
 80127f4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80127f8:	4551      	cmp	r1, sl
 80127fa:	edd2 6a00 	vldr	s13, [r2]
 80127fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012802:	d3f3      	bcc.n	80127ec <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8012804:	9a02      	ldr	r2, [sp, #8]
 8012806:	4413      	add	r3, r2
 8012808:	eca5 7a01 	vstmia	r5!, {s14}
 801280c:	45ac      	cmp	ip, r5
 801280e:	d8e4      	bhi.n	80127da <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8012810:	9b03      	ldr	r3, [sp, #12]
 8012812:	46f3      	mov	fp, lr
 8012814:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012816:	1899      	adds	r1, r3, r2
 8012818:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801281a:	b9c3      	cbnz	r3, 801284e <forward_lite_dense_if32of32wf32_lut8+0x11e>
 801281c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801281e:	428b      	cmp	r3, r1
 8012820:	d928      	bls.n	8012874 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8012822:	9b00      	ldr	r3, [sp, #0]
 8012824:	9a05      	ldr	r2, [sp, #20]
 8012826:	4413      	add	r3, r2
 8012828:	4492      	add	sl, r2
 801282a:	9300      	str	r3, [sp, #0]
 801282c:	9b03      	ldr	r3, [sp, #12]
 801282e:	459c      	cmp	ip, r3
 8012830:	f240 821e 	bls.w	8012c70 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8012834:	460d      	mov	r5, r1
 8012836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012838:	4496      	add	lr, r2
 801283a:	9103      	str	r1, [sp, #12]
 801283c:	eb05 0c03 	add.w	ip, r5, r3
 8012840:	45ac      	cmp	ip, r5
 8012842:	d8ac      	bhi.n	801279e <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8012844:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012846:	4629      	mov	r1, r5
 8012848:	46f3      	mov	fp, lr
 801284a:	2b00      	cmp	r3, #0
 801284c:	d0e6      	beq.n	801281c <forward_lite_dense_if32of32wf32_lut8+0xec>
 801284e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012850:	2b00      	cmp	r3, #0
 8012852:	d0e3      	beq.n	801281c <forward_lite_dense_if32of32wf32_lut8+0xec>
 8012854:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012856:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012858:	1acb      	subs	r3, r1, r3
 801285a:	edd3 7a00 	vldr	s15, [r3]
 801285e:	ecb2 7a01 	vldmia	r2!, {s14}
 8012862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012866:	ece3 7a01 	vstmia	r3!, {s15}
 801286a:	428b      	cmp	r3, r1
 801286c:	d1f5      	bne.n	801285a <forward_lite_dense_if32of32wf32_lut8+0x12a>
 801286e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012870:	428b      	cmp	r3, r1
 8012872:	d8d6      	bhi.n	8012822 <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8012874:	b011      	add	sp, #68	@ 0x44
 8012876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801287a:	f003 0203 	and.w	r2, r3, #3
 801287e:	2a02      	cmp	r2, #2
 8012880:	f000 81ee 	beq.w	8012c60 <forward_lite_dense_if32of32wf32_lut8+0x530>
 8012884:	2a03      	cmp	r2, #3
 8012886:	f000 80e5 	beq.w	8012a54 <forward_lite_dense_if32of32wf32_lut8+0x324>
 801288a:	2a01      	cmp	r2, #1
 801288c:	f000 81d2 	beq.w	8012c34 <forward_lite_dense_if32of32wf32_lut8+0x504>
 8012890:	9a06      	ldr	r2, [sp, #24]
 8012892:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8012a50 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8012896:	4593      	cmp	fp, r2
 8012898:	f200 81e8 	bhi.w	8012c6c <forward_lite_dense_if32of32wf32_lut8+0x53c>
 801289c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801289e:	f103 0208 	add.w	r2, r3, #8
 80128a2:	f10b 0120 	add.w	r1, fp, #32
 80128a6:	18c4      	adds	r4, r0, r3
 80128a8:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 80128ac:	3208      	adds	r2, #8
 80128ae:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 80128b2:	3120      	adds	r1, #32
 80128b4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80128b8:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 80128bc:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 80128c0:	edd0 7a00 	vldr	s15, [r0]
 80128c4:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 80128c8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80128cc:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 80128d0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80128d4:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 80128d8:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 80128dc:	edd0 2a00 	vldr	s5, [r0]
 80128e0:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 80128e4:	eee2 7a83 	vfma.f32	s15, s5, s6
 80128e8:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 80128ec:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80128f0:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 80128f4:	ed90 3a00 	vldr	s6, [r0]
 80128f8:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 80128fc:	eee3 7a04 	vfma.f32	s15, s6, s8
 8012900:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012904:	ed90 4a00 	vldr	s8, [r0]
 8012908:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 801290c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012910:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012914:	edd0 4a00 	vldr	s9, [r0]
 8012918:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 801291c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012920:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012924:	ed90 5a00 	vldr	s10, [r0]
 8012928:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 801292c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012930:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012934:	edd0 5a00 	vldr	s11, [r0]
 8012938:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 801293c:	42a2      	cmp	r2, r4
 801293e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012942:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012946:	ed90 6a00 	vldr	s12, [r0]
 801294a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801294e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012952:	d1a9      	bne.n	80128a8 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8012954:	9a08      	ldr	r2, [sp, #32]
 8012956:	4413      	add	r3, r2
 8012958:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801295a:	4572      	cmp	r2, lr
 801295c:	f4bf af54 	bcs.w	8012808 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012960:	7819      	ldrb	r1, [r3, #0]
 8012962:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012966:	edd1 7a00 	vldr	s15, [r1]
 801296a:	4611      	mov	r1, r2
 801296c:	ecf1 6a01 	vldmia	r1!, {s13}
 8012970:	458a      	cmp	sl, r1
 8012972:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012976:	d963      	bls.n	8012a40 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012978:	7859      	ldrb	r1, [r3, #1]
 801297a:	edd2 6a01 	vldr	s13, [r2, #4]
 801297e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012982:	edd1 7a00 	vldr	s15, [r1]
 8012986:	f102 0108 	add.w	r1, r2, #8
 801298a:	458a      	cmp	sl, r1
 801298c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012990:	d956      	bls.n	8012a40 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012992:	7899      	ldrb	r1, [r3, #2]
 8012994:	edd2 6a02 	vldr	s13, [r2, #8]
 8012998:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801299c:	edd1 7a00 	vldr	s15, [r1]
 80129a0:	f102 010c 	add.w	r1, r2, #12
 80129a4:	458a      	cmp	sl, r1
 80129a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129aa:	d949      	bls.n	8012a40 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80129ac:	78d9      	ldrb	r1, [r3, #3]
 80129ae:	edd2 6a03 	vldr	s13, [r2, #12]
 80129b2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80129b6:	edd1 7a00 	vldr	s15, [r1]
 80129ba:	f102 0110 	add.w	r1, r2, #16
 80129be:	458a      	cmp	sl, r1
 80129c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129c4:	d93c      	bls.n	8012a40 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80129c6:	7919      	ldrb	r1, [r3, #4]
 80129c8:	edd2 6a04 	vldr	s13, [r2, #16]
 80129cc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80129d0:	edd1 7a00 	vldr	s15, [r1]
 80129d4:	f102 0114 	add.w	r1, r2, #20
 80129d8:	458a      	cmp	sl, r1
 80129da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129de:	d92f      	bls.n	8012a40 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80129e0:	7959      	ldrb	r1, [r3, #5]
 80129e2:	edd2 6a05 	vldr	s13, [r2, #20]
 80129e6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80129ea:	edd1 7a00 	vldr	s15, [r1]
 80129ee:	f102 0118 	add.w	r1, r2, #24
 80129f2:	458a      	cmp	sl, r1
 80129f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129f8:	d922      	bls.n	8012a40 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80129fa:	7999      	ldrb	r1, [r3, #6]
 80129fc:	edd2 6a06 	vldr	s13, [r2, #24]
 8012a00:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a04:	edd1 7a00 	vldr	s15, [r1]
 8012a08:	f102 011c 	add.w	r1, r2, #28
 8012a0c:	458a      	cmp	sl, r1
 8012a0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a12:	d915      	bls.n	8012a40 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012a14:	79d9      	ldrb	r1, [r3, #7]
 8012a16:	edd2 6a07 	vldr	s13, [r2, #28]
 8012a1a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a1e:	edd1 7a00 	vldr	s15, [r1]
 8012a22:	f102 0120 	add.w	r1, r2, #32
 8012a26:	458a      	cmp	sl, r1
 8012a28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a2c:	d908      	bls.n	8012a40 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012a2e:	7a19      	ldrb	r1, [r3, #8]
 8012a30:	edd2 7a08 	vldr	s15, [r2, #32]
 8012a34:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a38:	edd1 6a00 	vldr	s13, [r1]
 8012a3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a40:	9901      	ldr	r1, [sp, #4]
 8012a42:	1a8a      	subs	r2, r1, r2
 8012a44:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8012a48:	1c53      	adds	r3, r2, #1
 8012a4a:	e6dd      	b.n	8012808 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012a4c:	3ffffff8 	.word	0x3ffffff8
 8012a50:	00000000 	.word	0x00000000
 8012a54:	eeb0 7a63 	vmov.f32	s14, s7
 8012a58:	465a      	mov	r2, fp
 8012a5a:	461f      	mov	r7, r3
 8012a5c:	4610      	mov	r0, r2
 8012a5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012a62:	ecf0 7a01 	vldmia	r0!, {s15}
 8012a66:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a6a:	edd1 6a00 	vldr	s13, [r1]
 8012a6e:	9900      	ldr	r1, [sp, #0]
 8012a70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a74:	4288      	cmp	r0, r1
 8012a76:	f200 80f7 	bhi.w	8012c68 <forward_lite_dense_if32of32wf32_lut8+0x538>
 8012a7a:	9904      	ldr	r1, [sp, #16]
 8012a7c:	f103 0411 	add.w	r4, r3, #17
 8012a80:	3309      	adds	r3, #9
 8012a82:	1a8e      	subs	r6, r1, r2
 8012a84:	3224      	adds	r2, #36	@ 0x24
 8012a86:	0976      	lsrs	r6, r6, #5
 8012a88:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8012a8c:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8012a90:	3308      	adds	r3, #8
 8012a92:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 8012a96:	3220      	adds	r2, #32
 8012a98:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a9c:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 8012aa0:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 8012aa4:	edd1 7a00 	vldr	s15, [r1]
 8012aa8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8012aac:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8012ab0:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8012ab4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012ab8:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8012abc:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 8012ac0:	edd1 2a00 	vldr	s5, [r1]
 8012ac4:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8012ac8:	eee2 7a83 	vfma.f32	s15, s5, s6
 8012acc:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 8012ad0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012ad4:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 8012ad8:	ed91 3a00 	vldr	s6, [r1]
 8012adc:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8012ae0:	eee3 7a04 	vfma.f32	s15, s6, s8
 8012ae4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012ae8:	ed91 4a00 	vldr	s8, [r1]
 8012aec:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8012af0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012af4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012af8:	edd1 4a00 	vldr	s9, [r1]
 8012afc:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8012b00:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012b04:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012b08:	ed91 5a00 	vldr	s10, [r1]
 8012b0c:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8012b10:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012b14:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012b18:	edd1 5a00 	vldr	s11, [r1]
 8012b1c:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8012b20:	42a3      	cmp	r3, r4
 8012b22:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012b26:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012b2a:	ed91 6a00 	vldr	s12, [r1]
 8012b2e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b36:	d1a9      	bne.n	8012a8c <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8012b38:	3601      	adds	r6, #1
 8012b3a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8012b3e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8012b42:	4550      	cmp	r0, sl
 8012b44:	f4bf ae60 	bcs.w	8012808 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012b48:	781a      	ldrb	r2, [r3, #0]
 8012b4a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012b4e:	edd2 7a00 	vldr	s15, [r2]
 8012b52:	4602      	mov	r2, r0
 8012b54:	ecf2 6a01 	vldmia	r2!, {s13}
 8012b58:	4592      	cmp	sl, r2
 8012b5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012b5e:	d963      	bls.n	8012c28 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012b60:	785a      	ldrb	r2, [r3, #1]
 8012b62:	edd0 6a01 	vldr	s13, [r0, #4]
 8012b66:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012b6a:	edd2 7a00 	vldr	s15, [r2]
 8012b6e:	f100 0208 	add.w	r2, r0, #8
 8012b72:	4592      	cmp	sl, r2
 8012b74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012b78:	d956      	bls.n	8012c28 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012b7a:	789a      	ldrb	r2, [r3, #2]
 8012b7c:	edd0 6a02 	vldr	s13, [r0, #8]
 8012b80:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012b84:	edd2 7a00 	vldr	s15, [r2]
 8012b88:	f100 020c 	add.w	r2, r0, #12
 8012b8c:	4592      	cmp	sl, r2
 8012b8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012b92:	d949      	bls.n	8012c28 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012b94:	78da      	ldrb	r2, [r3, #3]
 8012b96:	edd0 6a03 	vldr	s13, [r0, #12]
 8012b9a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012b9e:	edd2 7a00 	vldr	s15, [r2]
 8012ba2:	f100 0210 	add.w	r2, r0, #16
 8012ba6:	4592      	cmp	sl, r2
 8012ba8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012bac:	d93c      	bls.n	8012c28 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012bae:	791a      	ldrb	r2, [r3, #4]
 8012bb0:	edd0 6a04 	vldr	s13, [r0, #16]
 8012bb4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012bb8:	edd2 7a00 	vldr	s15, [r2]
 8012bbc:	f100 0214 	add.w	r2, r0, #20
 8012bc0:	4592      	cmp	sl, r2
 8012bc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012bc6:	d92f      	bls.n	8012c28 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012bc8:	795a      	ldrb	r2, [r3, #5]
 8012bca:	edd0 6a05 	vldr	s13, [r0, #20]
 8012bce:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012bd2:	edd2 7a00 	vldr	s15, [r2]
 8012bd6:	f100 0218 	add.w	r2, r0, #24
 8012bda:	4596      	cmp	lr, r2
 8012bdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012be0:	d922      	bls.n	8012c28 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012be2:	799a      	ldrb	r2, [r3, #6]
 8012be4:	edd0 6a06 	vldr	s13, [r0, #24]
 8012be8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012bec:	edd2 7a00 	vldr	s15, [r2]
 8012bf0:	f100 021c 	add.w	r2, r0, #28
 8012bf4:	4596      	cmp	lr, r2
 8012bf6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012bfa:	d915      	bls.n	8012c28 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012bfc:	79da      	ldrb	r2, [r3, #7]
 8012bfe:	edd0 6a07 	vldr	s13, [r0, #28]
 8012c02:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012c06:	edd2 7a00 	vldr	s15, [r2]
 8012c0a:	f100 0220 	add.w	r2, r0, #32
 8012c0e:	4596      	cmp	lr, r2
 8012c10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c14:	d908      	bls.n	8012c28 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012c16:	7a1a      	ldrb	r2, [r3, #8]
 8012c18:	edd0 7a08 	vldr	s15, [r0, #32]
 8012c1c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012c20:	edd2 6a00 	vldr	s13, [r2]
 8012c24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c28:	9a01      	ldr	r2, [sp, #4]
 8012c2a:	1a10      	subs	r0, r2, r0
 8012c2c:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8012c30:	1c43      	adds	r3, r0, #1
 8012c32:	e5e9      	b.n	8012808 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012c34:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012c38:	eddb 7a00 	vldr	s15, [fp]
 8012c3c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012c40:	9a07      	ldr	r2, [sp, #28]
 8012c42:	ed91 7a00 	vldr	s14, [r1]
 8012c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c4a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012c4e:	ecf2 7a01 	vldmia	r2!, {s15}
 8012c52:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012c56:	edd1 6a00 	vldr	s13, [r1]
 8012c5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c5e:	e6fc      	b.n	8012a5a <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8012c60:	eeb0 7a63 	vmov.f32	s14, s7
 8012c64:	465a      	mov	r2, fp
 8012c66:	e7f0      	b.n	8012c4a <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8012c68:	463b      	mov	r3, r7
 8012c6a:	e76a      	b.n	8012b42 <forward_lite_dense_if32of32wf32_lut8+0x412>
 8012c6c:	465a      	mov	r2, fp
 8012c6e:	e674      	b.n	801295a <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8012c70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c72:	1acb      	subs	r3, r1, r3
 8012c74:	461a      	mov	r2, r3
 8012c76:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8012c78:	ed92 7a00 	vldr	s14, [r2]
 8012c7c:	ecf0 7a01 	vldmia	r0!, {s15}
 8012c80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012c84:	ece2 7a01 	vstmia	r2!, {s15}
 8012c88:	4291      	cmp	r1, r2
 8012c8a:	d1f5      	bne.n	8012c78 <forward_lite_dense_if32of32wf32_lut8+0x548>
 8012c8c:	e7f2      	b.n	8012c74 <forward_lite_dense_if32of32wf32_lut8+0x544>
 8012c8e:	bf00      	nop

08012c90 <forward_lite_nl_relu_if32of32>:
 8012c90:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012c94:	4413      	add	r3, r2
 8012c96:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8012c9a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8012c9e:	4291      	cmp	r1, r2
 8012ca0:	d80f      	bhi.n	8012cc2 <forward_lite_nl_relu_if32of32+0x32>
 8012ca2:	f10c 0104 	add.w	r1, ip, #4
 8012ca6:	1d13      	adds	r3, r2, #4
 8012ca8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8012cc4 <forward_lite_nl_relu_if32of32+0x34>
 8012cac:	eba2 020c 	sub.w	r2, r2, ip
 8012cb0:	4408      	add	r0, r1
 8012cb2:	ed73 7a01 	vldmdb	r3!, {s15}
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012cbc:	ed60 7a01 	vstmdb	r0!, {s15}
 8012cc0:	d1f7      	bne.n	8012cb2 <forward_lite_nl_relu_if32of32+0x22>
 8012cc2:	4770      	bx	lr
 8012cc4:	00000000 	.word	0x00000000

08012cc8 <st_int8_copy>:
 8012cc8:	4288      	cmp	r0, r1
 8012cca:	d010      	beq.n	8012cee <st_int8_copy+0x26>
 8012ccc:	b17a      	cbz	r2, 8012cee <st_int8_copy+0x26>
 8012cce:	4288      	cmp	r0, r1
 8012cd0:	eb00 0302 	add.w	r3, r0, r2
 8012cd4:	d20c      	bcs.n	8012cf0 <st_int8_copy+0x28>
 8012cd6:	428b      	cmp	r3, r1
 8012cd8:	d90a      	bls.n	8012cf0 <st_int8_copy+0x28>
 8012cda:	4283      	cmp	r3, r0
 8012cdc:	440a      	add	r2, r1
 8012cde:	d906      	bls.n	8012cee <st_int8_copy+0x26>
 8012ce0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8012ce4:	4283      	cmp	r3, r0
 8012ce6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8012cea:	d1f9      	bne.n	8012ce0 <st_int8_copy+0x18>
 8012cec:	4770      	bx	lr
 8012cee:	4770      	bx	lr
 8012cf0:	078b      	lsls	r3, r1, #30
 8012cf2:	d102      	bne.n	8012cfa <st_int8_copy+0x32>
 8012cf4:	e008      	b.n	8012d08 <st_int8_copy+0x40>
 8012cf6:	2a00      	cmp	r2, #0
 8012cf8:	d04c      	beq.n	8012d94 <st_int8_copy+0xcc>
 8012cfa:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8012cfe:	3a01      	subs	r2, #1
 8012d00:	f801 3b01 	strb.w	r3, [r1], #1
 8012d04:	078b      	lsls	r3, r1, #30
 8012d06:	d1f6      	bne.n	8012cf6 <st_int8_copy+0x2e>
 8012d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0c:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8012d10:	d05d      	beq.n	8012dce <st_int8_copy+0x106>
 8012d12:	ea41 0300 	orr.w	r3, r1, r0
 8012d16:	075b      	lsls	r3, r3, #29
 8012d18:	d13d      	bne.n	8012d96 <st_int8_copy+0xce>
 8012d1a:	f1be 0f01 	cmp.w	lr, #1
 8012d1e:	d03a      	beq.n	8012d96 <st_int8_copy+0xce>
 8012d20:	f100 0310 	add.w	r3, r0, #16
 8012d24:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012d28:	f101 0c10 	add.w	ip, r1, #16
 8012d2c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8012d30:	3310      	adds	r3, #16
 8012d32:	f10c 0c10 	add.w	ip, ip, #16
 8012d36:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8012d3a:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8012d3e:	4573      	cmp	r3, lr
 8012d40:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8012d44:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8012d48:	d1f2      	bne.n	8012d30 <st_int8_copy+0x68>
 8012d4a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8012d4e:	4421      	add	r1, r4
 8012d50:	4420      	add	r0, r4
 8012d52:	f002 0203 	and.w	r2, r2, #3
 8012d56:	b16b      	cbz	r3, 8012d74 <st_int8_copy+0xac>
 8012d58:	6804      	ldr	r4, [r0, #0]
 8012d5a:	600c      	str	r4, [r1, #0]
 8012d5c:	1e5c      	subs	r4, r3, #1
 8012d5e:	d005      	beq.n	8012d6c <st_int8_copy+0xa4>
 8012d60:	6845      	ldr	r5, [r0, #4]
 8012d62:	2c01      	cmp	r4, #1
 8012d64:	604d      	str	r5, [r1, #4]
 8012d66:	d001      	beq.n	8012d6c <st_int8_copy+0xa4>
 8012d68:	6884      	ldr	r4, [r0, #8]
 8012d6a:	608c      	str	r4, [r1, #8]
 8012d6c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012d70:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012d74:	b162      	cbz	r2, 8012d90 <st_int8_copy+0xc8>
 8012d76:	f990 3000 	ldrsb.w	r3, [r0]
 8012d7a:	3a01      	subs	r2, #1
 8012d7c:	700b      	strb	r3, [r1, #0]
 8012d7e:	d007      	beq.n	8012d90 <st_int8_copy+0xc8>
 8012d80:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012d84:	2a01      	cmp	r2, #1
 8012d86:	704b      	strb	r3, [r1, #1]
 8012d88:	d002      	beq.n	8012d90 <st_int8_copy+0xc8>
 8012d8a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8012d8e:	708b      	strb	r3, [r1, #2]
 8012d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d94:	4770      	bx	lr
 8012d96:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8012da0:	4684      	mov	ip, r0
 8012da2:	f8dc 8000 	ldr.w	r8, [ip]
 8012da6:	3310      	adds	r3, #16
 8012da8:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8012dac:	f10c 0c10 	add.w	ip, ip, #16
 8012db0:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8012db4:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8012db8:	f843 8c10 	str.w	r8, [r3, #-16]
 8012dbc:	f843 7c0c 	str.w	r7, [r3, #-12]
 8012dc0:	f843 6c08 	str.w	r6, [r3, #-8]
 8012dc4:	f843 5c04 	str.w	r5, [r3, #-4]
 8012dc8:	459e      	cmp	lr, r3
 8012dca:	d1ea      	bne.n	8012da2 <st_int8_copy+0xda>
 8012dcc:	e7bd      	b.n	8012d4a <st_int8_copy+0x82>
 8012dce:	0893      	lsrs	r3, r2, #2
 8012dd0:	f002 0203 	and.w	r2, r2, #3
 8012dd4:	e7bf      	b.n	8012d56 <st_int8_copy+0x8e>
 8012dd6:	bf00      	nop

08012dd8 <ai_array_to_buffer_fmt>:
 8012dd8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012ddc:	2b02      	cmp	r3, #2
 8012dde:	d053      	beq.n	8012e88 <ai_array_to_buffer_fmt+0xb0>
 8012de0:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8012de4:	4a2b      	ldr	r2, [pc, #172]	@ (8012e94 <ai_array_to_buffer_fmt+0xbc>)
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d010      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012dea:	dc21      	bgt.n	8012e30 <ai_array_to_buffer_fmt+0x58>
 8012dec:	4a2a      	ldr	r2, [pc, #168]	@ (8012e98 <ai_array_to_buffer_fmt+0xc0>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d00c      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012df2:	dd0f      	ble.n	8012e14 <ai_array_to_buffer_fmt+0x3c>
 8012df4:	4a29      	ldr	r2, [pc, #164]	@ (8012e9c <ai_array_to_buffer_fmt+0xc4>)
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d008      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012dfa:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d004      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e02:	4a27      	ldr	r2, [pc, #156]	@ (8012ea0 <ai_array_to_buffer_fmt+0xc8>)
 8012e04:	4293      	cmp	r3, r2
 8012e06:	bf0c      	ite	eq
 8012e08:	4613      	moveq	r3, r2
 8012e0a:	2340      	movne	r3, #64	@ 0x40
 8012e0c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8012e10:	4318      	orrs	r0, r3
 8012e12:	4770      	bx	lr
 8012e14:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	d0f7      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e1c:	dd2a      	ble.n	8012e74 <ai_array_to_buffer_fmt+0x9c>
 8012e1e:	4a21      	ldr	r2, [pc, #132]	@ (8012ea4 <ai_array_to_buffer_fmt+0xcc>)
 8012e20:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8012e24:	4293      	cmp	r3, r2
 8012e26:	bf0c      	ite	eq
 8012e28:	4613      	moveq	r3, r2
 8012e2a:	2340      	movne	r3, #64	@ 0x40
 8012e2c:	4318      	orrs	r0, r3
 8012e2e:	4770      	bx	lr
 8012e30:	4a1d      	ldr	r2, [pc, #116]	@ (8012ea8 <ai_array_to_buffer_fmt+0xd0>)
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d0ea      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e36:	dd0f      	ble.n	8012e58 <ai_array_to_buffer_fmt+0x80>
 8012e38:	4a1c      	ldr	r2, [pc, #112]	@ (8012eac <ai_array_to_buffer_fmt+0xd4>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d0e6      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e3e:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8012e42:	4293      	cmp	r3, r2
 8012e44:	d0e2      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e46:	4a1a      	ldr	r2, [pc, #104]	@ (8012eb0 <ai_array_to_buffer_fmt+0xd8>)
 8012e48:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	bf0c      	ite	eq
 8012e50:	4613      	moveq	r3, r2
 8012e52:	2340      	movne	r3, #64	@ 0x40
 8012e54:	4318      	orrs	r0, r3
 8012e56:	4770      	bx	lr
 8012e58:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d0d5      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e60:	3207      	adds	r2, #7
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d0d2      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e66:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8012e6a:	4293      	cmp	r3, r2
 8012e6c:	bf0c      	ite	eq
 8012e6e:	4613      	moveq	r3, r2
 8012e70:	2340      	movne	r3, #64	@ 0x40
 8012e72:	e7cb      	b.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e74:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d0c7      	beq.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e7c:	3280      	adds	r2, #128	@ 0x80
 8012e7e:	4293      	cmp	r3, r2
 8012e80:	bf0c      	ite	eq
 8012e82:	4613      	moveq	r3, r2
 8012e84:	2340      	movne	r3, #64	@ 0x40
 8012e86:	e7c1      	b.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e88:	4b0a      	ldr	r3, [pc, #40]	@ (8012eb4 <ai_array_to_buffer_fmt+0xdc>)
 8012e8a:	4003      	ands	r3, r0
 8012e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012e90:	e7bc      	b.n	8012e0c <ai_array_to_buffer_fmt+0x34>
 8012e92:	bf00      	nop
 8012e94:	00840040 	.word	0x00840040
 8012e98:	00040840 	.word	0x00040840
 8012e9c:	00041040 	.word	0x00041040
 8012ea0:	0004084f 	.word	0x0004084f
 8012ea4:	00040447 	.word	0x00040447
 8012ea8:	00840840 	.word	0x00840840
 8012eac:	00841040 	.word	0x00841040
 8012eb0:	0084084f 	.word	0x0084084f
 8012eb4:	00803fff 	.word	0x00803fff

08012eb8 <ai_array_get_byte_size>:
 8012eb8:	b319      	cbz	r1, 8012f02 <ai_array_get_byte_size+0x4a>
 8012eba:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012ebe:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8012ec2:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8012ec6:	11c0      	asrs	r0, r0, #7
 8012ec8:	fb01 f303 	mul.w	r3, r1, r3
 8012ecc:	2a04      	cmp	r2, #4
 8012ece:	f103 0307 	add.w	r3, r3, #7
 8012ed2:	f023 0307 	bic.w	r3, r3, #7
 8012ed6:	fa23 f10c 	lsr.w	r1, r3, ip
 8012eda:	d00b      	beq.n	8012ef4 <ai_array_get_byte_size+0x3c>
 8012edc:	2a08      	cmp	r2, #8
 8012ede:	d002      	beq.n	8012ee6 <ai_array_get_byte_size+0x2e>
 8012ee0:	3107      	adds	r1, #7
 8012ee2:	08c8      	lsrs	r0, r1, #3
 8012ee4:	4770      	bx	lr
 8012ee6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8012eea:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8012eee:	3107      	adds	r1, #7
 8012ef0:	08c8      	lsrs	r0, r1, #3
 8012ef2:	4770      	bx	lr
 8012ef4:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8012ef8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8012efc:	3107      	adds	r1, #7
 8012efe:	08c8      	lsrs	r0, r1, #3
 8012f00:	4770      	bx	lr
 8012f02:	4608      	mov	r0, r1
 8012f04:	4770      	bx	lr
 8012f06:	bf00      	nop

08012f08 <ai_array_get_data_byte_size>:
 8012f08:	b169      	cbz	r1, 8012f26 <ai_array_get_data_byte_size+0x1e>
 8012f0a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012f0e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8012f12:	fb03 f101 	mul.w	r1, r3, r1
 8012f16:	1dcb      	adds	r3, r1, #7
 8012f18:	f023 0307 	bic.w	r3, r3, #7
 8012f1c:	fa23 f000 	lsr.w	r0, r3, r0
 8012f20:	3007      	adds	r0, #7
 8012f22:	08c0      	lsrs	r0, r0, #3
 8012f24:	4770      	bx	lr
 8012f26:	4608      	mov	r0, r1
 8012f28:	4770      	bx	lr
 8012f2a:	bf00      	nop

08012f2c <ai_version_get>:
 8012f2c:	0212      	lsls	r2, r2, #8
 8012f2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012f32:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8012f36:	4770      	bx	lr

08012f38 <get_tensor_byte_size>:
 8012f38:	b430      	push	{r4, r5}
 8012f3a:	6985      	ldr	r5, [r0, #24]
 8012f3c:	68c4      	ldr	r4, [r0, #12]
 8012f3e:	6941      	ldr	r1, [r0, #20]
 8012f40:	4b06      	ldr	r3, [pc, #24]	@ (8012f5c <get_tensor_byte_size+0x24>)
 8012f42:	6828      	ldr	r0, [r5, #0]
 8012f44:	4a06      	ldr	r2, [pc, #24]	@ (8012f60 <get_tensor_byte_size+0x28>)
 8012f46:	4003      	ands	r3, r0
 8012f48:	68c9      	ldr	r1, [r1, #12]
 8012f4a:	68e0      	ldr	r0, [r4, #12]
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	fb01 f000 	mul.w	r0, r1, r0
 8012f52:	d101      	bne.n	8012f58 <get_tensor_byte_size+0x20>
 8012f54:	3007      	adds	r0, #7
 8012f56:	08c0      	lsrs	r0, r0, #3
 8012f58:	bc30      	pop	{r4, r5}
 8012f5a:	4770      	bx	lr
 8012f5c:	017fffff 	.word	0x017fffff
 8012f60:	000400c0 	.word	0x000400c0

08012f64 <lite_bilinear_if32of32_kernel>:
 8012f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f66:	9d05      	ldr	r5, [sp, #20]
 8012f68:	b352      	cbz	r2, 8012fc0 <lite_bilinear_if32of32_kernel+0x5c>
 8012f6a:	f04f 0c00 	mov.w	ip, #0
 8012f6e:	edd5 4a02 	vldr	s9, [r5, #8]
 8012f72:	f10c 0c01 	add.w	ip, ip, #1
 8012f76:	ed95 5a01 	vldr	s10, [r5, #4]
 8012f7a:	ed90 6a00 	vldr	s12, [r0]
 8012f7e:	4562      	cmp	r2, ip
 8012f80:	edd5 5a00 	vldr	s11, [r5]
 8012f84:	edd5 6a03 	vldr	s13, [r5, #12]
 8012f88:	e9d3 4600 	ldrd	r4, r6, [r3]
 8012f8c:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8012f90:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8012f94:	4434      	add	r4, r6
 8012f96:	edd7 7a00 	vldr	s15, [r7]
 8012f9a:	ed9e 7a00 	vldr	s14, [lr]
 8012f9e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8012fa2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012fa6:	f100 0004 	add.w	r0, r0, #4
 8012faa:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012fae:	ed94 7a00 	vldr	s14, [r4]
 8012fb2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012fb6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012fba:	ece1 7a01 	vstmia	r1!, {s15}
 8012fbe:	d1d6      	bne.n	8012f6e <lite_bilinear_if32of32_kernel+0xa>
 8012fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fc2:	bf00      	nop

08012fc4 <lite_bilinear_is8os8_kernel>:
 8012fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fc8:	9c07      	ldr	r4, [sp, #28]
 8012fca:	2a00      	cmp	r2, #0
 8012fcc:	d04b      	beq.n	8013066 <lite_bilinear_is8os8_kernel+0xa2>
 8012fce:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8012fd2:	eb01 0e02 	add.w	lr, r1, r2
 8012fd6:	f100 3cff 	add.w	ip, r0, #4294967295
 8012fda:	f1c0 0501 	rsb	r5, r0, #1
 8012fde:	685f      	ldr	r7, [r3, #4]
 8012fe0:	eb05 060c 	add.w	r6, r5, ip
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	eb00 0807 	add.w	r8, r0, r7
 8012fea:	edd4 3a02 	vldr	s7, [r4, #8]
 8012fee:	4402      	add	r2, r0
 8012ff0:	ed94 4a01 	vldr	s8, [r4, #4]
 8012ff4:	f918 8006 	ldrsb.w	r8, [r8, r6]
 8012ff8:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 8012ffc:	ee07 8a90 	vmov	s15, r8
 8013000:	f912 8006 	ldrsb.w	r8, [r2, r6]
 8013004:	ee06 9a90 	vmov	s13, r9
 8013008:	443a      	add	r2, r7
 801300a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801300e:	ee06 8a10 	vmov	s12, r8
 8013012:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013016:	edd4 4a00 	vldr	s9, [r4]
 801301a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801301e:	5792      	ldrsb	r2, [r2, r6]
 8013020:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8013024:	ed94 5a03 	vldr	s10, [r4, #12]
 8013028:	ee07 2a10 	vmov	s14, r2
 801302c:	eee4 7a06 	vfma.f32	s15, s8, s12
 8013030:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013034:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8013038:	eee5 7a07 	vfma.f32	s15, s10, s14
 801303c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013040:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8013044:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801304c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013054:	dd09      	ble.n	801306a <lite_bilinear_is8os8_kernel+0xa6>
 8013056:	ee17 2a10 	vmov	r2, s14
 801305a:	f302 0207 	ssat	r2, #8, r2
 801305e:	f801 2b01 	strb.w	r2, [r1], #1
 8013062:	4571      	cmp	r1, lr
 8013064:	d1bb      	bne.n	8012fde <lite_bilinear_is8os8_kernel+0x1a>
 8013066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801306a:	ee17 2a90 	vmov	r2, s15
 801306e:	f302 0207 	ssat	r2, #8, r2
 8013072:	f801 2b01 	strb.w	r2, [r1], #1
 8013076:	4571      	cmp	r1, lr
 8013078:	d1b1      	bne.n	8012fde <lite_bilinear_is8os8_kernel+0x1a>
 801307a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801307e:	bf00      	nop

08013080 <lite_bilinear_iu8ou8_kernel>:
 8013080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013084:	9c07      	ldr	r4, [sp, #28]
 8013086:	2a00      	cmp	r2, #0
 8013088:	d042      	beq.n	8013110 <lite_bilinear_iu8ou8_kernel+0x90>
 801308a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801308e:	eb01 0e02 	add.w	lr, r1, r2
 8013092:	f100 3cff 	add.w	ip, r0, #4294967295
 8013096:	f1c0 0501 	rsb	r5, r0, #1
 801309a:	eb05 060c 	add.w	r6, r5, ip
 801309e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 80130a2:	eef0 7a44 	vmov.f32	s15, s8
 80130a6:	edd4 6a00 	vldr	s13, [r4]
 80130aa:	ee07 2a10 	vmov	s14, r2
 80130ae:	681a      	ldr	r2, [r3, #0]
 80130b0:	685f      	ldr	r7, [r3, #4]
 80130b2:	4402      	add	r2, r0
 80130b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80130b8:	eb00 0807 	add.w	r8, r0, r7
 80130bc:	edd4 4a01 	vldr	s9, [r4, #4]
 80130c0:	f812 9006 	ldrb.w	r9, [r2, r6]
 80130c4:	443a      	add	r2, r7
 80130c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80130ca:	f818 8006 	ldrb.w	r8, [r8, r6]
 80130ce:	ee06 9a10 	vmov	s12, r9
 80130d2:	ed94 5a02 	vldr	s10, [r4, #8]
 80130d6:	ee06 8a90 	vmov	s13, r8
 80130da:	5d92      	ldrb	r2, [r2, r6]
 80130dc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80130e0:	edd4 5a03 	vldr	s11, [r4, #12]
 80130e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80130e8:	ee07 2a10 	vmov	s14, r2
 80130ec:	eee4 7a86 	vfma.f32	s15, s9, s12
 80130f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80130f4:	eee5 7a26 	vfma.f32	s15, s10, s13
 80130f8:	eee5 7a87 	vfma.f32	s15, s11, s14
 80130fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013100:	ee17 2a90 	vmov	r2, s15
 8013104:	f382 0208 	usat	r2, #8, r2
 8013108:	f801 2b01 	strb.w	r2, [r1], #1
 801310c:	4571      	cmp	r1, lr
 801310e:	d1c4      	bne.n	801309a <lite_bilinear_iu8ou8_kernel+0x1a>
 8013110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013114 <lite_bilinear_is16os16_kernel>:
 8013114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013118:	9d07      	ldr	r5, [sp, #28]
 801311a:	2a00      	cmp	r2, #0
 801311c:	d04e      	beq.n	80131bc <lite_bilinear_is16os16_kernel+0xa8>
 801311e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8013122:	f1a0 0e02 	sub.w	lr, r0, #2
 8013126:	f04f 0c00 	mov.w	ip, #0
 801312a:	ed95 7a02 	vldr	s14, [r5, #8]
 801312e:	ed95 4a01 	vldr	s8, [r5, #4]
 8013132:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 8013136:	edd5 4a00 	vldr	s9, [r5]
 801313a:	ee06 9a90 	vmov	s13, r9
 801313e:	ed95 5a03 	vldr	s10, [r5, #12]
 8013142:	e9d3 4600 	ldrd	r4, r6, [r3]
 8013146:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801314a:	eb06 080c 	add.w	r8, r6, ip
 801314e:	eb04 070c 	add.w	r7, r4, ip
 8013152:	4434      	add	r4, r6
 8013154:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 8013158:	4464      	add	r4, ip
 801315a:	ee07 6a90 	vmov	s15, r6
 801315e:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 8013162:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 8013166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801316a:	ee06 6a10 	vmov	s12, r6
 801316e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013176:	ee07 4a10 	vmov	s14, r4
 801317a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801317e:	eee4 7a06 	vfma.f32	s15, s8, s12
 8013182:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8013186:	eee5 7a07 	vfma.f32	s15, s10, s14
 801318a:	ee37 7aa5 	vadd.f32	s14, s15, s11
 801318e:	ee77 6ae5 	vsub.f32	s13, s15, s11
 8013192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013196:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801319a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a2:	bfcc      	ite	gt
 80131a4:	ee17 4a10 	vmovgt	r4, s14
 80131a8:	ee16 4a90 	vmovle	r4, s13
 80131ac:	f304 040f 	ssat	r4, #16, r4
 80131b0:	f10c 0c01 	add.w	ip, ip, #1
 80131b4:	f821 4b02 	strh.w	r4, [r1], #2
 80131b8:	4562      	cmp	r2, ip
 80131ba:	d1b6      	bne.n	801312a <lite_bilinear_is16os16_kernel+0x16>
 80131bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080131c0 <lite_bilinear_iu16ou16_kernel>:
 80131c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c4:	9d06      	ldr	r5, [sp, #24]
 80131c6:	2a00      	cmp	r2, #0
 80131c8:	d042      	beq.n	8013250 <lite_bilinear_iu16ou16_kernel+0x90>
 80131ca:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80131ce:	1e86      	subs	r6, r0, #2
 80131d0:	f04f 0e00 	mov.w	lr, #0
 80131d4:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 80131d8:	eef0 7a44 	vmov.f32	s15, s8
 80131dc:	edd5 6a00 	vldr	s13, [r5]
 80131e0:	ee07 4a10 	vmov	s14, r4
 80131e4:	681c      	ldr	r4, [r3, #0]
 80131e6:	685f      	ldr	r7, [r3, #4]
 80131e8:	eb04 080e 	add.w	r8, r4, lr
 80131ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80131f0:	eb07 0c0e 	add.w	ip, r7, lr
 80131f4:	edd5 4a01 	vldr	s9, [r5, #4]
 80131f8:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 80131fc:	443c      	add	r4, r7
 80131fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013202:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 8013206:	ee06 8a10 	vmov	s12, r8
 801320a:	4474      	add	r4, lr
 801320c:	ee06 7a90 	vmov	s13, r7
 8013210:	ed95 5a02 	vldr	s10, [r5, #8]
 8013214:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013218:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 801321c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013220:	edd5 5a03 	vldr	s11, [r5, #12]
 8013224:	ee07 4a10 	vmov	s14, r4
 8013228:	eee4 7a86 	vfma.f32	s15, s9, s12
 801322c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013230:	eee5 7a26 	vfma.f32	s15, s10, s13
 8013234:	eee5 7a87 	vfma.f32	s15, s11, s14
 8013238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801323c:	ee17 ca90 	vmov	ip, s15
 8013240:	f38c 0c10 	usat	ip, #16, ip
 8013244:	f10e 0e01 	add.w	lr, lr, #1
 8013248:	f821 cb02 	strh.w	ip, [r1], #2
 801324c:	4572      	cmp	r2, lr
 801324e:	d1c1      	bne.n	80131d4 <lite_bilinear_iu16ou16_kernel+0x14>
 8013250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013254 <malloc>:
 8013254:	4b02      	ldr	r3, [pc, #8]	@ (8013260 <malloc+0xc>)
 8013256:	4601      	mov	r1, r0
 8013258:	6818      	ldr	r0, [r3, #0]
 801325a:	f000 b825 	b.w	80132a8 <_malloc_r>
 801325e:	bf00      	nop
 8013260:	20000818 	.word	0x20000818

08013264 <sbrk_aligned>:
 8013264:	b570      	push	{r4, r5, r6, lr}
 8013266:	4e0f      	ldr	r6, [pc, #60]	@ (80132a4 <sbrk_aligned+0x40>)
 8013268:	460c      	mov	r4, r1
 801326a:	6831      	ldr	r1, [r6, #0]
 801326c:	4605      	mov	r5, r0
 801326e:	b911      	cbnz	r1, 8013276 <sbrk_aligned+0x12>
 8013270:	f000 ff48 	bl	8014104 <_sbrk_r>
 8013274:	6030      	str	r0, [r6, #0]
 8013276:	4621      	mov	r1, r4
 8013278:	4628      	mov	r0, r5
 801327a:	f000 ff43 	bl	8014104 <_sbrk_r>
 801327e:	1c43      	adds	r3, r0, #1
 8013280:	d103      	bne.n	801328a <sbrk_aligned+0x26>
 8013282:	f04f 34ff 	mov.w	r4, #4294967295
 8013286:	4620      	mov	r0, r4
 8013288:	bd70      	pop	{r4, r5, r6, pc}
 801328a:	1cc4      	adds	r4, r0, #3
 801328c:	f024 0403 	bic.w	r4, r4, #3
 8013290:	42a0      	cmp	r0, r4
 8013292:	d0f8      	beq.n	8013286 <sbrk_aligned+0x22>
 8013294:	1a21      	subs	r1, r4, r0
 8013296:	4628      	mov	r0, r5
 8013298:	f000 ff34 	bl	8014104 <_sbrk_r>
 801329c:	3001      	adds	r0, #1
 801329e:	d1f2      	bne.n	8013286 <sbrk_aligned+0x22>
 80132a0:	e7ef      	b.n	8013282 <sbrk_aligned+0x1e>
 80132a2:	bf00      	nop
 80132a4:	20005e90 	.word	0x20005e90

080132a8 <_malloc_r>:
 80132a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132ac:	1ccd      	adds	r5, r1, #3
 80132ae:	f025 0503 	bic.w	r5, r5, #3
 80132b2:	3508      	adds	r5, #8
 80132b4:	2d0c      	cmp	r5, #12
 80132b6:	bf38      	it	cc
 80132b8:	250c      	movcc	r5, #12
 80132ba:	2d00      	cmp	r5, #0
 80132bc:	4606      	mov	r6, r0
 80132be:	db01      	blt.n	80132c4 <_malloc_r+0x1c>
 80132c0:	42a9      	cmp	r1, r5
 80132c2:	d904      	bls.n	80132ce <_malloc_r+0x26>
 80132c4:	230c      	movs	r3, #12
 80132c6:	6033      	str	r3, [r6, #0]
 80132c8:	2000      	movs	r0, #0
 80132ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80133a4 <_malloc_r+0xfc>
 80132d2:	f000 f869 	bl	80133a8 <__malloc_lock>
 80132d6:	f8d8 3000 	ldr.w	r3, [r8]
 80132da:	461c      	mov	r4, r3
 80132dc:	bb44      	cbnz	r4, 8013330 <_malloc_r+0x88>
 80132de:	4629      	mov	r1, r5
 80132e0:	4630      	mov	r0, r6
 80132e2:	f7ff ffbf 	bl	8013264 <sbrk_aligned>
 80132e6:	1c43      	adds	r3, r0, #1
 80132e8:	4604      	mov	r4, r0
 80132ea:	d158      	bne.n	801339e <_malloc_r+0xf6>
 80132ec:	f8d8 4000 	ldr.w	r4, [r8]
 80132f0:	4627      	mov	r7, r4
 80132f2:	2f00      	cmp	r7, #0
 80132f4:	d143      	bne.n	801337e <_malloc_r+0xd6>
 80132f6:	2c00      	cmp	r4, #0
 80132f8:	d04b      	beq.n	8013392 <_malloc_r+0xea>
 80132fa:	6823      	ldr	r3, [r4, #0]
 80132fc:	4639      	mov	r1, r7
 80132fe:	4630      	mov	r0, r6
 8013300:	eb04 0903 	add.w	r9, r4, r3
 8013304:	f000 fefe 	bl	8014104 <_sbrk_r>
 8013308:	4581      	cmp	r9, r0
 801330a:	d142      	bne.n	8013392 <_malloc_r+0xea>
 801330c:	6821      	ldr	r1, [r4, #0]
 801330e:	1a6d      	subs	r5, r5, r1
 8013310:	4629      	mov	r1, r5
 8013312:	4630      	mov	r0, r6
 8013314:	f7ff ffa6 	bl	8013264 <sbrk_aligned>
 8013318:	3001      	adds	r0, #1
 801331a:	d03a      	beq.n	8013392 <_malloc_r+0xea>
 801331c:	6823      	ldr	r3, [r4, #0]
 801331e:	442b      	add	r3, r5
 8013320:	6023      	str	r3, [r4, #0]
 8013322:	f8d8 3000 	ldr.w	r3, [r8]
 8013326:	685a      	ldr	r2, [r3, #4]
 8013328:	bb62      	cbnz	r2, 8013384 <_malloc_r+0xdc>
 801332a:	f8c8 7000 	str.w	r7, [r8]
 801332e:	e00f      	b.n	8013350 <_malloc_r+0xa8>
 8013330:	6822      	ldr	r2, [r4, #0]
 8013332:	1b52      	subs	r2, r2, r5
 8013334:	d420      	bmi.n	8013378 <_malloc_r+0xd0>
 8013336:	2a0b      	cmp	r2, #11
 8013338:	d917      	bls.n	801336a <_malloc_r+0xc2>
 801333a:	1961      	adds	r1, r4, r5
 801333c:	42a3      	cmp	r3, r4
 801333e:	6025      	str	r5, [r4, #0]
 8013340:	bf18      	it	ne
 8013342:	6059      	strne	r1, [r3, #4]
 8013344:	6863      	ldr	r3, [r4, #4]
 8013346:	bf08      	it	eq
 8013348:	f8c8 1000 	streq.w	r1, [r8]
 801334c:	5162      	str	r2, [r4, r5]
 801334e:	604b      	str	r3, [r1, #4]
 8013350:	4630      	mov	r0, r6
 8013352:	f000 f82f 	bl	80133b4 <__malloc_unlock>
 8013356:	f104 000b 	add.w	r0, r4, #11
 801335a:	1d23      	adds	r3, r4, #4
 801335c:	f020 0007 	bic.w	r0, r0, #7
 8013360:	1ac2      	subs	r2, r0, r3
 8013362:	bf1c      	itt	ne
 8013364:	1a1b      	subne	r3, r3, r0
 8013366:	50a3      	strne	r3, [r4, r2]
 8013368:	e7af      	b.n	80132ca <_malloc_r+0x22>
 801336a:	6862      	ldr	r2, [r4, #4]
 801336c:	42a3      	cmp	r3, r4
 801336e:	bf0c      	ite	eq
 8013370:	f8c8 2000 	streq.w	r2, [r8]
 8013374:	605a      	strne	r2, [r3, #4]
 8013376:	e7eb      	b.n	8013350 <_malloc_r+0xa8>
 8013378:	4623      	mov	r3, r4
 801337a:	6864      	ldr	r4, [r4, #4]
 801337c:	e7ae      	b.n	80132dc <_malloc_r+0x34>
 801337e:	463c      	mov	r4, r7
 8013380:	687f      	ldr	r7, [r7, #4]
 8013382:	e7b6      	b.n	80132f2 <_malloc_r+0x4a>
 8013384:	461a      	mov	r2, r3
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	42a3      	cmp	r3, r4
 801338a:	d1fb      	bne.n	8013384 <_malloc_r+0xdc>
 801338c:	2300      	movs	r3, #0
 801338e:	6053      	str	r3, [r2, #4]
 8013390:	e7de      	b.n	8013350 <_malloc_r+0xa8>
 8013392:	230c      	movs	r3, #12
 8013394:	6033      	str	r3, [r6, #0]
 8013396:	4630      	mov	r0, r6
 8013398:	f000 f80c 	bl	80133b4 <__malloc_unlock>
 801339c:	e794      	b.n	80132c8 <_malloc_r+0x20>
 801339e:	6005      	str	r5, [r0, #0]
 80133a0:	e7d6      	b.n	8013350 <_malloc_r+0xa8>
 80133a2:	bf00      	nop
 80133a4:	20005e94 	.word	0x20005e94

080133a8 <__malloc_lock>:
 80133a8:	4801      	ldr	r0, [pc, #4]	@ (80133b0 <__malloc_lock+0x8>)
 80133aa:	f000 bef8 	b.w	801419e <__retarget_lock_acquire_recursive>
 80133ae:	bf00      	nop
 80133b0:	20005fd8 	.word	0x20005fd8

080133b4 <__malloc_unlock>:
 80133b4:	4801      	ldr	r0, [pc, #4]	@ (80133bc <__malloc_unlock+0x8>)
 80133b6:	f000 bef3 	b.w	80141a0 <__retarget_lock_release_recursive>
 80133ba:	bf00      	nop
 80133bc:	20005fd8 	.word	0x20005fd8

080133c0 <__cvt>:
 80133c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133c4:	ec57 6b10 	vmov	r6, r7, d0
 80133c8:	2f00      	cmp	r7, #0
 80133ca:	460c      	mov	r4, r1
 80133cc:	4619      	mov	r1, r3
 80133ce:	463b      	mov	r3, r7
 80133d0:	bfbb      	ittet	lt
 80133d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80133d6:	461f      	movlt	r7, r3
 80133d8:	2300      	movge	r3, #0
 80133da:	232d      	movlt	r3, #45	@ 0x2d
 80133dc:	700b      	strb	r3, [r1, #0]
 80133de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80133e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80133e4:	4691      	mov	r9, r2
 80133e6:	f023 0820 	bic.w	r8, r3, #32
 80133ea:	bfbc      	itt	lt
 80133ec:	4632      	movlt	r2, r6
 80133ee:	4616      	movlt	r6, r2
 80133f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80133f4:	d005      	beq.n	8013402 <__cvt+0x42>
 80133f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80133fa:	d100      	bne.n	80133fe <__cvt+0x3e>
 80133fc:	3401      	adds	r4, #1
 80133fe:	2102      	movs	r1, #2
 8013400:	e000      	b.n	8013404 <__cvt+0x44>
 8013402:	2103      	movs	r1, #3
 8013404:	ab03      	add	r3, sp, #12
 8013406:	9301      	str	r3, [sp, #4]
 8013408:	ab02      	add	r3, sp, #8
 801340a:	9300      	str	r3, [sp, #0]
 801340c:	ec47 6b10 	vmov	d0, r6, r7
 8013410:	4653      	mov	r3, sl
 8013412:	4622      	mov	r2, r4
 8013414:	f000 ff5c 	bl	80142d0 <_dtoa_r>
 8013418:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801341c:	4605      	mov	r5, r0
 801341e:	d119      	bne.n	8013454 <__cvt+0x94>
 8013420:	f019 0f01 	tst.w	r9, #1
 8013424:	d00e      	beq.n	8013444 <__cvt+0x84>
 8013426:	eb00 0904 	add.w	r9, r0, r4
 801342a:	2200      	movs	r2, #0
 801342c:	2300      	movs	r3, #0
 801342e:	4630      	mov	r0, r6
 8013430:	4639      	mov	r1, r7
 8013432:	f7ed fbc9 	bl	8000bc8 <__aeabi_dcmpeq>
 8013436:	b108      	cbz	r0, 801343c <__cvt+0x7c>
 8013438:	f8cd 900c 	str.w	r9, [sp, #12]
 801343c:	2230      	movs	r2, #48	@ 0x30
 801343e:	9b03      	ldr	r3, [sp, #12]
 8013440:	454b      	cmp	r3, r9
 8013442:	d31e      	bcc.n	8013482 <__cvt+0xc2>
 8013444:	9b03      	ldr	r3, [sp, #12]
 8013446:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013448:	1b5b      	subs	r3, r3, r5
 801344a:	4628      	mov	r0, r5
 801344c:	6013      	str	r3, [r2, #0]
 801344e:	b004      	add	sp, #16
 8013450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013454:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013458:	eb00 0904 	add.w	r9, r0, r4
 801345c:	d1e5      	bne.n	801342a <__cvt+0x6a>
 801345e:	7803      	ldrb	r3, [r0, #0]
 8013460:	2b30      	cmp	r3, #48	@ 0x30
 8013462:	d10a      	bne.n	801347a <__cvt+0xba>
 8013464:	2200      	movs	r2, #0
 8013466:	2300      	movs	r3, #0
 8013468:	4630      	mov	r0, r6
 801346a:	4639      	mov	r1, r7
 801346c:	f7ed fbac 	bl	8000bc8 <__aeabi_dcmpeq>
 8013470:	b918      	cbnz	r0, 801347a <__cvt+0xba>
 8013472:	f1c4 0401 	rsb	r4, r4, #1
 8013476:	f8ca 4000 	str.w	r4, [sl]
 801347a:	f8da 3000 	ldr.w	r3, [sl]
 801347e:	4499      	add	r9, r3
 8013480:	e7d3      	b.n	801342a <__cvt+0x6a>
 8013482:	1c59      	adds	r1, r3, #1
 8013484:	9103      	str	r1, [sp, #12]
 8013486:	701a      	strb	r2, [r3, #0]
 8013488:	e7d9      	b.n	801343e <__cvt+0x7e>

0801348a <__exponent>:
 801348a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801348c:	2900      	cmp	r1, #0
 801348e:	bfba      	itte	lt
 8013490:	4249      	neglt	r1, r1
 8013492:	232d      	movlt	r3, #45	@ 0x2d
 8013494:	232b      	movge	r3, #43	@ 0x2b
 8013496:	2909      	cmp	r1, #9
 8013498:	7002      	strb	r2, [r0, #0]
 801349a:	7043      	strb	r3, [r0, #1]
 801349c:	dd29      	ble.n	80134f2 <__exponent+0x68>
 801349e:	f10d 0307 	add.w	r3, sp, #7
 80134a2:	461d      	mov	r5, r3
 80134a4:	270a      	movs	r7, #10
 80134a6:	461a      	mov	r2, r3
 80134a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80134ac:	fb07 1416 	mls	r4, r7, r6, r1
 80134b0:	3430      	adds	r4, #48	@ 0x30
 80134b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80134b6:	460c      	mov	r4, r1
 80134b8:	2c63      	cmp	r4, #99	@ 0x63
 80134ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80134be:	4631      	mov	r1, r6
 80134c0:	dcf1      	bgt.n	80134a6 <__exponent+0x1c>
 80134c2:	3130      	adds	r1, #48	@ 0x30
 80134c4:	1e94      	subs	r4, r2, #2
 80134c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80134ca:	1c41      	adds	r1, r0, #1
 80134cc:	4623      	mov	r3, r4
 80134ce:	42ab      	cmp	r3, r5
 80134d0:	d30a      	bcc.n	80134e8 <__exponent+0x5e>
 80134d2:	f10d 0309 	add.w	r3, sp, #9
 80134d6:	1a9b      	subs	r3, r3, r2
 80134d8:	42ac      	cmp	r4, r5
 80134da:	bf88      	it	hi
 80134dc:	2300      	movhi	r3, #0
 80134de:	3302      	adds	r3, #2
 80134e0:	4403      	add	r3, r0
 80134e2:	1a18      	subs	r0, r3, r0
 80134e4:	b003      	add	sp, #12
 80134e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80134ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 80134f0:	e7ed      	b.n	80134ce <__exponent+0x44>
 80134f2:	2330      	movs	r3, #48	@ 0x30
 80134f4:	3130      	adds	r1, #48	@ 0x30
 80134f6:	7083      	strb	r3, [r0, #2]
 80134f8:	70c1      	strb	r1, [r0, #3]
 80134fa:	1d03      	adds	r3, r0, #4
 80134fc:	e7f1      	b.n	80134e2 <__exponent+0x58>
	...

08013500 <_printf_float>:
 8013500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013504:	b08d      	sub	sp, #52	@ 0x34
 8013506:	460c      	mov	r4, r1
 8013508:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801350c:	4616      	mov	r6, r2
 801350e:	461f      	mov	r7, r3
 8013510:	4605      	mov	r5, r0
 8013512:	f000 fdbf 	bl	8014094 <_localeconv_r>
 8013516:	6803      	ldr	r3, [r0, #0]
 8013518:	9304      	str	r3, [sp, #16]
 801351a:	4618      	mov	r0, r3
 801351c:	f7ec ff28 	bl	8000370 <strlen>
 8013520:	2300      	movs	r3, #0
 8013522:	930a      	str	r3, [sp, #40]	@ 0x28
 8013524:	f8d8 3000 	ldr.w	r3, [r8]
 8013528:	9005      	str	r0, [sp, #20]
 801352a:	3307      	adds	r3, #7
 801352c:	f023 0307 	bic.w	r3, r3, #7
 8013530:	f103 0208 	add.w	r2, r3, #8
 8013534:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013538:	f8d4 b000 	ldr.w	fp, [r4]
 801353c:	f8c8 2000 	str.w	r2, [r8]
 8013540:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013544:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013548:	9307      	str	r3, [sp, #28]
 801354a:	f8cd 8018 	str.w	r8, [sp, #24]
 801354e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013556:	4b9c      	ldr	r3, [pc, #624]	@ (80137c8 <_printf_float+0x2c8>)
 8013558:	f04f 32ff 	mov.w	r2, #4294967295
 801355c:	f7ed fb66 	bl	8000c2c <__aeabi_dcmpun>
 8013560:	bb70      	cbnz	r0, 80135c0 <_printf_float+0xc0>
 8013562:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013566:	4b98      	ldr	r3, [pc, #608]	@ (80137c8 <_printf_float+0x2c8>)
 8013568:	f04f 32ff 	mov.w	r2, #4294967295
 801356c:	f7ed fb40 	bl	8000bf0 <__aeabi_dcmple>
 8013570:	bb30      	cbnz	r0, 80135c0 <_printf_float+0xc0>
 8013572:	2200      	movs	r2, #0
 8013574:	2300      	movs	r3, #0
 8013576:	4640      	mov	r0, r8
 8013578:	4649      	mov	r1, r9
 801357a:	f7ed fb2f 	bl	8000bdc <__aeabi_dcmplt>
 801357e:	b110      	cbz	r0, 8013586 <_printf_float+0x86>
 8013580:	232d      	movs	r3, #45	@ 0x2d
 8013582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013586:	4a91      	ldr	r2, [pc, #580]	@ (80137cc <_printf_float+0x2cc>)
 8013588:	4b91      	ldr	r3, [pc, #580]	@ (80137d0 <_printf_float+0x2d0>)
 801358a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801358e:	bf94      	ite	ls
 8013590:	4690      	movls	r8, r2
 8013592:	4698      	movhi	r8, r3
 8013594:	2303      	movs	r3, #3
 8013596:	6123      	str	r3, [r4, #16]
 8013598:	f02b 0304 	bic.w	r3, fp, #4
 801359c:	6023      	str	r3, [r4, #0]
 801359e:	f04f 0900 	mov.w	r9, #0
 80135a2:	9700      	str	r7, [sp, #0]
 80135a4:	4633      	mov	r3, r6
 80135a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80135a8:	4621      	mov	r1, r4
 80135aa:	4628      	mov	r0, r5
 80135ac:	f000 f9d2 	bl	8013954 <_printf_common>
 80135b0:	3001      	adds	r0, #1
 80135b2:	f040 808d 	bne.w	80136d0 <_printf_float+0x1d0>
 80135b6:	f04f 30ff 	mov.w	r0, #4294967295
 80135ba:	b00d      	add	sp, #52	@ 0x34
 80135bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c0:	4642      	mov	r2, r8
 80135c2:	464b      	mov	r3, r9
 80135c4:	4640      	mov	r0, r8
 80135c6:	4649      	mov	r1, r9
 80135c8:	f7ed fb30 	bl	8000c2c <__aeabi_dcmpun>
 80135cc:	b140      	cbz	r0, 80135e0 <_printf_float+0xe0>
 80135ce:	464b      	mov	r3, r9
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	bfbc      	itt	lt
 80135d4:	232d      	movlt	r3, #45	@ 0x2d
 80135d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80135da:	4a7e      	ldr	r2, [pc, #504]	@ (80137d4 <_printf_float+0x2d4>)
 80135dc:	4b7e      	ldr	r3, [pc, #504]	@ (80137d8 <_printf_float+0x2d8>)
 80135de:	e7d4      	b.n	801358a <_printf_float+0x8a>
 80135e0:	6863      	ldr	r3, [r4, #4]
 80135e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80135e6:	9206      	str	r2, [sp, #24]
 80135e8:	1c5a      	adds	r2, r3, #1
 80135ea:	d13b      	bne.n	8013664 <_printf_float+0x164>
 80135ec:	2306      	movs	r3, #6
 80135ee:	6063      	str	r3, [r4, #4]
 80135f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80135f4:	2300      	movs	r3, #0
 80135f6:	6022      	str	r2, [r4, #0]
 80135f8:	9303      	str	r3, [sp, #12]
 80135fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80135fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013600:	ab09      	add	r3, sp, #36	@ 0x24
 8013602:	9300      	str	r3, [sp, #0]
 8013604:	6861      	ldr	r1, [r4, #4]
 8013606:	ec49 8b10 	vmov	d0, r8, r9
 801360a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801360e:	4628      	mov	r0, r5
 8013610:	f7ff fed6 	bl	80133c0 <__cvt>
 8013614:	9b06      	ldr	r3, [sp, #24]
 8013616:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013618:	2b47      	cmp	r3, #71	@ 0x47
 801361a:	4680      	mov	r8, r0
 801361c:	d129      	bne.n	8013672 <_printf_float+0x172>
 801361e:	1cc8      	adds	r0, r1, #3
 8013620:	db02      	blt.n	8013628 <_printf_float+0x128>
 8013622:	6863      	ldr	r3, [r4, #4]
 8013624:	4299      	cmp	r1, r3
 8013626:	dd41      	ble.n	80136ac <_printf_float+0x1ac>
 8013628:	f1aa 0a02 	sub.w	sl, sl, #2
 801362c:	fa5f fa8a 	uxtb.w	sl, sl
 8013630:	3901      	subs	r1, #1
 8013632:	4652      	mov	r2, sl
 8013634:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013638:	9109      	str	r1, [sp, #36]	@ 0x24
 801363a:	f7ff ff26 	bl	801348a <__exponent>
 801363e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013640:	1813      	adds	r3, r2, r0
 8013642:	2a01      	cmp	r2, #1
 8013644:	4681      	mov	r9, r0
 8013646:	6123      	str	r3, [r4, #16]
 8013648:	dc02      	bgt.n	8013650 <_printf_float+0x150>
 801364a:	6822      	ldr	r2, [r4, #0]
 801364c:	07d2      	lsls	r2, r2, #31
 801364e:	d501      	bpl.n	8013654 <_printf_float+0x154>
 8013650:	3301      	adds	r3, #1
 8013652:	6123      	str	r3, [r4, #16]
 8013654:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013658:	2b00      	cmp	r3, #0
 801365a:	d0a2      	beq.n	80135a2 <_printf_float+0xa2>
 801365c:	232d      	movs	r3, #45	@ 0x2d
 801365e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013662:	e79e      	b.n	80135a2 <_printf_float+0xa2>
 8013664:	9a06      	ldr	r2, [sp, #24]
 8013666:	2a47      	cmp	r2, #71	@ 0x47
 8013668:	d1c2      	bne.n	80135f0 <_printf_float+0xf0>
 801366a:	2b00      	cmp	r3, #0
 801366c:	d1c0      	bne.n	80135f0 <_printf_float+0xf0>
 801366e:	2301      	movs	r3, #1
 8013670:	e7bd      	b.n	80135ee <_printf_float+0xee>
 8013672:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013676:	d9db      	bls.n	8013630 <_printf_float+0x130>
 8013678:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801367c:	d118      	bne.n	80136b0 <_printf_float+0x1b0>
 801367e:	2900      	cmp	r1, #0
 8013680:	6863      	ldr	r3, [r4, #4]
 8013682:	dd0b      	ble.n	801369c <_printf_float+0x19c>
 8013684:	6121      	str	r1, [r4, #16]
 8013686:	b913      	cbnz	r3, 801368e <_printf_float+0x18e>
 8013688:	6822      	ldr	r2, [r4, #0]
 801368a:	07d0      	lsls	r0, r2, #31
 801368c:	d502      	bpl.n	8013694 <_printf_float+0x194>
 801368e:	3301      	adds	r3, #1
 8013690:	440b      	add	r3, r1
 8013692:	6123      	str	r3, [r4, #16]
 8013694:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013696:	f04f 0900 	mov.w	r9, #0
 801369a:	e7db      	b.n	8013654 <_printf_float+0x154>
 801369c:	b913      	cbnz	r3, 80136a4 <_printf_float+0x1a4>
 801369e:	6822      	ldr	r2, [r4, #0]
 80136a0:	07d2      	lsls	r2, r2, #31
 80136a2:	d501      	bpl.n	80136a8 <_printf_float+0x1a8>
 80136a4:	3302      	adds	r3, #2
 80136a6:	e7f4      	b.n	8013692 <_printf_float+0x192>
 80136a8:	2301      	movs	r3, #1
 80136aa:	e7f2      	b.n	8013692 <_printf_float+0x192>
 80136ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80136b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136b2:	4299      	cmp	r1, r3
 80136b4:	db05      	blt.n	80136c2 <_printf_float+0x1c2>
 80136b6:	6823      	ldr	r3, [r4, #0]
 80136b8:	6121      	str	r1, [r4, #16]
 80136ba:	07d8      	lsls	r0, r3, #31
 80136bc:	d5ea      	bpl.n	8013694 <_printf_float+0x194>
 80136be:	1c4b      	adds	r3, r1, #1
 80136c0:	e7e7      	b.n	8013692 <_printf_float+0x192>
 80136c2:	2900      	cmp	r1, #0
 80136c4:	bfd4      	ite	le
 80136c6:	f1c1 0202 	rsble	r2, r1, #2
 80136ca:	2201      	movgt	r2, #1
 80136cc:	4413      	add	r3, r2
 80136ce:	e7e0      	b.n	8013692 <_printf_float+0x192>
 80136d0:	6823      	ldr	r3, [r4, #0]
 80136d2:	055a      	lsls	r2, r3, #21
 80136d4:	d407      	bmi.n	80136e6 <_printf_float+0x1e6>
 80136d6:	6923      	ldr	r3, [r4, #16]
 80136d8:	4642      	mov	r2, r8
 80136da:	4631      	mov	r1, r6
 80136dc:	4628      	mov	r0, r5
 80136de:	47b8      	blx	r7
 80136e0:	3001      	adds	r0, #1
 80136e2:	d12b      	bne.n	801373c <_printf_float+0x23c>
 80136e4:	e767      	b.n	80135b6 <_printf_float+0xb6>
 80136e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80136ea:	f240 80dd 	bls.w	80138a8 <_printf_float+0x3a8>
 80136ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80136f2:	2200      	movs	r2, #0
 80136f4:	2300      	movs	r3, #0
 80136f6:	f7ed fa67 	bl	8000bc8 <__aeabi_dcmpeq>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d033      	beq.n	8013766 <_printf_float+0x266>
 80136fe:	4a37      	ldr	r2, [pc, #220]	@ (80137dc <_printf_float+0x2dc>)
 8013700:	2301      	movs	r3, #1
 8013702:	4631      	mov	r1, r6
 8013704:	4628      	mov	r0, r5
 8013706:	47b8      	blx	r7
 8013708:	3001      	adds	r0, #1
 801370a:	f43f af54 	beq.w	80135b6 <_printf_float+0xb6>
 801370e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013712:	4543      	cmp	r3, r8
 8013714:	db02      	blt.n	801371c <_printf_float+0x21c>
 8013716:	6823      	ldr	r3, [r4, #0]
 8013718:	07d8      	lsls	r0, r3, #31
 801371a:	d50f      	bpl.n	801373c <_printf_float+0x23c>
 801371c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013720:	4631      	mov	r1, r6
 8013722:	4628      	mov	r0, r5
 8013724:	47b8      	blx	r7
 8013726:	3001      	adds	r0, #1
 8013728:	f43f af45 	beq.w	80135b6 <_printf_float+0xb6>
 801372c:	f04f 0900 	mov.w	r9, #0
 8013730:	f108 38ff 	add.w	r8, r8, #4294967295
 8013734:	f104 0a1a 	add.w	sl, r4, #26
 8013738:	45c8      	cmp	r8, r9
 801373a:	dc09      	bgt.n	8013750 <_printf_float+0x250>
 801373c:	6823      	ldr	r3, [r4, #0]
 801373e:	079b      	lsls	r3, r3, #30
 8013740:	f100 8103 	bmi.w	801394a <_printf_float+0x44a>
 8013744:	68e0      	ldr	r0, [r4, #12]
 8013746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013748:	4298      	cmp	r0, r3
 801374a:	bfb8      	it	lt
 801374c:	4618      	movlt	r0, r3
 801374e:	e734      	b.n	80135ba <_printf_float+0xba>
 8013750:	2301      	movs	r3, #1
 8013752:	4652      	mov	r2, sl
 8013754:	4631      	mov	r1, r6
 8013756:	4628      	mov	r0, r5
 8013758:	47b8      	blx	r7
 801375a:	3001      	adds	r0, #1
 801375c:	f43f af2b 	beq.w	80135b6 <_printf_float+0xb6>
 8013760:	f109 0901 	add.w	r9, r9, #1
 8013764:	e7e8      	b.n	8013738 <_printf_float+0x238>
 8013766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013768:	2b00      	cmp	r3, #0
 801376a:	dc39      	bgt.n	80137e0 <_printf_float+0x2e0>
 801376c:	4a1b      	ldr	r2, [pc, #108]	@ (80137dc <_printf_float+0x2dc>)
 801376e:	2301      	movs	r3, #1
 8013770:	4631      	mov	r1, r6
 8013772:	4628      	mov	r0, r5
 8013774:	47b8      	blx	r7
 8013776:	3001      	adds	r0, #1
 8013778:	f43f af1d 	beq.w	80135b6 <_printf_float+0xb6>
 801377c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013780:	ea59 0303 	orrs.w	r3, r9, r3
 8013784:	d102      	bne.n	801378c <_printf_float+0x28c>
 8013786:	6823      	ldr	r3, [r4, #0]
 8013788:	07d9      	lsls	r1, r3, #31
 801378a:	d5d7      	bpl.n	801373c <_printf_float+0x23c>
 801378c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013790:	4631      	mov	r1, r6
 8013792:	4628      	mov	r0, r5
 8013794:	47b8      	blx	r7
 8013796:	3001      	adds	r0, #1
 8013798:	f43f af0d 	beq.w	80135b6 <_printf_float+0xb6>
 801379c:	f04f 0a00 	mov.w	sl, #0
 80137a0:	f104 0b1a 	add.w	fp, r4, #26
 80137a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137a6:	425b      	negs	r3, r3
 80137a8:	4553      	cmp	r3, sl
 80137aa:	dc01      	bgt.n	80137b0 <_printf_float+0x2b0>
 80137ac:	464b      	mov	r3, r9
 80137ae:	e793      	b.n	80136d8 <_printf_float+0x1d8>
 80137b0:	2301      	movs	r3, #1
 80137b2:	465a      	mov	r2, fp
 80137b4:	4631      	mov	r1, r6
 80137b6:	4628      	mov	r0, r5
 80137b8:	47b8      	blx	r7
 80137ba:	3001      	adds	r0, #1
 80137bc:	f43f aefb 	beq.w	80135b6 <_printf_float+0xb6>
 80137c0:	f10a 0a01 	add.w	sl, sl, #1
 80137c4:	e7ee      	b.n	80137a4 <_printf_float+0x2a4>
 80137c6:	bf00      	nop
 80137c8:	7fefffff 	.word	0x7fefffff
 80137cc:	080d31f0 	.word	0x080d31f0
 80137d0:	080d31f4 	.word	0x080d31f4
 80137d4:	080d31f8 	.word	0x080d31f8
 80137d8:	080d31fc 	.word	0x080d31fc
 80137dc:	080d3200 	.word	0x080d3200
 80137e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80137e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80137e6:	4553      	cmp	r3, sl
 80137e8:	bfa8      	it	ge
 80137ea:	4653      	movge	r3, sl
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	4699      	mov	r9, r3
 80137f0:	dc36      	bgt.n	8013860 <_printf_float+0x360>
 80137f2:	f04f 0b00 	mov.w	fp, #0
 80137f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137fa:	f104 021a 	add.w	r2, r4, #26
 80137fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013800:	9306      	str	r3, [sp, #24]
 8013802:	eba3 0309 	sub.w	r3, r3, r9
 8013806:	455b      	cmp	r3, fp
 8013808:	dc31      	bgt.n	801386e <_printf_float+0x36e>
 801380a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801380c:	459a      	cmp	sl, r3
 801380e:	dc3a      	bgt.n	8013886 <_printf_float+0x386>
 8013810:	6823      	ldr	r3, [r4, #0]
 8013812:	07da      	lsls	r2, r3, #31
 8013814:	d437      	bmi.n	8013886 <_printf_float+0x386>
 8013816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013818:	ebaa 0903 	sub.w	r9, sl, r3
 801381c:	9b06      	ldr	r3, [sp, #24]
 801381e:	ebaa 0303 	sub.w	r3, sl, r3
 8013822:	4599      	cmp	r9, r3
 8013824:	bfa8      	it	ge
 8013826:	4699      	movge	r9, r3
 8013828:	f1b9 0f00 	cmp.w	r9, #0
 801382c:	dc33      	bgt.n	8013896 <_printf_float+0x396>
 801382e:	f04f 0800 	mov.w	r8, #0
 8013832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013836:	f104 0b1a 	add.w	fp, r4, #26
 801383a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801383c:	ebaa 0303 	sub.w	r3, sl, r3
 8013840:	eba3 0309 	sub.w	r3, r3, r9
 8013844:	4543      	cmp	r3, r8
 8013846:	f77f af79 	ble.w	801373c <_printf_float+0x23c>
 801384a:	2301      	movs	r3, #1
 801384c:	465a      	mov	r2, fp
 801384e:	4631      	mov	r1, r6
 8013850:	4628      	mov	r0, r5
 8013852:	47b8      	blx	r7
 8013854:	3001      	adds	r0, #1
 8013856:	f43f aeae 	beq.w	80135b6 <_printf_float+0xb6>
 801385a:	f108 0801 	add.w	r8, r8, #1
 801385e:	e7ec      	b.n	801383a <_printf_float+0x33a>
 8013860:	4642      	mov	r2, r8
 8013862:	4631      	mov	r1, r6
 8013864:	4628      	mov	r0, r5
 8013866:	47b8      	blx	r7
 8013868:	3001      	adds	r0, #1
 801386a:	d1c2      	bne.n	80137f2 <_printf_float+0x2f2>
 801386c:	e6a3      	b.n	80135b6 <_printf_float+0xb6>
 801386e:	2301      	movs	r3, #1
 8013870:	4631      	mov	r1, r6
 8013872:	4628      	mov	r0, r5
 8013874:	9206      	str	r2, [sp, #24]
 8013876:	47b8      	blx	r7
 8013878:	3001      	adds	r0, #1
 801387a:	f43f ae9c 	beq.w	80135b6 <_printf_float+0xb6>
 801387e:	9a06      	ldr	r2, [sp, #24]
 8013880:	f10b 0b01 	add.w	fp, fp, #1
 8013884:	e7bb      	b.n	80137fe <_printf_float+0x2fe>
 8013886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801388a:	4631      	mov	r1, r6
 801388c:	4628      	mov	r0, r5
 801388e:	47b8      	blx	r7
 8013890:	3001      	adds	r0, #1
 8013892:	d1c0      	bne.n	8013816 <_printf_float+0x316>
 8013894:	e68f      	b.n	80135b6 <_printf_float+0xb6>
 8013896:	9a06      	ldr	r2, [sp, #24]
 8013898:	464b      	mov	r3, r9
 801389a:	4442      	add	r2, r8
 801389c:	4631      	mov	r1, r6
 801389e:	4628      	mov	r0, r5
 80138a0:	47b8      	blx	r7
 80138a2:	3001      	adds	r0, #1
 80138a4:	d1c3      	bne.n	801382e <_printf_float+0x32e>
 80138a6:	e686      	b.n	80135b6 <_printf_float+0xb6>
 80138a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80138ac:	f1ba 0f01 	cmp.w	sl, #1
 80138b0:	dc01      	bgt.n	80138b6 <_printf_float+0x3b6>
 80138b2:	07db      	lsls	r3, r3, #31
 80138b4:	d536      	bpl.n	8013924 <_printf_float+0x424>
 80138b6:	2301      	movs	r3, #1
 80138b8:	4642      	mov	r2, r8
 80138ba:	4631      	mov	r1, r6
 80138bc:	4628      	mov	r0, r5
 80138be:	47b8      	blx	r7
 80138c0:	3001      	adds	r0, #1
 80138c2:	f43f ae78 	beq.w	80135b6 <_printf_float+0xb6>
 80138c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138ca:	4631      	mov	r1, r6
 80138cc:	4628      	mov	r0, r5
 80138ce:	47b8      	blx	r7
 80138d0:	3001      	adds	r0, #1
 80138d2:	f43f ae70 	beq.w	80135b6 <_printf_float+0xb6>
 80138d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80138da:	2200      	movs	r2, #0
 80138dc:	2300      	movs	r3, #0
 80138de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138e2:	f7ed f971 	bl	8000bc8 <__aeabi_dcmpeq>
 80138e6:	b9c0      	cbnz	r0, 801391a <_printf_float+0x41a>
 80138e8:	4653      	mov	r3, sl
 80138ea:	f108 0201 	add.w	r2, r8, #1
 80138ee:	4631      	mov	r1, r6
 80138f0:	4628      	mov	r0, r5
 80138f2:	47b8      	blx	r7
 80138f4:	3001      	adds	r0, #1
 80138f6:	d10c      	bne.n	8013912 <_printf_float+0x412>
 80138f8:	e65d      	b.n	80135b6 <_printf_float+0xb6>
 80138fa:	2301      	movs	r3, #1
 80138fc:	465a      	mov	r2, fp
 80138fe:	4631      	mov	r1, r6
 8013900:	4628      	mov	r0, r5
 8013902:	47b8      	blx	r7
 8013904:	3001      	adds	r0, #1
 8013906:	f43f ae56 	beq.w	80135b6 <_printf_float+0xb6>
 801390a:	f108 0801 	add.w	r8, r8, #1
 801390e:	45d0      	cmp	r8, sl
 8013910:	dbf3      	blt.n	80138fa <_printf_float+0x3fa>
 8013912:	464b      	mov	r3, r9
 8013914:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013918:	e6df      	b.n	80136da <_printf_float+0x1da>
 801391a:	f04f 0800 	mov.w	r8, #0
 801391e:	f104 0b1a 	add.w	fp, r4, #26
 8013922:	e7f4      	b.n	801390e <_printf_float+0x40e>
 8013924:	2301      	movs	r3, #1
 8013926:	4642      	mov	r2, r8
 8013928:	e7e1      	b.n	80138ee <_printf_float+0x3ee>
 801392a:	2301      	movs	r3, #1
 801392c:	464a      	mov	r2, r9
 801392e:	4631      	mov	r1, r6
 8013930:	4628      	mov	r0, r5
 8013932:	47b8      	blx	r7
 8013934:	3001      	adds	r0, #1
 8013936:	f43f ae3e 	beq.w	80135b6 <_printf_float+0xb6>
 801393a:	f108 0801 	add.w	r8, r8, #1
 801393e:	68e3      	ldr	r3, [r4, #12]
 8013940:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013942:	1a5b      	subs	r3, r3, r1
 8013944:	4543      	cmp	r3, r8
 8013946:	dcf0      	bgt.n	801392a <_printf_float+0x42a>
 8013948:	e6fc      	b.n	8013744 <_printf_float+0x244>
 801394a:	f04f 0800 	mov.w	r8, #0
 801394e:	f104 0919 	add.w	r9, r4, #25
 8013952:	e7f4      	b.n	801393e <_printf_float+0x43e>

08013954 <_printf_common>:
 8013954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013958:	4616      	mov	r6, r2
 801395a:	4698      	mov	r8, r3
 801395c:	688a      	ldr	r2, [r1, #8]
 801395e:	690b      	ldr	r3, [r1, #16]
 8013960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013964:	4293      	cmp	r3, r2
 8013966:	bfb8      	it	lt
 8013968:	4613      	movlt	r3, r2
 801396a:	6033      	str	r3, [r6, #0]
 801396c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013970:	4607      	mov	r7, r0
 8013972:	460c      	mov	r4, r1
 8013974:	b10a      	cbz	r2, 801397a <_printf_common+0x26>
 8013976:	3301      	adds	r3, #1
 8013978:	6033      	str	r3, [r6, #0]
 801397a:	6823      	ldr	r3, [r4, #0]
 801397c:	0699      	lsls	r1, r3, #26
 801397e:	bf42      	ittt	mi
 8013980:	6833      	ldrmi	r3, [r6, #0]
 8013982:	3302      	addmi	r3, #2
 8013984:	6033      	strmi	r3, [r6, #0]
 8013986:	6825      	ldr	r5, [r4, #0]
 8013988:	f015 0506 	ands.w	r5, r5, #6
 801398c:	d106      	bne.n	801399c <_printf_common+0x48>
 801398e:	f104 0a19 	add.w	sl, r4, #25
 8013992:	68e3      	ldr	r3, [r4, #12]
 8013994:	6832      	ldr	r2, [r6, #0]
 8013996:	1a9b      	subs	r3, r3, r2
 8013998:	42ab      	cmp	r3, r5
 801399a:	dc26      	bgt.n	80139ea <_printf_common+0x96>
 801399c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80139a0:	6822      	ldr	r2, [r4, #0]
 80139a2:	3b00      	subs	r3, #0
 80139a4:	bf18      	it	ne
 80139a6:	2301      	movne	r3, #1
 80139a8:	0692      	lsls	r2, r2, #26
 80139aa:	d42b      	bmi.n	8013a04 <_printf_common+0xb0>
 80139ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80139b0:	4641      	mov	r1, r8
 80139b2:	4638      	mov	r0, r7
 80139b4:	47c8      	blx	r9
 80139b6:	3001      	adds	r0, #1
 80139b8:	d01e      	beq.n	80139f8 <_printf_common+0xa4>
 80139ba:	6823      	ldr	r3, [r4, #0]
 80139bc:	6922      	ldr	r2, [r4, #16]
 80139be:	f003 0306 	and.w	r3, r3, #6
 80139c2:	2b04      	cmp	r3, #4
 80139c4:	bf02      	ittt	eq
 80139c6:	68e5      	ldreq	r5, [r4, #12]
 80139c8:	6833      	ldreq	r3, [r6, #0]
 80139ca:	1aed      	subeq	r5, r5, r3
 80139cc:	68a3      	ldr	r3, [r4, #8]
 80139ce:	bf0c      	ite	eq
 80139d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139d4:	2500      	movne	r5, #0
 80139d6:	4293      	cmp	r3, r2
 80139d8:	bfc4      	itt	gt
 80139da:	1a9b      	subgt	r3, r3, r2
 80139dc:	18ed      	addgt	r5, r5, r3
 80139de:	2600      	movs	r6, #0
 80139e0:	341a      	adds	r4, #26
 80139e2:	42b5      	cmp	r5, r6
 80139e4:	d11a      	bne.n	8013a1c <_printf_common+0xc8>
 80139e6:	2000      	movs	r0, #0
 80139e8:	e008      	b.n	80139fc <_printf_common+0xa8>
 80139ea:	2301      	movs	r3, #1
 80139ec:	4652      	mov	r2, sl
 80139ee:	4641      	mov	r1, r8
 80139f0:	4638      	mov	r0, r7
 80139f2:	47c8      	blx	r9
 80139f4:	3001      	adds	r0, #1
 80139f6:	d103      	bne.n	8013a00 <_printf_common+0xac>
 80139f8:	f04f 30ff 	mov.w	r0, #4294967295
 80139fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a00:	3501      	adds	r5, #1
 8013a02:	e7c6      	b.n	8013992 <_printf_common+0x3e>
 8013a04:	18e1      	adds	r1, r4, r3
 8013a06:	1c5a      	adds	r2, r3, #1
 8013a08:	2030      	movs	r0, #48	@ 0x30
 8013a0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013a0e:	4422      	add	r2, r4
 8013a10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013a14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013a18:	3302      	adds	r3, #2
 8013a1a:	e7c7      	b.n	80139ac <_printf_common+0x58>
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	4622      	mov	r2, r4
 8013a20:	4641      	mov	r1, r8
 8013a22:	4638      	mov	r0, r7
 8013a24:	47c8      	blx	r9
 8013a26:	3001      	adds	r0, #1
 8013a28:	d0e6      	beq.n	80139f8 <_printf_common+0xa4>
 8013a2a:	3601      	adds	r6, #1
 8013a2c:	e7d9      	b.n	80139e2 <_printf_common+0x8e>
	...

08013a30 <_printf_i>:
 8013a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a34:	7e0f      	ldrb	r7, [r1, #24]
 8013a36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a38:	2f78      	cmp	r7, #120	@ 0x78
 8013a3a:	4691      	mov	r9, r2
 8013a3c:	4680      	mov	r8, r0
 8013a3e:	460c      	mov	r4, r1
 8013a40:	469a      	mov	sl, r3
 8013a42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013a46:	d807      	bhi.n	8013a58 <_printf_i+0x28>
 8013a48:	2f62      	cmp	r7, #98	@ 0x62
 8013a4a:	d80a      	bhi.n	8013a62 <_printf_i+0x32>
 8013a4c:	2f00      	cmp	r7, #0
 8013a4e:	f000 80d2 	beq.w	8013bf6 <_printf_i+0x1c6>
 8013a52:	2f58      	cmp	r7, #88	@ 0x58
 8013a54:	f000 80b9 	beq.w	8013bca <_printf_i+0x19a>
 8013a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013a60:	e03a      	b.n	8013ad8 <_printf_i+0xa8>
 8013a62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013a66:	2b15      	cmp	r3, #21
 8013a68:	d8f6      	bhi.n	8013a58 <_printf_i+0x28>
 8013a6a:	a101      	add	r1, pc, #4	@ (adr r1, 8013a70 <_printf_i+0x40>)
 8013a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a70:	08013ac9 	.word	0x08013ac9
 8013a74:	08013add 	.word	0x08013add
 8013a78:	08013a59 	.word	0x08013a59
 8013a7c:	08013a59 	.word	0x08013a59
 8013a80:	08013a59 	.word	0x08013a59
 8013a84:	08013a59 	.word	0x08013a59
 8013a88:	08013add 	.word	0x08013add
 8013a8c:	08013a59 	.word	0x08013a59
 8013a90:	08013a59 	.word	0x08013a59
 8013a94:	08013a59 	.word	0x08013a59
 8013a98:	08013a59 	.word	0x08013a59
 8013a9c:	08013bdd 	.word	0x08013bdd
 8013aa0:	08013b07 	.word	0x08013b07
 8013aa4:	08013b97 	.word	0x08013b97
 8013aa8:	08013a59 	.word	0x08013a59
 8013aac:	08013a59 	.word	0x08013a59
 8013ab0:	08013bff 	.word	0x08013bff
 8013ab4:	08013a59 	.word	0x08013a59
 8013ab8:	08013b07 	.word	0x08013b07
 8013abc:	08013a59 	.word	0x08013a59
 8013ac0:	08013a59 	.word	0x08013a59
 8013ac4:	08013b9f 	.word	0x08013b9f
 8013ac8:	6833      	ldr	r3, [r6, #0]
 8013aca:	1d1a      	adds	r2, r3, #4
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	6032      	str	r2, [r6, #0]
 8013ad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ad4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013ad8:	2301      	movs	r3, #1
 8013ada:	e09d      	b.n	8013c18 <_printf_i+0x1e8>
 8013adc:	6833      	ldr	r3, [r6, #0]
 8013ade:	6820      	ldr	r0, [r4, #0]
 8013ae0:	1d19      	adds	r1, r3, #4
 8013ae2:	6031      	str	r1, [r6, #0]
 8013ae4:	0606      	lsls	r6, r0, #24
 8013ae6:	d501      	bpl.n	8013aec <_printf_i+0xbc>
 8013ae8:	681d      	ldr	r5, [r3, #0]
 8013aea:	e003      	b.n	8013af4 <_printf_i+0xc4>
 8013aec:	0645      	lsls	r5, r0, #25
 8013aee:	d5fb      	bpl.n	8013ae8 <_printf_i+0xb8>
 8013af0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013af4:	2d00      	cmp	r5, #0
 8013af6:	da03      	bge.n	8013b00 <_printf_i+0xd0>
 8013af8:	232d      	movs	r3, #45	@ 0x2d
 8013afa:	426d      	negs	r5, r5
 8013afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b00:	4859      	ldr	r0, [pc, #356]	@ (8013c68 <_printf_i+0x238>)
 8013b02:	230a      	movs	r3, #10
 8013b04:	e011      	b.n	8013b2a <_printf_i+0xfa>
 8013b06:	6821      	ldr	r1, [r4, #0]
 8013b08:	6833      	ldr	r3, [r6, #0]
 8013b0a:	0608      	lsls	r0, r1, #24
 8013b0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b10:	d402      	bmi.n	8013b18 <_printf_i+0xe8>
 8013b12:	0649      	lsls	r1, r1, #25
 8013b14:	bf48      	it	mi
 8013b16:	b2ad      	uxthmi	r5, r5
 8013b18:	2f6f      	cmp	r7, #111	@ 0x6f
 8013b1a:	4853      	ldr	r0, [pc, #332]	@ (8013c68 <_printf_i+0x238>)
 8013b1c:	6033      	str	r3, [r6, #0]
 8013b1e:	bf14      	ite	ne
 8013b20:	230a      	movne	r3, #10
 8013b22:	2308      	moveq	r3, #8
 8013b24:	2100      	movs	r1, #0
 8013b26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013b2a:	6866      	ldr	r6, [r4, #4]
 8013b2c:	60a6      	str	r6, [r4, #8]
 8013b2e:	2e00      	cmp	r6, #0
 8013b30:	bfa2      	ittt	ge
 8013b32:	6821      	ldrge	r1, [r4, #0]
 8013b34:	f021 0104 	bicge.w	r1, r1, #4
 8013b38:	6021      	strge	r1, [r4, #0]
 8013b3a:	b90d      	cbnz	r5, 8013b40 <_printf_i+0x110>
 8013b3c:	2e00      	cmp	r6, #0
 8013b3e:	d04b      	beq.n	8013bd8 <_printf_i+0x1a8>
 8013b40:	4616      	mov	r6, r2
 8013b42:	fbb5 f1f3 	udiv	r1, r5, r3
 8013b46:	fb03 5711 	mls	r7, r3, r1, r5
 8013b4a:	5dc7      	ldrb	r7, [r0, r7]
 8013b4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b50:	462f      	mov	r7, r5
 8013b52:	42bb      	cmp	r3, r7
 8013b54:	460d      	mov	r5, r1
 8013b56:	d9f4      	bls.n	8013b42 <_printf_i+0x112>
 8013b58:	2b08      	cmp	r3, #8
 8013b5a:	d10b      	bne.n	8013b74 <_printf_i+0x144>
 8013b5c:	6823      	ldr	r3, [r4, #0]
 8013b5e:	07df      	lsls	r7, r3, #31
 8013b60:	d508      	bpl.n	8013b74 <_printf_i+0x144>
 8013b62:	6923      	ldr	r3, [r4, #16]
 8013b64:	6861      	ldr	r1, [r4, #4]
 8013b66:	4299      	cmp	r1, r3
 8013b68:	bfde      	ittt	le
 8013b6a:	2330      	movle	r3, #48	@ 0x30
 8013b6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b74:	1b92      	subs	r2, r2, r6
 8013b76:	6122      	str	r2, [r4, #16]
 8013b78:	f8cd a000 	str.w	sl, [sp]
 8013b7c:	464b      	mov	r3, r9
 8013b7e:	aa03      	add	r2, sp, #12
 8013b80:	4621      	mov	r1, r4
 8013b82:	4640      	mov	r0, r8
 8013b84:	f7ff fee6 	bl	8013954 <_printf_common>
 8013b88:	3001      	adds	r0, #1
 8013b8a:	d14a      	bne.n	8013c22 <_printf_i+0x1f2>
 8013b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8013b90:	b004      	add	sp, #16
 8013b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b96:	6823      	ldr	r3, [r4, #0]
 8013b98:	f043 0320 	orr.w	r3, r3, #32
 8013b9c:	6023      	str	r3, [r4, #0]
 8013b9e:	4833      	ldr	r0, [pc, #204]	@ (8013c6c <_printf_i+0x23c>)
 8013ba0:	2778      	movs	r7, #120	@ 0x78
 8013ba2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013ba6:	6823      	ldr	r3, [r4, #0]
 8013ba8:	6831      	ldr	r1, [r6, #0]
 8013baa:	061f      	lsls	r7, r3, #24
 8013bac:	f851 5b04 	ldr.w	r5, [r1], #4
 8013bb0:	d402      	bmi.n	8013bb8 <_printf_i+0x188>
 8013bb2:	065f      	lsls	r7, r3, #25
 8013bb4:	bf48      	it	mi
 8013bb6:	b2ad      	uxthmi	r5, r5
 8013bb8:	6031      	str	r1, [r6, #0]
 8013bba:	07d9      	lsls	r1, r3, #31
 8013bbc:	bf44      	itt	mi
 8013bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8013bc2:	6023      	strmi	r3, [r4, #0]
 8013bc4:	b11d      	cbz	r5, 8013bce <_printf_i+0x19e>
 8013bc6:	2310      	movs	r3, #16
 8013bc8:	e7ac      	b.n	8013b24 <_printf_i+0xf4>
 8013bca:	4827      	ldr	r0, [pc, #156]	@ (8013c68 <_printf_i+0x238>)
 8013bcc:	e7e9      	b.n	8013ba2 <_printf_i+0x172>
 8013bce:	6823      	ldr	r3, [r4, #0]
 8013bd0:	f023 0320 	bic.w	r3, r3, #32
 8013bd4:	6023      	str	r3, [r4, #0]
 8013bd6:	e7f6      	b.n	8013bc6 <_printf_i+0x196>
 8013bd8:	4616      	mov	r6, r2
 8013bda:	e7bd      	b.n	8013b58 <_printf_i+0x128>
 8013bdc:	6833      	ldr	r3, [r6, #0]
 8013bde:	6825      	ldr	r5, [r4, #0]
 8013be0:	6961      	ldr	r1, [r4, #20]
 8013be2:	1d18      	adds	r0, r3, #4
 8013be4:	6030      	str	r0, [r6, #0]
 8013be6:	062e      	lsls	r6, r5, #24
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	d501      	bpl.n	8013bf0 <_printf_i+0x1c0>
 8013bec:	6019      	str	r1, [r3, #0]
 8013bee:	e002      	b.n	8013bf6 <_printf_i+0x1c6>
 8013bf0:	0668      	lsls	r0, r5, #25
 8013bf2:	d5fb      	bpl.n	8013bec <_printf_i+0x1bc>
 8013bf4:	8019      	strh	r1, [r3, #0]
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	6123      	str	r3, [r4, #16]
 8013bfa:	4616      	mov	r6, r2
 8013bfc:	e7bc      	b.n	8013b78 <_printf_i+0x148>
 8013bfe:	6833      	ldr	r3, [r6, #0]
 8013c00:	1d1a      	adds	r2, r3, #4
 8013c02:	6032      	str	r2, [r6, #0]
 8013c04:	681e      	ldr	r6, [r3, #0]
 8013c06:	6862      	ldr	r2, [r4, #4]
 8013c08:	2100      	movs	r1, #0
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	f7ec fb60 	bl	80002d0 <memchr>
 8013c10:	b108      	cbz	r0, 8013c16 <_printf_i+0x1e6>
 8013c12:	1b80      	subs	r0, r0, r6
 8013c14:	6060      	str	r0, [r4, #4]
 8013c16:	6863      	ldr	r3, [r4, #4]
 8013c18:	6123      	str	r3, [r4, #16]
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c20:	e7aa      	b.n	8013b78 <_printf_i+0x148>
 8013c22:	6923      	ldr	r3, [r4, #16]
 8013c24:	4632      	mov	r2, r6
 8013c26:	4649      	mov	r1, r9
 8013c28:	4640      	mov	r0, r8
 8013c2a:	47d0      	blx	sl
 8013c2c:	3001      	adds	r0, #1
 8013c2e:	d0ad      	beq.n	8013b8c <_printf_i+0x15c>
 8013c30:	6823      	ldr	r3, [r4, #0]
 8013c32:	079b      	lsls	r3, r3, #30
 8013c34:	d413      	bmi.n	8013c5e <_printf_i+0x22e>
 8013c36:	68e0      	ldr	r0, [r4, #12]
 8013c38:	9b03      	ldr	r3, [sp, #12]
 8013c3a:	4298      	cmp	r0, r3
 8013c3c:	bfb8      	it	lt
 8013c3e:	4618      	movlt	r0, r3
 8013c40:	e7a6      	b.n	8013b90 <_printf_i+0x160>
 8013c42:	2301      	movs	r3, #1
 8013c44:	4632      	mov	r2, r6
 8013c46:	4649      	mov	r1, r9
 8013c48:	4640      	mov	r0, r8
 8013c4a:	47d0      	blx	sl
 8013c4c:	3001      	adds	r0, #1
 8013c4e:	d09d      	beq.n	8013b8c <_printf_i+0x15c>
 8013c50:	3501      	adds	r5, #1
 8013c52:	68e3      	ldr	r3, [r4, #12]
 8013c54:	9903      	ldr	r1, [sp, #12]
 8013c56:	1a5b      	subs	r3, r3, r1
 8013c58:	42ab      	cmp	r3, r5
 8013c5a:	dcf2      	bgt.n	8013c42 <_printf_i+0x212>
 8013c5c:	e7eb      	b.n	8013c36 <_printf_i+0x206>
 8013c5e:	2500      	movs	r5, #0
 8013c60:	f104 0619 	add.w	r6, r4, #25
 8013c64:	e7f5      	b.n	8013c52 <_printf_i+0x222>
 8013c66:	bf00      	nop
 8013c68:	080d3202 	.word	0x080d3202
 8013c6c:	080d3213 	.word	0x080d3213

08013c70 <std>:
 8013c70:	2300      	movs	r3, #0
 8013c72:	b510      	push	{r4, lr}
 8013c74:	4604      	mov	r4, r0
 8013c76:	e9c0 3300 	strd	r3, r3, [r0]
 8013c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c7e:	6083      	str	r3, [r0, #8]
 8013c80:	8181      	strh	r1, [r0, #12]
 8013c82:	6643      	str	r3, [r0, #100]	@ 0x64
 8013c84:	81c2      	strh	r2, [r0, #14]
 8013c86:	6183      	str	r3, [r0, #24]
 8013c88:	4619      	mov	r1, r3
 8013c8a:	2208      	movs	r2, #8
 8013c8c:	305c      	adds	r0, #92	@ 0x5c
 8013c8e:	f000 f9f9 	bl	8014084 <memset>
 8013c92:	4b0d      	ldr	r3, [pc, #52]	@ (8013cc8 <std+0x58>)
 8013c94:	6263      	str	r3, [r4, #36]	@ 0x24
 8013c96:	4b0d      	ldr	r3, [pc, #52]	@ (8013ccc <std+0x5c>)
 8013c98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8013cd0 <std+0x60>)
 8013c9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8013cd4 <std+0x64>)
 8013ca0:	6323      	str	r3, [r4, #48]	@ 0x30
 8013ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8013cd8 <std+0x68>)
 8013ca4:	6224      	str	r4, [r4, #32]
 8013ca6:	429c      	cmp	r4, r3
 8013ca8:	d006      	beq.n	8013cb8 <std+0x48>
 8013caa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013cae:	4294      	cmp	r4, r2
 8013cb0:	d002      	beq.n	8013cb8 <std+0x48>
 8013cb2:	33d0      	adds	r3, #208	@ 0xd0
 8013cb4:	429c      	cmp	r4, r3
 8013cb6:	d105      	bne.n	8013cc4 <std+0x54>
 8013cb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cc0:	f000 ba6c 	b.w	801419c <__retarget_lock_init_recursive>
 8013cc4:	bd10      	pop	{r4, pc}
 8013cc6:	bf00      	nop
 8013cc8:	08013ed5 	.word	0x08013ed5
 8013ccc:	08013ef7 	.word	0x08013ef7
 8013cd0:	08013f2f 	.word	0x08013f2f
 8013cd4:	08013f53 	.word	0x08013f53
 8013cd8:	20005e98 	.word	0x20005e98

08013cdc <stdio_exit_handler>:
 8013cdc:	4a02      	ldr	r2, [pc, #8]	@ (8013ce8 <stdio_exit_handler+0xc>)
 8013cde:	4903      	ldr	r1, [pc, #12]	@ (8013cec <stdio_exit_handler+0x10>)
 8013ce0:	4803      	ldr	r0, [pc, #12]	@ (8013cf0 <stdio_exit_handler+0x14>)
 8013ce2:	f000 b869 	b.w	8013db8 <_fwalk_sglue>
 8013ce6:	bf00      	nop
 8013ce8:	2000080c 	.word	0x2000080c
 8013cec:	0801597d 	.word	0x0801597d
 8013cf0:	2000081c 	.word	0x2000081c

08013cf4 <cleanup_stdio>:
 8013cf4:	6841      	ldr	r1, [r0, #4]
 8013cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8013d28 <cleanup_stdio+0x34>)
 8013cf8:	4299      	cmp	r1, r3
 8013cfa:	b510      	push	{r4, lr}
 8013cfc:	4604      	mov	r4, r0
 8013cfe:	d001      	beq.n	8013d04 <cleanup_stdio+0x10>
 8013d00:	f001 fe3c 	bl	801597c <_fflush_r>
 8013d04:	68a1      	ldr	r1, [r4, #8]
 8013d06:	4b09      	ldr	r3, [pc, #36]	@ (8013d2c <cleanup_stdio+0x38>)
 8013d08:	4299      	cmp	r1, r3
 8013d0a:	d002      	beq.n	8013d12 <cleanup_stdio+0x1e>
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f001 fe35 	bl	801597c <_fflush_r>
 8013d12:	68e1      	ldr	r1, [r4, #12]
 8013d14:	4b06      	ldr	r3, [pc, #24]	@ (8013d30 <cleanup_stdio+0x3c>)
 8013d16:	4299      	cmp	r1, r3
 8013d18:	d004      	beq.n	8013d24 <cleanup_stdio+0x30>
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d20:	f001 be2c 	b.w	801597c <_fflush_r>
 8013d24:	bd10      	pop	{r4, pc}
 8013d26:	bf00      	nop
 8013d28:	20005e98 	.word	0x20005e98
 8013d2c:	20005f00 	.word	0x20005f00
 8013d30:	20005f68 	.word	0x20005f68

08013d34 <global_stdio_init.part.0>:
 8013d34:	b510      	push	{r4, lr}
 8013d36:	4b0b      	ldr	r3, [pc, #44]	@ (8013d64 <global_stdio_init.part.0+0x30>)
 8013d38:	4c0b      	ldr	r4, [pc, #44]	@ (8013d68 <global_stdio_init.part.0+0x34>)
 8013d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8013d6c <global_stdio_init.part.0+0x38>)
 8013d3c:	601a      	str	r2, [r3, #0]
 8013d3e:	4620      	mov	r0, r4
 8013d40:	2200      	movs	r2, #0
 8013d42:	2104      	movs	r1, #4
 8013d44:	f7ff ff94 	bl	8013c70 <std>
 8013d48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	2109      	movs	r1, #9
 8013d50:	f7ff ff8e 	bl	8013c70 <std>
 8013d54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013d58:	2202      	movs	r2, #2
 8013d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d5e:	2112      	movs	r1, #18
 8013d60:	f7ff bf86 	b.w	8013c70 <std>
 8013d64:	20005fd0 	.word	0x20005fd0
 8013d68:	20005e98 	.word	0x20005e98
 8013d6c:	08013cdd 	.word	0x08013cdd

08013d70 <__sfp_lock_acquire>:
 8013d70:	4801      	ldr	r0, [pc, #4]	@ (8013d78 <__sfp_lock_acquire+0x8>)
 8013d72:	f000 ba14 	b.w	801419e <__retarget_lock_acquire_recursive>
 8013d76:	bf00      	nop
 8013d78:	20005fd9 	.word	0x20005fd9

08013d7c <__sfp_lock_release>:
 8013d7c:	4801      	ldr	r0, [pc, #4]	@ (8013d84 <__sfp_lock_release+0x8>)
 8013d7e:	f000 ba0f 	b.w	80141a0 <__retarget_lock_release_recursive>
 8013d82:	bf00      	nop
 8013d84:	20005fd9 	.word	0x20005fd9

08013d88 <__sinit>:
 8013d88:	b510      	push	{r4, lr}
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	f7ff fff0 	bl	8013d70 <__sfp_lock_acquire>
 8013d90:	6a23      	ldr	r3, [r4, #32]
 8013d92:	b11b      	cbz	r3, 8013d9c <__sinit+0x14>
 8013d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d98:	f7ff bff0 	b.w	8013d7c <__sfp_lock_release>
 8013d9c:	4b04      	ldr	r3, [pc, #16]	@ (8013db0 <__sinit+0x28>)
 8013d9e:	6223      	str	r3, [r4, #32]
 8013da0:	4b04      	ldr	r3, [pc, #16]	@ (8013db4 <__sinit+0x2c>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d1f5      	bne.n	8013d94 <__sinit+0xc>
 8013da8:	f7ff ffc4 	bl	8013d34 <global_stdio_init.part.0>
 8013dac:	e7f2      	b.n	8013d94 <__sinit+0xc>
 8013dae:	bf00      	nop
 8013db0:	08013cf5 	.word	0x08013cf5
 8013db4:	20005fd0 	.word	0x20005fd0

08013db8 <_fwalk_sglue>:
 8013db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dbc:	4607      	mov	r7, r0
 8013dbe:	4688      	mov	r8, r1
 8013dc0:	4614      	mov	r4, r2
 8013dc2:	2600      	movs	r6, #0
 8013dc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013dc8:	f1b9 0901 	subs.w	r9, r9, #1
 8013dcc:	d505      	bpl.n	8013dda <_fwalk_sglue+0x22>
 8013dce:	6824      	ldr	r4, [r4, #0]
 8013dd0:	2c00      	cmp	r4, #0
 8013dd2:	d1f7      	bne.n	8013dc4 <_fwalk_sglue+0xc>
 8013dd4:	4630      	mov	r0, r6
 8013dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dda:	89ab      	ldrh	r3, [r5, #12]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	d907      	bls.n	8013df0 <_fwalk_sglue+0x38>
 8013de0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013de4:	3301      	adds	r3, #1
 8013de6:	d003      	beq.n	8013df0 <_fwalk_sglue+0x38>
 8013de8:	4629      	mov	r1, r5
 8013dea:	4638      	mov	r0, r7
 8013dec:	47c0      	blx	r8
 8013dee:	4306      	orrs	r6, r0
 8013df0:	3568      	adds	r5, #104	@ 0x68
 8013df2:	e7e9      	b.n	8013dc8 <_fwalk_sglue+0x10>

08013df4 <iprintf>:
 8013df4:	b40f      	push	{r0, r1, r2, r3}
 8013df6:	b507      	push	{r0, r1, r2, lr}
 8013df8:	4906      	ldr	r1, [pc, #24]	@ (8013e14 <iprintf+0x20>)
 8013dfa:	ab04      	add	r3, sp, #16
 8013dfc:	6808      	ldr	r0, [r1, #0]
 8013dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e02:	6881      	ldr	r1, [r0, #8]
 8013e04:	9301      	str	r3, [sp, #4]
 8013e06:	f001 fc1d 	bl	8015644 <_vfiprintf_r>
 8013e0a:	b003      	add	sp, #12
 8013e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e10:	b004      	add	sp, #16
 8013e12:	4770      	bx	lr
 8013e14:	20000818 	.word	0x20000818

08013e18 <_puts_r>:
 8013e18:	6a03      	ldr	r3, [r0, #32]
 8013e1a:	b570      	push	{r4, r5, r6, lr}
 8013e1c:	6884      	ldr	r4, [r0, #8]
 8013e1e:	4605      	mov	r5, r0
 8013e20:	460e      	mov	r6, r1
 8013e22:	b90b      	cbnz	r3, 8013e28 <_puts_r+0x10>
 8013e24:	f7ff ffb0 	bl	8013d88 <__sinit>
 8013e28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e2a:	07db      	lsls	r3, r3, #31
 8013e2c:	d405      	bmi.n	8013e3a <_puts_r+0x22>
 8013e2e:	89a3      	ldrh	r3, [r4, #12]
 8013e30:	0598      	lsls	r0, r3, #22
 8013e32:	d402      	bmi.n	8013e3a <_puts_r+0x22>
 8013e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e36:	f000 f9b2 	bl	801419e <__retarget_lock_acquire_recursive>
 8013e3a:	89a3      	ldrh	r3, [r4, #12]
 8013e3c:	0719      	lsls	r1, r3, #28
 8013e3e:	d502      	bpl.n	8013e46 <_puts_r+0x2e>
 8013e40:	6923      	ldr	r3, [r4, #16]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d135      	bne.n	8013eb2 <_puts_r+0x9a>
 8013e46:	4621      	mov	r1, r4
 8013e48:	4628      	mov	r0, r5
 8013e4a:	f000 f8c5 	bl	8013fd8 <__swsetup_r>
 8013e4e:	b380      	cbz	r0, 8013eb2 <_puts_r+0x9a>
 8013e50:	f04f 35ff 	mov.w	r5, #4294967295
 8013e54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e56:	07da      	lsls	r2, r3, #31
 8013e58:	d405      	bmi.n	8013e66 <_puts_r+0x4e>
 8013e5a:	89a3      	ldrh	r3, [r4, #12]
 8013e5c:	059b      	lsls	r3, r3, #22
 8013e5e:	d402      	bmi.n	8013e66 <_puts_r+0x4e>
 8013e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e62:	f000 f99d 	bl	80141a0 <__retarget_lock_release_recursive>
 8013e66:	4628      	mov	r0, r5
 8013e68:	bd70      	pop	{r4, r5, r6, pc}
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	da04      	bge.n	8013e78 <_puts_r+0x60>
 8013e6e:	69a2      	ldr	r2, [r4, #24]
 8013e70:	429a      	cmp	r2, r3
 8013e72:	dc17      	bgt.n	8013ea4 <_puts_r+0x8c>
 8013e74:	290a      	cmp	r1, #10
 8013e76:	d015      	beq.n	8013ea4 <_puts_r+0x8c>
 8013e78:	6823      	ldr	r3, [r4, #0]
 8013e7a:	1c5a      	adds	r2, r3, #1
 8013e7c:	6022      	str	r2, [r4, #0]
 8013e7e:	7019      	strb	r1, [r3, #0]
 8013e80:	68a3      	ldr	r3, [r4, #8]
 8013e82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013e86:	3b01      	subs	r3, #1
 8013e88:	60a3      	str	r3, [r4, #8]
 8013e8a:	2900      	cmp	r1, #0
 8013e8c:	d1ed      	bne.n	8013e6a <_puts_r+0x52>
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	da11      	bge.n	8013eb6 <_puts_r+0x9e>
 8013e92:	4622      	mov	r2, r4
 8013e94:	210a      	movs	r1, #10
 8013e96:	4628      	mov	r0, r5
 8013e98:	f000 f85f 	bl	8013f5a <__swbuf_r>
 8013e9c:	3001      	adds	r0, #1
 8013e9e:	d0d7      	beq.n	8013e50 <_puts_r+0x38>
 8013ea0:	250a      	movs	r5, #10
 8013ea2:	e7d7      	b.n	8013e54 <_puts_r+0x3c>
 8013ea4:	4622      	mov	r2, r4
 8013ea6:	4628      	mov	r0, r5
 8013ea8:	f000 f857 	bl	8013f5a <__swbuf_r>
 8013eac:	3001      	adds	r0, #1
 8013eae:	d1e7      	bne.n	8013e80 <_puts_r+0x68>
 8013eb0:	e7ce      	b.n	8013e50 <_puts_r+0x38>
 8013eb2:	3e01      	subs	r6, #1
 8013eb4:	e7e4      	b.n	8013e80 <_puts_r+0x68>
 8013eb6:	6823      	ldr	r3, [r4, #0]
 8013eb8:	1c5a      	adds	r2, r3, #1
 8013eba:	6022      	str	r2, [r4, #0]
 8013ebc:	220a      	movs	r2, #10
 8013ebe:	701a      	strb	r2, [r3, #0]
 8013ec0:	e7ee      	b.n	8013ea0 <_puts_r+0x88>
	...

08013ec4 <puts>:
 8013ec4:	4b02      	ldr	r3, [pc, #8]	@ (8013ed0 <puts+0xc>)
 8013ec6:	4601      	mov	r1, r0
 8013ec8:	6818      	ldr	r0, [r3, #0]
 8013eca:	f7ff bfa5 	b.w	8013e18 <_puts_r>
 8013ece:	bf00      	nop
 8013ed0:	20000818 	.word	0x20000818

08013ed4 <__sread>:
 8013ed4:	b510      	push	{r4, lr}
 8013ed6:	460c      	mov	r4, r1
 8013ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013edc:	f000 f900 	bl	80140e0 <_read_r>
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	bfab      	itete	ge
 8013ee4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8013ee8:	181b      	addge	r3, r3, r0
 8013eea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013eee:	bfac      	ite	ge
 8013ef0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013ef2:	81a3      	strhlt	r3, [r4, #12]
 8013ef4:	bd10      	pop	{r4, pc}

08013ef6 <__swrite>:
 8013ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013efa:	461f      	mov	r7, r3
 8013efc:	898b      	ldrh	r3, [r1, #12]
 8013efe:	05db      	lsls	r3, r3, #23
 8013f00:	4605      	mov	r5, r0
 8013f02:	460c      	mov	r4, r1
 8013f04:	4616      	mov	r6, r2
 8013f06:	d505      	bpl.n	8013f14 <__swrite+0x1e>
 8013f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f0c:	2302      	movs	r3, #2
 8013f0e:	2200      	movs	r2, #0
 8013f10:	f000 f8d4 	bl	80140bc <_lseek_r>
 8013f14:	89a3      	ldrh	r3, [r4, #12]
 8013f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013f1e:	81a3      	strh	r3, [r4, #12]
 8013f20:	4632      	mov	r2, r6
 8013f22:	463b      	mov	r3, r7
 8013f24:	4628      	mov	r0, r5
 8013f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f2a:	f000 b8fb 	b.w	8014124 <_write_r>

08013f2e <__sseek>:
 8013f2e:	b510      	push	{r4, lr}
 8013f30:	460c      	mov	r4, r1
 8013f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f36:	f000 f8c1 	bl	80140bc <_lseek_r>
 8013f3a:	1c43      	adds	r3, r0, #1
 8013f3c:	89a3      	ldrh	r3, [r4, #12]
 8013f3e:	bf15      	itete	ne
 8013f40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013f42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013f46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013f4a:	81a3      	strheq	r3, [r4, #12]
 8013f4c:	bf18      	it	ne
 8013f4e:	81a3      	strhne	r3, [r4, #12]
 8013f50:	bd10      	pop	{r4, pc}

08013f52 <__sclose>:
 8013f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f56:	f000 b8a1 	b.w	801409c <_close_r>

08013f5a <__swbuf_r>:
 8013f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f5c:	460e      	mov	r6, r1
 8013f5e:	4614      	mov	r4, r2
 8013f60:	4605      	mov	r5, r0
 8013f62:	b118      	cbz	r0, 8013f6c <__swbuf_r+0x12>
 8013f64:	6a03      	ldr	r3, [r0, #32]
 8013f66:	b90b      	cbnz	r3, 8013f6c <__swbuf_r+0x12>
 8013f68:	f7ff ff0e 	bl	8013d88 <__sinit>
 8013f6c:	69a3      	ldr	r3, [r4, #24]
 8013f6e:	60a3      	str	r3, [r4, #8]
 8013f70:	89a3      	ldrh	r3, [r4, #12]
 8013f72:	071a      	lsls	r2, r3, #28
 8013f74:	d501      	bpl.n	8013f7a <__swbuf_r+0x20>
 8013f76:	6923      	ldr	r3, [r4, #16]
 8013f78:	b943      	cbnz	r3, 8013f8c <__swbuf_r+0x32>
 8013f7a:	4621      	mov	r1, r4
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	f000 f82b 	bl	8013fd8 <__swsetup_r>
 8013f82:	b118      	cbz	r0, 8013f8c <__swbuf_r+0x32>
 8013f84:	f04f 37ff 	mov.w	r7, #4294967295
 8013f88:	4638      	mov	r0, r7
 8013f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f8c:	6823      	ldr	r3, [r4, #0]
 8013f8e:	6922      	ldr	r2, [r4, #16]
 8013f90:	1a98      	subs	r0, r3, r2
 8013f92:	6963      	ldr	r3, [r4, #20]
 8013f94:	b2f6      	uxtb	r6, r6
 8013f96:	4283      	cmp	r3, r0
 8013f98:	4637      	mov	r7, r6
 8013f9a:	dc05      	bgt.n	8013fa8 <__swbuf_r+0x4e>
 8013f9c:	4621      	mov	r1, r4
 8013f9e:	4628      	mov	r0, r5
 8013fa0:	f001 fcec 	bl	801597c <_fflush_r>
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	d1ed      	bne.n	8013f84 <__swbuf_r+0x2a>
 8013fa8:	68a3      	ldr	r3, [r4, #8]
 8013faa:	3b01      	subs	r3, #1
 8013fac:	60a3      	str	r3, [r4, #8]
 8013fae:	6823      	ldr	r3, [r4, #0]
 8013fb0:	1c5a      	adds	r2, r3, #1
 8013fb2:	6022      	str	r2, [r4, #0]
 8013fb4:	701e      	strb	r6, [r3, #0]
 8013fb6:	6962      	ldr	r2, [r4, #20]
 8013fb8:	1c43      	adds	r3, r0, #1
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d004      	beq.n	8013fc8 <__swbuf_r+0x6e>
 8013fbe:	89a3      	ldrh	r3, [r4, #12]
 8013fc0:	07db      	lsls	r3, r3, #31
 8013fc2:	d5e1      	bpl.n	8013f88 <__swbuf_r+0x2e>
 8013fc4:	2e0a      	cmp	r6, #10
 8013fc6:	d1df      	bne.n	8013f88 <__swbuf_r+0x2e>
 8013fc8:	4621      	mov	r1, r4
 8013fca:	4628      	mov	r0, r5
 8013fcc:	f001 fcd6 	bl	801597c <_fflush_r>
 8013fd0:	2800      	cmp	r0, #0
 8013fd2:	d0d9      	beq.n	8013f88 <__swbuf_r+0x2e>
 8013fd4:	e7d6      	b.n	8013f84 <__swbuf_r+0x2a>
	...

08013fd8 <__swsetup_r>:
 8013fd8:	b538      	push	{r3, r4, r5, lr}
 8013fda:	4b29      	ldr	r3, [pc, #164]	@ (8014080 <__swsetup_r+0xa8>)
 8013fdc:	4605      	mov	r5, r0
 8013fde:	6818      	ldr	r0, [r3, #0]
 8013fe0:	460c      	mov	r4, r1
 8013fe2:	b118      	cbz	r0, 8013fec <__swsetup_r+0x14>
 8013fe4:	6a03      	ldr	r3, [r0, #32]
 8013fe6:	b90b      	cbnz	r3, 8013fec <__swsetup_r+0x14>
 8013fe8:	f7ff fece 	bl	8013d88 <__sinit>
 8013fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ff0:	0719      	lsls	r1, r3, #28
 8013ff2:	d422      	bmi.n	801403a <__swsetup_r+0x62>
 8013ff4:	06da      	lsls	r2, r3, #27
 8013ff6:	d407      	bmi.n	8014008 <__swsetup_r+0x30>
 8013ff8:	2209      	movs	r2, #9
 8013ffa:	602a      	str	r2, [r5, #0]
 8013ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014000:	81a3      	strh	r3, [r4, #12]
 8014002:	f04f 30ff 	mov.w	r0, #4294967295
 8014006:	e033      	b.n	8014070 <__swsetup_r+0x98>
 8014008:	0758      	lsls	r0, r3, #29
 801400a:	d512      	bpl.n	8014032 <__swsetup_r+0x5a>
 801400c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801400e:	b141      	cbz	r1, 8014022 <__swsetup_r+0x4a>
 8014010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014014:	4299      	cmp	r1, r3
 8014016:	d002      	beq.n	801401e <__swsetup_r+0x46>
 8014018:	4628      	mov	r0, r5
 801401a:	f000 ff1d 	bl	8014e58 <_free_r>
 801401e:	2300      	movs	r3, #0
 8014020:	6363      	str	r3, [r4, #52]	@ 0x34
 8014022:	89a3      	ldrh	r3, [r4, #12]
 8014024:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014028:	81a3      	strh	r3, [r4, #12]
 801402a:	2300      	movs	r3, #0
 801402c:	6063      	str	r3, [r4, #4]
 801402e:	6923      	ldr	r3, [r4, #16]
 8014030:	6023      	str	r3, [r4, #0]
 8014032:	89a3      	ldrh	r3, [r4, #12]
 8014034:	f043 0308 	orr.w	r3, r3, #8
 8014038:	81a3      	strh	r3, [r4, #12]
 801403a:	6923      	ldr	r3, [r4, #16]
 801403c:	b94b      	cbnz	r3, 8014052 <__swsetup_r+0x7a>
 801403e:	89a3      	ldrh	r3, [r4, #12]
 8014040:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014048:	d003      	beq.n	8014052 <__swsetup_r+0x7a>
 801404a:	4621      	mov	r1, r4
 801404c:	4628      	mov	r0, r5
 801404e:	f001 fce3 	bl	8015a18 <__smakebuf_r>
 8014052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014056:	f013 0201 	ands.w	r2, r3, #1
 801405a:	d00a      	beq.n	8014072 <__swsetup_r+0x9a>
 801405c:	2200      	movs	r2, #0
 801405e:	60a2      	str	r2, [r4, #8]
 8014060:	6962      	ldr	r2, [r4, #20]
 8014062:	4252      	negs	r2, r2
 8014064:	61a2      	str	r2, [r4, #24]
 8014066:	6922      	ldr	r2, [r4, #16]
 8014068:	b942      	cbnz	r2, 801407c <__swsetup_r+0xa4>
 801406a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801406e:	d1c5      	bne.n	8013ffc <__swsetup_r+0x24>
 8014070:	bd38      	pop	{r3, r4, r5, pc}
 8014072:	0799      	lsls	r1, r3, #30
 8014074:	bf58      	it	pl
 8014076:	6962      	ldrpl	r2, [r4, #20]
 8014078:	60a2      	str	r2, [r4, #8]
 801407a:	e7f4      	b.n	8014066 <__swsetup_r+0x8e>
 801407c:	2000      	movs	r0, #0
 801407e:	e7f7      	b.n	8014070 <__swsetup_r+0x98>
 8014080:	20000818 	.word	0x20000818

08014084 <memset>:
 8014084:	4402      	add	r2, r0
 8014086:	4603      	mov	r3, r0
 8014088:	4293      	cmp	r3, r2
 801408a:	d100      	bne.n	801408e <memset+0xa>
 801408c:	4770      	bx	lr
 801408e:	f803 1b01 	strb.w	r1, [r3], #1
 8014092:	e7f9      	b.n	8014088 <memset+0x4>

08014094 <_localeconv_r>:
 8014094:	4800      	ldr	r0, [pc, #0]	@ (8014098 <_localeconv_r+0x4>)
 8014096:	4770      	bx	lr
 8014098:	20000958 	.word	0x20000958

0801409c <_close_r>:
 801409c:	b538      	push	{r3, r4, r5, lr}
 801409e:	4d06      	ldr	r5, [pc, #24]	@ (80140b8 <_close_r+0x1c>)
 80140a0:	2300      	movs	r3, #0
 80140a2:	4604      	mov	r4, r0
 80140a4:	4608      	mov	r0, r1
 80140a6:	602b      	str	r3, [r5, #0]
 80140a8:	f7ee f92c 	bl	8002304 <_close>
 80140ac:	1c43      	adds	r3, r0, #1
 80140ae:	d102      	bne.n	80140b6 <_close_r+0x1a>
 80140b0:	682b      	ldr	r3, [r5, #0]
 80140b2:	b103      	cbz	r3, 80140b6 <_close_r+0x1a>
 80140b4:	6023      	str	r3, [r4, #0]
 80140b6:	bd38      	pop	{r3, r4, r5, pc}
 80140b8:	20005fd4 	.word	0x20005fd4

080140bc <_lseek_r>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	4d07      	ldr	r5, [pc, #28]	@ (80140dc <_lseek_r+0x20>)
 80140c0:	4604      	mov	r4, r0
 80140c2:	4608      	mov	r0, r1
 80140c4:	4611      	mov	r1, r2
 80140c6:	2200      	movs	r2, #0
 80140c8:	602a      	str	r2, [r5, #0]
 80140ca:	461a      	mov	r2, r3
 80140cc:	f7ee f941 	bl	8002352 <_lseek>
 80140d0:	1c43      	adds	r3, r0, #1
 80140d2:	d102      	bne.n	80140da <_lseek_r+0x1e>
 80140d4:	682b      	ldr	r3, [r5, #0]
 80140d6:	b103      	cbz	r3, 80140da <_lseek_r+0x1e>
 80140d8:	6023      	str	r3, [r4, #0]
 80140da:	bd38      	pop	{r3, r4, r5, pc}
 80140dc:	20005fd4 	.word	0x20005fd4

080140e0 <_read_r>:
 80140e0:	b538      	push	{r3, r4, r5, lr}
 80140e2:	4d07      	ldr	r5, [pc, #28]	@ (8014100 <_read_r+0x20>)
 80140e4:	4604      	mov	r4, r0
 80140e6:	4608      	mov	r0, r1
 80140e8:	4611      	mov	r1, r2
 80140ea:	2200      	movs	r2, #0
 80140ec:	602a      	str	r2, [r5, #0]
 80140ee:	461a      	mov	r2, r3
 80140f0:	f7ee f8cf 	bl	8002292 <_read>
 80140f4:	1c43      	adds	r3, r0, #1
 80140f6:	d102      	bne.n	80140fe <_read_r+0x1e>
 80140f8:	682b      	ldr	r3, [r5, #0]
 80140fa:	b103      	cbz	r3, 80140fe <_read_r+0x1e>
 80140fc:	6023      	str	r3, [r4, #0]
 80140fe:	bd38      	pop	{r3, r4, r5, pc}
 8014100:	20005fd4 	.word	0x20005fd4

08014104 <_sbrk_r>:
 8014104:	b538      	push	{r3, r4, r5, lr}
 8014106:	4d06      	ldr	r5, [pc, #24]	@ (8014120 <_sbrk_r+0x1c>)
 8014108:	2300      	movs	r3, #0
 801410a:	4604      	mov	r4, r0
 801410c:	4608      	mov	r0, r1
 801410e:	602b      	str	r3, [r5, #0]
 8014110:	f7ee f92c 	bl	800236c <_sbrk>
 8014114:	1c43      	adds	r3, r0, #1
 8014116:	d102      	bne.n	801411e <_sbrk_r+0x1a>
 8014118:	682b      	ldr	r3, [r5, #0]
 801411a:	b103      	cbz	r3, 801411e <_sbrk_r+0x1a>
 801411c:	6023      	str	r3, [r4, #0]
 801411e:	bd38      	pop	{r3, r4, r5, pc}
 8014120:	20005fd4 	.word	0x20005fd4

08014124 <_write_r>:
 8014124:	b538      	push	{r3, r4, r5, lr}
 8014126:	4d07      	ldr	r5, [pc, #28]	@ (8014144 <_write_r+0x20>)
 8014128:	4604      	mov	r4, r0
 801412a:	4608      	mov	r0, r1
 801412c:	4611      	mov	r1, r2
 801412e:	2200      	movs	r2, #0
 8014130:	602a      	str	r2, [r5, #0]
 8014132:	461a      	mov	r2, r3
 8014134:	f7ee f8ca 	bl	80022cc <_write>
 8014138:	1c43      	adds	r3, r0, #1
 801413a:	d102      	bne.n	8014142 <_write_r+0x1e>
 801413c:	682b      	ldr	r3, [r5, #0]
 801413e:	b103      	cbz	r3, 8014142 <_write_r+0x1e>
 8014140:	6023      	str	r3, [r4, #0]
 8014142:	bd38      	pop	{r3, r4, r5, pc}
 8014144:	20005fd4 	.word	0x20005fd4

08014148 <__errno>:
 8014148:	4b01      	ldr	r3, [pc, #4]	@ (8014150 <__errno+0x8>)
 801414a:	6818      	ldr	r0, [r3, #0]
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop
 8014150:	20000818 	.word	0x20000818

08014154 <__libc_init_array>:
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	4d0d      	ldr	r5, [pc, #52]	@ (801418c <__libc_init_array+0x38>)
 8014158:	4c0d      	ldr	r4, [pc, #52]	@ (8014190 <__libc_init_array+0x3c>)
 801415a:	1b64      	subs	r4, r4, r5
 801415c:	10a4      	asrs	r4, r4, #2
 801415e:	2600      	movs	r6, #0
 8014160:	42a6      	cmp	r6, r4
 8014162:	d109      	bne.n	8014178 <__libc_init_array+0x24>
 8014164:	4d0b      	ldr	r5, [pc, #44]	@ (8014194 <__libc_init_array+0x40>)
 8014166:	4c0c      	ldr	r4, [pc, #48]	@ (8014198 <__libc_init_array+0x44>)
 8014168:	f001 fd86 	bl	8015c78 <_init>
 801416c:	1b64      	subs	r4, r4, r5
 801416e:	10a4      	asrs	r4, r4, #2
 8014170:	2600      	movs	r6, #0
 8014172:	42a6      	cmp	r6, r4
 8014174:	d105      	bne.n	8014182 <__libc_init_array+0x2e>
 8014176:	bd70      	pop	{r4, r5, r6, pc}
 8014178:	f855 3b04 	ldr.w	r3, [r5], #4
 801417c:	4798      	blx	r3
 801417e:	3601      	adds	r6, #1
 8014180:	e7ee      	b.n	8014160 <__libc_init_array+0xc>
 8014182:	f855 3b04 	ldr.w	r3, [r5], #4
 8014186:	4798      	blx	r3
 8014188:	3601      	adds	r6, #1
 801418a:	e7f2      	b.n	8014172 <__libc_init_array+0x1e>
 801418c:	080d3568 	.word	0x080d3568
 8014190:	080d3568 	.word	0x080d3568
 8014194:	080d3568 	.word	0x080d3568
 8014198:	080d356c 	.word	0x080d356c

0801419c <__retarget_lock_init_recursive>:
 801419c:	4770      	bx	lr

0801419e <__retarget_lock_acquire_recursive>:
 801419e:	4770      	bx	lr

080141a0 <__retarget_lock_release_recursive>:
 80141a0:	4770      	bx	lr

080141a2 <memcpy>:
 80141a2:	440a      	add	r2, r1
 80141a4:	4291      	cmp	r1, r2
 80141a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80141aa:	d100      	bne.n	80141ae <memcpy+0xc>
 80141ac:	4770      	bx	lr
 80141ae:	b510      	push	{r4, lr}
 80141b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141b8:	4291      	cmp	r1, r2
 80141ba:	d1f9      	bne.n	80141b0 <memcpy+0xe>
 80141bc:	bd10      	pop	{r4, pc}

080141be <quorem>:
 80141be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c2:	6903      	ldr	r3, [r0, #16]
 80141c4:	690c      	ldr	r4, [r1, #16]
 80141c6:	42a3      	cmp	r3, r4
 80141c8:	4607      	mov	r7, r0
 80141ca:	db7e      	blt.n	80142ca <quorem+0x10c>
 80141cc:	3c01      	subs	r4, #1
 80141ce:	f101 0814 	add.w	r8, r1, #20
 80141d2:	00a3      	lsls	r3, r4, #2
 80141d4:	f100 0514 	add.w	r5, r0, #20
 80141d8:	9300      	str	r3, [sp, #0]
 80141da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80141de:	9301      	str	r3, [sp, #4]
 80141e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80141e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80141e8:	3301      	adds	r3, #1
 80141ea:	429a      	cmp	r2, r3
 80141ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80141f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80141f4:	d32e      	bcc.n	8014254 <quorem+0x96>
 80141f6:	f04f 0a00 	mov.w	sl, #0
 80141fa:	46c4      	mov	ip, r8
 80141fc:	46ae      	mov	lr, r5
 80141fe:	46d3      	mov	fp, sl
 8014200:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014204:	b298      	uxth	r0, r3
 8014206:	fb06 a000 	mla	r0, r6, r0, sl
 801420a:	0c02      	lsrs	r2, r0, #16
 801420c:	0c1b      	lsrs	r3, r3, #16
 801420e:	fb06 2303 	mla	r3, r6, r3, r2
 8014212:	f8de 2000 	ldr.w	r2, [lr]
 8014216:	b280      	uxth	r0, r0
 8014218:	b292      	uxth	r2, r2
 801421a:	1a12      	subs	r2, r2, r0
 801421c:	445a      	add	r2, fp
 801421e:	f8de 0000 	ldr.w	r0, [lr]
 8014222:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014226:	b29b      	uxth	r3, r3
 8014228:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801422c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014230:	b292      	uxth	r2, r2
 8014232:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014236:	45e1      	cmp	r9, ip
 8014238:	f84e 2b04 	str.w	r2, [lr], #4
 801423c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014240:	d2de      	bcs.n	8014200 <quorem+0x42>
 8014242:	9b00      	ldr	r3, [sp, #0]
 8014244:	58eb      	ldr	r3, [r5, r3]
 8014246:	b92b      	cbnz	r3, 8014254 <quorem+0x96>
 8014248:	9b01      	ldr	r3, [sp, #4]
 801424a:	3b04      	subs	r3, #4
 801424c:	429d      	cmp	r5, r3
 801424e:	461a      	mov	r2, r3
 8014250:	d32f      	bcc.n	80142b2 <quorem+0xf4>
 8014252:	613c      	str	r4, [r7, #16]
 8014254:	4638      	mov	r0, r7
 8014256:	f001 f8c3 	bl	80153e0 <__mcmp>
 801425a:	2800      	cmp	r0, #0
 801425c:	db25      	blt.n	80142aa <quorem+0xec>
 801425e:	4629      	mov	r1, r5
 8014260:	2000      	movs	r0, #0
 8014262:	f858 2b04 	ldr.w	r2, [r8], #4
 8014266:	f8d1 c000 	ldr.w	ip, [r1]
 801426a:	fa1f fe82 	uxth.w	lr, r2
 801426e:	fa1f f38c 	uxth.w	r3, ip
 8014272:	eba3 030e 	sub.w	r3, r3, lr
 8014276:	4403      	add	r3, r0
 8014278:	0c12      	lsrs	r2, r2, #16
 801427a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801427e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014282:	b29b      	uxth	r3, r3
 8014284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014288:	45c1      	cmp	r9, r8
 801428a:	f841 3b04 	str.w	r3, [r1], #4
 801428e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014292:	d2e6      	bcs.n	8014262 <quorem+0xa4>
 8014294:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014298:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801429c:	b922      	cbnz	r2, 80142a8 <quorem+0xea>
 801429e:	3b04      	subs	r3, #4
 80142a0:	429d      	cmp	r5, r3
 80142a2:	461a      	mov	r2, r3
 80142a4:	d30b      	bcc.n	80142be <quorem+0x100>
 80142a6:	613c      	str	r4, [r7, #16]
 80142a8:	3601      	adds	r6, #1
 80142aa:	4630      	mov	r0, r6
 80142ac:	b003      	add	sp, #12
 80142ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142b2:	6812      	ldr	r2, [r2, #0]
 80142b4:	3b04      	subs	r3, #4
 80142b6:	2a00      	cmp	r2, #0
 80142b8:	d1cb      	bne.n	8014252 <quorem+0x94>
 80142ba:	3c01      	subs	r4, #1
 80142bc:	e7c6      	b.n	801424c <quorem+0x8e>
 80142be:	6812      	ldr	r2, [r2, #0]
 80142c0:	3b04      	subs	r3, #4
 80142c2:	2a00      	cmp	r2, #0
 80142c4:	d1ef      	bne.n	80142a6 <quorem+0xe8>
 80142c6:	3c01      	subs	r4, #1
 80142c8:	e7ea      	b.n	80142a0 <quorem+0xe2>
 80142ca:	2000      	movs	r0, #0
 80142cc:	e7ee      	b.n	80142ac <quorem+0xee>
	...

080142d0 <_dtoa_r>:
 80142d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d4:	69c7      	ldr	r7, [r0, #28]
 80142d6:	b099      	sub	sp, #100	@ 0x64
 80142d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80142dc:	ec55 4b10 	vmov	r4, r5, d0
 80142e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80142e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80142e4:	4683      	mov	fp, r0
 80142e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80142e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80142ea:	b97f      	cbnz	r7, 801430c <_dtoa_r+0x3c>
 80142ec:	2010      	movs	r0, #16
 80142ee:	f7fe ffb1 	bl	8013254 <malloc>
 80142f2:	4602      	mov	r2, r0
 80142f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80142f8:	b920      	cbnz	r0, 8014304 <_dtoa_r+0x34>
 80142fa:	4ba7      	ldr	r3, [pc, #668]	@ (8014598 <_dtoa_r+0x2c8>)
 80142fc:	21ef      	movs	r1, #239	@ 0xef
 80142fe:	48a7      	ldr	r0, [pc, #668]	@ (801459c <_dtoa_r+0x2cc>)
 8014300:	f001 fbe8 	bl	8015ad4 <__assert_func>
 8014304:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014308:	6007      	str	r7, [r0, #0]
 801430a:	60c7      	str	r7, [r0, #12]
 801430c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014310:	6819      	ldr	r1, [r3, #0]
 8014312:	b159      	cbz	r1, 801432c <_dtoa_r+0x5c>
 8014314:	685a      	ldr	r2, [r3, #4]
 8014316:	604a      	str	r2, [r1, #4]
 8014318:	2301      	movs	r3, #1
 801431a:	4093      	lsls	r3, r2
 801431c:	608b      	str	r3, [r1, #8]
 801431e:	4658      	mov	r0, fp
 8014320:	f000 fe24 	bl	8014f6c <_Bfree>
 8014324:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014328:	2200      	movs	r2, #0
 801432a:	601a      	str	r2, [r3, #0]
 801432c:	1e2b      	subs	r3, r5, #0
 801432e:	bfb9      	ittee	lt
 8014330:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014334:	9303      	strlt	r3, [sp, #12]
 8014336:	2300      	movge	r3, #0
 8014338:	6033      	strge	r3, [r6, #0]
 801433a:	9f03      	ldr	r7, [sp, #12]
 801433c:	4b98      	ldr	r3, [pc, #608]	@ (80145a0 <_dtoa_r+0x2d0>)
 801433e:	bfbc      	itt	lt
 8014340:	2201      	movlt	r2, #1
 8014342:	6032      	strlt	r2, [r6, #0]
 8014344:	43bb      	bics	r3, r7
 8014346:	d112      	bne.n	801436e <_dtoa_r+0x9e>
 8014348:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801434a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801434e:	6013      	str	r3, [r2, #0]
 8014350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014354:	4323      	orrs	r3, r4
 8014356:	f000 854d 	beq.w	8014df4 <_dtoa_r+0xb24>
 801435a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801435c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80145b4 <_dtoa_r+0x2e4>
 8014360:	2b00      	cmp	r3, #0
 8014362:	f000 854f 	beq.w	8014e04 <_dtoa_r+0xb34>
 8014366:	f10a 0303 	add.w	r3, sl, #3
 801436a:	f000 bd49 	b.w	8014e00 <_dtoa_r+0xb30>
 801436e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014372:	2200      	movs	r2, #0
 8014374:	ec51 0b17 	vmov	r0, r1, d7
 8014378:	2300      	movs	r3, #0
 801437a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801437e:	f7ec fc23 	bl	8000bc8 <__aeabi_dcmpeq>
 8014382:	4680      	mov	r8, r0
 8014384:	b158      	cbz	r0, 801439e <_dtoa_r+0xce>
 8014386:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014388:	2301      	movs	r3, #1
 801438a:	6013      	str	r3, [r2, #0]
 801438c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801438e:	b113      	cbz	r3, 8014396 <_dtoa_r+0xc6>
 8014390:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014392:	4b84      	ldr	r3, [pc, #528]	@ (80145a4 <_dtoa_r+0x2d4>)
 8014394:	6013      	str	r3, [r2, #0]
 8014396:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80145b8 <_dtoa_r+0x2e8>
 801439a:	f000 bd33 	b.w	8014e04 <_dtoa_r+0xb34>
 801439e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80143a2:	aa16      	add	r2, sp, #88	@ 0x58
 80143a4:	a917      	add	r1, sp, #92	@ 0x5c
 80143a6:	4658      	mov	r0, fp
 80143a8:	f001 f8ca 	bl	8015540 <__d2b>
 80143ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80143b0:	4681      	mov	r9, r0
 80143b2:	2e00      	cmp	r6, #0
 80143b4:	d077      	beq.n	80144a6 <_dtoa_r+0x1d6>
 80143b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80143b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80143bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80143c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80143c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80143c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80143cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80143d0:	4619      	mov	r1, r3
 80143d2:	2200      	movs	r2, #0
 80143d4:	4b74      	ldr	r3, [pc, #464]	@ (80145a8 <_dtoa_r+0x2d8>)
 80143d6:	f7eb ffd7 	bl	8000388 <__aeabi_dsub>
 80143da:	a369      	add	r3, pc, #420	@ (adr r3, 8014580 <_dtoa_r+0x2b0>)
 80143dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e0:	f7ec f98a 	bl	80006f8 <__aeabi_dmul>
 80143e4:	a368      	add	r3, pc, #416	@ (adr r3, 8014588 <_dtoa_r+0x2b8>)
 80143e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ea:	f7eb ffcf 	bl	800038c <__adddf3>
 80143ee:	4604      	mov	r4, r0
 80143f0:	4630      	mov	r0, r6
 80143f2:	460d      	mov	r5, r1
 80143f4:	f7ec f916 	bl	8000624 <__aeabi_i2d>
 80143f8:	a365      	add	r3, pc, #404	@ (adr r3, 8014590 <_dtoa_r+0x2c0>)
 80143fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fe:	f7ec f97b 	bl	80006f8 <__aeabi_dmul>
 8014402:	4602      	mov	r2, r0
 8014404:	460b      	mov	r3, r1
 8014406:	4620      	mov	r0, r4
 8014408:	4629      	mov	r1, r5
 801440a:	f7eb ffbf 	bl	800038c <__adddf3>
 801440e:	4604      	mov	r4, r0
 8014410:	460d      	mov	r5, r1
 8014412:	f7ec fc21 	bl	8000c58 <__aeabi_d2iz>
 8014416:	2200      	movs	r2, #0
 8014418:	4607      	mov	r7, r0
 801441a:	2300      	movs	r3, #0
 801441c:	4620      	mov	r0, r4
 801441e:	4629      	mov	r1, r5
 8014420:	f7ec fbdc 	bl	8000bdc <__aeabi_dcmplt>
 8014424:	b140      	cbz	r0, 8014438 <_dtoa_r+0x168>
 8014426:	4638      	mov	r0, r7
 8014428:	f7ec f8fc 	bl	8000624 <__aeabi_i2d>
 801442c:	4622      	mov	r2, r4
 801442e:	462b      	mov	r3, r5
 8014430:	f7ec fbca 	bl	8000bc8 <__aeabi_dcmpeq>
 8014434:	b900      	cbnz	r0, 8014438 <_dtoa_r+0x168>
 8014436:	3f01      	subs	r7, #1
 8014438:	2f16      	cmp	r7, #22
 801443a:	d851      	bhi.n	80144e0 <_dtoa_r+0x210>
 801443c:	4b5b      	ldr	r3, [pc, #364]	@ (80145ac <_dtoa_r+0x2dc>)
 801443e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801444a:	f7ec fbc7 	bl	8000bdc <__aeabi_dcmplt>
 801444e:	2800      	cmp	r0, #0
 8014450:	d048      	beq.n	80144e4 <_dtoa_r+0x214>
 8014452:	3f01      	subs	r7, #1
 8014454:	2300      	movs	r3, #0
 8014456:	9312      	str	r3, [sp, #72]	@ 0x48
 8014458:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801445a:	1b9b      	subs	r3, r3, r6
 801445c:	1e5a      	subs	r2, r3, #1
 801445e:	bf44      	itt	mi
 8014460:	f1c3 0801 	rsbmi	r8, r3, #1
 8014464:	2300      	movmi	r3, #0
 8014466:	9208      	str	r2, [sp, #32]
 8014468:	bf54      	ite	pl
 801446a:	f04f 0800 	movpl.w	r8, #0
 801446e:	9308      	strmi	r3, [sp, #32]
 8014470:	2f00      	cmp	r7, #0
 8014472:	db39      	blt.n	80144e8 <_dtoa_r+0x218>
 8014474:	9b08      	ldr	r3, [sp, #32]
 8014476:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014478:	443b      	add	r3, r7
 801447a:	9308      	str	r3, [sp, #32]
 801447c:	2300      	movs	r3, #0
 801447e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014482:	2b09      	cmp	r3, #9
 8014484:	d864      	bhi.n	8014550 <_dtoa_r+0x280>
 8014486:	2b05      	cmp	r3, #5
 8014488:	bfc4      	itt	gt
 801448a:	3b04      	subgt	r3, #4
 801448c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801448e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014490:	f1a3 0302 	sub.w	r3, r3, #2
 8014494:	bfcc      	ite	gt
 8014496:	2400      	movgt	r4, #0
 8014498:	2401      	movle	r4, #1
 801449a:	2b03      	cmp	r3, #3
 801449c:	d863      	bhi.n	8014566 <_dtoa_r+0x296>
 801449e:	e8df f003 	tbb	[pc, r3]
 80144a2:	372a      	.short	0x372a
 80144a4:	5535      	.short	0x5535
 80144a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80144aa:	441e      	add	r6, r3
 80144ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80144b0:	2b20      	cmp	r3, #32
 80144b2:	bfc1      	itttt	gt
 80144b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80144b8:	409f      	lslgt	r7, r3
 80144ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80144be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80144c2:	bfd6      	itet	le
 80144c4:	f1c3 0320 	rsble	r3, r3, #32
 80144c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80144cc:	fa04 f003 	lslle.w	r0, r4, r3
 80144d0:	f7ec f898 	bl	8000604 <__aeabi_ui2d>
 80144d4:	2201      	movs	r2, #1
 80144d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80144da:	3e01      	subs	r6, #1
 80144dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80144de:	e777      	b.n	80143d0 <_dtoa_r+0x100>
 80144e0:	2301      	movs	r3, #1
 80144e2:	e7b8      	b.n	8014456 <_dtoa_r+0x186>
 80144e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80144e6:	e7b7      	b.n	8014458 <_dtoa_r+0x188>
 80144e8:	427b      	negs	r3, r7
 80144ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80144ec:	2300      	movs	r3, #0
 80144ee:	eba8 0807 	sub.w	r8, r8, r7
 80144f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80144f4:	e7c4      	b.n	8014480 <_dtoa_r+0x1b0>
 80144f6:	2300      	movs	r3, #0
 80144f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80144fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	dc35      	bgt.n	801456c <_dtoa_r+0x29c>
 8014500:	2301      	movs	r3, #1
 8014502:	9300      	str	r3, [sp, #0]
 8014504:	9307      	str	r3, [sp, #28]
 8014506:	461a      	mov	r2, r3
 8014508:	920e      	str	r2, [sp, #56]	@ 0x38
 801450a:	e00b      	b.n	8014524 <_dtoa_r+0x254>
 801450c:	2301      	movs	r3, #1
 801450e:	e7f3      	b.n	80144f8 <_dtoa_r+0x228>
 8014510:	2300      	movs	r3, #0
 8014512:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014516:	18fb      	adds	r3, r7, r3
 8014518:	9300      	str	r3, [sp, #0]
 801451a:	3301      	adds	r3, #1
 801451c:	2b01      	cmp	r3, #1
 801451e:	9307      	str	r3, [sp, #28]
 8014520:	bfb8      	it	lt
 8014522:	2301      	movlt	r3, #1
 8014524:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014528:	2100      	movs	r1, #0
 801452a:	2204      	movs	r2, #4
 801452c:	f102 0514 	add.w	r5, r2, #20
 8014530:	429d      	cmp	r5, r3
 8014532:	d91f      	bls.n	8014574 <_dtoa_r+0x2a4>
 8014534:	6041      	str	r1, [r0, #4]
 8014536:	4658      	mov	r0, fp
 8014538:	f000 fcd8 	bl	8014eec <_Balloc>
 801453c:	4682      	mov	sl, r0
 801453e:	2800      	cmp	r0, #0
 8014540:	d13c      	bne.n	80145bc <_dtoa_r+0x2ec>
 8014542:	4b1b      	ldr	r3, [pc, #108]	@ (80145b0 <_dtoa_r+0x2e0>)
 8014544:	4602      	mov	r2, r0
 8014546:	f240 11af 	movw	r1, #431	@ 0x1af
 801454a:	e6d8      	b.n	80142fe <_dtoa_r+0x2e>
 801454c:	2301      	movs	r3, #1
 801454e:	e7e0      	b.n	8014512 <_dtoa_r+0x242>
 8014550:	2401      	movs	r4, #1
 8014552:	2300      	movs	r3, #0
 8014554:	9309      	str	r3, [sp, #36]	@ 0x24
 8014556:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014558:	f04f 33ff 	mov.w	r3, #4294967295
 801455c:	9300      	str	r3, [sp, #0]
 801455e:	9307      	str	r3, [sp, #28]
 8014560:	2200      	movs	r2, #0
 8014562:	2312      	movs	r3, #18
 8014564:	e7d0      	b.n	8014508 <_dtoa_r+0x238>
 8014566:	2301      	movs	r3, #1
 8014568:	930b      	str	r3, [sp, #44]	@ 0x2c
 801456a:	e7f5      	b.n	8014558 <_dtoa_r+0x288>
 801456c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801456e:	9300      	str	r3, [sp, #0]
 8014570:	9307      	str	r3, [sp, #28]
 8014572:	e7d7      	b.n	8014524 <_dtoa_r+0x254>
 8014574:	3101      	adds	r1, #1
 8014576:	0052      	lsls	r2, r2, #1
 8014578:	e7d8      	b.n	801452c <_dtoa_r+0x25c>
 801457a:	bf00      	nop
 801457c:	f3af 8000 	nop.w
 8014580:	636f4361 	.word	0x636f4361
 8014584:	3fd287a7 	.word	0x3fd287a7
 8014588:	8b60c8b3 	.word	0x8b60c8b3
 801458c:	3fc68a28 	.word	0x3fc68a28
 8014590:	509f79fb 	.word	0x509f79fb
 8014594:	3fd34413 	.word	0x3fd34413
 8014598:	080d3231 	.word	0x080d3231
 801459c:	080d3248 	.word	0x080d3248
 80145a0:	7ff00000 	.word	0x7ff00000
 80145a4:	080d3201 	.word	0x080d3201
 80145a8:	3ff80000 	.word	0x3ff80000
 80145ac:	080d3340 	.word	0x080d3340
 80145b0:	080d32a0 	.word	0x080d32a0
 80145b4:	080d322d 	.word	0x080d322d
 80145b8:	080d3200 	.word	0x080d3200
 80145bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80145c0:	6018      	str	r0, [r3, #0]
 80145c2:	9b07      	ldr	r3, [sp, #28]
 80145c4:	2b0e      	cmp	r3, #14
 80145c6:	f200 80a4 	bhi.w	8014712 <_dtoa_r+0x442>
 80145ca:	2c00      	cmp	r4, #0
 80145cc:	f000 80a1 	beq.w	8014712 <_dtoa_r+0x442>
 80145d0:	2f00      	cmp	r7, #0
 80145d2:	dd33      	ble.n	801463c <_dtoa_r+0x36c>
 80145d4:	4bad      	ldr	r3, [pc, #692]	@ (801488c <_dtoa_r+0x5bc>)
 80145d6:	f007 020f 	and.w	r2, r7, #15
 80145da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80145de:	ed93 7b00 	vldr	d7, [r3]
 80145e2:	05f8      	lsls	r0, r7, #23
 80145e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80145e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80145ec:	d516      	bpl.n	801461c <_dtoa_r+0x34c>
 80145ee:	4ba8      	ldr	r3, [pc, #672]	@ (8014890 <_dtoa_r+0x5c0>)
 80145f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80145f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80145f8:	f7ec f9a8 	bl	800094c <__aeabi_ddiv>
 80145fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014600:	f004 040f 	and.w	r4, r4, #15
 8014604:	2603      	movs	r6, #3
 8014606:	4da2      	ldr	r5, [pc, #648]	@ (8014890 <_dtoa_r+0x5c0>)
 8014608:	b954      	cbnz	r4, 8014620 <_dtoa_r+0x350>
 801460a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801460e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014612:	f7ec f99b 	bl	800094c <__aeabi_ddiv>
 8014616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801461a:	e028      	b.n	801466e <_dtoa_r+0x39e>
 801461c:	2602      	movs	r6, #2
 801461e:	e7f2      	b.n	8014606 <_dtoa_r+0x336>
 8014620:	07e1      	lsls	r1, r4, #31
 8014622:	d508      	bpl.n	8014636 <_dtoa_r+0x366>
 8014624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014628:	e9d5 2300 	ldrd	r2, r3, [r5]
 801462c:	f7ec f864 	bl	80006f8 <__aeabi_dmul>
 8014630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014634:	3601      	adds	r6, #1
 8014636:	1064      	asrs	r4, r4, #1
 8014638:	3508      	adds	r5, #8
 801463a:	e7e5      	b.n	8014608 <_dtoa_r+0x338>
 801463c:	f000 80d2 	beq.w	80147e4 <_dtoa_r+0x514>
 8014640:	427c      	negs	r4, r7
 8014642:	4b92      	ldr	r3, [pc, #584]	@ (801488c <_dtoa_r+0x5bc>)
 8014644:	4d92      	ldr	r5, [pc, #584]	@ (8014890 <_dtoa_r+0x5c0>)
 8014646:	f004 020f 	and.w	r2, r4, #15
 801464a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014656:	f7ec f84f 	bl	80006f8 <__aeabi_dmul>
 801465a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801465e:	1124      	asrs	r4, r4, #4
 8014660:	2300      	movs	r3, #0
 8014662:	2602      	movs	r6, #2
 8014664:	2c00      	cmp	r4, #0
 8014666:	f040 80b2 	bne.w	80147ce <_dtoa_r+0x4fe>
 801466a:	2b00      	cmp	r3, #0
 801466c:	d1d3      	bne.n	8014616 <_dtoa_r+0x346>
 801466e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014670:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014674:	2b00      	cmp	r3, #0
 8014676:	f000 80b7 	beq.w	80147e8 <_dtoa_r+0x518>
 801467a:	4b86      	ldr	r3, [pc, #536]	@ (8014894 <_dtoa_r+0x5c4>)
 801467c:	2200      	movs	r2, #0
 801467e:	4620      	mov	r0, r4
 8014680:	4629      	mov	r1, r5
 8014682:	f7ec faab 	bl	8000bdc <__aeabi_dcmplt>
 8014686:	2800      	cmp	r0, #0
 8014688:	f000 80ae 	beq.w	80147e8 <_dtoa_r+0x518>
 801468c:	9b07      	ldr	r3, [sp, #28]
 801468e:	2b00      	cmp	r3, #0
 8014690:	f000 80aa 	beq.w	80147e8 <_dtoa_r+0x518>
 8014694:	9b00      	ldr	r3, [sp, #0]
 8014696:	2b00      	cmp	r3, #0
 8014698:	dd37      	ble.n	801470a <_dtoa_r+0x43a>
 801469a:	1e7b      	subs	r3, r7, #1
 801469c:	9304      	str	r3, [sp, #16]
 801469e:	4620      	mov	r0, r4
 80146a0:	4b7d      	ldr	r3, [pc, #500]	@ (8014898 <_dtoa_r+0x5c8>)
 80146a2:	2200      	movs	r2, #0
 80146a4:	4629      	mov	r1, r5
 80146a6:	f7ec f827 	bl	80006f8 <__aeabi_dmul>
 80146aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146ae:	9c00      	ldr	r4, [sp, #0]
 80146b0:	3601      	adds	r6, #1
 80146b2:	4630      	mov	r0, r6
 80146b4:	f7eb ffb6 	bl	8000624 <__aeabi_i2d>
 80146b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80146bc:	f7ec f81c 	bl	80006f8 <__aeabi_dmul>
 80146c0:	4b76      	ldr	r3, [pc, #472]	@ (801489c <_dtoa_r+0x5cc>)
 80146c2:	2200      	movs	r2, #0
 80146c4:	f7eb fe62 	bl	800038c <__adddf3>
 80146c8:	4605      	mov	r5, r0
 80146ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80146ce:	2c00      	cmp	r4, #0
 80146d0:	f040 808d 	bne.w	80147ee <_dtoa_r+0x51e>
 80146d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146d8:	4b71      	ldr	r3, [pc, #452]	@ (80148a0 <_dtoa_r+0x5d0>)
 80146da:	2200      	movs	r2, #0
 80146dc:	f7eb fe54 	bl	8000388 <__aeabi_dsub>
 80146e0:	4602      	mov	r2, r0
 80146e2:	460b      	mov	r3, r1
 80146e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80146e8:	462a      	mov	r2, r5
 80146ea:	4633      	mov	r3, r6
 80146ec:	f7ec fa94 	bl	8000c18 <__aeabi_dcmpgt>
 80146f0:	2800      	cmp	r0, #0
 80146f2:	f040 828b 	bne.w	8014c0c <_dtoa_r+0x93c>
 80146f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146fa:	462a      	mov	r2, r5
 80146fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014700:	f7ec fa6c 	bl	8000bdc <__aeabi_dcmplt>
 8014704:	2800      	cmp	r0, #0
 8014706:	f040 8128 	bne.w	801495a <_dtoa_r+0x68a>
 801470a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801470e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014712:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014714:	2b00      	cmp	r3, #0
 8014716:	f2c0 815a 	blt.w	80149ce <_dtoa_r+0x6fe>
 801471a:	2f0e      	cmp	r7, #14
 801471c:	f300 8157 	bgt.w	80149ce <_dtoa_r+0x6fe>
 8014720:	4b5a      	ldr	r3, [pc, #360]	@ (801488c <_dtoa_r+0x5bc>)
 8014722:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014726:	ed93 7b00 	vldr	d7, [r3]
 801472a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801472c:	2b00      	cmp	r3, #0
 801472e:	ed8d 7b00 	vstr	d7, [sp]
 8014732:	da03      	bge.n	801473c <_dtoa_r+0x46c>
 8014734:	9b07      	ldr	r3, [sp, #28]
 8014736:	2b00      	cmp	r3, #0
 8014738:	f340 8101 	ble.w	801493e <_dtoa_r+0x66e>
 801473c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014740:	4656      	mov	r6, sl
 8014742:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014746:	4620      	mov	r0, r4
 8014748:	4629      	mov	r1, r5
 801474a:	f7ec f8ff 	bl	800094c <__aeabi_ddiv>
 801474e:	f7ec fa83 	bl	8000c58 <__aeabi_d2iz>
 8014752:	4680      	mov	r8, r0
 8014754:	f7eb ff66 	bl	8000624 <__aeabi_i2d>
 8014758:	e9dd 2300 	ldrd	r2, r3, [sp]
 801475c:	f7eb ffcc 	bl	80006f8 <__aeabi_dmul>
 8014760:	4602      	mov	r2, r0
 8014762:	460b      	mov	r3, r1
 8014764:	4620      	mov	r0, r4
 8014766:	4629      	mov	r1, r5
 8014768:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801476c:	f7eb fe0c 	bl	8000388 <__aeabi_dsub>
 8014770:	f806 4b01 	strb.w	r4, [r6], #1
 8014774:	9d07      	ldr	r5, [sp, #28]
 8014776:	eba6 040a 	sub.w	r4, r6, sl
 801477a:	42a5      	cmp	r5, r4
 801477c:	4602      	mov	r2, r0
 801477e:	460b      	mov	r3, r1
 8014780:	f040 8117 	bne.w	80149b2 <_dtoa_r+0x6e2>
 8014784:	f7eb fe02 	bl	800038c <__adddf3>
 8014788:	e9dd 2300 	ldrd	r2, r3, [sp]
 801478c:	4604      	mov	r4, r0
 801478e:	460d      	mov	r5, r1
 8014790:	f7ec fa42 	bl	8000c18 <__aeabi_dcmpgt>
 8014794:	2800      	cmp	r0, #0
 8014796:	f040 80f9 	bne.w	801498c <_dtoa_r+0x6bc>
 801479a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801479e:	4620      	mov	r0, r4
 80147a0:	4629      	mov	r1, r5
 80147a2:	f7ec fa11 	bl	8000bc8 <__aeabi_dcmpeq>
 80147a6:	b118      	cbz	r0, 80147b0 <_dtoa_r+0x4e0>
 80147a8:	f018 0f01 	tst.w	r8, #1
 80147ac:	f040 80ee 	bne.w	801498c <_dtoa_r+0x6bc>
 80147b0:	4649      	mov	r1, r9
 80147b2:	4658      	mov	r0, fp
 80147b4:	f000 fbda 	bl	8014f6c <_Bfree>
 80147b8:	2300      	movs	r3, #0
 80147ba:	7033      	strb	r3, [r6, #0]
 80147bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80147be:	3701      	adds	r7, #1
 80147c0:	601f      	str	r7, [r3, #0]
 80147c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	f000 831d 	beq.w	8014e04 <_dtoa_r+0xb34>
 80147ca:	601e      	str	r6, [r3, #0]
 80147cc:	e31a      	b.n	8014e04 <_dtoa_r+0xb34>
 80147ce:	07e2      	lsls	r2, r4, #31
 80147d0:	d505      	bpl.n	80147de <_dtoa_r+0x50e>
 80147d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80147d6:	f7eb ff8f 	bl	80006f8 <__aeabi_dmul>
 80147da:	3601      	adds	r6, #1
 80147dc:	2301      	movs	r3, #1
 80147de:	1064      	asrs	r4, r4, #1
 80147e0:	3508      	adds	r5, #8
 80147e2:	e73f      	b.n	8014664 <_dtoa_r+0x394>
 80147e4:	2602      	movs	r6, #2
 80147e6:	e742      	b.n	801466e <_dtoa_r+0x39e>
 80147e8:	9c07      	ldr	r4, [sp, #28]
 80147ea:	9704      	str	r7, [sp, #16]
 80147ec:	e761      	b.n	80146b2 <_dtoa_r+0x3e2>
 80147ee:	4b27      	ldr	r3, [pc, #156]	@ (801488c <_dtoa_r+0x5bc>)
 80147f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80147f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80147f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80147fa:	4454      	add	r4, sl
 80147fc:	2900      	cmp	r1, #0
 80147fe:	d053      	beq.n	80148a8 <_dtoa_r+0x5d8>
 8014800:	4928      	ldr	r1, [pc, #160]	@ (80148a4 <_dtoa_r+0x5d4>)
 8014802:	2000      	movs	r0, #0
 8014804:	f7ec f8a2 	bl	800094c <__aeabi_ddiv>
 8014808:	4633      	mov	r3, r6
 801480a:	462a      	mov	r2, r5
 801480c:	f7eb fdbc 	bl	8000388 <__aeabi_dsub>
 8014810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014814:	4656      	mov	r6, sl
 8014816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801481a:	f7ec fa1d 	bl	8000c58 <__aeabi_d2iz>
 801481e:	4605      	mov	r5, r0
 8014820:	f7eb ff00 	bl	8000624 <__aeabi_i2d>
 8014824:	4602      	mov	r2, r0
 8014826:	460b      	mov	r3, r1
 8014828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801482c:	f7eb fdac 	bl	8000388 <__aeabi_dsub>
 8014830:	3530      	adds	r5, #48	@ 0x30
 8014832:	4602      	mov	r2, r0
 8014834:	460b      	mov	r3, r1
 8014836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801483a:	f806 5b01 	strb.w	r5, [r6], #1
 801483e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014842:	f7ec f9cb 	bl	8000bdc <__aeabi_dcmplt>
 8014846:	2800      	cmp	r0, #0
 8014848:	d171      	bne.n	801492e <_dtoa_r+0x65e>
 801484a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801484e:	4911      	ldr	r1, [pc, #68]	@ (8014894 <_dtoa_r+0x5c4>)
 8014850:	2000      	movs	r0, #0
 8014852:	f7eb fd99 	bl	8000388 <__aeabi_dsub>
 8014856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801485a:	f7ec f9bf 	bl	8000bdc <__aeabi_dcmplt>
 801485e:	2800      	cmp	r0, #0
 8014860:	f040 8095 	bne.w	801498e <_dtoa_r+0x6be>
 8014864:	42a6      	cmp	r6, r4
 8014866:	f43f af50 	beq.w	801470a <_dtoa_r+0x43a>
 801486a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801486e:	4b0a      	ldr	r3, [pc, #40]	@ (8014898 <_dtoa_r+0x5c8>)
 8014870:	2200      	movs	r2, #0
 8014872:	f7eb ff41 	bl	80006f8 <__aeabi_dmul>
 8014876:	4b08      	ldr	r3, [pc, #32]	@ (8014898 <_dtoa_r+0x5c8>)
 8014878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801487c:	2200      	movs	r2, #0
 801487e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014882:	f7eb ff39 	bl	80006f8 <__aeabi_dmul>
 8014886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801488a:	e7c4      	b.n	8014816 <_dtoa_r+0x546>
 801488c:	080d3340 	.word	0x080d3340
 8014890:	080d3318 	.word	0x080d3318
 8014894:	3ff00000 	.word	0x3ff00000
 8014898:	40240000 	.word	0x40240000
 801489c:	401c0000 	.word	0x401c0000
 80148a0:	40140000 	.word	0x40140000
 80148a4:	3fe00000 	.word	0x3fe00000
 80148a8:	4631      	mov	r1, r6
 80148aa:	4628      	mov	r0, r5
 80148ac:	f7eb ff24 	bl	80006f8 <__aeabi_dmul>
 80148b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80148b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80148b6:	4656      	mov	r6, sl
 80148b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80148bc:	f7ec f9cc 	bl	8000c58 <__aeabi_d2iz>
 80148c0:	4605      	mov	r5, r0
 80148c2:	f7eb feaf 	bl	8000624 <__aeabi_i2d>
 80148c6:	4602      	mov	r2, r0
 80148c8:	460b      	mov	r3, r1
 80148ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80148ce:	f7eb fd5b 	bl	8000388 <__aeabi_dsub>
 80148d2:	3530      	adds	r5, #48	@ 0x30
 80148d4:	f806 5b01 	strb.w	r5, [r6], #1
 80148d8:	4602      	mov	r2, r0
 80148da:	460b      	mov	r3, r1
 80148dc:	42a6      	cmp	r6, r4
 80148de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80148e2:	f04f 0200 	mov.w	r2, #0
 80148e6:	d124      	bne.n	8014932 <_dtoa_r+0x662>
 80148e8:	4bac      	ldr	r3, [pc, #688]	@ (8014b9c <_dtoa_r+0x8cc>)
 80148ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80148ee:	f7eb fd4d 	bl	800038c <__adddf3>
 80148f2:	4602      	mov	r2, r0
 80148f4:	460b      	mov	r3, r1
 80148f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80148fa:	f7ec f98d 	bl	8000c18 <__aeabi_dcmpgt>
 80148fe:	2800      	cmp	r0, #0
 8014900:	d145      	bne.n	801498e <_dtoa_r+0x6be>
 8014902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014906:	49a5      	ldr	r1, [pc, #660]	@ (8014b9c <_dtoa_r+0x8cc>)
 8014908:	2000      	movs	r0, #0
 801490a:	f7eb fd3d 	bl	8000388 <__aeabi_dsub>
 801490e:	4602      	mov	r2, r0
 8014910:	460b      	mov	r3, r1
 8014912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014916:	f7ec f961 	bl	8000bdc <__aeabi_dcmplt>
 801491a:	2800      	cmp	r0, #0
 801491c:	f43f aef5 	beq.w	801470a <_dtoa_r+0x43a>
 8014920:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014922:	1e73      	subs	r3, r6, #1
 8014924:	9315      	str	r3, [sp, #84]	@ 0x54
 8014926:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801492a:	2b30      	cmp	r3, #48	@ 0x30
 801492c:	d0f8      	beq.n	8014920 <_dtoa_r+0x650>
 801492e:	9f04      	ldr	r7, [sp, #16]
 8014930:	e73e      	b.n	80147b0 <_dtoa_r+0x4e0>
 8014932:	4b9b      	ldr	r3, [pc, #620]	@ (8014ba0 <_dtoa_r+0x8d0>)
 8014934:	f7eb fee0 	bl	80006f8 <__aeabi_dmul>
 8014938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801493c:	e7bc      	b.n	80148b8 <_dtoa_r+0x5e8>
 801493e:	d10c      	bne.n	801495a <_dtoa_r+0x68a>
 8014940:	4b98      	ldr	r3, [pc, #608]	@ (8014ba4 <_dtoa_r+0x8d4>)
 8014942:	2200      	movs	r2, #0
 8014944:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014948:	f7eb fed6 	bl	80006f8 <__aeabi_dmul>
 801494c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014950:	f7ec f958 	bl	8000c04 <__aeabi_dcmpge>
 8014954:	2800      	cmp	r0, #0
 8014956:	f000 8157 	beq.w	8014c08 <_dtoa_r+0x938>
 801495a:	2400      	movs	r4, #0
 801495c:	4625      	mov	r5, r4
 801495e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014960:	43db      	mvns	r3, r3
 8014962:	9304      	str	r3, [sp, #16]
 8014964:	4656      	mov	r6, sl
 8014966:	2700      	movs	r7, #0
 8014968:	4621      	mov	r1, r4
 801496a:	4658      	mov	r0, fp
 801496c:	f000 fafe 	bl	8014f6c <_Bfree>
 8014970:	2d00      	cmp	r5, #0
 8014972:	d0dc      	beq.n	801492e <_dtoa_r+0x65e>
 8014974:	b12f      	cbz	r7, 8014982 <_dtoa_r+0x6b2>
 8014976:	42af      	cmp	r7, r5
 8014978:	d003      	beq.n	8014982 <_dtoa_r+0x6b2>
 801497a:	4639      	mov	r1, r7
 801497c:	4658      	mov	r0, fp
 801497e:	f000 faf5 	bl	8014f6c <_Bfree>
 8014982:	4629      	mov	r1, r5
 8014984:	4658      	mov	r0, fp
 8014986:	f000 faf1 	bl	8014f6c <_Bfree>
 801498a:	e7d0      	b.n	801492e <_dtoa_r+0x65e>
 801498c:	9704      	str	r7, [sp, #16]
 801498e:	4633      	mov	r3, r6
 8014990:	461e      	mov	r6, r3
 8014992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014996:	2a39      	cmp	r2, #57	@ 0x39
 8014998:	d107      	bne.n	80149aa <_dtoa_r+0x6da>
 801499a:	459a      	cmp	sl, r3
 801499c:	d1f8      	bne.n	8014990 <_dtoa_r+0x6c0>
 801499e:	9a04      	ldr	r2, [sp, #16]
 80149a0:	3201      	adds	r2, #1
 80149a2:	9204      	str	r2, [sp, #16]
 80149a4:	2230      	movs	r2, #48	@ 0x30
 80149a6:	f88a 2000 	strb.w	r2, [sl]
 80149aa:	781a      	ldrb	r2, [r3, #0]
 80149ac:	3201      	adds	r2, #1
 80149ae:	701a      	strb	r2, [r3, #0]
 80149b0:	e7bd      	b.n	801492e <_dtoa_r+0x65e>
 80149b2:	4b7b      	ldr	r3, [pc, #492]	@ (8014ba0 <_dtoa_r+0x8d0>)
 80149b4:	2200      	movs	r2, #0
 80149b6:	f7eb fe9f 	bl	80006f8 <__aeabi_dmul>
 80149ba:	2200      	movs	r2, #0
 80149bc:	2300      	movs	r3, #0
 80149be:	4604      	mov	r4, r0
 80149c0:	460d      	mov	r5, r1
 80149c2:	f7ec f901 	bl	8000bc8 <__aeabi_dcmpeq>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	f43f aebb 	beq.w	8014742 <_dtoa_r+0x472>
 80149cc:	e6f0      	b.n	80147b0 <_dtoa_r+0x4e0>
 80149ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80149d0:	2a00      	cmp	r2, #0
 80149d2:	f000 80db 	beq.w	8014b8c <_dtoa_r+0x8bc>
 80149d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80149d8:	2a01      	cmp	r2, #1
 80149da:	f300 80bf 	bgt.w	8014b5c <_dtoa_r+0x88c>
 80149de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80149e0:	2a00      	cmp	r2, #0
 80149e2:	f000 80b7 	beq.w	8014b54 <_dtoa_r+0x884>
 80149e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80149ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80149ec:	4646      	mov	r6, r8
 80149ee:	9a08      	ldr	r2, [sp, #32]
 80149f0:	2101      	movs	r1, #1
 80149f2:	441a      	add	r2, r3
 80149f4:	4658      	mov	r0, fp
 80149f6:	4498      	add	r8, r3
 80149f8:	9208      	str	r2, [sp, #32]
 80149fa:	f000 fb6b 	bl	80150d4 <__i2b>
 80149fe:	4605      	mov	r5, r0
 8014a00:	b15e      	cbz	r6, 8014a1a <_dtoa_r+0x74a>
 8014a02:	9b08      	ldr	r3, [sp, #32]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	dd08      	ble.n	8014a1a <_dtoa_r+0x74a>
 8014a08:	42b3      	cmp	r3, r6
 8014a0a:	9a08      	ldr	r2, [sp, #32]
 8014a0c:	bfa8      	it	ge
 8014a0e:	4633      	movge	r3, r6
 8014a10:	eba8 0803 	sub.w	r8, r8, r3
 8014a14:	1af6      	subs	r6, r6, r3
 8014a16:	1ad3      	subs	r3, r2, r3
 8014a18:	9308      	str	r3, [sp, #32]
 8014a1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014a1c:	b1f3      	cbz	r3, 8014a5c <_dtoa_r+0x78c>
 8014a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	f000 80b7 	beq.w	8014b94 <_dtoa_r+0x8c4>
 8014a26:	b18c      	cbz	r4, 8014a4c <_dtoa_r+0x77c>
 8014a28:	4629      	mov	r1, r5
 8014a2a:	4622      	mov	r2, r4
 8014a2c:	4658      	mov	r0, fp
 8014a2e:	f000 fc11 	bl	8015254 <__pow5mult>
 8014a32:	464a      	mov	r2, r9
 8014a34:	4601      	mov	r1, r0
 8014a36:	4605      	mov	r5, r0
 8014a38:	4658      	mov	r0, fp
 8014a3a:	f000 fb61 	bl	8015100 <__multiply>
 8014a3e:	4649      	mov	r1, r9
 8014a40:	9004      	str	r0, [sp, #16]
 8014a42:	4658      	mov	r0, fp
 8014a44:	f000 fa92 	bl	8014f6c <_Bfree>
 8014a48:	9b04      	ldr	r3, [sp, #16]
 8014a4a:	4699      	mov	r9, r3
 8014a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014a4e:	1b1a      	subs	r2, r3, r4
 8014a50:	d004      	beq.n	8014a5c <_dtoa_r+0x78c>
 8014a52:	4649      	mov	r1, r9
 8014a54:	4658      	mov	r0, fp
 8014a56:	f000 fbfd 	bl	8015254 <__pow5mult>
 8014a5a:	4681      	mov	r9, r0
 8014a5c:	2101      	movs	r1, #1
 8014a5e:	4658      	mov	r0, fp
 8014a60:	f000 fb38 	bl	80150d4 <__i2b>
 8014a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014a66:	4604      	mov	r4, r0
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	f000 81cf 	beq.w	8014e0c <_dtoa_r+0xb3c>
 8014a6e:	461a      	mov	r2, r3
 8014a70:	4601      	mov	r1, r0
 8014a72:	4658      	mov	r0, fp
 8014a74:	f000 fbee 	bl	8015254 <__pow5mult>
 8014a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a7a:	2b01      	cmp	r3, #1
 8014a7c:	4604      	mov	r4, r0
 8014a7e:	f300 8095 	bgt.w	8014bac <_dtoa_r+0x8dc>
 8014a82:	9b02      	ldr	r3, [sp, #8]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	f040 8087 	bne.w	8014b98 <_dtoa_r+0x8c8>
 8014a8a:	9b03      	ldr	r3, [sp, #12]
 8014a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	f040 8089 	bne.w	8014ba8 <_dtoa_r+0x8d8>
 8014a96:	9b03      	ldr	r3, [sp, #12]
 8014a98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014a9c:	0d1b      	lsrs	r3, r3, #20
 8014a9e:	051b      	lsls	r3, r3, #20
 8014aa0:	b12b      	cbz	r3, 8014aae <_dtoa_r+0x7de>
 8014aa2:	9b08      	ldr	r3, [sp, #32]
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	9308      	str	r3, [sp, #32]
 8014aa8:	f108 0801 	add.w	r8, r8, #1
 8014aac:	2301      	movs	r3, #1
 8014aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	f000 81b0 	beq.w	8014e18 <_dtoa_r+0xb48>
 8014ab8:	6923      	ldr	r3, [r4, #16]
 8014aba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014abe:	6918      	ldr	r0, [r3, #16]
 8014ac0:	f000 fabc 	bl	801503c <__hi0bits>
 8014ac4:	f1c0 0020 	rsb	r0, r0, #32
 8014ac8:	9b08      	ldr	r3, [sp, #32]
 8014aca:	4418      	add	r0, r3
 8014acc:	f010 001f 	ands.w	r0, r0, #31
 8014ad0:	d077      	beq.n	8014bc2 <_dtoa_r+0x8f2>
 8014ad2:	f1c0 0320 	rsb	r3, r0, #32
 8014ad6:	2b04      	cmp	r3, #4
 8014ad8:	dd6b      	ble.n	8014bb2 <_dtoa_r+0x8e2>
 8014ada:	9b08      	ldr	r3, [sp, #32]
 8014adc:	f1c0 001c 	rsb	r0, r0, #28
 8014ae0:	4403      	add	r3, r0
 8014ae2:	4480      	add	r8, r0
 8014ae4:	4406      	add	r6, r0
 8014ae6:	9308      	str	r3, [sp, #32]
 8014ae8:	f1b8 0f00 	cmp.w	r8, #0
 8014aec:	dd05      	ble.n	8014afa <_dtoa_r+0x82a>
 8014aee:	4649      	mov	r1, r9
 8014af0:	4642      	mov	r2, r8
 8014af2:	4658      	mov	r0, fp
 8014af4:	f000 fc08 	bl	8015308 <__lshift>
 8014af8:	4681      	mov	r9, r0
 8014afa:	9b08      	ldr	r3, [sp, #32]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	dd05      	ble.n	8014b0c <_dtoa_r+0x83c>
 8014b00:	4621      	mov	r1, r4
 8014b02:	461a      	mov	r2, r3
 8014b04:	4658      	mov	r0, fp
 8014b06:	f000 fbff 	bl	8015308 <__lshift>
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d059      	beq.n	8014bc6 <_dtoa_r+0x8f6>
 8014b12:	4621      	mov	r1, r4
 8014b14:	4648      	mov	r0, r9
 8014b16:	f000 fc63 	bl	80153e0 <__mcmp>
 8014b1a:	2800      	cmp	r0, #0
 8014b1c:	da53      	bge.n	8014bc6 <_dtoa_r+0x8f6>
 8014b1e:	1e7b      	subs	r3, r7, #1
 8014b20:	9304      	str	r3, [sp, #16]
 8014b22:	4649      	mov	r1, r9
 8014b24:	2300      	movs	r3, #0
 8014b26:	220a      	movs	r2, #10
 8014b28:	4658      	mov	r0, fp
 8014b2a:	f000 fa41 	bl	8014fb0 <__multadd>
 8014b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014b30:	4681      	mov	r9, r0
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	f000 8172 	beq.w	8014e1c <_dtoa_r+0xb4c>
 8014b38:	2300      	movs	r3, #0
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	220a      	movs	r2, #10
 8014b3e:	4658      	mov	r0, fp
 8014b40:	f000 fa36 	bl	8014fb0 <__multadd>
 8014b44:	9b00      	ldr	r3, [sp, #0]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	4605      	mov	r5, r0
 8014b4a:	dc67      	bgt.n	8014c1c <_dtoa_r+0x94c>
 8014b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b4e:	2b02      	cmp	r3, #2
 8014b50:	dc41      	bgt.n	8014bd6 <_dtoa_r+0x906>
 8014b52:	e063      	b.n	8014c1c <_dtoa_r+0x94c>
 8014b54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014b56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014b5a:	e746      	b.n	80149ea <_dtoa_r+0x71a>
 8014b5c:	9b07      	ldr	r3, [sp, #28]
 8014b5e:	1e5c      	subs	r4, r3, #1
 8014b60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b62:	42a3      	cmp	r3, r4
 8014b64:	bfbf      	itttt	lt
 8014b66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014b68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8014b6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8014b6c:	1ae3      	sublt	r3, r4, r3
 8014b6e:	bfb4      	ite	lt
 8014b70:	18d2      	addlt	r2, r2, r3
 8014b72:	1b1c      	subge	r4, r3, r4
 8014b74:	9b07      	ldr	r3, [sp, #28]
 8014b76:	bfbc      	itt	lt
 8014b78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8014b7a:	2400      	movlt	r4, #0
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	bfb5      	itete	lt
 8014b80:	eba8 0603 	sublt.w	r6, r8, r3
 8014b84:	9b07      	ldrge	r3, [sp, #28]
 8014b86:	2300      	movlt	r3, #0
 8014b88:	4646      	movge	r6, r8
 8014b8a:	e730      	b.n	80149ee <_dtoa_r+0x71e>
 8014b8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014b8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014b90:	4646      	mov	r6, r8
 8014b92:	e735      	b.n	8014a00 <_dtoa_r+0x730>
 8014b94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014b96:	e75c      	b.n	8014a52 <_dtoa_r+0x782>
 8014b98:	2300      	movs	r3, #0
 8014b9a:	e788      	b.n	8014aae <_dtoa_r+0x7de>
 8014b9c:	3fe00000 	.word	0x3fe00000
 8014ba0:	40240000 	.word	0x40240000
 8014ba4:	40140000 	.word	0x40140000
 8014ba8:	9b02      	ldr	r3, [sp, #8]
 8014baa:	e780      	b.n	8014aae <_dtoa_r+0x7de>
 8014bac:	2300      	movs	r3, #0
 8014bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8014bb0:	e782      	b.n	8014ab8 <_dtoa_r+0x7e8>
 8014bb2:	d099      	beq.n	8014ae8 <_dtoa_r+0x818>
 8014bb4:	9a08      	ldr	r2, [sp, #32]
 8014bb6:	331c      	adds	r3, #28
 8014bb8:	441a      	add	r2, r3
 8014bba:	4498      	add	r8, r3
 8014bbc:	441e      	add	r6, r3
 8014bbe:	9208      	str	r2, [sp, #32]
 8014bc0:	e792      	b.n	8014ae8 <_dtoa_r+0x818>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	e7f6      	b.n	8014bb4 <_dtoa_r+0x8e4>
 8014bc6:	9b07      	ldr	r3, [sp, #28]
 8014bc8:	9704      	str	r7, [sp, #16]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	dc20      	bgt.n	8014c10 <_dtoa_r+0x940>
 8014bce:	9300      	str	r3, [sp, #0]
 8014bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bd2:	2b02      	cmp	r3, #2
 8014bd4:	dd1e      	ble.n	8014c14 <_dtoa_r+0x944>
 8014bd6:	9b00      	ldr	r3, [sp, #0]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	f47f aec0 	bne.w	801495e <_dtoa_r+0x68e>
 8014bde:	4621      	mov	r1, r4
 8014be0:	2205      	movs	r2, #5
 8014be2:	4658      	mov	r0, fp
 8014be4:	f000 f9e4 	bl	8014fb0 <__multadd>
 8014be8:	4601      	mov	r1, r0
 8014bea:	4604      	mov	r4, r0
 8014bec:	4648      	mov	r0, r9
 8014bee:	f000 fbf7 	bl	80153e0 <__mcmp>
 8014bf2:	2800      	cmp	r0, #0
 8014bf4:	f77f aeb3 	ble.w	801495e <_dtoa_r+0x68e>
 8014bf8:	4656      	mov	r6, sl
 8014bfa:	2331      	movs	r3, #49	@ 0x31
 8014bfc:	f806 3b01 	strb.w	r3, [r6], #1
 8014c00:	9b04      	ldr	r3, [sp, #16]
 8014c02:	3301      	adds	r3, #1
 8014c04:	9304      	str	r3, [sp, #16]
 8014c06:	e6ae      	b.n	8014966 <_dtoa_r+0x696>
 8014c08:	9c07      	ldr	r4, [sp, #28]
 8014c0a:	9704      	str	r7, [sp, #16]
 8014c0c:	4625      	mov	r5, r4
 8014c0e:	e7f3      	b.n	8014bf8 <_dtoa_r+0x928>
 8014c10:	9b07      	ldr	r3, [sp, #28]
 8014c12:	9300      	str	r3, [sp, #0]
 8014c14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	f000 8104 	beq.w	8014e24 <_dtoa_r+0xb54>
 8014c1c:	2e00      	cmp	r6, #0
 8014c1e:	dd05      	ble.n	8014c2c <_dtoa_r+0x95c>
 8014c20:	4629      	mov	r1, r5
 8014c22:	4632      	mov	r2, r6
 8014c24:	4658      	mov	r0, fp
 8014c26:	f000 fb6f 	bl	8015308 <__lshift>
 8014c2a:	4605      	mov	r5, r0
 8014c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d05a      	beq.n	8014ce8 <_dtoa_r+0xa18>
 8014c32:	6869      	ldr	r1, [r5, #4]
 8014c34:	4658      	mov	r0, fp
 8014c36:	f000 f959 	bl	8014eec <_Balloc>
 8014c3a:	4606      	mov	r6, r0
 8014c3c:	b928      	cbnz	r0, 8014c4a <_dtoa_r+0x97a>
 8014c3e:	4b84      	ldr	r3, [pc, #528]	@ (8014e50 <_dtoa_r+0xb80>)
 8014c40:	4602      	mov	r2, r0
 8014c42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014c46:	f7ff bb5a 	b.w	80142fe <_dtoa_r+0x2e>
 8014c4a:	692a      	ldr	r2, [r5, #16]
 8014c4c:	3202      	adds	r2, #2
 8014c4e:	0092      	lsls	r2, r2, #2
 8014c50:	f105 010c 	add.w	r1, r5, #12
 8014c54:	300c      	adds	r0, #12
 8014c56:	f7ff faa4 	bl	80141a2 <memcpy>
 8014c5a:	2201      	movs	r2, #1
 8014c5c:	4631      	mov	r1, r6
 8014c5e:	4658      	mov	r0, fp
 8014c60:	f000 fb52 	bl	8015308 <__lshift>
 8014c64:	f10a 0301 	add.w	r3, sl, #1
 8014c68:	9307      	str	r3, [sp, #28]
 8014c6a:	9b00      	ldr	r3, [sp, #0]
 8014c6c:	4453      	add	r3, sl
 8014c6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014c70:	9b02      	ldr	r3, [sp, #8]
 8014c72:	f003 0301 	and.w	r3, r3, #1
 8014c76:	462f      	mov	r7, r5
 8014c78:	930a      	str	r3, [sp, #40]	@ 0x28
 8014c7a:	4605      	mov	r5, r0
 8014c7c:	9b07      	ldr	r3, [sp, #28]
 8014c7e:	4621      	mov	r1, r4
 8014c80:	3b01      	subs	r3, #1
 8014c82:	4648      	mov	r0, r9
 8014c84:	9300      	str	r3, [sp, #0]
 8014c86:	f7ff fa9a 	bl	80141be <quorem>
 8014c8a:	4639      	mov	r1, r7
 8014c8c:	9002      	str	r0, [sp, #8]
 8014c8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014c92:	4648      	mov	r0, r9
 8014c94:	f000 fba4 	bl	80153e0 <__mcmp>
 8014c98:	462a      	mov	r2, r5
 8014c9a:	9008      	str	r0, [sp, #32]
 8014c9c:	4621      	mov	r1, r4
 8014c9e:	4658      	mov	r0, fp
 8014ca0:	f000 fbba 	bl	8015418 <__mdiff>
 8014ca4:	68c2      	ldr	r2, [r0, #12]
 8014ca6:	4606      	mov	r6, r0
 8014ca8:	bb02      	cbnz	r2, 8014cec <_dtoa_r+0xa1c>
 8014caa:	4601      	mov	r1, r0
 8014cac:	4648      	mov	r0, r9
 8014cae:	f000 fb97 	bl	80153e0 <__mcmp>
 8014cb2:	4602      	mov	r2, r0
 8014cb4:	4631      	mov	r1, r6
 8014cb6:	4658      	mov	r0, fp
 8014cb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8014cba:	f000 f957 	bl	8014f6c <_Bfree>
 8014cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014cc2:	9e07      	ldr	r6, [sp, #28]
 8014cc4:	ea43 0102 	orr.w	r1, r3, r2
 8014cc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014cca:	4319      	orrs	r1, r3
 8014ccc:	d110      	bne.n	8014cf0 <_dtoa_r+0xa20>
 8014cce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014cd2:	d029      	beq.n	8014d28 <_dtoa_r+0xa58>
 8014cd4:	9b08      	ldr	r3, [sp, #32]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	dd02      	ble.n	8014ce0 <_dtoa_r+0xa10>
 8014cda:	9b02      	ldr	r3, [sp, #8]
 8014cdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014ce0:	9b00      	ldr	r3, [sp, #0]
 8014ce2:	f883 8000 	strb.w	r8, [r3]
 8014ce6:	e63f      	b.n	8014968 <_dtoa_r+0x698>
 8014ce8:	4628      	mov	r0, r5
 8014cea:	e7bb      	b.n	8014c64 <_dtoa_r+0x994>
 8014cec:	2201      	movs	r2, #1
 8014cee:	e7e1      	b.n	8014cb4 <_dtoa_r+0x9e4>
 8014cf0:	9b08      	ldr	r3, [sp, #32]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	db04      	blt.n	8014d00 <_dtoa_r+0xa30>
 8014cf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014cf8:	430b      	orrs	r3, r1
 8014cfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014cfc:	430b      	orrs	r3, r1
 8014cfe:	d120      	bne.n	8014d42 <_dtoa_r+0xa72>
 8014d00:	2a00      	cmp	r2, #0
 8014d02:	dded      	ble.n	8014ce0 <_dtoa_r+0xa10>
 8014d04:	4649      	mov	r1, r9
 8014d06:	2201      	movs	r2, #1
 8014d08:	4658      	mov	r0, fp
 8014d0a:	f000 fafd 	bl	8015308 <__lshift>
 8014d0e:	4621      	mov	r1, r4
 8014d10:	4681      	mov	r9, r0
 8014d12:	f000 fb65 	bl	80153e0 <__mcmp>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	dc03      	bgt.n	8014d22 <_dtoa_r+0xa52>
 8014d1a:	d1e1      	bne.n	8014ce0 <_dtoa_r+0xa10>
 8014d1c:	f018 0f01 	tst.w	r8, #1
 8014d20:	d0de      	beq.n	8014ce0 <_dtoa_r+0xa10>
 8014d22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014d26:	d1d8      	bne.n	8014cda <_dtoa_r+0xa0a>
 8014d28:	9a00      	ldr	r2, [sp, #0]
 8014d2a:	2339      	movs	r3, #57	@ 0x39
 8014d2c:	7013      	strb	r3, [r2, #0]
 8014d2e:	4633      	mov	r3, r6
 8014d30:	461e      	mov	r6, r3
 8014d32:	3b01      	subs	r3, #1
 8014d34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014d38:	2a39      	cmp	r2, #57	@ 0x39
 8014d3a:	d052      	beq.n	8014de2 <_dtoa_r+0xb12>
 8014d3c:	3201      	adds	r2, #1
 8014d3e:	701a      	strb	r2, [r3, #0]
 8014d40:	e612      	b.n	8014968 <_dtoa_r+0x698>
 8014d42:	2a00      	cmp	r2, #0
 8014d44:	dd07      	ble.n	8014d56 <_dtoa_r+0xa86>
 8014d46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014d4a:	d0ed      	beq.n	8014d28 <_dtoa_r+0xa58>
 8014d4c:	9a00      	ldr	r2, [sp, #0]
 8014d4e:	f108 0301 	add.w	r3, r8, #1
 8014d52:	7013      	strb	r3, [r2, #0]
 8014d54:	e608      	b.n	8014968 <_dtoa_r+0x698>
 8014d56:	9b07      	ldr	r3, [sp, #28]
 8014d58:	9a07      	ldr	r2, [sp, #28]
 8014d5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8014d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014d60:	4293      	cmp	r3, r2
 8014d62:	d028      	beq.n	8014db6 <_dtoa_r+0xae6>
 8014d64:	4649      	mov	r1, r9
 8014d66:	2300      	movs	r3, #0
 8014d68:	220a      	movs	r2, #10
 8014d6a:	4658      	mov	r0, fp
 8014d6c:	f000 f920 	bl	8014fb0 <__multadd>
 8014d70:	42af      	cmp	r7, r5
 8014d72:	4681      	mov	r9, r0
 8014d74:	f04f 0300 	mov.w	r3, #0
 8014d78:	f04f 020a 	mov.w	r2, #10
 8014d7c:	4639      	mov	r1, r7
 8014d7e:	4658      	mov	r0, fp
 8014d80:	d107      	bne.n	8014d92 <_dtoa_r+0xac2>
 8014d82:	f000 f915 	bl	8014fb0 <__multadd>
 8014d86:	4607      	mov	r7, r0
 8014d88:	4605      	mov	r5, r0
 8014d8a:	9b07      	ldr	r3, [sp, #28]
 8014d8c:	3301      	adds	r3, #1
 8014d8e:	9307      	str	r3, [sp, #28]
 8014d90:	e774      	b.n	8014c7c <_dtoa_r+0x9ac>
 8014d92:	f000 f90d 	bl	8014fb0 <__multadd>
 8014d96:	4629      	mov	r1, r5
 8014d98:	4607      	mov	r7, r0
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	220a      	movs	r2, #10
 8014d9e:	4658      	mov	r0, fp
 8014da0:	f000 f906 	bl	8014fb0 <__multadd>
 8014da4:	4605      	mov	r5, r0
 8014da6:	e7f0      	b.n	8014d8a <_dtoa_r+0xaba>
 8014da8:	9b00      	ldr	r3, [sp, #0]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	bfcc      	ite	gt
 8014dae:	461e      	movgt	r6, r3
 8014db0:	2601      	movle	r6, #1
 8014db2:	4456      	add	r6, sl
 8014db4:	2700      	movs	r7, #0
 8014db6:	4649      	mov	r1, r9
 8014db8:	2201      	movs	r2, #1
 8014dba:	4658      	mov	r0, fp
 8014dbc:	f000 faa4 	bl	8015308 <__lshift>
 8014dc0:	4621      	mov	r1, r4
 8014dc2:	4681      	mov	r9, r0
 8014dc4:	f000 fb0c 	bl	80153e0 <__mcmp>
 8014dc8:	2800      	cmp	r0, #0
 8014dca:	dcb0      	bgt.n	8014d2e <_dtoa_r+0xa5e>
 8014dcc:	d102      	bne.n	8014dd4 <_dtoa_r+0xb04>
 8014dce:	f018 0f01 	tst.w	r8, #1
 8014dd2:	d1ac      	bne.n	8014d2e <_dtoa_r+0xa5e>
 8014dd4:	4633      	mov	r3, r6
 8014dd6:	461e      	mov	r6, r3
 8014dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014ddc:	2a30      	cmp	r2, #48	@ 0x30
 8014dde:	d0fa      	beq.n	8014dd6 <_dtoa_r+0xb06>
 8014de0:	e5c2      	b.n	8014968 <_dtoa_r+0x698>
 8014de2:	459a      	cmp	sl, r3
 8014de4:	d1a4      	bne.n	8014d30 <_dtoa_r+0xa60>
 8014de6:	9b04      	ldr	r3, [sp, #16]
 8014de8:	3301      	adds	r3, #1
 8014dea:	9304      	str	r3, [sp, #16]
 8014dec:	2331      	movs	r3, #49	@ 0x31
 8014dee:	f88a 3000 	strb.w	r3, [sl]
 8014df2:	e5b9      	b.n	8014968 <_dtoa_r+0x698>
 8014df4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014df6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014e54 <_dtoa_r+0xb84>
 8014dfa:	b11b      	cbz	r3, 8014e04 <_dtoa_r+0xb34>
 8014dfc:	f10a 0308 	add.w	r3, sl, #8
 8014e00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014e02:	6013      	str	r3, [r2, #0]
 8014e04:	4650      	mov	r0, sl
 8014e06:	b019      	add	sp, #100	@ 0x64
 8014e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e0e:	2b01      	cmp	r3, #1
 8014e10:	f77f ae37 	ble.w	8014a82 <_dtoa_r+0x7b2>
 8014e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e18:	2001      	movs	r0, #1
 8014e1a:	e655      	b.n	8014ac8 <_dtoa_r+0x7f8>
 8014e1c:	9b00      	ldr	r3, [sp, #0]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	f77f aed6 	ble.w	8014bd0 <_dtoa_r+0x900>
 8014e24:	4656      	mov	r6, sl
 8014e26:	4621      	mov	r1, r4
 8014e28:	4648      	mov	r0, r9
 8014e2a:	f7ff f9c8 	bl	80141be <quorem>
 8014e2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014e32:	f806 8b01 	strb.w	r8, [r6], #1
 8014e36:	9b00      	ldr	r3, [sp, #0]
 8014e38:	eba6 020a 	sub.w	r2, r6, sl
 8014e3c:	4293      	cmp	r3, r2
 8014e3e:	ddb3      	ble.n	8014da8 <_dtoa_r+0xad8>
 8014e40:	4649      	mov	r1, r9
 8014e42:	2300      	movs	r3, #0
 8014e44:	220a      	movs	r2, #10
 8014e46:	4658      	mov	r0, fp
 8014e48:	f000 f8b2 	bl	8014fb0 <__multadd>
 8014e4c:	4681      	mov	r9, r0
 8014e4e:	e7ea      	b.n	8014e26 <_dtoa_r+0xb56>
 8014e50:	080d32a0 	.word	0x080d32a0
 8014e54:	080d3224 	.word	0x080d3224

08014e58 <_free_r>:
 8014e58:	b538      	push	{r3, r4, r5, lr}
 8014e5a:	4605      	mov	r5, r0
 8014e5c:	2900      	cmp	r1, #0
 8014e5e:	d041      	beq.n	8014ee4 <_free_r+0x8c>
 8014e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014e64:	1f0c      	subs	r4, r1, #4
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	bfb8      	it	lt
 8014e6a:	18e4      	addlt	r4, r4, r3
 8014e6c:	f7fe fa9c 	bl	80133a8 <__malloc_lock>
 8014e70:	4a1d      	ldr	r2, [pc, #116]	@ (8014ee8 <_free_r+0x90>)
 8014e72:	6813      	ldr	r3, [r2, #0]
 8014e74:	b933      	cbnz	r3, 8014e84 <_free_r+0x2c>
 8014e76:	6063      	str	r3, [r4, #4]
 8014e78:	6014      	str	r4, [r2, #0]
 8014e7a:	4628      	mov	r0, r5
 8014e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e80:	f7fe ba98 	b.w	80133b4 <__malloc_unlock>
 8014e84:	42a3      	cmp	r3, r4
 8014e86:	d908      	bls.n	8014e9a <_free_r+0x42>
 8014e88:	6820      	ldr	r0, [r4, #0]
 8014e8a:	1821      	adds	r1, r4, r0
 8014e8c:	428b      	cmp	r3, r1
 8014e8e:	bf01      	itttt	eq
 8014e90:	6819      	ldreq	r1, [r3, #0]
 8014e92:	685b      	ldreq	r3, [r3, #4]
 8014e94:	1809      	addeq	r1, r1, r0
 8014e96:	6021      	streq	r1, [r4, #0]
 8014e98:	e7ed      	b.n	8014e76 <_free_r+0x1e>
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	b10b      	cbz	r3, 8014ea4 <_free_r+0x4c>
 8014ea0:	42a3      	cmp	r3, r4
 8014ea2:	d9fa      	bls.n	8014e9a <_free_r+0x42>
 8014ea4:	6811      	ldr	r1, [r2, #0]
 8014ea6:	1850      	adds	r0, r2, r1
 8014ea8:	42a0      	cmp	r0, r4
 8014eaa:	d10b      	bne.n	8014ec4 <_free_r+0x6c>
 8014eac:	6820      	ldr	r0, [r4, #0]
 8014eae:	4401      	add	r1, r0
 8014eb0:	1850      	adds	r0, r2, r1
 8014eb2:	4283      	cmp	r3, r0
 8014eb4:	6011      	str	r1, [r2, #0]
 8014eb6:	d1e0      	bne.n	8014e7a <_free_r+0x22>
 8014eb8:	6818      	ldr	r0, [r3, #0]
 8014eba:	685b      	ldr	r3, [r3, #4]
 8014ebc:	6053      	str	r3, [r2, #4]
 8014ebe:	4408      	add	r0, r1
 8014ec0:	6010      	str	r0, [r2, #0]
 8014ec2:	e7da      	b.n	8014e7a <_free_r+0x22>
 8014ec4:	d902      	bls.n	8014ecc <_free_r+0x74>
 8014ec6:	230c      	movs	r3, #12
 8014ec8:	602b      	str	r3, [r5, #0]
 8014eca:	e7d6      	b.n	8014e7a <_free_r+0x22>
 8014ecc:	6820      	ldr	r0, [r4, #0]
 8014ece:	1821      	adds	r1, r4, r0
 8014ed0:	428b      	cmp	r3, r1
 8014ed2:	bf04      	itt	eq
 8014ed4:	6819      	ldreq	r1, [r3, #0]
 8014ed6:	685b      	ldreq	r3, [r3, #4]
 8014ed8:	6063      	str	r3, [r4, #4]
 8014eda:	bf04      	itt	eq
 8014edc:	1809      	addeq	r1, r1, r0
 8014ede:	6021      	streq	r1, [r4, #0]
 8014ee0:	6054      	str	r4, [r2, #4]
 8014ee2:	e7ca      	b.n	8014e7a <_free_r+0x22>
 8014ee4:	bd38      	pop	{r3, r4, r5, pc}
 8014ee6:	bf00      	nop
 8014ee8:	20005e94 	.word	0x20005e94

08014eec <_Balloc>:
 8014eec:	b570      	push	{r4, r5, r6, lr}
 8014eee:	69c6      	ldr	r6, [r0, #28]
 8014ef0:	4604      	mov	r4, r0
 8014ef2:	460d      	mov	r5, r1
 8014ef4:	b976      	cbnz	r6, 8014f14 <_Balloc+0x28>
 8014ef6:	2010      	movs	r0, #16
 8014ef8:	f7fe f9ac 	bl	8013254 <malloc>
 8014efc:	4602      	mov	r2, r0
 8014efe:	61e0      	str	r0, [r4, #28]
 8014f00:	b920      	cbnz	r0, 8014f0c <_Balloc+0x20>
 8014f02:	4b18      	ldr	r3, [pc, #96]	@ (8014f64 <_Balloc+0x78>)
 8014f04:	4818      	ldr	r0, [pc, #96]	@ (8014f68 <_Balloc+0x7c>)
 8014f06:	216b      	movs	r1, #107	@ 0x6b
 8014f08:	f000 fde4 	bl	8015ad4 <__assert_func>
 8014f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f10:	6006      	str	r6, [r0, #0]
 8014f12:	60c6      	str	r6, [r0, #12]
 8014f14:	69e6      	ldr	r6, [r4, #28]
 8014f16:	68f3      	ldr	r3, [r6, #12]
 8014f18:	b183      	cbz	r3, 8014f3c <_Balloc+0x50>
 8014f1a:	69e3      	ldr	r3, [r4, #28]
 8014f1c:	68db      	ldr	r3, [r3, #12]
 8014f1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014f22:	b9b8      	cbnz	r0, 8014f54 <_Balloc+0x68>
 8014f24:	2101      	movs	r1, #1
 8014f26:	fa01 f605 	lsl.w	r6, r1, r5
 8014f2a:	1d72      	adds	r2, r6, #5
 8014f2c:	0092      	lsls	r2, r2, #2
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f000 fdee 	bl	8015b10 <_calloc_r>
 8014f34:	b160      	cbz	r0, 8014f50 <_Balloc+0x64>
 8014f36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014f3a:	e00e      	b.n	8014f5a <_Balloc+0x6e>
 8014f3c:	2221      	movs	r2, #33	@ 0x21
 8014f3e:	2104      	movs	r1, #4
 8014f40:	4620      	mov	r0, r4
 8014f42:	f000 fde5 	bl	8015b10 <_calloc_r>
 8014f46:	69e3      	ldr	r3, [r4, #28]
 8014f48:	60f0      	str	r0, [r6, #12]
 8014f4a:	68db      	ldr	r3, [r3, #12]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d1e4      	bne.n	8014f1a <_Balloc+0x2e>
 8014f50:	2000      	movs	r0, #0
 8014f52:	bd70      	pop	{r4, r5, r6, pc}
 8014f54:	6802      	ldr	r2, [r0, #0]
 8014f56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f60:	e7f7      	b.n	8014f52 <_Balloc+0x66>
 8014f62:	bf00      	nop
 8014f64:	080d3231 	.word	0x080d3231
 8014f68:	080d32b1 	.word	0x080d32b1

08014f6c <_Bfree>:
 8014f6c:	b570      	push	{r4, r5, r6, lr}
 8014f6e:	69c6      	ldr	r6, [r0, #28]
 8014f70:	4605      	mov	r5, r0
 8014f72:	460c      	mov	r4, r1
 8014f74:	b976      	cbnz	r6, 8014f94 <_Bfree+0x28>
 8014f76:	2010      	movs	r0, #16
 8014f78:	f7fe f96c 	bl	8013254 <malloc>
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	61e8      	str	r0, [r5, #28]
 8014f80:	b920      	cbnz	r0, 8014f8c <_Bfree+0x20>
 8014f82:	4b09      	ldr	r3, [pc, #36]	@ (8014fa8 <_Bfree+0x3c>)
 8014f84:	4809      	ldr	r0, [pc, #36]	@ (8014fac <_Bfree+0x40>)
 8014f86:	218f      	movs	r1, #143	@ 0x8f
 8014f88:	f000 fda4 	bl	8015ad4 <__assert_func>
 8014f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f90:	6006      	str	r6, [r0, #0]
 8014f92:	60c6      	str	r6, [r0, #12]
 8014f94:	b13c      	cbz	r4, 8014fa6 <_Bfree+0x3a>
 8014f96:	69eb      	ldr	r3, [r5, #28]
 8014f98:	6862      	ldr	r2, [r4, #4]
 8014f9a:	68db      	ldr	r3, [r3, #12]
 8014f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014fa0:	6021      	str	r1, [r4, #0]
 8014fa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014fa6:	bd70      	pop	{r4, r5, r6, pc}
 8014fa8:	080d3231 	.word	0x080d3231
 8014fac:	080d32b1 	.word	0x080d32b1

08014fb0 <__multadd>:
 8014fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb4:	690d      	ldr	r5, [r1, #16]
 8014fb6:	4607      	mov	r7, r0
 8014fb8:	460c      	mov	r4, r1
 8014fba:	461e      	mov	r6, r3
 8014fbc:	f101 0c14 	add.w	ip, r1, #20
 8014fc0:	2000      	movs	r0, #0
 8014fc2:	f8dc 3000 	ldr.w	r3, [ip]
 8014fc6:	b299      	uxth	r1, r3
 8014fc8:	fb02 6101 	mla	r1, r2, r1, r6
 8014fcc:	0c1e      	lsrs	r6, r3, #16
 8014fce:	0c0b      	lsrs	r3, r1, #16
 8014fd0:	fb02 3306 	mla	r3, r2, r6, r3
 8014fd4:	b289      	uxth	r1, r1
 8014fd6:	3001      	adds	r0, #1
 8014fd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014fdc:	4285      	cmp	r5, r0
 8014fde:	f84c 1b04 	str.w	r1, [ip], #4
 8014fe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014fe6:	dcec      	bgt.n	8014fc2 <__multadd+0x12>
 8014fe8:	b30e      	cbz	r6, 801502e <__multadd+0x7e>
 8014fea:	68a3      	ldr	r3, [r4, #8]
 8014fec:	42ab      	cmp	r3, r5
 8014fee:	dc19      	bgt.n	8015024 <__multadd+0x74>
 8014ff0:	6861      	ldr	r1, [r4, #4]
 8014ff2:	4638      	mov	r0, r7
 8014ff4:	3101      	adds	r1, #1
 8014ff6:	f7ff ff79 	bl	8014eec <_Balloc>
 8014ffa:	4680      	mov	r8, r0
 8014ffc:	b928      	cbnz	r0, 801500a <__multadd+0x5a>
 8014ffe:	4602      	mov	r2, r0
 8015000:	4b0c      	ldr	r3, [pc, #48]	@ (8015034 <__multadd+0x84>)
 8015002:	480d      	ldr	r0, [pc, #52]	@ (8015038 <__multadd+0x88>)
 8015004:	21ba      	movs	r1, #186	@ 0xba
 8015006:	f000 fd65 	bl	8015ad4 <__assert_func>
 801500a:	6922      	ldr	r2, [r4, #16]
 801500c:	3202      	adds	r2, #2
 801500e:	f104 010c 	add.w	r1, r4, #12
 8015012:	0092      	lsls	r2, r2, #2
 8015014:	300c      	adds	r0, #12
 8015016:	f7ff f8c4 	bl	80141a2 <memcpy>
 801501a:	4621      	mov	r1, r4
 801501c:	4638      	mov	r0, r7
 801501e:	f7ff ffa5 	bl	8014f6c <_Bfree>
 8015022:	4644      	mov	r4, r8
 8015024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015028:	3501      	adds	r5, #1
 801502a:	615e      	str	r6, [r3, #20]
 801502c:	6125      	str	r5, [r4, #16]
 801502e:	4620      	mov	r0, r4
 8015030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015034:	080d32a0 	.word	0x080d32a0
 8015038:	080d32b1 	.word	0x080d32b1

0801503c <__hi0bits>:
 801503c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015040:	4603      	mov	r3, r0
 8015042:	bf36      	itet	cc
 8015044:	0403      	lslcc	r3, r0, #16
 8015046:	2000      	movcs	r0, #0
 8015048:	2010      	movcc	r0, #16
 801504a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801504e:	bf3c      	itt	cc
 8015050:	021b      	lslcc	r3, r3, #8
 8015052:	3008      	addcc	r0, #8
 8015054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015058:	bf3c      	itt	cc
 801505a:	011b      	lslcc	r3, r3, #4
 801505c:	3004      	addcc	r0, #4
 801505e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015062:	bf3c      	itt	cc
 8015064:	009b      	lslcc	r3, r3, #2
 8015066:	3002      	addcc	r0, #2
 8015068:	2b00      	cmp	r3, #0
 801506a:	db05      	blt.n	8015078 <__hi0bits+0x3c>
 801506c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015070:	f100 0001 	add.w	r0, r0, #1
 8015074:	bf08      	it	eq
 8015076:	2020      	moveq	r0, #32
 8015078:	4770      	bx	lr

0801507a <__lo0bits>:
 801507a:	6803      	ldr	r3, [r0, #0]
 801507c:	4602      	mov	r2, r0
 801507e:	f013 0007 	ands.w	r0, r3, #7
 8015082:	d00b      	beq.n	801509c <__lo0bits+0x22>
 8015084:	07d9      	lsls	r1, r3, #31
 8015086:	d421      	bmi.n	80150cc <__lo0bits+0x52>
 8015088:	0798      	lsls	r0, r3, #30
 801508a:	bf49      	itett	mi
 801508c:	085b      	lsrmi	r3, r3, #1
 801508e:	089b      	lsrpl	r3, r3, #2
 8015090:	2001      	movmi	r0, #1
 8015092:	6013      	strmi	r3, [r2, #0]
 8015094:	bf5c      	itt	pl
 8015096:	6013      	strpl	r3, [r2, #0]
 8015098:	2002      	movpl	r0, #2
 801509a:	4770      	bx	lr
 801509c:	b299      	uxth	r1, r3
 801509e:	b909      	cbnz	r1, 80150a4 <__lo0bits+0x2a>
 80150a0:	0c1b      	lsrs	r3, r3, #16
 80150a2:	2010      	movs	r0, #16
 80150a4:	b2d9      	uxtb	r1, r3
 80150a6:	b909      	cbnz	r1, 80150ac <__lo0bits+0x32>
 80150a8:	3008      	adds	r0, #8
 80150aa:	0a1b      	lsrs	r3, r3, #8
 80150ac:	0719      	lsls	r1, r3, #28
 80150ae:	bf04      	itt	eq
 80150b0:	091b      	lsreq	r3, r3, #4
 80150b2:	3004      	addeq	r0, #4
 80150b4:	0799      	lsls	r1, r3, #30
 80150b6:	bf04      	itt	eq
 80150b8:	089b      	lsreq	r3, r3, #2
 80150ba:	3002      	addeq	r0, #2
 80150bc:	07d9      	lsls	r1, r3, #31
 80150be:	d403      	bmi.n	80150c8 <__lo0bits+0x4e>
 80150c0:	085b      	lsrs	r3, r3, #1
 80150c2:	f100 0001 	add.w	r0, r0, #1
 80150c6:	d003      	beq.n	80150d0 <__lo0bits+0x56>
 80150c8:	6013      	str	r3, [r2, #0]
 80150ca:	4770      	bx	lr
 80150cc:	2000      	movs	r0, #0
 80150ce:	4770      	bx	lr
 80150d0:	2020      	movs	r0, #32
 80150d2:	4770      	bx	lr

080150d4 <__i2b>:
 80150d4:	b510      	push	{r4, lr}
 80150d6:	460c      	mov	r4, r1
 80150d8:	2101      	movs	r1, #1
 80150da:	f7ff ff07 	bl	8014eec <_Balloc>
 80150de:	4602      	mov	r2, r0
 80150e0:	b928      	cbnz	r0, 80150ee <__i2b+0x1a>
 80150e2:	4b05      	ldr	r3, [pc, #20]	@ (80150f8 <__i2b+0x24>)
 80150e4:	4805      	ldr	r0, [pc, #20]	@ (80150fc <__i2b+0x28>)
 80150e6:	f240 1145 	movw	r1, #325	@ 0x145
 80150ea:	f000 fcf3 	bl	8015ad4 <__assert_func>
 80150ee:	2301      	movs	r3, #1
 80150f0:	6144      	str	r4, [r0, #20]
 80150f2:	6103      	str	r3, [r0, #16]
 80150f4:	bd10      	pop	{r4, pc}
 80150f6:	bf00      	nop
 80150f8:	080d32a0 	.word	0x080d32a0
 80150fc:	080d32b1 	.word	0x080d32b1

08015100 <__multiply>:
 8015100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015104:	4614      	mov	r4, r2
 8015106:	690a      	ldr	r2, [r1, #16]
 8015108:	6923      	ldr	r3, [r4, #16]
 801510a:	429a      	cmp	r2, r3
 801510c:	bfa8      	it	ge
 801510e:	4623      	movge	r3, r4
 8015110:	460f      	mov	r7, r1
 8015112:	bfa4      	itt	ge
 8015114:	460c      	movge	r4, r1
 8015116:	461f      	movge	r7, r3
 8015118:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801511c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015120:	68a3      	ldr	r3, [r4, #8]
 8015122:	6861      	ldr	r1, [r4, #4]
 8015124:	eb0a 0609 	add.w	r6, sl, r9
 8015128:	42b3      	cmp	r3, r6
 801512a:	b085      	sub	sp, #20
 801512c:	bfb8      	it	lt
 801512e:	3101      	addlt	r1, #1
 8015130:	f7ff fedc 	bl	8014eec <_Balloc>
 8015134:	b930      	cbnz	r0, 8015144 <__multiply+0x44>
 8015136:	4602      	mov	r2, r0
 8015138:	4b44      	ldr	r3, [pc, #272]	@ (801524c <__multiply+0x14c>)
 801513a:	4845      	ldr	r0, [pc, #276]	@ (8015250 <__multiply+0x150>)
 801513c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015140:	f000 fcc8 	bl	8015ad4 <__assert_func>
 8015144:	f100 0514 	add.w	r5, r0, #20
 8015148:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801514c:	462b      	mov	r3, r5
 801514e:	2200      	movs	r2, #0
 8015150:	4543      	cmp	r3, r8
 8015152:	d321      	bcc.n	8015198 <__multiply+0x98>
 8015154:	f107 0114 	add.w	r1, r7, #20
 8015158:	f104 0214 	add.w	r2, r4, #20
 801515c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015160:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015164:	9302      	str	r3, [sp, #8]
 8015166:	1b13      	subs	r3, r2, r4
 8015168:	3b15      	subs	r3, #21
 801516a:	f023 0303 	bic.w	r3, r3, #3
 801516e:	3304      	adds	r3, #4
 8015170:	f104 0715 	add.w	r7, r4, #21
 8015174:	42ba      	cmp	r2, r7
 8015176:	bf38      	it	cc
 8015178:	2304      	movcc	r3, #4
 801517a:	9301      	str	r3, [sp, #4]
 801517c:	9b02      	ldr	r3, [sp, #8]
 801517e:	9103      	str	r1, [sp, #12]
 8015180:	428b      	cmp	r3, r1
 8015182:	d80c      	bhi.n	801519e <__multiply+0x9e>
 8015184:	2e00      	cmp	r6, #0
 8015186:	dd03      	ble.n	8015190 <__multiply+0x90>
 8015188:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801518c:	2b00      	cmp	r3, #0
 801518e:	d05b      	beq.n	8015248 <__multiply+0x148>
 8015190:	6106      	str	r6, [r0, #16]
 8015192:	b005      	add	sp, #20
 8015194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015198:	f843 2b04 	str.w	r2, [r3], #4
 801519c:	e7d8      	b.n	8015150 <__multiply+0x50>
 801519e:	f8b1 a000 	ldrh.w	sl, [r1]
 80151a2:	f1ba 0f00 	cmp.w	sl, #0
 80151a6:	d024      	beq.n	80151f2 <__multiply+0xf2>
 80151a8:	f104 0e14 	add.w	lr, r4, #20
 80151ac:	46a9      	mov	r9, r5
 80151ae:	f04f 0c00 	mov.w	ip, #0
 80151b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80151b6:	f8d9 3000 	ldr.w	r3, [r9]
 80151ba:	fa1f fb87 	uxth.w	fp, r7
 80151be:	b29b      	uxth	r3, r3
 80151c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80151c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80151c8:	f8d9 7000 	ldr.w	r7, [r9]
 80151cc:	4463      	add	r3, ip
 80151ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80151d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80151d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80151da:	b29b      	uxth	r3, r3
 80151dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80151e0:	4572      	cmp	r2, lr
 80151e2:	f849 3b04 	str.w	r3, [r9], #4
 80151e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80151ea:	d8e2      	bhi.n	80151b2 <__multiply+0xb2>
 80151ec:	9b01      	ldr	r3, [sp, #4]
 80151ee:	f845 c003 	str.w	ip, [r5, r3]
 80151f2:	9b03      	ldr	r3, [sp, #12]
 80151f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80151f8:	3104      	adds	r1, #4
 80151fa:	f1b9 0f00 	cmp.w	r9, #0
 80151fe:	d021      	beq.n	8015244 <__multiply+0x144>
 8015200:	682b      	ldr	r3, [r5, #0]
 8015202:	f104 0c14 	add.w	ip, r4, #20
 8015206:	46ae      	mov	lr, r5
 8015208:	f04f 0a00 	mov.w	sl, #0
 801520c:	f8bc b000 	ldrh.w	fp, [ip]
 8015210:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015214:	fb09 770b 	mla	r7, r9, fp, r7
 8015218:	4457      	add	r7, sl
 801521a:	b29b      	uxth	r3, r3
 801521c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015220:	f84e 3b04 	str.w	r3, [lr], #4
 8015224:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015228:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801522c:	f8be 3000 	ldrh.w	r3, [lr]
 8015230:	fb09 330a 	mla	r3, r9, sl, r3
 8015234:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015238:	4562      	cmp	r2, ip
 801523a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801523e:	d8e5      	bhi.n	801520c <__multiply+0x10c>
 8015240:	9f01      	ldr	r7, [sp, #4]
 8015242:	51eb      	str	r3, [r5, r7]
 8015244:	3504      	adds	r5, #4
 8015246:	e799      	b.n	801517c <__multiply+0x7c>
 8015248:	3e01      	subs	r6, #1
 801524a:	e79b      	b.n	8015184 <__multiply+0x84>
 801524c:	080d32a0 	.word	0x080d32a0
 8015250:	080d32b1 	.word	0x080d32b1

08015254 <__pow5mult>:
 8015254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015258:	4615      	mov	r5, r2
 801525a:	f012 0203 	ands.w	r2, r2, #3
 801525e:	4607      	mov	r7, r0
 8015260:	460e      	mov	r6, r1
 8015262:	d007      	beq.n	8015274 <__pow5mult+0x20>
 8015264:	4c25      	ldr	r4, [pc, #148]	@ (80152fc <__pow5mult+0xa8>)
 8015266:	3a01      	subs	r2, #1
 8015268:	2300      	movs	r3, #0
 801526a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801526e:	f7ff fe9f 	bl	8014fb0 <__multadd>
 8015272:	4606      	mov	r6, r0
 8015274:	10ad      	asrs	r5, r5, #2
 8015276:	d03d      	beq.n	80152f4 <__pow5mult+0xa0>
 8015278:	69fc      	ldr	r4, [r7, #28]
 801527a:	b97c      	cbnz	r4, 801529c <__pow5mult+0x48>
 801527c:	2010      	movs	r0, #16
 801527e:	f7fd ffe9 	bl	8013254 <malloc>
 8015282:	4602      	mov	r2, r0
 8015284:	61f8      	str	r0, [r7, #28]
 8015286:	b928      	cbnz	r0, 8015294 <__pow5mult+0x40>
 8015288:	4b1d      	ldr	r3, [pc, #116]	@ (8015300 <__pow5mult+0xac>)
 801528a:	481e      	ldr	r0, [pc, #120]	@ (8015304 <__pow5mult+0xb0>)
 801528c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015290:	f000 fc20 	bl	8015ad4 <__assert_func>
 8015294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015298:	6004      	str	r4, [r0, #0]
 801529a:	60c4      	str	r4, [r0, #12]
 801529c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80152a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80152a4:	b94c      	cbnz	r4, 80152ba <__pow5mult+0x66>
 80152a6:	f240 2171 	movw	r1, #625	@ 0x271
 80152aa:	4638      	mov	r0, r7
 80152ac:	f7ff ff12 	bl	80150d4 <__i2b>
 80152b0:	2300      	movs	r3, #0
 80152b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80152b6:	4604      	mov	r4, r0
 80152b8:	6003      	str	r3, [r0, #0]
 80152ba:	f04f 0900 	mov.w	r9, #0
 80152be:	07eb      	lsls	r3, r5, #31
 80152c0:	d50a      	bpl.n	80152d8 <__pow5mult+0x84>
 80152c2:	4631      	mov	r1, r6
 80152c4:	4622      	mov	r2, r4
 80152c6:	4638      	mov	r0, r7
 80152c8:	f7ff ff1a 	bl	8015100 <__multiply>
 80152cc:	4631      	mov	r1, r6
 80152ce:	4680      	mov	r8, r0
 80152d0:	4638      	mov	r0, r7
 80152d2:	f7ff fe4b 	bl	8014f6c <_Bfree>
 80152d6:	4646      	mov	r6, r8
 80152d8:	106d      	asrs	r5, r5, #1
 80152da:	d00b      	beq.n	80152f4 <__pow5mult+0xa0>
 80152dc:	6820      	ldr	r0, [r4, #0]
 80152de:	b938      	cbnz	r0, 80152f0 <__pow5mult+0x9c>
 80152e0:	4622      	mov	r2, r4
 80152e2:	4621      	mov	r1, r4
 80152e4:	4638      	mov	r0, r7
 80152e6:	f7ff ff0b 	bl	8015100 <__multiply>
 80152ea:	6020      	str	r0, [r4, #0]
 80152ec:	f8c0 9000 	str.w	r9, [r0]
 80152f0:	4604      	mov	r4, r0
 80152f2:	e7e4      	b.n	80152be <__pow5mult+0x6a>
 80152f4:	4630      	mov	r0, r6
 80152f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152fa:	bf00      	nop
 80152fc:	080d330c 	.word	0x080d330c
 8015300:	080d3231 	.word	0x080d3231
 8015304:	080d32b1 	.word	0x080d32b1

08015308 <__lshift>:
 8015308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801530c:	460c      	mov	r4, r1
 801530e:	6849      	ldr	r1, [r1, #4]
 8015310:	6923      	ldr	r3, [r4, #16]
 8015312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015316:	68a3      	ldr	r3, [r4, #8]
 8015318:	4607      	mov	r7, r0
 801531a:	4691      	mov	r9, r2
 801531c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015320:	f108 0601 	add.w	r6, r8, #1
 8015324:	42b3      	cmp	r3, r6
 8015326:	db0b      	blt.n	8015340 <__lshift+0x38>
 8015328:	4638      	mov	r0, r7
 801532a:	f7ff fddf 	bl	8014eec <_Balloc>
 801532e:	4605      	mov	r5, r0
 8015330:	b948      	cbnz	r0, 8015346 <__lshift+0x3e>
 8015332:	4602      	mov	r2, r0
 8015334:	4b28      	ldr	r3, [pc, #160]	@ (80153d8 <__lshift+0xd0>)
 8015336:	4829      	ldr	r0, [pc, #164]	@ (80153dc <__lshift+0xd4>)
 8015338:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801533c:	f000 fbca 	bl	8015ad4 <__assert_func>
 8015340:	3101      	adds	r1, #1
 8015342:	005b      	lsls	r3, r3, #1
 8015344:	e7ee      	b.n	8015324 <__lshift+0x1c>
 8015346:	2300      	movs	r3, #0
 8015348:	f100 0114 	add.w	r1, r0, #20
 801534c:	f100 0210 	add.w	r2, r0, #16
 8015350:	4618      	mov	r0, r3
 8015352:	4553      	cmp	r3, sl
 8015354:	db33      	blt.n	80153be <__lshift+0xb6>
 8015356:	6920      	ldr	r0, [r4, #16]
 8015358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801535c:	f104 0314 	add.w	r3, r4, #20
 8015360:	f019 091f 	ands.w	r9, r9, #31
 8015364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801536c:	d02b      	beq.n	80153c6 <__lshift+0xbe>
 801536e:	f1c9 0e20 	rsb	lr, r9, #32
 8015372:	468a      	mov	sl, r1
 8015374:	2200      	movs	r2, #0
 8015376:	6818      	ldr	r0, [r3, #0]
 8015378:	fa00 f009 	lsl.w	r0, r0, r9
 801537c:	4310      	orrs	r0, r2
 801537e:	f84a 0b04 	str.w	r0, [sl], #4
 8015382:	f853 2b04 	ldr.w	r2, [r3], #4
 8015386:	459c      	cmp	ip, r3
 8015388:	fa22 f20e 	lsr.w	r2, r2, lr
 801538c:	d8f3      	bhi.n	8015376 <__lshift+0x6e>
 801538e:	ebac 0304 	sub.w	r3, ip, r4
 8015392:	3b15      	subs	r3, #21
 8015394:	f023 0303 	bic.w	r3, r3, #3
 8015398:	3304      	adds	r3, #4
 801539a:	f104 0015 	add.w	r0, r4, #21
 801539e:	4584      	cmp	ip, r0
 80153a0:	bf38      	it	cc
 80153a2:	2304      	movcc	r3, #4
 80153a4:	50ca      	str	r2, [r1, r3]
 80153a6:	b10a      	cbz	r2, 80153ac <__lshift+0xa4>
 80153a8:	f108 0602 	add.w	r6, r8, #2
 80153ac:	3e01      	subs	r6, #1
 80153ae:	4638      	mov	r0, r7
 80153b0:	612e      	str	r6, [r5, #16]
 80153b2:	4621      	mov	r1, r4
 80153b4:	f7ff fdda 	bl	8014f6c <_Bfree>
 80153b8:	4628      	mov	r0, r5
 80153ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153be:	f842 0f04 	str.w	r0, [r2, #4]!
 80153c2:	3301      	adds	r3, #1
 80153c4:	e7c5      	b.n	8015352 <__lshift+0x4a>
 80153c6:	3904      	subs	r1, #4
 80153c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80153cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80153d0:	459c      	cmp	ip, r3
 80153d2:	d8f9      	bhi.n	80153c8 <__lshift+0xc0>
 80153d4:	e7ea      	b.n	80153ac <__lshift+0xa4>
 80153d6:	bf00      	nop
 80153d8:	080d32a0 	.word	0x080d32a0
 80153dc:	080d32b1 	.word	0x080d32b1

080153e0 <__mcmp>:
 80153e0:	690a      	ldr	r2, [r1, #16]
 80153e2:	4603      	mov	r3, r0
 80153e4:	6900      	ldr	r0, [r0, #16]
 80153e6:	1a80      	subs	r0, r0, r2
 80153e8:	b530      	push	{r4, r5, lr}
 80153ea:	d10e      	bne.n	801540a <__mcmp+0x2a>
 80153ec:	3314      	adds	r3, #20
 80153ee:	3114      	adds	r1, #20
 80153f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80153f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80153f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80153fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015400:	4295      	cmp	r5, r2
 8015402:	d003      	beq.n	801540c <__mcmp+0x2c>
 8015404:	d205      	bcs.n	8015412 <__mcmp+0x32>
 8015406:	f04f 30ff 	mov.w	r0, #4294967295
 801540a:	bd30      	pop	{r4, r5, pc}
 801540c:	42a3      	cmp	r3, r4
 801540e:	d3f3      	bcc.n	80153f8 <__mcmp+0x18>
 8015410:	e7fb      	b.n	801540a <__mcmp+0x2a>
 8015412:	2001      	movs	r0, #1
 8015414:	e7f9      	b.n	801540a <__mcmp+0x2a>
	...

08015418 <__mdiff>:
 8015418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801541c:	4689      	mov	r9, r1
 801541e:	4606      	mov	r6, r0
 8015420:	4611      	mov	r1, r2
 8015422:	4648      	mov	r0, r9
 8015424:	4614      	mov	r4, r2
 8015426:	f7ff ffdb 	bl	80153e0 <__mcmp>
 801542a:	1e05      	subs	r5, r0, #0
 801542c:	d112      	bne.n	8015454 <__mdiff+0x3c>
 801542e:	4629      	mov	r1, r5
 8015430:	4630      	mov	r0, r6
 8015432:	f7ff fd5b 	bl	8014eec <_Balloc>
 8015436:	4602      	mov	r2, r0
 8015438:	b928      	cbnz	r0, 8015446 <__mdiff+0x2e>
 801543a:	4b3f      	ldr	r3, [pc, #252]	@ (8015538 <__mdiff+0x120>)
 801543c:	f240 2137 	movw	r1, #567	@ 0x237
 8015440:	483e      	ldr	r0, [pc, #248]	@ (801553c <__mdiff+0x124>)
 8015442:	f000 fb47 	bl	8015ad4 <__assert_func>
 8015446:	2301      	movs	r3, #1
 8015448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801544c:	4610      	mov	r0, r2
 801544e:	b003      	add	sp, #12
 8015450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015454:	bfbc      	itt	lt
 8015456:	464b      	movlt	r3, r9
 8015458:	46a1      	movlt	r9, r4
 801545a:	4630      	mov	r0, r6
 801545c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015460:	bfba      	itte	lt
 8015462:	461c      	movlt	r4, r3
 8015464:	2501      	movlt	r5, #1
 8015466:	2500      	movge	r5, #0
 8015468:	f7ff fd40 	bl	8014eec <_Balloc>
 801546c:	4602      	mov	r2, r0
 801546e:	b918      	cbnz	r0, 8015478 <__mdiff+0x60>
 8015470:	4b31      	ldr	r3, [pc, #196]	@ (8015538 <__mdiff+0x120>)
 8015472:	f240 2145 	movw	r1, #581	@ 0x245
 8015476:	e7e3      	b.n	8015440 <__mdiff+0x28>
 8015478:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801547c:	6926      	ldr	r6, [r4, #16]
 801547e:	60c5      	str	r5, [r0, #12]
 8015480:	f109 0310 	add.w	r3, r9, #16
 8015484:	f109 0514 	add.w	r5, r9, #20
 8015488:	f104 0e14 	add.w	lr, r4, #20
 801548c:	f100 0b14 	add.w	fp, r0, #20
 8015490:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015494:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015498:	9301      	str	r3, [sp, #4]
 801549a:	46d9      	mov	r9, fp
 801549c:	f04f 0c00 	mov.w	ip, #0
 80154a0:	9b01      	ldr	r3, [sp, #4]
 80154a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80154a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80154aa:	9301      	str	r3, [sp, #4]
 80154ac:	fa1f f38a 	uxth.w	r3, sl
 80154b0:	4619      	mov	r1, r3
 80154b2:	b283      	uxth	r3, r0
 80154b4:	1acb      	subs	r3, r1, r3
 80154b6:	0c00      	lsrs	r0, r0, #16
 80154b8:	4463      	add	r3, ip
 80154ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80154be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80154c2:	b29b      	uxth	r3, r3
 80154c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80154c8:	4576      	cmp	r6, lr
 80154ca:	f849 3b04 	str.w	r3, [r9], #4
 80154ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80154d2:	d8e5      	bhi.n	80154a0 <__mdiff+0x88>
 80154d4:	1b33      	subs	r3, r6, r4
 80154d6:	3b15      	subs	r3, #21
 80154d8:	f023 0303 	bic.w	r3, r3, #3
 80154dc:	3415      	adds	r4, #21
 80154de:	3304      	adds	r3, #4
 80154e0:	42a6      	cmp	r6, r4
 80154e2:	bf38      	it	cc
 80154e4:	2304      	movcc	r3, #4
 80154e6:	441d      	add	r5, r3
 80154e8:	445b      	add	r3, fp
 80154ea:	461e      	mov	r6, r3
 80154ec:	462c      	mov	r4, r5
 80154ee:	4544      	cmp	r4, r8
 80154f0:	d30e      	bcc.n	8015510 <__mdiff+0xf8>
 80154f2:	f108 0103 	add.w	r1, r8, #3
 80154f6:	1b49      	subs	r1, r1, r5
 80154f8:	f021 0103 	bic.w	r1, r1, #3
 80154fc:	3d03      	subs	r5, #3
 80154fe:	45a8      	cmp	r8, r5
 8015500:	bf38      	it	cc
 8015502:	2100      	movcc	r1, #0
 8015504:	440b      	add	r3, r1
 8015506:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801550a:	b191      	cbz	r1, 8015532 <__mdiff+0x11a>
 801550c:	6117      	str	r7, [r2, #16]
 801550e:	e79d      	b.n	801544c <__mdiff+0x34>
 8015510:	f854 1b04 	ldr.w	r1, [r4], #4
 8015514:	46e6      	mov	lr, ip
 8015516:	0c08      	lsrs	r0, r1, #16
 8015518:	fa1c fc81 	uxtah	ip, ip, r1
 801551c:	4471      	add	r1, lr
 801551e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015522:	b289      	uxth	r1, r1
 8015524:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015528:	f846 1b04 	str.w	r1, [r6], #4
 801552c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015530:	e7dd      	b.n	80154ee <__mdiff+0xd6>
 8015532:	3f01      	subs	r7, #1
 8015534:	e7e7      	b.n	8015506 <__mdiff+0xee>
 8015536:	bf00      	nop
 8015538:	080d32a0 	.word	0x080d32a0
 801553c:	080d32b1 	.word	0x080d32b1

08015540 <__d2b>:
 8015540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015544:	460f      	mov	r7, r1
 8015546:	2101      	movs	r1, #1
 8015548:	ec59 8b10 	vmov	r8, r9, d0
 801554c:	4616      	mov	r6, r2
 801554e:	f7ff fccd 	bl	8014eec <_Balloc>
 8015552:	4604      	mov	r4, r0
 8015554:	b930      	cbnz	r0, 8015564 <__d2b+0x24>
 8015556:	4602      	mov	r2, r0
 8015558:	4b23      	ldr	r3, [pc, #140]	@ (80155e8 <__d2b+0xa8>)
 801555a:	4824      	ldr	r0, [pc, #144]	@ (80155ec <__d2b+0xac>)
 801555c:	f240 310f 	movw	r1, #783	@ 0x30f
 8015560:	f000 fab8 	bl	8015ad4 <__assert_func>
 8015564:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801556c:	b10d      	cbz	r5, 8015572 <__d2b+0x32>
 801556e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015572:	9301      	str	r3, [sp, #4]
 8015574:	f1b8 0300 	subs.w	r3, r8, #0
 8015578:	d023      	beq.n	80155c2 <__d2b+0x82>
 801557a:	4668      	mov	r0, sp
 801557c:	9300      	str	r3, [sp, #0]
 801557e:	f7ff fd7c 	bl	801507a <__lo0bits>
 8015582:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015586:	b1d0      	cbz	r0, 80155be <__d2b+0x7e>
 8015588:	f1c0 0320 	rsb	r3, r0, #32
 801558c:	fa02 f303 	lsl.w	r3, r2, r3
 8015590:	430b      	orrs	r3, r1
 8015592:	40c2      	lsrs	r2, r0
 8015594:	6163      	str	r3, [r4, #20]
 8015596:	9201      	str	r2, [sp, #4]
 8015598:	9b01      	ldr	r3, [sp, #4]
 801559a:	61a3      	str	r3, [r4, #24]
 801559c:	2b00      	cmp	r3, #0
 801559e:	bf0c      	ite	eq
 80155a0:	2201      	moveq	r2, #1
 80155a2:	2202      	movne	r2, #2
 80155a4:	6122      	str	r2, [r4, #16]
 80155a6:	b1a5      	cbz	r5, 80155d2 <__d2b+0x92>
 80155a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80155ac:	4405      	add	r5, r0
 80155ae:	603d      	str	r5, [r7, #0]
 80155b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80155b4:	6030      	str	r0, [r6, #0]
 80155b6:	4620      	mov	r0, r4
 80155b8:	b003      	add	sp, #12
 80155ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155be:	6161      	str	r1, [r4, #20]
 80155c0:	e7ea      	b.n	8015598 <__d2b+0x58>
 80155c2:	a801      	add	r0, sp, #4
 80155c4:	f7ff fd59 	bl	801507a <__lo0bits>
 80155c8:	9b01      	ldr	r3, [sp, #4]
 80155ca:	6163      	str	r3, [r4, #20]
 80155cc:	3020      	adds	r0, #32
 80155ce:	2201      	movs	r2, #1
 80155d0:	e7e8      	b.n	80155a4 <__d2b+0x64>
 80155d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80155d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80155da:	6038      	str	r0, [r7, #0]
 80155dc:	6918      	ldr	r0, [r3, #16]
 80155de:	f7ff fd2d 	bl	801503c <__hi0bits>
 80155e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80155e6:	e7e5      	b.n	80155b4 <__d2b+0x74>
 80155e8:	080d32a0 	.word	0x080d32a0
 80155ec:	080d32b1 	.word	0x080d32b1

080155f0 <__sfputc_r>:
 80155f0:	6893      	ldr	r3, [r2, #8]
 80155f2:	3b01      	subs	r3, #1
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	b410      	push	{r4}
 80155f8:	6093      	str	r3, [r2, #8]
 80155fa:	da08      	bge.n	801560e <__sfputc_r+0x1e>
 80155fc:	6994      	ldr	r4, [r2, #24]
 80155fe:	42a3      	cmp	r3, r4
 8015600:	db01      	blt.n	8015606 <__sfputc_r+0x16>
 8015602:	290a      	cmp	r1, #10
 8015604:	d103      	bne.n	801560e <__sfputc_r+0x1e>
 8015606:	f85d 4b04 	ldr.w	r4, [sp], #4
 801560a:	f7fe bca6 	b.w	8013f5a <__swbuf_r>
 801560e:	6813      	ldr	r3, [r2, #0]
 8015610:	1c58      	adds	r0, r3, #1
 8015612:	6010      	str	r0, [r2, #0]
 8015614:	7019      	strb	r1, [r3, #0]
 8015616:	4608      	mov	r0, r1
 8015618:	f85d 4b04 	ldr.w	r4, [sp], #4
 801561c:	4770      	bx	lr

0801561e <__sfputs_r>:
 801561e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015620:	4606      	mov	r6, r0
 8015622:	460f      	mov	r7, r1
 8015624:	4614      	mov	r4, r2
 8015626:	18d5      	adds	r5, r2, r3
 8015628:	42ac      	cmp	r4, r5
 801562a:	d101      	bne.n	8015630 <__sfputs_r+0x12>
 801562c:	2000      	movs	r0, #0
 801562e:	e007      	b.n	8015640 <__sfputs_r+0x22>
 8015630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015634:	463a      	mov	r2, r7
 8015636:	4630      	mov	r0, r6
 8015638:	f7ff ffda 	bl	80155f0 <__sfputc_r>
 801563c:	1c43      	adds	r3, r0, #1
 801563e:	d1f3      	bne.n	8015628 <__sfputs_r+0xa>
 8015640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015644 <_vfiprintf_r>:
 8015644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015648:	460d      	mov	r5, r1
 801564a:	b09d      	sub	sp, #116	@ 0x74
 801564c:	4614      	mov	r4, r2
 801564e:	4698      	mov	r8, r3
 8015650:	4606      	mov	r6, r0
 8015652:	b118      	cbz	r0, 801565c <_vfiprintf_r+0x18>
 8015654:	6a03      	ldr	r3, [r0, #32]
 8015656:	b90b      	cbnz	r3, 801565c <_vfiprintf_r+0x18>
 8015658:	f7fe fb96 	bl	8013d88 <__sinit>
 801565c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801565e:	07d9      	lsls	r1, r3, #31
 8015660:	d405      	bmi.n	801566e <_vfiprintf_r+0x2a>
 8015662:	89ab      	ldrh	r3, [r5, #12]
 8015664:	059a      	lsls	r2, r3, #22
 8015666:	d402      	bmi.n	801566e <_vfiprintf_r+0x2a>
 8015668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801566a:	f7fe fd98 	bl	801419e <__retarget_lock_acquire_recursive>
 801566e:	89ab      	ldrh	r3, [r5, #12]
 8015670:	071b      	lsls	r3, r3, #28
 8015672:	d501      	bpl.n	8015678 <_vfiprintf_r+0x34>
 8015674:	692b      	ldr	r3, [r5, #16]
 8015676:	b99b      	cbnz	r3, 80156a0 <_vfiprintf_r+0x5c>
 8015678:	4629      	mov	r1, r5
 801567a:	4630      	mov	r0, r6
 801567c:	f7fe fcac 	bl	8013fd8 <__swsetup_r>
 8015680:	b170      	cbz	r0, 80156a0 <_vfiprintf_r+0x5c>
 8015682:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015684:	07dc      	lsls	r4, r3, #31
 8015686:	d504      	bpl.n	8015692 <_vfiprintf_r+0x4e>
 8015688:	f04f 30ff 	mov.w	r0, #4294967295
 801568c:	b01d      	add	sp, #116	@ 0x74
 801568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015692:	89ab      	ldrh	r3, [r5, #12]
 8015694:	0598      	lsls	r0, r3, #22
 8015696:	d4f7      	bmi.n	8015688 <_vfiprintf_r+0x44>
 8015698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801569a:	f7fe fd81 	bl	80141a0 <__retarget_lock_release_recursive>
 801569e:	e7f3      	b.n	8015688 <_vfiprintf_r+0x44>
 80156a0:	2300      	movs	r3, #0
 80156a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80156a4:	2320      	movs	r3, #32
 80156a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80156aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80156ae:	2330      	movs	r3, #48	@ 0x30
 80156b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015860 <_vfiprintf_r+0x21c>
 80156b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80156b8:	f04f 0901 	mov.w	r9, #1
 80156bc:	4623      	mov	r3, r4
 80156be:	469a      	mov	sl, r3
 80156c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156c4:	b10a      	cbz	r2, 80156ca <_vfiprintf_r+0x86>
 80156c6:	2a25      	cmp	r2, #37	@ 0x25
 80156c8:	d1f9      	bne.n	80156be <_vfiprintf_r+0x7a>
 80156ca:	ebba 0b04 	subs.w	fp, sl, r4
 80156ce:	d00b      	beq.n	80156e8 <_vfiprintf_r+0xa4>
 80156d0:	465b      	mov	r3, fp
 80156d2:	4622      	mov	r2, r4
 80156d4:	4629      	mov	r1, r5
 80156d6:	4630      	mov	r0, r6
 80156d8:	f7ff ffa1 	bl	801561e <__sfputs_r>
 80156dc:	3001      	adds	r0, #1
 80156de:	f000 80a7 	beq.w	8015830 <_vfiprintf_r+0x1ec>
 80156e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80156e4:	445a      	add	r2, fp
 80156e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80156e8:	f89a 3000 	ldrb.w	r3, [sl]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	f000 809f 	beq.w	8015830 <_vfiprintf_r+0x1ec>
 80156f2:	2300      	movs	r3, #0
 80156f4:	f04f 32ff 	mov.w	r2, #4294967295
 80156f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156fc:	f10a 0a01 	add.w	sl, sl, #1
 8015700:	9304      	str	r3, [sp, #16]
 8015702:	9307      	str	r3, [sp, #28]
 8015704:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015708:	931a      	str	r3, [sp, #104]	@ 0x68
 801570a:	4654      	mov	r4, sl
 801570c:	2205      	movs	r2, #5
 801570e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015712:	4853      	ldr	r0, [pc, #332]	@ (8015860 <_vfiprintf_r+0x21c>)
 8015714:	f7ea fddc 	bl	80002d0 <memchr>
 8015718:	9a04      	ldr	r2, [sp, #16]
 801571a:	b9d8      	cbnz	r0, 8015754 <_vfiprintf_r+0x110>
 801571c:	06d1      	lsls	r1, r2, #27
 801571e:	bf44      	itt	mi
 8015720:	2320      	movmi	r3, #32
 8015722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015726:	0713      	lsls	r3, r2, #28
 8015728:	bf44      	itt	mi
 801572a:	232b      	movmi	r3, #43	@ 0x2b
 801572c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015730:	f89a 3000 	ldrb.w	r3, [sl]
 8015734:	2b2a      	cmp	r3, #42	@ 0x2a
 8015736:	d015      	beq.n	8015764 <_vfiprintf_r+0x120>
 8015738:	9a07      	ldr	r2, [sp, #28]
 801573a:	4654      	mov	r4, sl
 801573c:	2000      	movs	r0, #0
 801573e:	f04f 0c0a 	mov.w	ip, #10
 8015742:	4621      	mov	r1, r4
 8015744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015748:	3b30      	subs	r3, #48	@ 0x30
 801574a:	2b09      	cmp	r3, #9
 801574c:	d94b      	bls.n	80157e6 <_vfiprintf_r+0x1a2>
 801574e:	b1b0      	cbz	r0, 801577e <_vfiprintf_r+0x13a>
 8015750:	9207      	str	r2, [sp, #28]
 8015752:	e014      	b.n	801577e <_vfiprintf_r+0x13a>
 8015754:	eba0 0308 	sub.w	r3, r0, r8
 8015758:	fa09 f303 	lsl.w	r3, r9, r3
 801575c:	4313      	orrs	r3, r2
 801575e:	9304      	str	r3, [sp, #16]
 8015760:	46a2      	mov	sl, r4
 8015762:	e7d2      	b.n	801570a <_vfiprintf_r+0xc6>
 8015764:	9b03      	ldr	r3, [sp, #12]
 8015766:	1d19      	adds	r1, r3, #4
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	9103      	str	r1, [sp, #12]
 801576c:	2b00      	cmp	r3, #0
 801576e:	bfbb      	ittet	lt
 8015770:	425b      	neglt	r3, r3
 8015772:	f042 0202 	orrlt.w	r2, r2, #2
 8015776:	9307      	strge	r3, [sp, #28]
 8015778:	9307      	strlt	r3, [sp, #28]
 801577a:	bfb8      	it	lt
 801577c:	9204      	strlt	r2, [sp, #16]
 801577e:	7823      	ldrb	r3, [r4, #0]
 8015780:	2b2e      	cmp	r3, #46	@ 0x2e
 8015782:	d10a      	bne.n	801579a <_vfiprintf_r+0x156>
 8015784:	7863      	ldrb	r3, [r4, #1]
 8015786:	2b2a      	cmp	r3, #42	@ 0x2a
 8015788:	d132      	bne.n	80157f0 <_vfiprintf_r+0x1ac>
 801578a:	9b03      	ldr	r3, [sp, #12]
 801578c:	1d1a      	adds	r2, r3, #4
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	9203      	str	r2, [sp, #12]
 8015792:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015796:	3402      	adds	r4, #2
 8015798:	9305      	str	r3, [sp, #20]
 801579a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015870 <_vfiprintf_r+0x22c>
 801579e:	7821      	ldrb	r1, [r4, #0]
 80157a0:	2203      	movs	r2, #3
 80157a2:	4650      	mov	r0, sl
 80157a4:	f7ea fd94 	bl	80002d0 <memchr>
 80157a8:	b138      	cbz	r0, 80157ba <_vfiprintf_r+0x176>
 80157aa:	9b04      	ldr	r3, [sp, #16]
 80157ac:	eba0 000a 	sub.w	r0, r0, sl
 80157b0:	2240      	movs	r2, #64	@ 0x40
 80157b2:	4082      	lsls	r2, r0
 80157b4:	4313      	orrs	r3, r2
 80157b6:	3401      	adds	r4, #1
 80157b8:	9304      	str	r3, [sp, #16]
 80157ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157be:	4829      	ldr	r0, [pc, #164]	@ (8015864 <_vfiprintf_r+0x220>)
 80157c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80157c4:	2206      	movs	r2, #6
 80157c6:	f7ea fd83 	bl	80002d0 <memchr>
 80157ca:	2800      	cmp	r0, #0
 80157cc:	d03f      	beq.n	801584e <_vfiprintf_r+0x20a>
 80157ce:	4b26      	ldr	r3, [pc, #152]	@ (8015868 <_vfiprintf_r+0x224>)
 80157d0:	bb1b      	cbnz	r3, 801581a <_vfiprintf_r+0x1d6>
 80157d2:	9b03      	ldr	r3, [sp, #12]
 80157d4:	3307      	adds	r3, #7
 80157d6:	f023 0307 	bic.w	r3, r3, #7
 80157da:	3308      	adds	r3, #8
 80157dc:	9303      	str	r3, [sp, #12]
 80157de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157e0:	443b      	add	r3, r7
 80157e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80157e4:	e76a      	b.n	80156bc <_vfiprintf_r+0x78>
 80157e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80157ea:	460c      	mov	r4, r1
 80157ec:	2001      	movs	r0, #1
 80157ee:	e7a8      	b.n	8015742 <_vfiprintf_r+0xfe>
 80157f0:	2300      	movs	r3, #0
 80157f2:	3401      	adds	r4, #1
 80157f4:	9305      	str	r3, [sp, #20]
 80157f6:	4619      	mov	r1, r3
 80157f8:	f04f 0c0a 	mov.w	ip, #10
 80157fc:	4620      	mov	r0, r4
 80157fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015802:	3a30      	subs	r2, #48	@ 0x30
 8015804:	2a09      	cmp	r2, #9
 8015806:	d903      	bls.n	8015810 <_vfiprintf_r+0x1cc>
 8015808:	2b00      	cmp	r3, #0
 801580a:	d0c6      	beq.n	801579a <_vfiprintf_r+0x156>
 801580c:	9105      	str	r1, [sp, #20]
 801580e:	e7c4      	b.n	801579a <_vfiprintf_r+0x156>
 8015810:	fb0c 2101 	mla	r1, ip, r1, r2
 8015814:	4604      	mov	r4, r0
 8015816:	2301      	movs	r3, #1
 8015818:	e7f0      	b.n	80157fc <_vfiprintf_r+0x1b8>
 801581a:	ab03      	add	r3, sp, #12
 801581c:	9300      	str	r3, [sp, #0]
 801581e:	462a      	mov	r2, r5
 8015820:	4b12      	ldr	r3, [pc, #72]	@ (801586c <_vfiprintf_r+0x228>)
 8015822:	a904      	add	r1, sp, #16
 8015824:	4630      	mov	r0, r6
 8015826:	f7fd fe6b 	bl	8013500 <_printf_float>
 801582a:	4607      	mov	r7, r0
 801582c:	1c78      	adds	r0, r7, #1
 801582e:	d1d6      	bne.n	80157de <_vfiprintf_r+0x19a>
 8015830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015832:	07d9      	lsls	r1, r3, #31
 8015834:	d405      	bmi.n	8015842 <_vfiprintf_r+0x1fe>
 8015836:	89ab      	ldrh	r3, [r5, #12]
 8015838:	059a      	lsls	r2, r3, #22
 801583a:	d402      	bmi.n	8015842 <_vfiprintf_r+0x1fe>
 801583c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801583e:	f7fe fcaf 	bl	80141a0 <__retarget_lock_release_recursive>
 8015842:	89ab      	ldrh	r3, [r5, #12]
 8015844:	065b      	lsls	r3, r3, #25
 8015846:	f53f af1f 	bmi.w	8015688 <_vfiprintf_r+0x44>
 801584a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801584c:	e71e      	b.n	801568c <_vfiprintf_r+0x48>
 801584e:	ab03      	add	r3, sp, #12
 8015850:	9300      	str	r3, [sp, #0]
 8015852:	462a      	mov	r2, r5
 8015854:	4b05      	ldr	r3, [pc, #20]	@ (801586c <_vfiprintf_r+0x228>)
 8015856:	a904      	add	r1, sp, #16
 8015858:	4630      	mov	r0, r6
 801585a:	f7fe f8e9 	bl	8013a30 <_printf_i>
 801585e:	e7e4      	b.n	801582a <_vfiprintf_r+0x1e6>
 8015860:	080d3408 	.word	0x080d3408
 8015864:	080d3412 	.word	0x080d3412
 8015868:	08013501 	.word	0x08013501
 801586c:	0801561f 	.word	0x0801561f
 8015870:	080d340e 	.word	0x080d340e

08015874 <__sflush_r>:
 8015874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801587c:	0716      	lsls	r6, r2, #28
 801587e:	4605      	mov	r5, r0
 8015880:	460c      	mov	r4, r1
 8015882:	d454      	bmi.n	801592e <__sflush_r+0xba>
 8015884:	684b      	ldr	r3, [r1, #4]
 8015886:	2b00      	cmp	r3, #0
 8015888:	dc02      	bgt.n	8015890 <__sflush_r+0x1c>
 801588a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801588c:	2b00      	cmp	r3, #0
 801588e:	dd48      	ble.n	8015922 <__sflush_r+0xae>
 8015890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015892:	2e00      	cmp	r6, #0
 8015894:	d045      	beq.n	8015922 <__sflush_r+0xae>
 8015896:	2300      	movs	r3, #0
 8015898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801589c:	682f      	ldr	r7, [r5, #0]
 801589e:	6a21      	ldr	r1, [r4, #32]
 80158a0:	602b      	str	r3, [r5, #0]
 80158a2:	d030      	beq.n	8015906 <__sflush_r+0x92>
 80158a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80158a6:	89a3      	ldrh	r3, [r4, #12]
 80158a8:	0759      	lsls	r1, r3, #29
 80158aa:	d505      	bpl.n	80158b8 <__sflush_r+0x44>
 80158ac:	6863      	ldr	r3, [r4, #4]
 80158ae:	1ad2      	subs	r2, r2, r3
 80158b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80158b2:	b10b      	cbz	r3, 80158b8 <__sflush_r+0x44>
 80158b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80158b6:	1ad2      	subs	r2, r2, r3
 80158b8:	2300      	movs	r3, #0
 80158ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80158bc:	6a21      	ldr	r1, [r4, #32]
 80158be:	4628      	mov	r0, r5
 80158c0:	47b0      	blx	r6
 80158c2:	1c43      	adds	r3, r0, #1
 80158c4:	89a3      	ldrh	r3, [r4, #12]
 80158c6:	d106      	bne.n	80158d6 <__sflush_r+0x62>
 80158c8:	6829      	ldr	r1, [r5, #0]
 80158ca:	291d      	cmp	r1, #29
 80158cc:	d82b      	bhi.n	8015926 <__sflush_r+0xb2>
 80158ce:	4a2a      	ldr	r2, [pc, #168]	@ (8015978 <__sflush_r+0x104>)
 80158d0:	410a      	asrs	r2, r1
 80158d2:	07d6      	lsls	r6, r2, #31
 80158d4:	d427      	bmi.n	8015926 <__sflush_r+0xb2>
 80158d6:	2200      	movs	r2, #0
 80158d8:	6062      	str	r2, [r4, #4]
 80158da:	04d9      	lsls	r1, r3, #19
 80158dc:	6922      	ldr	r2, [r4, #16]
 80158de:	6022      	str	r2, [r4, #0]
 80158e0:	d504      	bpl.n	80158ec <__sflush_r+0x78>
 80158e2:	1c42      	adds	r2, r0, #1
 80158e4:	d101      	bne.n	80158ea <__sflush_r+0x76>
 80158e6:	682b      	ldr	r3, [r5, #0]
 80158e8:	b903      	cbnz	r3, 80158ec <__sflush_r+0x78>
 80158ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80158ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80158ee:	602f      	str	r7, [r5, #0]
 80158f0:	b1b9      	cbz	r1, 8015922 <__sflush_r+0xae>
 80158f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80158f6:	4299      	cmp	r1, r3
 80158f8:	d002      	beq.n	8015900 <__sflush_r+0x8c>
 80158fa:	4628      	mov	r0, r5
 80158fc:	f7ff faac 	bl	8014e58 <_free_r>
 8015900:	2300      	movs	r3, #0
 8015902:	6363      	str	r3, [r4, #52]	@ 0x34
 8015904:	e00d      	b.n	8015922 <__sflush_r+0xae>
 8015906:	2301      	movs	r3, #1
 8015908:	4628      	mov	r0, r5
 801590a:	47b0      	blx	r6
 801590c:	4602      	mov	r2, r0
 801590e:	1c50      	adds	r0, r2, #1
 8015910:	d1c9      	bne.n	80158a6 <__sflush_r+0x32>
 8015912:	682b      	ldr	r3, [r5, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d0c6      	beq.n	80158a6 <__sflush_r+0x32>
 8015918:	2b1d      	cmp	r3, #29
 801591a:	d001      	beq.n	8015920 <__sflush_r+0xac>
 801591c:	2b16      	cmp	r3, #22
 801591e:	d11e      	bne.n	801595e <__sflush_r+0xea>
 8015920:	602f      	str	r7, [r5, #0]
 8015922:	2000      	movs	r0, #0
 8015924:	e022      	b.n	801596c <__sflush_r+0xf8>
 8015926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801592a:	b21b      	sxth	r3, r3
 801592c:	e01b      	b.n	8015966 <__sflush_r+0xf2>
 801592e:	690f      	ldr	r7, [r1, #16]
 8015930:	2f00      	cmp	r7, #0
 8015932:	d0f6      	beq.n	8015922 <__sflush_r+0xae>
 8015934:	0793      	lsls	r3, r2, #30
 8015936:	680e      	ldr	r6, [r1, #0]
 8015938:	bf08      	it	eq
 801593a:	694b      	ldreq	r3, [r1, #20]
 801593c:	600f      	str	r7, [r1, #0]
 801593e:	bf18      	it	ne
 8015940:	2300      	movne	r3, #0
 8015942:	eba6 0807 	sub.w	r8, r6, r7
 8015946:	608b      	str	r3, [r1, #8]
 8015948:	f1b8 0f00 	cmp.w	r8, #0
 801594c:	dde9      	ble.n	8015922 <__sflush_r+0xae>
 801594e:	6a21      	ldr	r1, [r4, #32]
 8015950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015952:	4643      	mov	r3, r8
 8015954:	463a      	mov	r2, r7
 8015956:	4628      	mov	r0, r5
 8015958:	47b0      	blx	r6
 801595a:	2800      	cmp	r0, #0
 801595c:	dc08      	bgt.n	8015970 <__sflush_r+0xfc>
 801595e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015966:	81a3      	strh	r3, [r4, #12]
 8015968:	f04f 30ff 	mov.w	r0, #4294967295
 801596c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015970:	4407      	add	r7, r0
 8015972:	eba8 0800 	sub.w	r8, r8, r0
 8015976:	e7e7      	b.n	8015948 <__sflush_r+0xd4>
 8015978:	dfbffffe 	.word	0xdfbffffe

0801597c <_fflush_r>:
 801597c:	b538      	push	{r3, r4, r5, lr}
 801597e:	690b      	ldr	r3, [r1, #16]
 8015980:	4605      	mov	r5, r0
 8015982:	460c      	mov	r4, r1
 8015984:	b913      	cbnz	r3, 801598c <_fflush_r+0x10>
 8015986:	2500      	movs	r5, #0
 8015988:	4628      	mov	r0, r5
 801598a:	bd38      	pop	{r3, r4, r5, pc}
 801598c:	b118      	cbz	r0, 8015996 <_fflush_r+0x1a>
 801598e:	6a03      	ldr	r3, [r0, #32]
 8015990:	b90b      	cbnz	r3, 8015996 <_fflush_r+0x1a>
 8015992:	f7fe f9f9 	bl	8013d88 <__sinit>
 8015996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d0f3      	beq.n	8015986 <_fflush_r+0xa>
 801599e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80159a0:	07d0      	lsls	r0, r2, #31
 80159a2:	d404      	bmi.n	80159ae <_fflush_r+0x32>
 80159a4:	0599      	lsls	r1, r3, #22
 80159a6:	d402      	bmi.n	80159ae <_fflush_r+0x32>
 80159a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80159aa:	f7fe fbf8 	bl	801419e <__retarget_lock_acquire_recursive>
 80159ae:	4628      	mov	r0, r5
 80159b0:	4621      	mov	r1, r4
 80159b2:	f7ff ff5f 	bl	8015874 <__sflush_r>
 80159b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80159b8:	07da      	lsls	r2, r3, #31
 80159ba:	4605      	mov	r5, r0
 80159bc:	d4e4      	bmi.n	8015988 <_fflush_r+0xc>
 80159be:	89a3      	ldrh	r3, [r4, #12]
 80159c0:	059b      	lsls	r3, r3, #22
 80159c2:	d4e1      	bmi.n	8015988 <_fflush_r+0xc>
 80159c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80159c6:	f7fe fbeb 	bl	80141a0 <__retarget_lock_release_recursive>
 80159ca:	e7dd      	b.n	8015988 <_fflush_r+0xc>

080159cc <__swhatbuf_r>:
 80159cc:	b570      	push	{r4, r5, r6, lr}
 80159ce:	460c      	mov	r4, r1
 80159d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159d4:	2900      	cmp	r1, #0
 80159d6:	b096      	sub	sp, #88	@ 0x58
 80159d8:	4615      	mov	r5, r2
 80159da:	461e      	mov	r6, r3
 80159dc:	da0d      	bge.n	80159fa <__swhatbuf_r+0x2e>
 80159de:	89a3      	ldrh	r3, [r4, #12]
 80159e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80159e4:	f04f 0100 	mov.w	r1, #0
 80159e8:	bf14      	ite	ne
 80159ea:	2340      	movne	r3, #64	@ 0x40
 80159ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80159f0:	2000      	movs	r0, #0
 80159f2:	6031      	str	r1, [r6, #0]
 80159f4:	602b      	str	r3, [r5, #0]
 80159f6:	b016      	add	sp, #88	@ 0x58
 80159f8:	bd70      	pop	{r4, r5, r6, pc}
 80159fa:	466a      	mov	r2, sp
 80159fc:	f000 f848 	bl	8015a90 <_fstat_r>
 8015a00:	2800      	cmp	r0, #0
 8015a02:	dbec      	blt.n	80159de <__swhatbuf_r+0x12>
 8015a04:	9901      	ldr	r1, [sp, #4]
 8015a06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015a0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015a0e:	4259      	negs	r1, r3
 8015a10:	4159      	adcs	r1, r3
 8015a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015a16:	e7eb      	b.n	80159f0 <__swhatbuf_r+0x24>

08015a18 <__smakebuf_r>:
 8015a18:	898b      	ldrh	r3, [r1, #12]
 8015a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a1c:	079d      	lsls	r5, r3, #30
 8015a1e:	4606      	mov	r6, r0
 8015a20:	460c      	mov	r4, r1
 8015a22:	d507      	bpl.n	8015a34 <__smakebuf_r+0x1c>
 8015a24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015a28:	6023      	str	r3, [r4, #0]
 8015a2a:	6123      	str	r3, [r4, #16]
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	6163      	str	r3, [r4, #20]
 8015a30:	b003      	add	sp, #12
 8015a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a34:	ab01      	add	r3, sp, #4
 8015a36:	466a      	mov	r2, sp
 8015a38:	f7ff ffc8 	bl	80159cc <__swhatbuf_r>
 8015a3c:	9f00      	ldr	r7, [sp, #0]
 8015a3e:	4605      	mov	r5, r0
 8015a40:	4639      	mov	r1, r7
 8015a42:	4630      	mov	r0, r6
 8015a44:	f7fd fc30 	bl	80132a8 <_malloc_r>
 8015a48:	b948      	cbnz	r0, 8015a5e <__smakebuf_r+0x46>
 8015a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a4e:	059a      	lsls	r2, r3, #22
 8015a50:	d4ee      	bmi.n	8015a30 <__smakebuf_r+0x18>
 8015a52:	f023 0303 	bic.w	r3, r3, #3
 8015a56:	f043 0302 	orr.w	r3, r3, #2
 8015a5a:	81a3      	strh	r3, [r4, #12]
 8015a5c:	e7e2      	b.n	8015a24 <__smakebuf_r+0xc>
 8015a5e:	89a3      	ldrh	r3, [r4, #12]
 8015a60:	6020      	str	r0, [r4, #0]
 8015a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015a66:	81a3      	strh	r3, [r4, #12]
 8015a68:	9b01      	ldr	r3, [sp, #4]
 8015a6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015a6e:	b15b      	cbz	r3, 8015a88 <__smakebuf_r+0x70>
 8015a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a74:	4630      	mov	r0, r6
 8015a76:	f000 f81d 	bl	8015ab4 <_isatty_r>
 8015a7a:	b128      	cbz	r0, 8015a88 <__smakebuf_r+0x70>
 8015a7c:	89a3      	ldrh	r3, [r4, #12]
 8015a7e:	f023 0303 	bic.w	r3, r3, #3
 8015a82:	f043 0301 	orr.w	r3, r3, #1
 8015a86:	81a3      	strh	r3, [r4, #12]
 8015a88:	89a3      	ldrh	r3, [r4, #12]
 8015a8a:	431d      	orrs	r5, r3
 8015a8c:	81a5      	strh	r5, [r4, #12]
 8015a8e:	e7cf      	b.n	8015a30 <__smakebuf_r+0x18>

08015a90 <_fstat_r>:
 8015a90:	b538      	push	{r3, r4, r5, lr}
 8015a92:	4d07      	ldr	r5, [pc, #28]	@ (8015ab0 <_fstat_r+0x20>)
 8015a94:	2300      	movs	r3, #0
 8015a96:	4604      	mov	r4, r0
 8015a98:	4608      	mov	r0, r1
 8015a9a:	4611      	mov	r1, r2
 8015a9c:	602b      	str	r3, [r5, #0]
 8015a9e:	f7ec fc3d 	bl	800231c <_fstat>
 8015aa2:	1c43      	adds	r3, r0, #1
 8015aa4:	d102      	bne.n	8015aac <_fstat_r+0x1c>
 8015aa6:	682b      	ldr	r3, [r5, #0]
 8015aa8:	b103      	cbz	r3, 8015aac <_fstat_r+0x1c>
 8015aaa:	6023      	str	r3, [r4, #0]
 8015aac:	bd38      	pop	{r3, r4, r5, pc}
 8015aae:	bf00      	nop
 8015ab0:	20005fd4 	.word	0x20005fd4

08015ab4 <_isatty_r>:
 8015ab4:	b538      	push	{r3, r4, r5, lr}
 8015ab6:	4d06      	ldr	r5, [pc, #24]	@ (8015ad0 <_isatty_r+0x1c>)
 8015ab8:	2300      	movs	r3, #0
 8015aba:	4604      	mov	r4, r0
 8015abc:	4608      	mov	r0, r1
 8015abe:	602b      	str	r3, [r5, #0]
 8015ac0:	f7ec fc3c 	bl	800233c <_isatty>
 8015ac4:	1c43      	adds	r3, r0, #1
 8015ac6:	d102      	bne.n	8015ace <_isatty_r+0x1a>
 8015ac8:	682b      	ldr	r3, [r5, #0]
 8015aca:	b103      	cbz	r3, 8015ace <_isatty_r+0x1a>
 8015acc:	6023      	str	r3, [r4, #0]
 8015ace:	bd38      	pop	{r3, r4, r5, pc}
 8015ad0:	20005fd4 	.word	0x20005fd4

08015ad4 <__assert_func>:
 8015ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015ad6:	4614      	mov	r4, r2
 8015ad8:	461a      	mov	r2, r3
 8015ada:	4b09      	ldr	r3, [pc, #36]	@ (8015b00 <__assert_func+0x2c>)
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	4605      	mov	r5, r0
 8015ae0:	68d8      	ldr	r0, [r3, #12]
 8015ae2:	b954      	cbnz	r4, 8015afa <__assert_func+0x26>
 8015ae4:	4b07      	ldr	r3, [pc, #28]	@ (8015b04 <__assert_func+0x30>)
 8015ae6:	461c      	mov	r4, r3
 8015ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015aec:	9100      	str	r1, [sp, #0]
 8015aee:	462b      	mov	r3, r5
 8015af0:	4905      	ldr	r1, [pc, #20]	@ (8015b08 <__assert_func+0x34>)
 8015af2:	f000 f841 	bl	8015b78 <fiprintf>
 8015af6:	f000 f851 	bl	8015b9c <abort>
 8015afa:	4b04      	ldr	r3, [pc, #16]	@ (8015b0c <__assert_func+0x38>)
 8015afc:	e7f4      	b.n	8015ae8 <__assert_func+0x14>
 8015afe:	bf00      	nop
 8015b00:	20000818 	.word	0x20000818
 8015b04:	080d345e 	.word	0x080d345e
 8015b08:	080d3430 	.word	0x080d3430
 8015b0c:	080d3423 	.word	0x080d3423

08015b10 <_calloc_r>:
 8015b10:	b570      	push	{r4, r5, r6, lr}
 8015b12:	fba1 5402 	umull	r5, r4, r1, r2
 8015b16:	b93c      	cbnz	r4, 8015b28 <_calloc_r+0x18>
 8015b18:	4629      	mov	r1, r5
 8015b1a:	f7fd fbc5 	bl	80132a8 <_malloc_r>
 8015b1e:	4606      	mov	r6, r0
 8015b20:	b928      	cbnz	r0, 8015b2e <_calloc_r+0x1e>
 8015b22:	2600      	movs	r6, #0
 8015b24:	4630      	mov	r0, r6
 8015b26:	bd70      	pop	{r4, r5, r6, pc}
 8015b28:	220c      	movs	r2, #12
 8015b2a:	6002      	str	r2, [r0, #0]
 8015b2c:	e7f9      	b.n	8015b22 <_calloc_r+0x12>
 8015b2e:	462a      	mov	r2, r5
 8015b30:	4621      	mov	r1, r4
 8015b32:	f7fe faa7 	bl	8014084 <memset>
 8015b36:	e7f5      	b.n	8015b24 <_calloc_r+0x14>

08015b38 <__ascii_mbtowc>:
 8015b38:	b082      	sub	sp, #8
 8015b3a:	b901      	cbnz	r1, 8015b3e <__ascii_mbtowc+0x6>
 8015b3c:	a901      	add	r1, sp, #4
 8015b3e:	b142      	cbz	r2, 8015b52 <__ascii_mbtowc+0x1a>
 8015b40:	b14b      	cbz	r3, 8015b56 <__ascii_mbtowc+0x1e>
 8015b42:	7813      	ldrb	r3, [r2, #0]
 8015b44:	600b      	str	r3, [r1, #0]
 8015b46:	7812      	ldrb	r2, [r2, #0]
 8015b48:	1e10      	subs	r0, r2, #0
 8015b4a:	bf18      	it	ne
 8015b4c:	2001      	movne	r0, #1
 8015b4e:	b002      	add	sp, #8
 8015b50:	4770      	bx	lr
 8015b52:	4610      	mov	r0, r2
 8015b54:	e7fb      	b.n	8015b4e <__ascii_mbtowc+0x16>
 8015b56:	f06f 0001 	mvn.w	r0, #1
 8015b5a:	e7f8      	b.n	8015b4e <__ascii_mbtowc+0x16>

08015b5c <__ascii_wctomb>:
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	4608      	mov	r0, r1
 8015b60:	b141      	cbz	r1, 8015b74 <__ascii_wctomb+0x18>
 8015b62:	2aff      	cmp	r2, #255	@ 0xff
 8015b64:	d904      	bls.n	8015b70 <__ascii_wctomb+0x14>
 8015b66:	228a      	movs	r2, #138	@ 0x8a
 8015b68:	601a      	str	r2, [r3, #0]
 8015b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8015b6e:	4770      	bx	lr
 8015b70:	700a      	strb	r2, [r1, #0]
 8015b72:	2001      	movs	r0, #1
 8015b74:	4770      	bx	lr
	...

08015b78 <fiprintf>:
 8015b78:	b40e      	push	{r1, r2, r3}
 8015b7a:	b503      	push	{r0, r1, lr}
 8015b7c:	4601      	mov	r1, r0
 8015b7e:	ab03      	add	r3, sp, #12
 8015b80:	4805      	ldr	r0, [pc, #20]	@ (8015b98 <fiprintf+0x20>)
 8015b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b86:	6800      	ldr	r0, [r0, #0]
 8015b88:	9301      	str	r3, [sp, #4]
 8015b8a:	f7ff fd5b 	bl	8015644 <_vfiprintf_r>
 8015b8e:	b002      	add	sp, #8
 8015b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b94:	b003      	add	sp, #12
 8015b96:	4770      	bx	lr
 8015b98:	20000818 	.word	0x20000818

08015b9c <abort>:
 8015b9c:	b508      	push	{r3, lr}
 8015b9e:	2006      	movs	r0, #6
 8015ba0:	f000 f82c 	bl	8015bfc <raise>
 8015ba4:	2001      	movs	r0, #1
 8015ba6:	f7ec fb69 	bl	800227c <_exit>

08015baa <_raise_r>:
 8015baa:	291f      	cmp	r1, #31
 8015bac:	b538      	push	{r3, r4, r5, lr}
 8015bae:	4605      	mov	r5, r0
 8015bb0:	460c      	mov	r4, r1
 8015bb2:	d904      	bls.n	8015bbe <_raise_r+0x14>
 8015bb4:	2316      	movs	r3, #22
 8015bb6:	6003      	str	r3, [r0, #0]
 8015bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bbc:	bd38      	pop	{r3, r4, r5, pc}
 8015bbe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015bc0:	b112      	cbz	r2, 8015bc8 <_raise_r+0x1e>
 8015bc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015bc6:	b94b      	cbnz	r3, 8015bdc <_raise_r+0x32>
 8015bc8:	4628      	mov	r0, r5
 8015bca:	f000 f831 	bl	8015c30 <_getpid_r>
 8015bce:	4622      	mov	r2, r4
 8015bd0:	4601      	mov	r1, r0
 8015bd2:	4628      	mov	r0, r5
 8015bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bd8:	f000 b818 	b.w	8015c0c <_kill_r>
 8015bdc:	2b01      	cmp	r3, #1
 8015bde:	d00a      	beq.n	8015bf6 <_raise_r+0x4c>
 8015be0:	1c59      	adds	r1, r3, #1
 8015be2:	d103      	bne.n	8015bec <_raise_r+0x42>
 8015be4:	2316      	movs	r3, #22
 8015be6:	6003      	str	r3, [r0, #0]
 8015be8:	2001      	movs	r0, #1
 8015bea:	e7e7      	b.n	8015bbc <_raise_r+0x12>
 8015bec:	2100      	movs	r1, #0
 8015bee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015bf2:	4620      	mov	r0, r4
 8015bf4:	4798      	blx	r3
 8015bf6:	2000      	movs	r0, #0
 8015bf8:	e7e0      	b.n	8015bbc <_raise_r+0x12>
	...

08015bfc <raise>:
 8015bfc:	4b02      	ldr	r3, [pc, #8]	@ (8015c08 <raise+0xc>)
 8015bfe:	4601      	mov	r1, r0
 8015c00:	6818      	ldr	r0, [r3, #0]
 8015c02:	f7ff bfd2 	b.w	8015baa <_raise_r>
 8015c06:	bf00      	nop
 8015c08:	20000818 	.word	0x20000818

08015c0c <_kill_r>:
 8015c0c:	b538      	push	{r3, r4, r5, lr}
 8015c0e:	4d07      	ldr	r5, [pc, #28]	@ (8015c2c <_kill_r+0x20>)
 8015c10:	2300      	movs	r3, #0
 8015c12:	4604      	mov	r4, r0
 8015c14:	4608      	mov	r0, r1
 8015c16:	4611      	mov	r1, r2
 8015c18:	602b      	str	r3, [r5, #0]
 8015c1a:	f7ec fb1f 	bl	800225c <_kill>
 8015c1e:	1c43      	adds	r3, r0, #1
 8015c20:	d102      	bne.n	8015c28 <_kill_r+0x1c>
 8015c22:	682b      	ldr	r3, [r5, #0]
 8015c24:	b103      	cbz	r3, 8015c28 <_kill_r+0x1c>
 8015c26:	6023      	str	r3, [r4, #0]
 8015c28:	bd38      	pop	{r3, r4, r5, pc}
 8015c2a:	bf00      	nop
 8015c2c:	20005fd4 	.word	0x20005fd4

08015c30 <_getpid_r>:
 8015c30:	f7ec bb0c 	b.w	800224c <_getpid>

08015c34 <sqrtf>:
 8015c34:	b508      	push	{r3, lr}
 8015c36:	ed2d 8b02 	vpush	{d8}
 8015c3a:	eeb0 8a40 	vmov.f32	s16, s0
 8015c3e:	f000 f817 	bl	8015c70 <__ieee754_sqrtf>
 8015c42:	eeb4 8a48 	vcmp.f32	s16, s16
 8015c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c4a:	d60c      	bvs.n	8015c66 <sqrtf+0x32>
 8015c4c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8015c6c <sqrtf+0x38>
 8015c50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c58:	d505      	bpl.n	8015c66 <sqrtf+0x32>
 8015c5a:	f7fe fa75 	bl	8014148 <__errno>
 8015c5e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015c62:	2321      	movs	r3, #33	@ 0x21
 8015c64:	6003      	str	r3, [r0, #0]
 8015c66:	ecbd 8b02 	vpop	{d8}
 8015c6a:	bd08      	pop	{r3, pc}
 8015c6c:	00000000 	.word	0x00000000

08015c70 <__ieee754_sqrtf>:
 8015c70:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015c74:	4770      	bx	lr
	...

08015c78 <_init>:
 8015c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c7a:	bf00      	nop
 8015c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c7e:	bc08      	pop	{r3}
 8015c80:	469e      	mov	lr, r3
 8015c82:	4770      	bx	lr

08015c84 <_fini>:
 8015c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c86:	bf00      	nop
 8015c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c8a:	bc08      	pop	{r3}
 8015c8c:	469e      	mov	lr, r3
 8015c8e:	4770      	bx	lr
