
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000178ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bdb68  08017ac0  08017ac0  00018ac0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d5628  080d5628  000ff0f0  2**0
                  CONTENTS
  4 .ARM          00000008  080d5628  080d5628  000d6628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d5630  080d5630  000ff0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d5630  080d5630  000d6630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080d5634  080d5634  000d6634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009e0  20000000  080d5638  000d7000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00035580  200009e0  080d6018  000d79e0  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20035f60  080d6018  000d7f60  2**0
                  ALLOC
 11 .sdram        000270f0  c0000000  c0000000  000d8000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  000ff0f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025fe3  00000000  00000000  000ff120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006063  00000000  00000000  00125103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd8  00000000  00000000  0012b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001548  00000000  00000000  0012ce40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002eea3  00000000  00000000  0012e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a570  00000000  00000000  0015d22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109a44  00000000  00000000  0018779b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000f4  00000000  00000000  002911df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085a4  00000000  00000000  002912d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00299878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003a35  00000000  00000000  002998e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000128  00000000  00000000  0029d315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e0 	.word	0x200009e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017aa4 	.word	0x08017aa4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009e4 	.word	0x200009e4
 800020c:	08017aa4 	.word	0x08017aa4

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <MX_CRC_Init+0x40>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <MX_CRC_Init+0x3c>)
 8000fc2:	f004 f9ed 	bl	80053a0 <HAL_CRC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fcc:	f001 f96b 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200009fc 	.word	0x200009fc
 8000fd8:	40023000 	.word	0x40023000

08000fdc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_CRC_MspInit+0x38>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10b      	bne.n	8001006 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_CRC_MspInit+0x3c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <HAL_CRC_MspInit+0x3c>)
 8000ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <HAL_CRC_MspInit+0x3c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023000 	.word	0x40023000
 8001018:	40023800 	.word	0x40023800

0800101c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001022:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <MX_DMA_Init+0x58>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a13      	ldr	r2, [pc, #76]	@ (8001074 <MX_DMA_Init+0x58>)
 8001028:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_DMA_Init+0x58>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2039      	movs	r0, #57	@ 0x39
 8001040:	f004 f977 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001044:	2039      	movs	r0, #57	@ 0x39
 8001046:	f004 f990 	bl	800536a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2102      	movs	r1, #2
 800104e:	203b      	movs	r0, #59	@ 0x3b
 8001050:	f004 f96f 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001054:	203b      	movs	r0, #59	@ 0x3b
 8001056:	f004 f988 	bl	800536a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	2045      	movs	r0, #69	@ 0x45
 8001060:	f004 f967 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001064:	2045      	movs	r0, #69	@ 0x45
 8001066:	f004 f980 	bl	800536a <HAL_NVIC_EnableIRQ>

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001090:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <MX_FMC_Init+0x98>)
 8001092:	4a20      	ldr	r2, [pc, #128]	@ (8001114 <MX_FMC_Init+0x9c>)
 8001094:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <MX_FMC_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800109c:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <MX_FMC_Init+0x98>)
 800109e:	2201      	movs	r2, #1
 80010a0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <MX_FMC_Init+0x98>)
 80010a4:	2208      	movs	r2, #8
 80010a6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <MX_FMC_Init+0x98>)
 80010aa:	2210      	movs	r2, #16
 80010ac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <MX_FMC_Init+0x98>)
 80010b0:	2240      	movs	r2, #64	@ 0x40
 80010b2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <MX_FMC_Init+0x98>)
 80010b6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010ba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_FMC_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010c2:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <MX_FMC_Init+0x98>)
 80010c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_FMC_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_FMC_Init+0x98>)
 80010d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80010d8:	2302      	movs	r3, #2
 80010da:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80010dc:	2306      	movs	r3, #6
 80010de:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80010e4:	2306      	movs	r3, #6
 80010e6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_FMC_Init+0x98>)
 80010fa:	f008 ff91 	bl	800a020 <HAL_SDRAM_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001104:	f001 f8cf 	bl	80022a6 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000a20 	.word	0x20000a20
 8001114:	a0000140 	.word	0xa0000140

08001118 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800112c:	4b33      	ldr	r3, [pc, #204]	@ (80011fc <HAL_FMC_MspInit+0xe4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d15e      	bne.n	80011f2 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8001134:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <HAL_FMC_MspInit+0xe4>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800113a:	4b31      	ldr	r3, [pc, #196]	@ (8001200 <HAL_FMC_MspInit+0xe8>)
 800113c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800113e:	4a30      	ldr	r2, [pc, #192]	@ (8001200 <HAL_FMC_MspInit+0xe8>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6393      	str	r3, [r2, #56]	@ 0x38
 8001146:	4b2e      	ldr	r3, [pc, #184]	@ (8001200 <HAL_FMC_MspInit+0xe8>)
 8001148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 8001152:	f248 1337 	movw	r3, #33079	@ 0x8137
 8001156:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001164:	230c      	movs	r3, #12
 8001166:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4825      	ldr	r0, [pc, #148]	@ (8001204 <HAL_FMC_MspInit+0xec>)
 800116e:	f004 fe7d 	bl	8005e6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001172:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001176:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001184:	230c      	movs	r3, #12
 8001186:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	481e      	ldr	r0, [pc, #120]	@ (8001208 <HAL_FMC_MspInit+0xf0>)
 800118e:	f004 fe6d 	bl	8005e6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001192:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001196:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a4:	230c      	movs	r3, #12
 80011a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4817      	ldr	r0, [pc, #92]	@ (800120c <HAL_FMC_MspInit+0xf4>)
 80011ae:	f004 fe5d 	bl	8005e6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 80011b2:	232c      	movs	r3, #44	@ 0x2c
 80011b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c2:	230c      	movs	r3, #12
 80011c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4811      	ldr	r0, [pc, #68]	@ (8001210 <HAL_FMC_MspInit+0xf8>)
 80011cc:	f004 fe4e 	bl	8005e6c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 80011d0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80011d4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e2:	230c      	movs	r3, #12
 80011e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	480a      	ldr	r0, [pc, #40]	@ (8001214 <HAL_FMC_MspInit+0xfc>)
 80011ec:	f004 fe3e 	bl	8005e6c <HAL_GPIO_Init>
 80011f0:	e000      	b.n	80011f4 <HAL_FMC_MspInit+0xdc>
    return;
 80011f2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000a54 	.word	0x20000a54
 8001200:	40023800 	.word	0x40023800
 8001204:	40021800 	.word	0x40021800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021400 	.word	0x40021400
 8001210:	40021c00 	.word	0x40021c00
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001220:	f7ff ff7a 	bl	8001118 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	@ 0x40
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001242:	4ba5      	ldr	r3, [pc, #660]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4aa4      	ldr	r2, [pc, #656]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4ba2      	ldr	r3, [pc, #648]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125a:	4b9f      	ldr	r3, [pc, #636]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a9e      	ldr	r2, [pc, #632]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b9c      	ldr	r3, [pc, #624]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b99      	ldr	r3, [pc, #612]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a98      	ldr	r2, [pc, #608]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b96      	ldr	r3, [pc, #600]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128a:	4b93      	ldr	r3, [pc, #588]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a92      	ldr	r2, [pc, #584]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b90      	ldr	r3, [pc, #576]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b8d      	ldr	r3, [pc, #564]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a8c      	ldr	r2, [pc, #560]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b8a      	ldr	r3, [pc, #552]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b87      	ldr	r3, [pc, #540]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a86      	ldr	r2, [pc, #536]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b84      	ldr	r3, [pc, #528]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012d2:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a80      	ldr	r2, [pc, #512]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b7e      	ldr	r3, [pc, #504]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012ea:	4b7b      	ldr	r3, [pc, #492]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a7a      	ldr	r2, [pc, #488]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b78      	ldr	r3, [pc, #480]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001302:	4b75      	ldr	r3, [pc, #468]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a74      	ldr	r2, [pc, #464]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001308:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b72      	ldr	r3, [pc, #456]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800131a:	4b6f      	ldr	r3, [pc, #444]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a6e      	ldr	r2, [pc, #440]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b6c      	ldr	r3, [pc, #432]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	4b69      	ldr	r3, [pc, #420]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a68      	ldr	r2, [pc, #416]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b66      	ldr	r3, [pc, #408]	@ (80014d8 <MX_GPIO_Init+0x2ac>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2102      	movs	r1, #2
 800134e:	4863      	ldr	r0, [pc, #396]	@ (80014dc <MX_GPIO_Init+0x2b0>)
 8001350:	f005 f85c 	bl	800640c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001354:	230f      	movs	r3, #15
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001358:	2303      	movs	r3, #3
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001364:	4619      	mov	r1, r3
 8001366:	485e      	ldr	r0, [pc, #376]	@ (80014e0 <MX_GPIO_Init+0x2b4>)
 8001368:	f004 fd80 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 PG12
                           PG10 PG9 PG7 PG6
                           PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12
 800136c:	f647 63c8 	movw	r3, #32456	@ 0x7ec8
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800137a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800137e:	4619      	mov	r1, r3
 8001380:	4858      	ldr	r0, [pc, #352]	@ (80014e4 <MX_GPIO_Init+0x2b8>)
 8001382:	f004 fd73 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001386:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138c:	2303      	movs	r3, #3
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001398:	4619      	mov	r1, r3
 800139a:	4853      	ldr	r0, [pc, #332]	@ (80014e8 <MX_GPIO_Init+0x2bc>)
 800139c:	f004 fd66 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD3
                           PD4 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 80013a0:	f643 03f8 	movw	r3, #14584	@ 0x38f8
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b2:	4619      	mov	r1, r3
 80013b4:	484d      	ldr	r0, [pc, #308]	@ (80014ec <MX_GPIO_Init+0x2c0>)
 80013b6:	f004 fd59 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80013ba:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c0:	2303      	movs	r3, #3
 80013c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013cc:	4619      	mov	r1, r3
 80013ce:	4848      	ldr	r0, [pc, #288]	@ (80014f0 <MX_GPIO_Init+0x2c4>)
 80013d0:	f004 fd4c 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80013d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e6:	4619      	mov	r1, r3
 80013e8:	4842      	ldr	r0, [pc, #264]	@ (80014f4 <MX_GPIO_Init+0x2c8>)
 80013ea:	f004 fd3f 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 80013ee:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 80013f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	2303      	movs	r3, #3
 80013f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001400:	4619      	mov	r1, r3
 8001402:	483d      	ldr	r0, [pc, #244]	@ (80014f8 <MX_GPIO_Init+0x2cc>)
 8001404:	f004 fd32 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001408:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001416:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800141a:	4619      	mov	r1, r3
 800141c:	482f      	ldr	r0, [pc, #188]	@ (80014dc <MX_GPIO_Init+0x2b0>)
 800141e:	f004 fd25 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001422:	23ff      	movs	r3, #255	@ 0xff
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001426:	2303      	movs	r3, #3
 8001428:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800142e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001432:	4619      	mov	r1, r3
 8001434:	4831      	ldr	r0, [pc, #196]	@ (80014fc <MX_GPIO_Init+0x2d0>)
 8001436:	f004 fd19 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800143a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800144c:	4619      	mov	r1, r3
 800144e:	482a      	ldr	r0, [pc, #168]	@ (80014f8 <MX_GPIO_Init+0x2cc>)
 8001450:	f004 fd0c 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH12 PH7 PH9 PH11
                           PH6 PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001454:	f64f 73d0 	movw	r3, #65488	@ 0xffd0
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145a:	2303      	movs	r3, #3
 800145c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001462:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001466:	4619      	mov	r1, r3
 8001468:	4825      	ldr	r0, [pc, #148]	@ (8001500 <MX_GPIO_Init+0x2d4>)
 800146a:	f004 fcff 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800146e:	2302      	movs	r3, #2
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001482:	4619      	mov	r1, r3
 8001484:	4815      	ldr	r0, [pc, #84]	@ (80014dc <MX_GPIO_Init+0x2b0>)
 8001486:	f004 fcf1 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800148a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001490:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001494:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800149e:	4619      	mov	r1, r3
 80014a0:	480e      	ldr	r0, [pc, #56]	@ (80014dc <MX_GPIO_Init+0x2b0>)
 80014a2:	f004 fce3 	bl	8005e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80014a6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ac:	2303      	movs	r3, #3
 80014ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4812      	ldr	r0, [pc, #72]	@ (8001504 <MX_GPIO_Init+0x2d8>)
 80014bc:	f004 fcd6 	bl	8005e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2028      	movs	r0, #40	@ 0x28
 80014c6:	f003 ff34 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ca:	2028      	movs	r0, #40	@ 0x28
 80014cc:	f003 ff4d 	bl	800536a <HAL_NVIC_EnableIRQ>

}
 80014d0:	bf00      	nop
 80014d2:	3740      	adds	r7, #64	@ 0x40
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40022400 	.word	0x40022400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40022800 	.word	0x40022800
 8001500:	40021c00 	.word	0x40021c00
 8001504:	40021400 	.word	0x40021400

08001508 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800150c:	f3bf 8f4f 	dsb	sy
}
 8001510:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001512:	f3bf 8f6f 	isb	sy
}
 8001516:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001518:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <SCB_EnableICache+0x48>)
 800151a:	2200      	movs	r2, #0
 800151c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001520:	f3bf 8f4f 	dsb	sy
}
 8001524:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001526:	f3bf 8f6f 	isb	sy
}
 800152a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <SCB_EnableICache+0x48>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <SCB_EnableICache+0x48>)
 8001532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001536:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001538:	f3bf 8f4f 	dsb	sy
}
 800153c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800153e:	f3bf 8f6f 	isb	sy
}
 8001542:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <SCB_DisableICache>:
/**
  \brief   Disable I-Cache
  \details Turns off I-Cache
  */
__STATIC_INLINE void SCB_DisableICache (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001558:	f3bf 8f4f 	dsb	sy
}
 800155c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800155e:	f3bf 8f6f 	isb	sy
}
 8001562:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <SCB_DisableICache+0x3c>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <SCB_DisableICache+0x3c>)
 800156a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800156e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001570:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <SCB_DisableICache+0x3c>)
 8001572:	2200      	movs	r2, #0
 8001574:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001578:	f3bf 8f4f 	dsb	sy
}
 800157c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157e:	f3bf 8f6f 	isb	sy
}
 8001582:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800159a:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <SCB_EnableDCache+0x84>)
 800159c:	2200      	movs	r2, #0
 800159e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015a2:	f3bf 8f4f 	dsb	sy
}
 80015a6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <SCB_EnableDCache+0x84>)
 80015aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ae:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	0b5b      	lsrs	r3, r3, #13
 80015b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80015cc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015d2:	4911      	ldr	r1, [pc, #68]	@ (8001618 <SCB_EnableDCache+0x84>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ef      	bne.n	80015c4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	60fa      	str	r2, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1e5      	bne.n	80015ba <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <SCB_EnableDCache+0x84>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <SCB_EnableDCache+0x84>)
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001600:	f3bf 8f4f 	dsb	sy
}
 8001604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001606:	f3bf 8f6f 	isb	sy
}
 800160a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <SCB_DisableDCache>:
/**
  \brief   Disable D-Cache
  \details Turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache (void)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001622:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <SCB_DisableDCache+0x84>)
 8001624:	2200      	movs	r2, #0
 8001626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800162a:	f3bf 8f4f 	dsb	sy
}
 800162e:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <SCB_DisableDCache+0x84>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	4a1a      	ldr	r2, [pc, #104]	@ (80016a0 <SCB_DisableDCache+0x84>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800163a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800163c:	f3bf 8f4f 	dsb	sy
}
 8001640:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <SCB_DisableDCache+0x84>)
 8001644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001648:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	0b5b      	lsrs	r3, r3, #13
 800164e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001652:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800165c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001666:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800166c:	490c      	ldr	r1, [pc, #48]	@ (80016a0 <SCB_DisableDCache+0x84>)
 800166e:	4313      	orrs	r3, r2
 8001670:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1e5a      	subs	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ef      	bne.n	800165e <SCB_DisableDCache+0x42>
    } while(sets-- != 0U);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	60fa      	str	r2, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e5      	bne.n	8001654 <SCB_DisableDCache+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001688:	f3bf 8f4f 	dsb	sy
}
 800168c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800168e:	f3bf 8f6f 	isb	sy
}
 8001692:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	f6ad 2d58 	subw	sp, sp, #2648	@ 0xa58
 80016aa:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80016ac:	f7ff ff2c 	bl	8001508 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80016b0:	f7ff ff70 	bl	8001594 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b4:	f003 fce0 	bl	8005078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b8:	f000 fb4a 	bl	8001d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016bc:	f7ff fdb6 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 80016c0:	f7ff fcac 	bl	800101c <MX_DMA_Init>
  MX_SAI1_Init();
 80016c4:	f000 fdf6 	bl	80022b4 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 80016c8:	f001 f9ae 	bl	8002a28 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80016cc:	f00a fbde 	bl	800be8c <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 80016d0:	f000 ff14 	bl	80024fc <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 80016d4:	f7ff fc60 	bl	8000f98 <MX_CRC_Init>
  MX_FMC_Init();
 80016d8:	f7ff fcce 	bl	8001078 <MX_FMC_Init>

  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 80016dc:	48c0      	ldr	r0, [pc, #768]	@ (80019e0 <main+0x33c>)
 80016de:	f013 fc9d 	bl	801501c <puts>
  SDCard_InitAndFormat();
 80016e2:	f000 fbe3 	bl	8001eac <SDCard_InitAndFormat>
  BSP_SDRAM_Init();
 80016e6:	f003 fb11 	bl	8004d0c <BSP_SDRAM_Init>
  AI_Init();
 80016ea:	f000 fcc9 	bl	8002080 <AI_Init>

  memset(waveform, 0, sizeof(waveform));
 80016ee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80016f2:	2100      	movs	r1, #0
 80016f4:	48bb      	ldr	r0, [pc, #748]	@ (80019e4 <main+0x340>)
 80016f6:	f013 fd71 	bl	80151dc <memset>
  memset(stereo_waveform, 0, sizeof(stereo_waveform));
 80016fa:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80016fe:	2100      	movs	r1, #0
 8001700:	48b9      	ldr	r0, [pc, #740]	@ (80019e8 <main+0x344>)
 8001702:	f013 fd6b 	bl	80151dc <memset>
  memset(float_waveform, 0, sizeof(float_waveform));
 8001706:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800170a:	2100      	movs	r1, #0
 800170c:	48b7      	ldr	r0, [pc, #732]	@ (80019ec <main+0x348>)
 800170e:	f013 fd65 	bl	80151dc <memset>
  memset(spectrogram, 0, sizeof(spectrogram));
 8001712:	f64f 12f0 	movw	r2, #63984	@ 0xf9f0
 8001716:	2100      	movs	r1, #0
 8001718:	48b5      	ldr	r0, [pc, #724]	@ (80019f0 <main+0x34c>)
 800171a:	f013 fd5f 	bl	80151dc <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        check_button_release();
 800171e:	f000 fbb1 	bl	8001e84 <check_button_release>
        printf("Waiting for input to record...\r\n");
 8001722:	48b4      	ldr	r0, [pc, #720]	@ (80019f4 <main+0x350>)
 8001724:	f013 fc7a 	bl	801501c <puts>
        HAL_Delay(1000);
 8001728:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800172c:	f003 fd02 	bl	8005134 <HAL_Delay>

        SCB_DisableDCache();
 8001730:	f7ff ff74 	bl	800161c <SCB_DisableDCache>
        SCB_DisableICache();
 8001734:	f7ff ff0e 	bl	8001554 <SCB_DisableICache>

        if (button_pressed == 1)
 8001738:	4baf      	ldr	r3, [pc, #700]	@ (80019f8 <main+0x354>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b01      	cmp	r3, #1
 8001740:	f040 82db 	bne.w	8001cfa <main+0x656>
        {
            /* Toggle the green led to visually show action */
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001744:	2102      	movs	r1, #2
 8001746:	48ad      	ldr	r0, [pc, #692]	@ (80019fc <main+0x358>)
 8001748:	f004 fe79 	bl	800643e <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 800174c:	2064      	movs	r0, #100	@ 0x64
 800174e:	f003 fcf1 	bl	8005134 <HAL_Delay>
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001752:	2102      	movs	r1, #2
 8001754:	48a9      	ldr	r0, [pc, #676]	@ (80019fc <main+0x358>)
 8001756:	f004 fe72 	bl	800643e <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 800175a:	2064      	movs	r0, #100	@ 0x64
 800175c:	f003 fcea 	bl	8005134 <HAL_Delay>

            /* If the program is not already recording... */
            if (AudioState == AUDIO_STATE_IDLE)
 8001760:	4ba7      	ldr	r3, [pc, #668]	@ (8001a00 <main+0x35c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d108      	bne.n	800177a <main+0xd6>
            {
                /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
                AUDIO_REC_Start();
 8001768:	f00a f824 	bl	800b7b4 <AUDIO_REC_Start>
            }

            /* While recording, we loop the recording process */
            while (AudioState == AUDIO_STATE_RECORD)
 800176c:	e005      	b.n	800177a <main+0xd6>
            {
                status = AUDIO_REC_Process();
 800176e:	f00a f8a7 	bl	800b8c0 <AUDIO_REC_Process>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4ba3      	ldr	r3, [pc, #652]	@ (8001a04 <main+0x360>)
 8001778:	701a      	strb	r2, [r3, #0]
            while (AudioState == AUDIO_STATE_RECORD)
 800177a:	4ba1      	ldr	r3, [pc, #644]	@ (8001a00 <main+0x35c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d0f5      	beq.n	800176e <main+0xca>
            }

            /* Once we stop recording, we correctly close the .WAV */
            if (AudioState == AUDIO_STATE_STOP)
 8001782:	4b9f      	ldr	r3, [pc, #636]	@ (8001a00 <main+0x35c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d108      	bne.n	800179c <main+0xf8>
            {
                status = AUDIO_REC_Process();
 800178a:	f00a f899 	bl	800b8c0 <AUDIO_REC_Process>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b9c      	ldr	r3, [pc, #624]	@ (8001a04 <main+0x360>)
 8001794:	701a      	strb	r2, [r3, #0]
                printf("Recording stopped.\r\n");
 8001796:	489c      	ldr	r0, [pc, #624]	@ (8001a08 <main+0x364>)
 8001798:	f013 fc40 	bl	801501c <puts>
            }


            /* Audio processing step*/

				if (read_wav_file("WAVE.WAV", stereo_waveform) != 0) {
 800179c:	4992      	ldr	r1, [pc, #584]	@ (80019e8 <main+0x344>)
 800179e:	489b      	ldr	r0, [pc, #620]	@ (8001a0c <main+0x368>)
 80017a0:	f000 fbd4 	bl	8001f4c <read_wav_file>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <main+0x10e>
					printf("Erreur : Impossible de lire le fichier WAV\r\n");
 80017aa:	4899      	ldr	r0, [pc, #612]	@ (8001a10 <main+0x36c>)
 80017ac:	f013 fc36 	bl	801501c <puts>
					return;
 80017b0:	e2a7      	b.n	8001d02 <main+0x65e>
				}

				// Si le fichier est stéréo, on le convertit en mono en moyennant les canaux
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 3a4c 	str.w	r3, [r7, #2636]	@ 0xa4c
 80017b8:	e01d      	b.n	80017f6 <main+0x152>
					waveform[i] = (stereo_waveform[2 * i] + stereo_waveform[2 * i + 1]) / 2;  // Moyenne des deux canaux
 80017ba:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4a89      	ldr	r2, [pc, #548]	@ (80019e8 <main+0x344>)
 80017c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017c6:	4619      	mov	r1, r3
 80017c8:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	3301      	adds	r3, #1
 80017d0:	4a85      	ldr	r2, [pc, #532]	@ (80019e8 <main+0x344>)
 80017d2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017d6:	440b      	add	r3, r1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da00      	bge.n	80017de <main+0x13a>
 80017dc:	3301      	adds	r3, #1
 80017de:	105b      	asrs	r3, r3, #1
 80017e0:	b219      	sxth	r1, r3
 80017e2:	4a80      	ldr	r2, [pc, #512]	@ (80019e4 <main+0x340>)
 80017e4:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 80017e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80017ec:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 80017f0:	3301      	adds	r3, #1
 80017f2:	f8c7 3a4c 	str.w	r3, [r7, #2636]	@ 0xa4c
 80017f6:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	@ 0xa4c
 80017fa:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80017fe:	d3dc      	bcc.n	80017ba <main+0x116>
				}


				// -------------------- NORMALISATION --------------------
				printf("Normalisation de l'audio...\r\n");
 8001800:	4884      	ldr	r0, [pc, #528]	@ (8001a14 <main+0x370>)
 8001802:	f013 fc0b 	bl	801501c <puts>

				// Trouver le min et le max
				float min_val = 32767.0f;
 8001806:	4b84      	ldr	r3, [pc, #528]	@ (8001a18 <main+0x374>)
 8001808:	f607 2248 	addw	r2, r7, #2632	@ 0xa48
 800180c:	6013      	str	r3, [r2, #0]
				float max_val = -32768.0f;
 800180e:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001812:	f607 2244 	addw	r2, r7, #2628	@ 0xa44
 8001816:	6013      	str	r3, [r2, #0]

				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 3a40 	str.w	r3, [r7, #2624]	@ 0xa40
 800181e:	e042      	b.n	80018a6 <main+0x202>
					if (waveform[i] < min_val) min_val = waveform[i];
 8001820:	4a70      	ldr	r2, [pc, #448]	@ (80019e4 <main+0x340>)
 8001822:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 8001826:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001832:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	dd0c      	ble.n	800185e <main+0x1ba>
 8001844:	4a67      	ldr	r2, [pc, #412]	@ (80019e4 <main+0x340>)
 8001846:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 800184a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001856:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 800185a:	edc3 7a00 	vstr	s15, [r3]
					if (waveform[i] > max_val) max_val = waveform[i];
 800185e:	4a61      	ldr	r2, [pc, #388]	@ (80019e4 <main+0x340>)
 8001860:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 8001864:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001870:	f607 2344 	addw	r3, r7, #2628	@ 0xa44
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	d50c      	bpl.n	800189c <main+0x1f8>
 8001882:	4a58      	ldr	r2, [pc, #352]	@ (80019e4 <main+0x340>)
 8001884:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 8001888:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001894:	f607 2344 	addw	r3, r7, #2628	@ 0xa44
 8001898:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800189c:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 80018a0:	3301      	adds	r3, #1
 80018a2:	f8c7 3a40 	str.w	r3, [r7, #2624]	@ 0xa40
 80018a6:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 80018aa:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80018ae:	d3b7      	bcc.n	8001820 <main+0x17c>
				}

				// Vérifier que les valeurs sont valides
				printf("Min: %.2f, Max: %.2f\n", min_val, max_val);
 80018b0:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f7fe fec7 	bl	8000648 <__aeabi_f2d>
 80018ba:	4604      	mov	r4, r0
 80018bc:	460d      	mov	r5, r1
 80018be:	f607 2344 	addw	r3, r7, #2628	@ 0xa44
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	f7fe fec0 	bl	8000648 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	e9cd 2300 	strd	r2, r3, [sp]
 80018d0:	4622      	mov	r2, r4
 80018d2:	462b      	mov	r3, r5
 80018d4:	4851      	ldr	r0, [pc, #324]	@ (8001a1c <main+0x378>)
 80018d6:	f013 fb39 	bl	8014f4c <iprintf>

				// Calcul de la normalisation
				float range = max_val - min_val;
 80018da:	f607 2344 	addw	r3, r7, #2628	@ 0xa44
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ee:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 80018f2:	edc3 7a00 	vstr	s15, [r3]
				if (range == 0) range = 1.0f;  // Éviter division par zéro
 80018f6:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	d104      	bne.n	8001912 <main+0x26e>
 8001908:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800190c:	f607 223c 	addw	r2, r7, #2620	@ 0xa3c
 8001910:	6013      	str	r3, [r2, #0]

				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 3a38 	str.w	r3, [r7, #2616]	@ 0xa38
 8001918:	e026      	b.n	8001968 <main+0x2c4>
					float_waveform[i] = 2.0f * (waveform[i] - min_val) / range - 1.0f; // Normalisation [-1,1]
 800191a:	4a32      	ldr	r2, [pc, #200]	@ (80019e4 <main+0x340>)
 800191c:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 8001920:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192c:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001938:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800193c:	f607 233c 	addw	r3, r7, #2620	@ 0xa3c
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001948:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800194c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001950:	4a26      	ldr	r2, [pc, #152]	@ (80019ec <main+0x348>)
 8001952:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800195e:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 8001962:	3301      	adds	r3, #1
 8001964:	f8c7 3a38 	str.w	r3, [r7, #2616]	@ 0xa38
 8001968:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 800196c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001970:	d3d3      	bcc.n	800191a <main+0x276>
				}

				// Vérification des valeurs normalisées
				printf("Premières valeurs normalisées : ");
 8001972:	482b      	ldr	r0, [pc, #172]	@ (8001a20 <main+0x37c>)
 8001974:	f013 faea 	bl	8014f4c <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 3a34 	str.w	r3, [r7, #2612]	@ 0xa34
 800197e:	e012      	b.n	80019a6 <main+0x302>
					printf("%.6f ", float_waveform[i]);
 8001980:	4a1a      	ldr	r2, [pc, #104]	@ (80019ec <main+0x348>)
 8001982:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	@ 0xa34
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fe5b 	bl	8000648 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4823      	ldr	r0, [pc, #140]	@ (8001a24 <main+0x380>)
 8001998:	f013 fad8 	bl	8014f4c <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 800199c:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	@ 0xa34
 80019a0:	3301      	adds	r3, #1
 80019a2:	f8c7 3a34 	str.w	r3, [r7, #2612]	@ 0xa34
 80019a6:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	@ 0xa34
 80019aa:	2b09      	cmp	r3, #9
 80019ac:	d9e8      	bls.n	8001980 <main+0x2dc>
				}
				printf("\r\n");
 80019ae:	481e      	ldr	r0, [pc, #120]	@ (8001a28 <main+0x384>)
 80019b0:	f013 fb34 	bl	801501c <puts>

				// -------------------- APPLICATION HANNING & FFT --------------------

				// Création de la fenêtre de Hanning
				static float32_t hanning_window[FFT_SIZE];
				arm_hanning_f32(hanning_window, FFT_SIZE);
 80019b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b8:	481c      	ldr	r0, [pc, #112]	@ (8001a2c <main+0x388>)
 80019ba:	f000 fb1b 	bl	8001ff4 <arm_hanning_f32>

				printf("Application de la fenêtre de Hanning et calcul FFT...;\r\n");
 80019be:	481c      	ldr	r0, [pc, #112]	@ (8001a30 <main+0x38c>)
 80019c0:	f013 fb2c 	bl	801501c <puts>

				for (uint32_t idx = 0; idx < 124; idx++) {
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 3a30 	str.w	r3, [r7, #2608]	@ 0xa30
 80019ca:	e0e6      	b.n	8001b9a <main+0x4f6>
					float frame[FFT_SIZE];
					float mag[FFT_SIZE / 2 + 1]; // Magnitude des valeurs complexes
					float sum = 0.0f;
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	f607 222c 	addw	r2, r7, #2604	@ 0xa2c
 80019d4:	6013      	str	r3, [r2, #0]

					// Extraction et application de Hanning
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 3a28 	str.w	r3, [r7, #2600]	@ 0xa28
 80019dc:	e063      	b.n	8001aa6 <main+0x402>
 80019de:	bf00      	nop
 80019e0:	08017ae8 	.word	0x08017ae8
 80019e4:	c0000000 	.word	0xc0000000
 80019e8:	20020ca0 	.word	0x20020ca0
 80019ec:	c0007d00 	.word	0xc0007d00
 80019f0:	c0017700 	.word	0xc0017700
 80019f4:	08017afc 	.word	0x08017afc
 80019f8:	200306b8 	.word	0x200306b8
 80019fc:	40022000 	.word	0x40022000
 8001a00:	20000a58 	.word	0x20000a58
 8001a04:	20000a59 	.word	0x20000a59
 8001a08:	08017b1c 	.word	0x08017b1c
 8001a0c:	08017b30 	.word	0x08017b30
 8001a10:	08017b3c 	.word	0x08017b3c
 8001a14:	08017b68 	.word	0x08017b68
 8001a18:	46fffe00 	.word	0x46fffe00
 8001a1c:	08017b88 	.word	0x08017b88
 8001a20:	08017ba0 	.word	0x08017ba0
 8001a24:	08017bc4 	.word	0x08017bc4
 8001a28:	08017bcc 	.word	0x08017bcc
 8001a2c:	200306bc 	.word	0x200306bc
 8001a30:	08017bd0 	.word	0x08017bd0
						frame[i] = float_waveform[idx * frame_step + i] * hanning_window[i];
 8001a34:	2280      	movs	r2, #128	@ 0x80
 8001a36:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001a3a:	fb03 f202 	mul.w	r2, r3, r2
 8001a3e:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001a42:	4413      	add	r3, r2
 8001a44:	4ab2      	ldr	r2, [pc, #712]	@ (8001d10 <main+0x66c>)
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	ed93 7a00 	vldr	s14, [r3]
 8001a4e:	4ab1      	ldr	r2, [pc, #708]	@ (8001d14 <main+0x670>)
 8001a50:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a60:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8001a64:	f6a3 024c 	subw	r2, r3, #2124	@ 0x84c
 8001a68:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	edc3 7a00 	vstr	s15, [r3]
						sum += frame[i];
 8001a74:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8001a78:	f6a3 024c 	subw	r2, r3, #2124	@ 0x84c
 8001a7c:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	f607 232c 	addw	r3, r7, #2604	@ 0xa2c
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	f607 232c 	addw	r3, r7, #2604	@ 0xa2c
 8001a98:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001a9c:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f8c7 3a28 	str.w	r3, [r7, #2600]	@ 0xa28
 8001aa6:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001aaa:	2bff      	cmp	r3, #255	@ 0xff
 8001aac:	d9c2      	bls.n	8001a34 <main+0x390>
					}

					// Suppression du biais DC
					float mean = sum / FFT_SIZE;
 8001aae:	f607 232c 	addw	r3, r7, #2604	@ 0xa2c
 8001ab2:	ed93 7a00 	vldr	s14, [r3]
 8001ab6:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001d18 <main+0x674>
 8001aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abe:	f607 2304 	addw	r3, r7, #2564	@ 0xa04
 8001ac2:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 3a24 	str.w	r3, [r7, #2596]	@ 0xa24
 8001acc:	e01e      	b.n	8001b0c <main+0x468>
						frame[i] -= mean;
 8001ace:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8001ad2:	f6a3 024c 	subw	r2, r3, #2124	@ 0x84c
 8001ad6:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	@ 0xa24
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	ed93 7a00 	vldr	s14, [r3]
 8001ae2:	f607 2304 	addw	r3, r7, #2564	@ 0xa04
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aee:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8001af2:	f6a3 024c 	subw	r2, r3, #2124	@ 0x84c
 8001af6:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	@ 0xa24
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001b02:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	@ 0xa24
 8001b06:	3301      	adds	r3, #1
 8001b08:	f8c7 3a24 	str.w	r3, [r7, #2596]	@ 0xa24
 8001b0c:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	@ 0xa24
 8001b10:	2bff      	cmp	r3, #255	@ 0xff
 8001b12:	d9dc      	bls.n	8001ace <main+0x42a>
					}


					if (arm_rfft_fast_init_f32(&fft, FFT_SIZE) != ARM_MATH_SUCCESS) {
 8001b14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b18:	4880      	ldr	r0, [pc, #512]	@ (8001d1c <main+0x678>)
 8001b1a:	f00d ff8d 	bl	800fa38 <arm_rfft_fast_init_f32>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <main+0x48a>
						printf("Erreur : Échec de l'initialisation de la FFT !\r\n");
 8001b24:	487e      	ldr	r0, [pc, #504]	@ (8001d20 <main+0x67c>)
 8001b26:	f013 fa79 	bl	801501c <puts>
						Error_Handler();
 8001b2a:	f000 fbbc 	bl	80022a6 <Error_Handler>
					}


					// Calcul FFT
					float dst[FFT_SIZE];
					arm_rfft_fast_f32(&fft, frame, dst, 0);
 8001b2e:	f207 6204 	addw	r2, r7, #1540	@ 0x604
 8001b32:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 8001b36:	2300      	movs	r3, #0
 8001b38:	4878      	ldr	r0, [pc, #480]	@ (8001d1c <main+0x678>)
 8001b3a:	f00e f831 	bl	800fba0 <arm_rfft_fast_f32>

					// Calcul de la magnitude des valeurs complexes
					arm_cmplx_mag_f32(dst, mag, FFT_SIZE / 2 + 1);
 8001b3e:	4639      	mov	r1, r7
 8001b40:	f207 6304 	addw	r3, r7, #1540	@ 0x604
 8001b44:	2281      	movs	r2, #129	@ 0x81
 8001b46:	4618      	mov	r0, r3
 8001b48:	f00e fc8e 	bl	8010468 <arm_cmplx_mag_f32>

					// Stockage dans le spectrogramme
					for (uint32_t i = 0; i < FFT_SIZE / 2 + 1; i++) {
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 3a20 	str.w	r3, [r7, #2592]	@ 0xa20
 8001b52:	e019      	b.n	8001b88 <main+0x4e4>
						spectrogram[idx][i] = mag[i];
 8001b54:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8001b58:	f5a3 6225 	sub.w	r2, r3, #2640	@ 0xa50
 8001b5c:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	@ 0xa20
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	486f      	ldr	r0, [pc, #444]	@ (8001d24 <main+0x680>)
 8001b68:	f8d7 2a30 	ldr.w	r2, [r7, #2608]	@ 0xa30
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	01db      	lsls	r3, r3, #7
 8001b70:	4413      	add	r3, r2
 8001b72:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	@ 0xa20
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4403      	add	r3, r0
 8001b7c:	6019      	str	r1, [r3, #0]
					for (uint32_t i = 0; i < FFT_SIZE / 2 + 1; i++) {
 8001b7e:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	@ 0xa20
 8001b82:	3301      	adds	r3, #1
 8001b84:	f8c7 3a20 	str.w	r3, [r7, #2592]	@ 0xa20
 8001b88:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	@ 0xa20
 8001b8c:	2b80      	cmp	r3, #128	@ 0x80
 8001b8e:	d9e1      	bls.n	8001b54 <main+0x4b0>
				for (uint32_t idx = 0; idx < 124; idx++) {
 8001b90:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001b94:	3301      	adds	r3, #1
 8001b96:	f8c7 3a30 	str.w	r3, [r7, #2608]	@ 0xa30
 8001b9a:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001b9e:	2b7b      	cmp	r3, #123	@ 0x7b
 8001ba0:	f67f af14 	bls.w	80019cc <main+0x328>
//				}

				// -------------------- PRÉPARATION POUR L'IA --------------------

				// Mise à plat du spectrogramme dans aiInData
				for (uint32_t i = 0; i < 124; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 3a1c 	str.w	r3, [r7, #2588]	@ 0xa1c
 8001baa:	e029      	b.n	8001c00 <main+0x55c>
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3a18 	str.w	r3, [r7, #2584]	@ 0xa18
 8001bb2:	e01c      	b.n	8001bee <main+0x54a>
						aiInData[i * (FFT_SIZE / 2 + 1) + j] = spectrogram[i][j];
 8001bb4:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	@ 0xa1c
 8001bb8:	4613      	mov	r3, r2
 8001bba:	01db      	lsls	r3, r3, #7
 8001bbc:	441a      	add	r2, r3
 8001bbe:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	@ 0xa18
 8001bc2:	18d1      	adds	r1, r2, r3
 8001bc4:	4857      	ldr	r0, [pc, #348]	@ (8001d24 <main+0x680>)
 8001bc6:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	@ 0xa1c
 8001bca:	4613      	mov	r3, r2
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	4413      	add	r3, r2
 8001bd0:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	@ 0xa18
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4403      	add	r3, r0
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4852      	ldr	r0, [pc, #328]	@ (8001d28 <main+0x684>)
 8001bde:	008b      	lsls	r3, r1, #2
 8001be0:	4403      	add	r3, r0
 8001be2:	601a      	str	r2, [r3, #0]
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001be4:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	@ 0xa18
 8001be8:	3301      	adds	r3, #1
 8001bea:	f8c7 3a18 	str.w	r3, [r7, #2584]	@ 0xa18
 8001bee:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	@ 0xa18
 8001bf2:	2b80      	cmp	r3, #128	@ 0x80
 8001bf4:	d9de      	bls.n	8001bb4 <main+0x510>
				for (uint32_t i = 0; i < 124; i++) {
 8001bf6:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	@ 0xa1c
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f8c7 3a1c 	str.w	r3, [r7, #2588]	@ 0xa1c
 8001c00:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	@ 0xa1c
 8001c04:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c06:	d9d1      	bls.n	8001bac <main+0x508>
					}
				}

				// Vérification avant passage au modèle
				printf("Premières valeurs envoyées au modèle : ");
 8001c08:	4848      	ldr	r0, [pc, #288]	@ (8001d2c <main+0x688>)
 8001c0a:	f013 f99f 	bl	8014f4c <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 8001c14:	e012      	b.n	8001c3c <main+0x598>
					printf("%.6f ", aiInData[i]);
 8001c16:	4a44      	ldr	r2, [pc, #272]	@ (8001d28 <main+0x684>)
 8001c18:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fd10 	bl	8000648 <__aeabi_f2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4840      	ldr	r0, [pc, #256]	@ (8001d30 <main+0x68c>)
 8001c2e:	f013 f98d 	bl	8014f4c <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001c32:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8001c36:	3301      	adds	r3, #1
 8001c38:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 8001c3c:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d9e8      	bls.n	8001c16 <main+0x572>
				}
				printf("\r\n");
 8001c44:	483b      	ldr	r0, [pc, #236]	@ (8001d34 <main+0x690>)
 8001c46:	f013 f9e9 	bl	801501c <puts>

				// -------------------- INFÉRENCE AVEC IA --------------------
				printf("Exécution de l'inférence...\r\n");
 8001c4a:	483b      	ldr	r0, [pc, #236]	@ (8001d38 <main+0x694>)
 8001c4c:	f013 f9e6 	bl	801501c <puts>
				AI_Run(aiInData, aiOutData);
 8001c50:	493a      	ldr	r1, [pc, #232]	@ (8001d3c <main+0x698>)
 8001c52:	4835      	ldr	r0, [pc, #212]	@ (8001d28 <main+0x684>)
 8001c54:	f000 fa50 	bl	80020f8 <AI_Run>

				// -------------------- SOFTMAX ET PRÉDICTION --------------------
				softmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001c58:	2106      	movs	r1, #6
 8001c5a:	4838      	ldr	r0, [pc, #224]	@ (8001d3c <main+0x698>)
 8001c5c:	f000 fab4 	bl	80021c8 <softmax>

				// Vérifier la somme des probabilités
				float sum_softmax = 0;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	f507 6221 	add.w	r2, r7, #2576	@ 0xa10
 8001c68:	6013      	str	r3, [r2, #0]
				for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 3a0c 	str.w	r3, [r7, #2572]	@ 0xa0c
 8001c70:	e015      	b.n	8001c9e <main+0x5fa>
					sum_softmax += aiOutData[i];
 8001c72:	4a32      	ldr	r2, [pc, #200]	@ (8001d3c <main+0x698>)
 8001c74:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8c:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 8001c90:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001c94:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	@ 0xa0c
 8001c9e:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d9e5      	bls.n	8001c72 <main+0x5ce>
				}
				printf("Somme des probabilités Softmax : %f\r\n", sum_softmax);
 8001ca6:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	f7fe fccc 	bl	8000648 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4822      	ldr	r0, [pc, #136]	@ (8001d40 <main+0x69c>)
 8001cb6:	f013 f949 	bl	8014f4c <iprintf>

				// Trouver la classe avec la probabilité max
				uint32_t class_idx = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001cba:	2106      	movs	r1, #6
 8001cbc:	481f      	ldr	r0, [pc, #124]	@ (8001d3c <main+0x698>)
 8001cbe:	f000 fa53 	bl	8002168 <argmax>
 8001cc2:	f8c7 0a08 	str.w	r0, [r7, #2568]	@ 0xa08
				printf("Mot détecté : %s (Confiance : %.2f%%)\r\n", activities[class_idx], aiOutData[class_idx] * 100);
 8001cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d44 <main+0x6a0>)
 8001cc8:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	@ 0xa08
 8001ccc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d3c <main+0x698>)
 8001cd2:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	@ 0xa08
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001d48 <main+0x6a4>
 8001ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce6:	ee17 0a90 	vmov	r0, s15
 8001cea:	f7fe fcad 	bl	8000648 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	4815      	ldr	r0, [pc, #84]	@ (8001d4c <main+0x6a8>)
 8001cf6:	f013 f929 	bl	8014f4c <iprintf>
        }

        HAL_Delay(100);  // Small delay for stability
 8001cfa:	2064      	movs	r0, #100	@ 0x64
 8001cfc:	f003 fa1a 	bl	8005134 <HAL_Delay>
    {
 8001d00:	e50d      	b.n	800171e <main+0x7a>
					return;
 8001d02:	bf00      	nop
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	f507 6725 	add.w	r7, r7, #2640	@ 0xa50
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	c0007d00 	.word	0xc0007d00
 8001d14:	200306bc 	.word	0x200306bc
 8001d18:	43800000 	.word	0x43800000
 8001d1c:	200306a0 	.word	0x200306a0
 8001d20:	08017c0c 	.word	0x08017c0c
 8001d24:	c0017700 	.word	0xc0017700
 8001d28:	20000c60 	.word	0x20000c60
 8001d2c:	08017c40 	.word	0x08017c40
 8001d30:	08017bc4 	.word	0x08017bc4
 8001d34:	08017bcc 	.word	0x08017bcc
 8001d38:	08017c6c 	.word	0x08017c6c
 8001d3c:	20010650 	.word	0x20010650
 8001d40:	08017c8c 	.word	0x08017c8c
 8001d44:	20000000 	.word	0x20000000
 8001d48:	42c80000 	.word	0x42c80000
 8001d4c:	08017cb4 	.word	0x08017cb4

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b094      	sub	sp, #80	@ 0x50
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	2230      	movs	r2, #48	@ 0x30
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f013 fa3c 	bl	80151dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <SystemClock_Config+0xd0>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	4a29      	ldr	r2, [pc, #164]	@ (8001e20 <SystemClock_Config+0xd0>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d80:	4b27      	ldr	r3, [pc, #156]	@ (8001e20 <SystemClock_Config+0xd0>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8c:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <SystemClock_Config+0xd4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a24      	ldr	r2, [pc, #144]	@ (8001e24 <SystemClock_Config+0xd4>)
 8001d92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <SystemClock_Config+0xd4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da4:	2302      	movs	r3, #2
 8001da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da8:	2301      	movs	r3, #1
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dac:	2310      	movs	r3, #16
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db0:	2302      	movs	r3, #2
 8001db2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001db4:	2300      	movs	r3, #0
 8001db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001db8:	2308      	movs	r3, #8
 8001dba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001dbc:	23c8      	movs	r3, #200	@ 0xc8
 8001dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f005 f997 	bl	8007100 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001dd8:	f000 fa65 	bl	80022a6 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ddc:	f005 f940 	bl	8007060 <HAL_PWREx_EnableOverDrive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001de6:	f000 fa5e 	bl	80022a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dea:	230f      	movs	r3, #15
 8001dec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dee:	2302      	movs	r3, #2
 8001df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	2106      	movs	r1, #6
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f005 fc1d 	bl	8007648 <HAL_RCC_ClockConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001e14:	f000 fa47 	bl	80022a6 <Error_Handler>
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3750      	adds	r7, #80	@ 0x50
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000

08001e28 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8001e30:	1d39      	adds	r1, r7, #4
 8001e32:	2364      	movs	r3, #100	@ 0x64
 8001e34:	2201      	movs	r2, #1
 8001e36:	4804      	ldr	r0, [pc, #16]	@ (8001e48 <__io_putchar+0x20>)
 8001e38:	f008 f9d1 	bl	800a1de <HAL_UART_Transmit>
return ch;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20030cec 	.word	0x20030cec

08001e4c <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e5c:	d10a      	bne.n	8001e74 <HAL_GPIO_EXTI_Callback+0x28>
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <HAL_GPIO_EXTI_Callback+0x30>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 8001e68:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <HAL_GPIO_EXTI_Callback+0x30>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 8001e6e:	4804      	ldr	r0, [pc, #16]	@ (8001e80 <HAL_GPIO_EXTI_Callback+0x34>)
 8001e70:	f013 f8d4 	bl	801501c <puts>
      }
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200306b8 	.word	0x200306b8
 8001e80:	08017ce0 	.word	0x08017ce0

08001e84 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 8001e88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e8c:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <check_button_release+0x20>)
 8001e8e:	f004 faa5 	bl	80063dc <HAL_GPIO_ReadPin>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <check_button_release+0x1a>
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <check_button_release+0x24>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40022000 	.word	0x40022000
 8001ea8:	200306b8 	.word	0x200306b8

08001eac <SDCard_InitAndFormat>:
/* ======================================================== */


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	491e      	ldr	r1, [pc, #120]	@ (8001f30 <SDCard_InitAndFormat+0x84>)
 8001eb6:	481f      	ldr	r0, [pc, #124]	@ (8001f34 <SDCard_InitAndFormat+0x88>)
 8001eb8:	f00b ff76 	bl	800dda8 <f_mount>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481b      	ldr	r0, [pc, #108]	@ (8001f38 <SDCard_InitAndFormat+0x8c>)
 8001ecc:	f013 f83e 	bl	8014f4c <iprintf>
        Error_Handler();
 8001ed0:	f000 f9e9 	bl	80022a6 <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 8001ed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <SDCard_InitAndFormat+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	2107      	movs	r1, #7
 8001ee0:	4813      	ldr	r0, [pc, #76]	@ (8001f30 <SDCard_InitAndFormat+0x84>)
 8001ee2:	f00c fec7 	bl	800ec74 <f_mkfs>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4812      	ldr	r0, [pc, #72]	@ (8001f40 <SDCard_InitAndFormat+0x94>)
 8001ef6:	f013 f829 	bl	8014f4c <iprintf>
        Error_Handler();
 8001efa:	f000 f9d4 	bl	80022a6 <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	490b      	ldr	r1, [pc, #44]	@ (8001f30 <SDCard_InitAndFormat+0x84>)
 8001f02:	2000      	movs	r0, #0
 8001f04:	f00b ff50 	bl	800dda8 <f_mount>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	4619      	mov	r1, r3
 8001f16:	480b      	ldr	r0, [pc, #44]	@ (8001f44 <SDCard_InitAndFormat+0x98>)
 8001f18:	f013 f818 	bl	8014f4c <iprintf>
        Error_Handler();
 8001f1c:	f000 f9c3 	bl	80022a6 <Error_Handler>
    }

    printf("SD card initialized and formatted successfully.\r\n");
 8001f20:	4809      	ldr	r0, [pc, #36]	@ (8001f48 <SDCard_InitAndFormat+0x9c>)
 8001f22:	f013 f87b 	bl	801501c <puts>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20035afc 	.word	0x20035afc
 8001f34:	20035b00 	.word	0x20035b00
 8001f38:	08017cf4 	.word	0x08017cf4
 8001f3c:	20000a5c 	.word	0x20000a5c
 8001f40:	08017d24 	.word	0x08017d24
 8001f44:	08017d54 	.word	0x08017d54
 8001f48:	08017d94 	.word	0x08017d94

08001f4c <read_wav_file>:
/* ======================================================== */

int read_wav_file(const char *filename, int16_t *buffer) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001f58:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001f5c:	6018      	str	r0, [r3, #0]
 8001f5e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001f62:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001f66:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bytes_read;

    FRESULT result = f_open(&file, filename, FA_READ);
 8001f68:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001f6c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001f70:	f107 000c 	add.w	r0, r7, #12
 8001f74:	2201      	movs	r2, #1
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	f00b ff5c 	bl	800de34 <f_open>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 8001f82:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <read_wav_file+0x44>
        return -1;  // File open error
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e02a      	b.n	8001fe6 <read_wav_file+0x9a>
    }

    // Skip WAV header (44 bytes)
    f_lseek(&file, 44);
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	212c      	movs	r1, #44	@ 0x2c
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00c fc62 	bl	800e860 <f_lseek>

    // Read audio samples into the buffer
    result = f_read(&file, buffer, (BUFFER_SIZE*2) * sizeof(int16_t), &bytes_read);
 8001f9c:	f107 0308 	add.w	r3, r7, #8
 8001fa0:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001fa4:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001fa8:	f107 000c 	add.w	r0, r7, #12
 8001fac:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8001fb0:	6809      	ldr	r1, [r1, #0]
 8001fb2:	f00c f8f9 	bl	800e1a8 <f_read>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 8001fbc:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <read_wav_file+0x88>
        f_close(&file);
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00c fc1f 	bl	800e80c <f_close>
        return -1;  // Read error
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	e008      	b.n	8001fe6 <read_wav_file+0x9a>
    }

    f_close(&file);
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00c fc17 	bl	800e80c <f_close>
    printf("file successfully read! \r\n");
 8001fde:	4804      	ldr	r0, [pc, #16]	@ (8001ff0 <read_wav_file+0xa4>)
 8001fe0:	f013 f81c 	bl	801501c <puts>
    return 0;  // Success
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	08017dc8 	.word	0x08017dc8

08001ff4 <arm_hanning_f32>:


void arm_hanning_f32(float32_t * pDst, uint32_t blockSize) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002008:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800200c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002010:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e027      	b.n	800206a <arm_hanning_f32+0x76>
   {
     w = PI * i * k;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002024:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800207c <arm_hanning_f32+0x88>
 8002028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002034:	edc7 7a03 	vstr	s15, [r7, #12]
     w = 0.5f * (1.0f - cosf (w));
 8002038:	ed97 0a03 	vldr	s0, [r7, #12]
 800203c:	f014 fefa 	bl	8016e34 <cosf>
 8002040:	eef0 7a40 	vmov.f32	s15, s0
 8002044:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002054:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	601a      	str	r2, [r3, #0]
   for(uint32_t i=0;i<blockSize;i++)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3d3      	bcc.n	800201a <arm_hanning_f32+0x26>
   }
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40490fdb 	.word	0x40490fdb

08002080 <AI_Init>:

static void AI_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 8002086:	4b17      	ldr	r3, [pc, #92]	@ (80020e4 <AI_Init+0x64>)
 8002088:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800208a:	463b      	mov	r3, r7
 800208c:	2200      	movs	r2, #0
 800208e:	4619      	mov	r1, r3
 8002090:	4815      	ldr	r0, [pc, #84]	@ (80020e8 <AI_Init+0x68>)
 8002092:	f00d fbab 	bl	800f7ec <ai_network_create_and_init>
 8002096:	4603      	mov	r3, r0
 8002098:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 800209a:	793b      	ldrb	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80020a0:	793b      	ldrb	r3, [r7, #4]
 80020a2:	4619      	mov	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80020aa:	461a      	mov	r2, r3
 80020ac:	480f      	ldr	r0, [pc, #60]	@ (80020ec <AI_Init+0x6c>)
 80020ae:	f012 ff4d 	bl	8014f4c <iprintf>
    Error_Handler();
 80020b2:	f000 f8f8 	bl	80022a6 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <AI_Init+0x68>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f00d fc13 	bl	800f8e8 <ai_network_inputs_get>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <AI_Init+0x70>)
 80020c6:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80020c8:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <AI_Init+0x68>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f00d fc24 	bl	800f91c <ai_network_outputs_get>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <AI_Init+0x74>)
 80020d8:	6013      	str	r3, [r2, #0]
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20010668 	.word	0x20010668
 80020e8:	20000c5c 	.word	0x20000c5c
 80020ec:	08017de4 	.word	0x08017de4
 80020f0:	20020c98 	.word	0x20020c98
 80020f4:	20020c9c 	.word	0x20020c9c

080020f8 <AI_Run>:


static void AI_Run(float *pIn, float *pOut)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <AI_Run+0x60>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <AI_Run+0x64>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 8002112:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <AI_Run+0x68>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a10      	ldr	r2, [pc, #64]	@ (8002158 <AI_Run+0x60>)
 8002118:	6811      	ldr	r1, [r2, #0]
 800211a:	4a10      	ldr	r2, [pc, #64]	@ (800215c <AI_Run+0x64>)
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f00d fc52 	bl	800f9c8 <ai_network_run>
 8002124:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d011      	beq.n	8002150 <AI_Run+0x58>
    err = ai_network_get_error(network);
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <AI_Run+0x68>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f00d fb39 	bl	800f7a8 <ai_network_get_error>
 8002136:	4603      	mov	r3, r0
 8002138:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 800213a:	7a3b      	ldrb	r3, [r7, #8]
 800213c:	4619      	mov	r1, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8002144:	461a      	mov	r2, r3
 8002146:	4807      	ldr	r0, [pc, #28]	@ (8002164 <AI_Run+0x6c>)
 8002148:	f012 ff00 	bl	8014f4c <iprintf>
    Error_Handler();
 800214c:	f000 f8ab 	bl	80022a6 <Error_Handler>
  }
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20020c98 	.word	0x20020c98
 800215c:	20020c9c 	.word	0x20020c9c
 8002160:	20000c5c 	.word	0x20000c5c
 8002164:	08017e10 	.word	0x08017e10

08002168 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 800217c:	2301      	movs	r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e017      	b.n	80021b2 <argmax+0x4a>
    if (values[i] > max_value) {
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	d507      	bpl.n	80021ac <argmax+0x44>
      max_value = values[i];
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	617b      	str	r3, [r7, #20]
      max_index = i;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3301      	adds	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d3e3      	bcc.n	8002182 <argmax+0x1a>
    }
  }
  return max_index;
 80021ba:	693b      	ldr	r3, [r7, #16]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <softmax>:

void softmax(float *values, uint32_t len) {
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b089      	sub	sp, #36	@ 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
    // Find the maximum value in the logits for numerical stability
    float max_val = values[0];
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 1; i < len; i++) {
 80021d8:	2301      	movs	r3, #1
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	e015      	b.n	800220a <softmax+0x42>
        if (values[i] > max_val) {
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80021ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f6:	d505      	bpl.n	8002204 <softmax+0x3c>
            max_val = values[i];
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 1; i < len; i++) {
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	3301      	adds	r3, #1
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3e5      	bcc.n	80021de <softmax+0x16>
        }
    }

    // Subtract the max value from all logits to prevent overflow/underflow
    for (uint32_t i = 0; i < len; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e012      	b.n	800223e <softmax+0x76>
        values[i] -= max_val;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002234:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < len; i++) {
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3301      	adds	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3e8      	bcc.n	8002218 <softmax+0x50>
    }

    // Compute the sum of exponentiated values
    float sum = 0.0f;
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < len; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e020      	b.n	8002294 <softmax+0xcc>
        values[i] = expf(values[i]);  // Exponentiate each value
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	18d4      	adds	r4, r2, r3
 8002266:	eeb0 0a67 	vmov.f32	s0, s15
 800226a:	f014 fd8f 	bl	8016d8c <expf>
 800226e:	eef0 7a40 	vmov.f32	s15, s0
 8002272:	edc4 7a00 	vstr	s15, [r4]
        sum += values[i];             // Sum the exponentiated values
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ed97 7a04 	vldr	s14, [r7, #16]
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	edc7 7a04 	vstr	s15, [r7, #16]
    for (uint32_t i = 0; i < len; i++) {
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3301      	adds	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d3da      	bcc.n	8002252 <softmax+0x8a>
    }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}

080022a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022aa:	b672      	cpsid	i
}
 80022ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ae:	bf00      	nop
 80022b0:	e7fd      	b.n	80022ae <Error_Handler+0x8>
	...

080022b4 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022ba:	4a28      	ldr	r2, [pc, #160]	@ (800235c <MX_SAI1_Init+0xa8>)
 80022bc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80022be:	4b26      	ldr	r3, [pc, #152]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 80022c4:	4b24      	ldr	r3, [pc, #144]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 80022ca:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022cc:	2280      	movs	r2, #128	@ 0x80
 80022ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80022d0:	4b21      	ldr	r3, [pc, #132]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80022d6:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80022e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80022ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80022f4:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022f6:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80022fa:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80022fc:	4b16      	ldr	r3, [pc, #88]	@ (8002358 <MX_SAI1_Init+0xa4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002302:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <MX_SAI1_Init+0xa4>)
 8002304:	2200      	movs	r2, #0
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002308:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <MX_SAI1_Init+0xa4>)
 800230a:	2200      	movs	r2, #0
 800230c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 800230e:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <MX_SAI1_Init+0xa4>)
 8002310:	2210      	movs	r2, #16
 8002312:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002314:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <MX_SAI1_Init+0xa4>)
 8002316:	2201      	movs	r2, #1
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800231a:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <MX_SAI1_Init+0xa4>)
 800231c:	2200      	movs	r2, #0
 800231e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002320:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <MX_SAI1_Init+0xa4>)
 8002322:	2200      	movs	r2, #0
 8002324:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002326:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <MX_SAI1_Init+0xa4>)
 8002328:	2200      	movs	r2, #0
 800232a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800232c:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <MX_SAI1_Init+0xa4>)
 800232e:	2200      	movs	r2, #0
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <MX_SAI1_Init+0xa4>)
 8002334:	2200      	movs	r2, #0
 8002336:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002338:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <MX_SAI1_Init+0xa4>)
 800233a:	2201      	movs	r2, #1
 800233c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <MX_SAI1_Init+0xa4>)
 8002340:	2200      	movs	r2, #0
 8002342:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002344:	4804      	ldr	r0, [pc, #16]	@ (8002358 <MX_SAI1_Init+0xa4>)
 8002346:	f006 f9a1 	bl	800868c <HAL_SAI_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8002350:	f7ff ffa9 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20030abc 	.word	0x20030abc
 800235c:	40015804 	.word	0x40015804

08002360 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0aa      	sub	sp, #168	@ 0xa8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2284      	movs	r2, #132	@ 0x84
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f012 ff33 	bl	80151dc <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a41      	ldr	r2, [pc, #260]	@ (8002480 <HAL_SAI_MspInit+0x120>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d17b      	bne.n	8002478 <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002380:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002384:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002386:	2332      	movs	r3, #50	@ 0x32
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800238a:	2302      	movs	r3, #2
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800238e:	2302      	movs	r3, #2
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002392:	2300      	movs	r3, #0
 8002394:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800239a:	2300      	movs	r3, #0
 800239c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800239e:	2300      	movs	r3, #0
 80023a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4618      	mov	r0, r3
 80023a8:	f005 fb34 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 80023b2:	f7ff ff78 	bl	80022a6 <Error_Handler>
    }

    if (SAI1_client == 0)
 80023b6:	4b33      	ldr	r3, [pc, #204]	@ (8002484 <HAL_SAI_MspInit+0x124>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10b      	bne.n	80023d6 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80023be:	4b32      	ldr	r3, [pc, #200]	@ (8002488 <HAL_SAI_MspInit+0x128>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	4a31      	ldr	r2, [pc, #196]	@ (8002488 <HAL_SAI_MspInit+0x128>)
 80023c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002488 <HAL_SAI_MspInit+0x128>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80023d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002484 <HAL_SAI_MspInit+0x124>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	4a29      	ldr	r2, [pc, #164]	@ (8002484 <HAL_SAI_MspInit+0x124>)
 80023de:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80023e0:	2370      	movs	r3, #112	@ 0x70
 80023e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80023f8:	2306      	movs	r3, #6
 80023fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002402:	4619      	mov	r1, r3
 8002404:	4821      	ldr	r0, [pc, #132]	@ (800248c <HAL_SAI_MspInit+0x12c>)
 8002406:	f003 fd31 	bl	8005e6c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 800240a:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 800240c:	4a21      	ldr	r2, [pc, #132]	@ (8002494 <HAL_SAI_MspInit+0x134>)
 800240e:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8002410:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002412:	2200      	movs	r2, #0
 8002414:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002416:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800241c:	4b1c      	ldr	r3, [pc, #112]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002422:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002424:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002428:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800242a:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 800242c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002430:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002432:	4b17      	ldr	r3, [pc, #92]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002438:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 800243c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002440:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002444:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002448:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800244a:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002450:	480f      	ldr	r0, [pc, #60]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002452:	f003 f897 	bl	8005584 <HAL_DMA_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 800245c:	f7ff ff23 	bl	80022a6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a0b      	ldr	r2, [pc, #44]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002464:	671a      	str	r2, [r3, #112]	@ 0x70
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a08      	ldr	r2, [pc, #32]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002470:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002472:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_SAI_MspInit+0x130>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8002478:	bf00      	nop
 800247a:	37a8      	adds	r7, #168	@ 0xa8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40015804 	.word	0x40015804
 8002484:	20030ba0 	.word	0x20030ba0
 8002488:	40023800 	.word	0x40023800
 800248c:	40021000 	.word	0x40021000
 8002490:	20030b40 	.word	0x20030b40
 8002494:	40026428 	.word	0x40026428

08002498 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a11      	ldr	r2, [pc, #68]	@ (80024ec <HAL_SAI_MspDeInit+0x54>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d11c      	bne.n	80024e4 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 80024aa:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_SAI_MspDeInit+0x58>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	4a0f      	ldr	r2, [pc, #60]	@ (80024f0 <HAL_SAI_MspDeInit+0x58>)
 80024b2:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 80024b4:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <HAL_SAI_MspDeInit+0x58>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 80024bc:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <HAL_SAI_MspDeInit+0x5c>)
 80024be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c0:	4a0c      	ldr	r2, [pc, #48]	@ (80024f4 <HAL_SAI_MspDeInit+0x5c>)
 80024c2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80024c6:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80024c8:	2170      	movs	r1, #112	@ 0x70
 80024ca:	480b      	ldr	r0, [pc, #44]	@ (80024f8 <HAL_SAI_MspDeInit+0x60>)
 80024cc:	f003 fe7a 	bl	80061c4 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 f903 	bl	80056e0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 f8fe 	bl	80056e0 <HAL_DMA_DeInit>
    }
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40015804 	.word	0x40015804
 80024f0:	20030ba0 	.word	0x20030ba0
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40021000 	.word	0x40021000

080024fc <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <MX_SDMMC1_SD_Init+0x38>)
 8002502:	4a0d      	ldr	r2, [pc, #52]	@ (8002538 <MX_SDMMC1_SD_Init+0x3c>)
 8002504:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002506:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <MX_SDMMC1_SD_Init+0x38>)
 8002508:	2200      	movs	r2, #0
 800250a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800250c:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <MX_SDMMC1_SD_Init+0x38>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002512:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <MX_SDMMC1_SD_Init+0x38>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <MX_SDMMC1_SD_Init+0x38>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <MX_SDMMC1_SD_Init+0x38>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <MX_SDMMC1_SD_Init+0x38>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	20030ba4 	.word	0x20030ba4
 8002538:	40012c00 	.word	0x40012c00

0800253c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0ac      	sub	sp, #176	@ 0xb0
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002554:	f107 0318 	add.w	r3, r7, #24
 8002558:	2284      	movs	r2, #132	@ 0x84
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f012 fe3d 	bl	80151dc <memset>
  if(sdHandle->Instance==SDMMC1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a74      	ldr	r2, [pc, #464]	@ (8002738 <HAL_SD_MspInit+0x1fc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	f040 80e0 	bne.w	800272e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800256e:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8002572:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002580:	f107 0318 	add.w	r3, r7, #24
 8002584:	4618      	mov	r0, r3
 8002586:	f005 fa45 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8002590:	f7ff fe89 	bl	80022a6 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002594:	4b69      	ldr	r3, [pc, #420]	@ (800273c <HAL_SD_MspInit+0x200>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002598:	4a68      	ldr	r2, [pc, #416]	@ (800273c <HAL_SD_MspInit+0x200>)
 800259a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800259e:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a0:	4b66      	ldr	r3, [pc, #408]	@ (800273c <HAL_SD_MspInit+0x200>)
 80025a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ac:	4b63      	ldr	r3, [pc, #396]	@ (800273c <HAL_SD_MspInit+0x200>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	4a62      	ldr	r2, [pc, #392]	@ (800273c <HAL_SD_MspInit+0x200>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b8:	4b60      	ldr	r3, [pc, #384]	@ (800273c <HAL_SD_MspInit+0x200>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c4:	4b5d      	ldr	r3, [pc, #372]	@ (800273c <HAL_SD_MspInit+0x200>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	4a5c      	ldr	r2, [pc, #368]	@ (800273c <HAL_SD_MspInit+0x200>)
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d0:	4b5a      	ldr	r3, [pc, #360]	@ (800273c <HAL_SD_MspInit+0x200>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80025dc:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80025e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025f6:	230c      	movs	r3, #12
 80025f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002600:	4619      	mov	r1, r3
 8002602:	484f      	ldr	r0, [pc, #316]	@ (8002740 <HAL_SD_MspInit+0x204>)
 8002604:	f003 fc32 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002608:	2304      	movs	r3, #4
 800260a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261a:	2303      	movs	r3, #3
 800261c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002620:	230c      	movs	r3, #12
 8002622:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002626:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800262a:	4619      	mov	r1, r3
 800262c:	4845      	ldr	r0, [pc, #276]	@ (8002744 <HAL_SD_MspInit+0x208>)
 800262e:	f003 fc1d 	bl	8005e6c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002632:	4b45      	ldr	r3, [pc, #276]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 8002634:	4a45      	ldr	r2, [pc, #276]	@ (800274c <HAL_SD_MspInit+0x210>)
 8002636:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002638:	4b43      	ldr	r3, [pc, #268]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 800263a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800263e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002640:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002646:	4b40      	ldr	r3, [pc, #256]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 8002648:	2200      	movs	r2, #0
 800264a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800264c:	4b3e      	ldr	r3, [pc, #248]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 800264e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002652:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002654:	4b3c      	ldr	r3, [pc, #240]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 8002656:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800265a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800265c:	4b3a      	ldr	r3, [pc, #232]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 800265e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002662:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8002664:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 8002666:	2220      	movs	r2, #32
 8002668:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800266a:	4b37      	ldr	r3, [pc, #220]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002670:	4b35      	ldr	r3, [pc, #212]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 8002672:	2204      	movs	r2, #4
 8002674:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002676:	4b34      	ldr	r3, [pc, #208]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 8002678:	2203      	movs	r2, #3
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800267c:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 800267e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002684:	4b30      	ldr	r3, [pc, #192]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 8002686:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800268c:	482e      	ldr	r0, [pc, #184]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 800268e:	f002 ff79 	bl	8005584 <HAL_DMA_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8002698:	f7ff fe05 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a2a      	ldr	r2, [pc, #168]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026a2:	4a29      	ldr	r2, [pc, #164]	@ (8002748 <HAL_SD_MspInit+0x20c>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80026a8:	4b29      	ldr	r3, [pc, #164]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002754 <HAL_SD_MspInit+0x218>)
 80026ac:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80026ae:	4b28      	ldr	r3, [pc, #160]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026b0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026b4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b6:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026b8:	2240      	movs	r2, #64	@ 0x40
 80026ba:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026bc:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026c2:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026c8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026ca:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026d0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026d8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80026da:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026dc:	2220      	movs	r2, #32
 80026de:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026e8:	2204      	movs	r2, #4
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026ec:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026ee:	2203      	movs	r2, #3
 80026f0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80026f2:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_SD_MspInit+0x214>)
 80026fc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002702:	4813      	ldr	r0, [pc, #76]	@ (8002750 <HAL_SD_MspInit+0x214>)
 8002704:	f002 ff3e 	bl	8005584 <HAL_DMA_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800270e:	f7ff fdca 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a0e      	ldr	r2, [pc, #56]	@ (8002750 <HAL_SD_MspInit+0x214>)
 8002716:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002718:	4a0d      	ldr	r2, [pc, #52]	@ (8002750 <HAL_SD_MspInit+0x214>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	2101      	movs	r1, #1
 8002722:	2031      	movs	r0, #49	@ 0x31
 8002724:	f002 fe05 	bl	8005332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002728:	2031      	movs	r0, #49	@ 0x31
 800272a:	f002 fe1e 	bl	800536a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800272e:	bf00      	nop
 8002730:	37b0      	adds	r7, #176	@ 0xb0
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40023800 	.word	0x40023800
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	20030c28 	.word	0x20030c28
 800274c:	40026458 	.word	0x40026458
 8002750:	20030c88 	.word	0x20030c88
 8002754:	400264a0 	.word	0x400264a0

08002758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_MspInit+0x44>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	4a0e      	ldr	r2, [pc, #56]	@ (800279c <HAL_MspInit+0x44>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002768:	6413      	str	r3, [r2, #64]	@ 0x40
 800276a:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <HAL_MspInit+0x44>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_MspInit+0x44>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	4a08      	ldr	r2, [pc, #32]	@ (800279c <HAL_MspInit+0x44>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002780:	6453      	str	r3, [r2, #68]	@ 0x44
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_MspInit+0x44>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800

080027a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <NMI_Handler+0x4>

080027a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <HardFault_Handler+0x4>

080027b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <MemManage_Handler+0x4>

080027b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <BusFault_Handler+0x4>

080027c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <UsageFault_Handler+0x4>

080027c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f6:	f002 fc7d 	bl	80050f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}

080027fe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8002802:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002806:	f003 fe35 	bl	8006474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <SDMMC1_IRQHandler+0x10>)
 8002816:	f006 fd5b 	bl	80092d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20030ba4 	.word	0x20030ba4

08002824 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002828:	4802      	ldr	r0, [pc, #8]	@ (8002834 <DMA2_Stream1_IRQHandler+0x10>)
 800282a:	f003 f8a9 	bl	8005980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20030b40 	.word	0x20030b40

08002838 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <DMA2_Stream3_IRQHandler+0x10>)
 800283e:	f003 f89f 	bl	8005980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20030c28 	.word	0x20030c28

0800284c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <DMA2_Stream6_IRQHandler+0x10>)
 8002852:	f003 f895 	bl	8005980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20030c88 	.word	0x20030c88

08002860 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002864:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <DMA2_Stream7_IRQHandler+0x14>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4618      	mov	r0, r3
 800286a:	f003 f889 	bl	8005980 <HAL_DMA_IRQHandler>
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20030e58 	.word	0x20030e58

08002878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return 1;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_kill>:

int _kill(int pid, int sig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002892:	f012 fd05 	bl	80152a0 <__errno>
 8002896:	4603      	mov	r3, r0
 8002898:	2216      	movs	r2, #22
 800289a:	601a      	str	r2, [r3, #0]
  return -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_exit>:

void _exit (int status)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ffe7 	bl	8002888 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028ba:	bf00      	nop
 80028bc:	e7fd      	b.n	80028ba <_exit+0x12>

080028be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e00a      	b.n	80028e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d0:	f3af 8000 	nop.w
 80028d4:	4601      	mov	r1, r0
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	60ba      	str	r2, [r7, #8]
 80028dc:	b2ca      	uxtb	r2, r1
 80028de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	dbf0      	blt.n	80028d0 <_read+0x12>
  }

  return len;
 80028ee:	687b      	ldr	r3, [r7, #4]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	e009      	b.n	800291e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	60ba      	str	r2, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fa88 	bl	8001e28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3301      	adds	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	429a      	cmp	r2, r3
 8002924:	dbf1      	blt.n	800290a <_write+0x12>
  }
  return len;
 8002926:	687b      	ldr	r3, [r7, #4]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_close>:

int _close(int file)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002958:	605a      	str	r2, [r3, #4]
  return 0;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_isatty>:

int _isatty(int file)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002970:	2301      	movs	r3, #1
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a0:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <_sbrk+0x5c>)
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <_sbrk+0x60>)
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ac:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <_sbrk+0x64>)
 80029b6:	4a12      	ldr	r2, [pc, #72]	@ (8002a00 <_sbrk+0x68>)
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ba:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d207      	bcs.n	80029d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c8:	f012 fc6a 	bl	80152a0 <__errno>
 80029cc:	4603      	mov	r3, r0
 80029ce:	220c      	movs	r2, #12
 80029d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e009      	b.n	80029ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029de:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	4a05      	ldr	r2, [pc, #20]	@ (80029fc <_sbrk+0x64>)
 80029e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20050000 	.word	0x20050000
 80029f8:	00002000 	.word	0x00002000
 80029fc:	20030ce8 	.word	0x20030ce8
 8002a00:	20035f60 	.word	0x20035f60

08002a04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <SystemInit+0x20>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	4a05      	ldr	r2, [pc, #20]	@ (8002a24 <SystemInit+0x20>)
 8002a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a2e:	4a15      	ldr	r2, [pc, #84]	@ (8002a84 <MX_USART1_UART_Init+0x5c>)
 8002a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a32:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a40:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a4e:	220c      	movs	r2, #12
 8002a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a52:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a58:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a6a:	4805      	ldr	r0, [pc, #20]	@ (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a6c:	f007 fb69 	bl	800a142 <HAL_UART_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a76:	f7ff fc16 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20030cec 	.word	0x20030cec
 8002a84:	40011000 	.word	0x40011000

08002a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b0ac      	sub	sp, #176	@ 0xb0
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aa0:	f107 0318 	add.w	r3, r7, #24
 8002aa4:	2284      	movs	r2, #132	@ 0x84
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f012 fb97 	bl	80151dc <memset>
  if(uartHandle->Instance==USART1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a32      	ldr	r2, [pc, #200]	@ (8002b7c <HAL_UART_MspInit+0xf4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d15c      	bne.n	8002b72 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ab8:	2340      	movs	r3, #64	@ 0x40
 8002aba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002abc:	2300      	movs	r3, #0
 8002abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac0:	f107 0318 	add.w	r3, r7, #24
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 ffa5 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ad0:	f7ff fbe9 	bl	80022a6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b80 <HAL_UART_MspInit+0xf8>)
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad8:	4a29      	ldr	r2, [pc, #164]	@ (8002b80 <HAL_UART_MspInit+0xf8>)
 8002ada:	f043 0310 	orr.w	r3, r3, #16
 8002ade:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae0:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <HAL_UART_MspInit+0xf8>)
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aec:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <HAL_UART_MspInit+0xf8>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	4a23      	ldr	r2, [pc, #140]	@ (8002b80 <HAL_UART_MspInit+0xf8>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af8:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <HAL_UART_MspInit+0xf8>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b04:	4b1e      	ldr	r3, [pc, #120]	@ (8002b80 <HAL_UART_MspInit+0xf8>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b08:	4a1d      	ldr	r2, [pc, #116]	@ (8002b80 <HAL_UART_MspInit+0xf8>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b10:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <HAL_UART_MspInit+0xf8>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b34:	2307      	movs	r3, #7
 8002b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4810      	ldr	r0, [pc, #64]	@ (8002b84 <HAL_UART_MspInit+0xfc>)
 8002b42:	f003 f993 	bl	8005e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b60:	2307      	movs	r3, #7
 8002b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b66:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4806      	ldr	r0, [pc, #24]	@ (8002b88 <HAL_UART_MspInit+0x100>)
 8002b6e:	f003 f97d 	bl	8005e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b72:	bf00      	nop
 8002b74:	37b0      	adds	r7, #176	@ 0xb0
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40011000 	.word	0x40011000
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020400 	.word	0x40020400
 8002b88:	40020000 	.word	0x40020000

08002b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b90:	f7ff ff38 	bl	8002a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b94:	480c      	ldr	r0, [pc, #48]	@ (8002bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b96:	490d      	ldr	r1, [pc, #52]	@ (8002bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b98:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b9c:	e002      	b.n	8002ba4 <LoopCopyDataInit>

08002b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba2:	3304      	adds	r3, #4

08002ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba8:	d3f9      	bcc.n	8002b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002baa:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bac:	4c0a      	ldr	r4, [pc, #40]	@ (8002bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb0:	e001      	b.n	8002bb6 <LoopFillZerobss>

08002bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb4:	3204      	adds	r2, #4

08002bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb8:	d3fb      	bcc.n	8002bb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bba:	f012 fb77 	bl	80152ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bbe:	f7fe fd71 	bl	80016a4 <main>
  bx  lr    
 8002bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bcc:	200009e0 	.word	0x200009e0
  ldr r2, =_sidata
 8002bd0:	080d5638 	.word	0x080d5638
  ldr r2, =_sbss
 8002bd4:	200009e0 	.word	0x200009e0
  ldr r4, =_ebss
 8002bd8:	20035f60 	.word	0x20035f60

08002bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bdc:	e7fe      	b.n	8002bdc <ADC_IRQHandler>
	...

08002be0 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	4603      	mov	r3, r0
 8002bea:	81fb      	strh	r3, [r7, #14]
 8002bec:	460b      	mov	r3, r1
 8002bee:	81bb      	strh	r3, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002bf8:	89bb      	ldrh	r3, [r7, #12]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8002bfe:	89bb      	ldrh	r3, [r7, #12]
 8002c00:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c04:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002c0a:	f001 fc71 	bl	80044f0 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8002c0e:	89fb      	ldrh	r3, [r7, #14]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2203      	movs	r2, #3
 8002c14:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 fafb 	bl	8004214 <CODEC_IO_Write>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f640 0117 	movw	r1, #2071	@ 0x817
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 faee 	bl	8004214 <CODEC_IO_Write>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2200      	movs	r2, #0
 8002c48:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 fae1 	bl	8004214 <CODEC_IO_Write>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002c5c:	89fb      	ldrh	r3, [r7, #14]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	226c      	movs	r2, #108	@ 0x6c
 8002c62:	2139      	movs	r1, #57	@ 0x39
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 fad5 	bl	8004214 <CODEC_IO_Write>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002c74:	8afb      	ldrh	r3, [r7, #22]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00c      	beq.n	8002c94 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2213      	movs	r2, #19
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 fac6 	bl	8004214 <CODEC_IO_Write>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e00b      	b.n	8002cac <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2203      	movs	r2, #3
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 fab9 	bl	8004214 <CODEC_IO_Write>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	4413      	add	r3, r2
 8002caa:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002cac:	2032      	movs	r0, #50	@ 0x32
 8002cae:	f001 fc87 	bl	80045c0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002cb2:	8b3b      	ldrh	r3, [r7, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 815f 	beq.w	8002f78 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002cba:	4bae      	ldr	r3, [pc, #696]	@ (8002f74 <wm8994_Init+0x394>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002cc0:	8b3b      	ldrh	r3, [r7, #24]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	f000 808c 	beq.w	8002de0 <wm8994_Init+0x200>
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	f300 8111 	bgt.w	8002ef0 <wm8994_Init+0x310>
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d002      	beq.n	8002cd8 <wm8994_Init+0xf8>
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d042      	beq.n	8002d5c <wm8994_Init+0x17c>
 8002cd6:	e10b      	b.n	8002ef0 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002cd8:	89fb      	ldrh	r3, [r7, #14]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002ce0:	2105      	movs	r1, #5
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 fa96 	bl	8004214 <CODEC_IO_Write>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4413      	add	r3, r2
 8002cf0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002cf2:	89fb      	ldrh	r3, [r7, #14]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f240 6101 	movw	r1, #1537	@ 0x601
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 fa89 	bl	8004214 <CODEC_IO_Write>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002d0c:	89fb      	ldrh	r3, [r7, #14]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2200      	movs	r2, #0
 8002d12:	f240 6102 	movw	r1, #1538	@ 0x602
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fa7c 	bl	8004214 <CODEC_IO_Write>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	4413      	add	r3, r2
 8002d24:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002d26:	89fb      	ldrh	r3, [r7, #14]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fa6f 	bl	8004214 <CODEC_IO_Write>
 8002d36:	4603      	mov	r3, r0
 8002d38:	461a      	mov	r2, r3
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002d40:	89fb      	ldrh	r3, [r7, #14]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2202      	movs	r2, #2
 8002d46:	f240 6105 	movw	r1, #1541	@ 0x605
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fa62 	bl	8004214 <CODEC_IO_Write>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	4413      	add	r3, r2
 8002d58:	61fb      	str	r3, [r7, #28]
      break;
 8002d5a:	e110      	b.n	8002f7e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002d5c:	89fb      	ldrh	r3, [r7, #14]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f240 3203 	movw	r2, #771	@ 0x303
 8002d64:	2105      	movs	r1, #5
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 fa54 	bl	8004214 <CODEC_IO_Write>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002d76:	89fb      	ldrh	r3, [r7, #14]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002d80:	4618      	mov	r0, r3
 8002d82:	f001 fa47 	bl	8004214 <CODEC_IO_Write>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002d90:	89fb      	ldrh	r3, [r7, #14]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2201      	movs	r2, #1
 8002d96:	f240 6102 	movw	r1, #1538	@ 0x602
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 fa3a 	bl	8004214 <CODEC_IO_Write>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	4413      	add	r3, r2
 8002da8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002daa:	89fb      	ldrh	r3, [r7, #14]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2200      	movs	r2, #0
 8002db0:	f240 6104 	movw	r1, #1540	@ 0x604
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 fa2d 	bl	8004214 <CODEC_IO_Write>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002dc4:	89fb      	ldrh	r3, [r7, #14]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f240 6105 	movw	r1, #1541	@ 0x605
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 fa20 	bl	8004214 <CODEC_IO_Write>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	61fb      	str	r3, [r7, #28]
      break;
 8002dde:	e0ce      	b.n	8002f7e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002de0:	8afb      	ldrh	r3, [r7, #22]
 8002de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002de6:	d141      	bne.n	8002e6c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002de8:	89fb      	ldrh	r3, [r7, #14]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002df0:	2105      	movs	r1, #5
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 fa0e 	bl	8004214 <CODEC_IO_Write>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	4413      	add	r3, r2
 8002e00:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8002e02:	89fb      	ldrh	r3, [r7, #14]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2203      	movs	r2, #3
 8002e08:	f240 6101 	movw	r1, #1537	@ 0x601
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 fa01 	bl	8004214 <CODEC_IO_Write>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8002e1c:	89fb      	ldrh	r3, [r7, #14]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2203      	movs	r2, #3
 8002e22:	f240 6102 	movw	r1, #1538	@ 0x602
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 f9f4 	bl	8004214 <CODEC_IO_Write>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	4413      	add	r3, r2
 8002e34:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 f9e7 	bl	8004214 <CODEC_IO_Write>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002e50:	89fb      	ldrh	r3, [r7, #14]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2203      	movs	r2, #3
 8002e56:	f240 6105 	movw	r1, #1541	@ 0x605
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 f9da 	bl	8004214 <CODEC_IO_Write>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002e6a:	e088      	b.n	8002f7e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002e6c:	89fb      	ldrh	r3, [r7, #14]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002e74:	2105      	movs	r1, #5
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 f9cc 	bl	8004214 <CODEC_IO_Write>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002e86:	89fb      	ldrh	r3, [r7, #14]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 f9bf 	bl	8004214 <CODEC_IO_Write>
 8002e96:	4603      	mov	r3, r0
 8002e98:	461a      	mov	r2, r3
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002ea0:	89fb      	ldrh	r3, [r7, #14]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f240 6102 	movw	r1, #1538	@ 0x602
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 f9b2 	bl	8004214 <CODEC_IO_Write>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002eba:	89fb      	ldrh	r3, [r7, #14]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f240 6104 	movw	r1, #1540	@ 0x604
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 f9a5 	bl	8004214 <CODEC_IO_Write>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	461a      	mov	r2, r3
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002ed4:	89fb      	ldrh	r3, [r7, #14]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f240 6105 	movw	r1, #1541	@ 0x605
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 f998 	bl	8004214 <CODEC_IO_Write>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	4413      	add	r3, r2
 8002eec:	61fb      	str	r3, [r7, #28]
      break;
 8002eee:	e046      	b.n	8002f7e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f240 3203 	movw	r2, #771	@ 0x303
 8002ef8:	2105      	movs	r1, #5
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 f98a 	bl	8004214 <CODEC_IO_Write>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	4413      	add	r3, r2
 8002f08:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002f0a:	89fb      	ldrh	r3, [r7, #14]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f240 6101 	movw	r1, #1537	@ 0x601
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 f97d 	bl	8004214 <CODEC_IO_Write>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002f24:	89fb      	ldrh	r3, [r7, #14]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f240 6102 	movw	r1, #1538	@ 0x602
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 f970 	bl	8004214 <CODEC_IO_Write>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2200      	movs	r2, #0
 8002f44:	f240 6104 	movw	r1, #1540	@ 0x604
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 f963 	bl	8004214 <CODEC_IO_Write>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 f956 	bl	8004214 <CODEC_IO_Write>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	61fb      	str	r3, [r7, #28]
      break;
 8002f72:	e004      	b.n	8002f7e <wm8994_Init+0x39e>
 8002f74:	20030d74 	.word	0x20030d74
    }
  }
  else
  {
    outputEnabled = 0;
 8002f78:	4b99      	ldr	r3, [pc, #612]	@ (80031e0 <wm8994_Init+0x600>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002f7e:	8afb      	ldrh	r3, [r7, #22]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 81ab 	beq.w	80032dc <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8002f86:	4b97      	ldr	r3, [pc, #604]	@ (80031e4 <wm8994_Init+0x604>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002f8c:	8afb      	ldrh	r3, [r7, #22]
 8002f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f92:	f000 8129 	beq.w	80031e8 <wm8994_Init+0x608>
 8002f96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f9a:	f300 819b 	bgt.w	80032d4 <wm8994_Init+0x6f4>
 8002f9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fa2:	d05a      	beq.n	800305a <wm8994_Init+0x47a>
 8002fa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fa8:	f300 8194 	bgt.w	80032d4 <wm8994_Init+0x6f4>
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb0:	f000 80c6 	beq.w	8003140 <wm8994_Init+0x560>
 8002fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb8:	f040 818c 	bne.w	80032d4 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002fbc:	89fb      	ldrh	r3, [r7, #14]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002fc4:	2104      	movs	r1, #4
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 f924 	bl	8004214 <CODEC_IO_Write>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	22db      	movs	r2, #219	@ 0xdb
 8002fdc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f917 	bl	8004214 <CODEC_IO_Write>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f001 f90a 	bl	8004214 <CODEC_IO_Write>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800300a:	89fb      	ldrh	r3, [r7, #14]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2202      	movs	r2, #2
 8003010:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8003014:	4618      	mov	r0, r3
 8003016:	f001 f8fd 	bl	8004214 <CODEC_IO_Write>
 800301a:	4603      	mov	r3, r0
 800301c:	461a      	mov	r2, r3
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003024:	89fb      	ldrh	r3, [r7, #14]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2202      	movs	r2, #2
 800302a:	f240 6109 	movw	r1, #1545	@ 0x609
 800302e:	4618      	mov	r0, r3
 8003030:	f001 f8f0 	bl	8004214 <CODEC_IO_Write>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800303e:	89fb      	ldrh	r3, [r7, #14]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	220e      	movs	r2, #14
 8003044:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8003048:	4618      	mov	r0, r3
 800304a:	f001 f8e3 	bl	8004214 <CODEC_IO_Write>
 800304e:	4603      	mov	r3, r0
 8003050:	461a      	mov	r2, r3
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	61fb      	str	r3, [r7, #28]
      break;
 8003058:	e143      	b.n	80032e2 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800305a:	89fb      	ldrh	r3, [r7, #14]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2211      	movs	r2, #17
 8003060:	2128      	movs	r1, #40	@ 0x28
 8003062:	4618      	mov	r0, r3
 8003064:	f001 f8d6 	bl	8004214 <CODEC_IO_Write>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	4413      	add	r3, r2
 8003070:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8003072:	89fb      	ldrh	r3, [r7, #14]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2235      	movs	r2, #53	@ 0x35
 8003078:	2129      	movs	r1, #41	@ 0x29
 800307a:	4618      	mov	r0, r3
 800307c:	f001 f8ca 	bl	8004214 <CODEC_IO_Write>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4413      	add	r3, r2
 8003088:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800308a:	89fb      	ldrh	r3, [r7, #14]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2235      	movs	r2, #53	@ 0x35
 8003090:	212a      	movs	r1, #42	@ 0x2a
 8003092:	4618      	mov	r0, r3
 8003094:	f001 f8be 	bl	8004214 <CODEC_IO_Write>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	4413      	add	r3, r2
 80030a0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80030a2:	89fb      	ldrh	r3, [r7, #14]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f240 3203 	movw	r2, #771	@ 0x303
 80030aa:	2104      	movs	r1, #4
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 f8b1 	bl	8004214 <CODEC_IO_Write>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80030bc:	89fb      	ldrh	r3, [r7, #14]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	22db      	movs	r2, #219	@ 0xdb
 80030c2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 f8a4 	bl	8004214 <CODEC_IO_Write>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80030d6:	89fb      	ldrh	r3, [r7, #14]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f246 3250 	movw	r2, #25424	@ 0x6350
 80030de:	2102      	movs	r1, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f001 f897 	bl	8004214 <CODEC_IO_Write>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80030f0:	89fb      	ldrh	r3, [r7, #14]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2202      	movs	r2, #2
 80030f6:	f240 6106 	movw	r1, #1542	@ 0x606
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 f88a 	bl	8004214 <CODEC_IO_Write>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800310a:	89fb      	ldrh	r3, [r7, #14]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2202      	movs	r2, #2
 8003110:	f240 6107 	movw	r1, #1543	@ 0x607
 8003114:	4618      	mov	r0, r3
 8003116:	f001 f87d 	bl	8004214 <CODEC_IO_Write>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003124:	89fb      	ldrh	r3, [r7, #14]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	220d      	movs	r2, #13
 800312a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800312e:	4618      	mov	r0, r3
 8003130:	f001 f870 	bl	8004214 <CODEC_IO_Write>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	61fb      	str	r3, [r7, #28]
      break;
 800313e:	e0d0      	b.n	80032e2 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8003140:	89fb      	ldrh	r3, [r7, #14]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8003148:	2104      	movs	r1, #4
 800314a:	4618      	mov	r0, r3
 800314c:	f001 f862 	bl	8004214 <CODEC_IO_Write>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800315a:	89fb      	ldrh	r3, [r7, #14]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	22db      	movs	r2, #219	@ 0xdb
 8003160:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003164:	4618      	mov	r0, r3
 8003166:	f001 f855 	bl	8004214 <CODEC_IO_Write>
 800316a:	4603      	mov	r3, r0
 800316c:	461a      	mov	r2, r3
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003174:	89fb      	ldrh	r3, [r7, #14]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f246 3250 	movw	r2, #25424	@ 0x6350
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f848 	bl	8004214 <CODEC_IO_Write>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	4413      	add	r3, r2
 800318c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800318e:	89fb      	ldrh	r3, [r7, #14]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2202      	movs	r2, #2
 8003194:	f240 6106 	movw	r1, #1542	@ 0x606
 8003198:	4618      	mov	r0, r3
 800319a:	f001 f83b 	bl	8004214 <CODEC_IO_Write>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80031a8:	89fb      	ldrh	r3, [r7, #14]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2202      	movs	r2, #2
 80031ae:	f240 6107 	movw	r1, #1543	@ 0x607
 80031b2:	4618      	mov	r0, r3
 80031b4:	f001 f82e 	bl	8004214 <CODEC_IO_Write>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	4413      	add	r3, r2
 80031c0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	220d      	movs	r2, #13
 80031c8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 f821 	bl	8004214 <CODEC_IO_Write>
 80031d2:	4603      	mov	r3, r0
 80031d4:	461a      	mov	r2, r3
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	61fb      	str	r3, [r7, #28]
      break; 
 80031dc:	e081      	b.n	80032e2 <wm8994_Init+0x702>
 80031de:	bf00      	nop
 80031e0:	20030d74 	.word	0x20030d74
 80031e4:	20030d78 	.word	0x20030d78
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80031e8:	89fb      	ldrh	r3, [r7, #14]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80031f0:	2104      	movs	r1, #4
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 f80e 	bl	8004214 <CODEC_IO_Write>
 80031f8:	4603      	mov	r3, r0
 80031fa:	461a      	mov	r2, r3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003202:	89fb      	ldrh	r3, [r7, #14]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	22db      	movs	r2, #219	@ 0xdb
 8003208:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800320c:	4618      	mov	r0, r3
 800320e:	f001 f801 	bl	8004214 <CODEC_IO_Write>
 8003212:	4603      	mov	r3, r0
 8003214:	461a      	mov	r2, r3
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	4413      	add	r3, r2
 800321a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800321c:	89fb      	ldrh	r3, [r7, #14]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	22db      	movs	r2, #219	@ 0xdb
 8003222:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fff4 	bl	8004214 <CODEC_IO_Write>
 800322c:	4603      	mov	r3, r0
 800322e:	461a      	mov	r2, r3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8003236:	89fb      	ldrh	r3, [r7, #14]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 800323e:	2102      	movs	r1, #2
 8003240:	4618      	mov	r0, r3
 8003242:	f000 ffe7 	bl	8004214 <CODEC_IO_Write>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003250:	89fb      	ldrh	r3, [r7, #14]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2202      	movs	r2, #2
 8003256:	f240 6106 	movw	r1, #1542	@ 0x606
 800325a:	4618      	mov	r0, r3
 800325c:	f000 ffda 	bl	8004214 <CODEC_IO_Write>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800326a:	89fb      	ldrh	r3, [r7, #14]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2202      	movs	r2, #2
 8003270:	f240 6107 	movw	r1, #1543	@ 0x607
 8003274:	4618      	mov	r0, r3
 8003276:	f000 ffcd 	bl	8004214 <CODEC_IO_Write>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2202      	movs	r2, #2
 800328a:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800328e:	4618      	mov	r0, r3
 8003290:	f000 ffc0 	bl	8004214 <CODEC_IO_Write>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800329e:	89fb      	ldrh	r3, [r7, #14]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2202      	movs	r2, #2
 80032a4:	f240 6109 	movw	r1, #1545	@ 0x609
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 ffb3 	bl	8004214 <CODEC_IO_Write>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461a      	mov	r2, r3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80032b8:	89fb      	ldrh	r3, [r7, #14]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	220d      	movs	r2, #13
 80032be:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 ffa6 	bl	8004214 <CODEC_IO_Write>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	61fb      	str	r3, [r7, #28]
      break;    
 80032d2:	e006      	b.n	80032e2 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
      break;
 80032da:	e002      	b.n	80032e2 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 80032dc:	4ba4      	ldr	r3, [pc, #656]	@ (8003570 <wm8994_Init+0x990>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4aa3      	ldr	r2, [pc, #652]	@ (8003574 <wm8994_Init+0x994>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d079      	beq.n	80033de <wm8994_Init+0x7fe>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4aa1      	ldr	r2, [pc, #644]	@ (8003574 <wm8994_Init+0x994>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	f200 80ad 	bhi.w	800344e <wm8994_Init+0x86e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d061      	beq.n	80033c2 <wm8994_Init+0x7e2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003304:	4293      	cmp	r3, r2
 8003306:	f200 80a2 	bhi.w	800344e <wm8994_Init+0x86e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003310:	4293      	cmp	r3, r2
 8003312:	f000 808e 	beq.w	8003432 <wm8994_Init+0x852>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800331c:	4293      	cmp	r3, r2
 800331e:	f200 8096 	bhi.w	800344e <wm8994_Init+0x86e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003328:	d03d      	beq.n	80033a6 <wm8994_Init+0x7c6>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003330:	f200 808d 	bhi.w	800344e <wm8994_Init+0x86e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f245 6222 	movw	r2, #22050	@ 0x5622
 800333a:	4293      	cmp	r3, r2
 800333c:	d06b      	beq.n	8003416 <wm8994_Init+0x836>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003344:	4293      	cmp	r3, r2
 8003346:	f200 8082 	bhi.w	800344e <wm8994_Init+0x86e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003350:	d01b      	beq.n	800338a <wm8994_Init+0x7aa>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003358:	d879      	bhi.n	800344e <wm8994_Init+0x86e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003360:	d005      	beq.n	800336e <wm8994_Init+0x78e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003368:	4293      	cmp	r3, r2
 800336a:	d046      	beq.n	80033fa <wm8994_Init+0x81a>
 800336c:	e06f      	b.n	800344e <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800336e:	89fb      	ldrh	r3, [r7, #14]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2203      	movs	r2, #3
 8003374:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003378:	4618      	mov	r0, r3
 800337a:	f000 ff4b 	bl	8004214 <CODEC_IO_Write>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	61fb      	str	r3, [r7, #28]
    break;
 8003388:	e06f      	b.n	800346a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800338a:	89fb      	ldrh	r3, [r7, #14]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2233      	movs	r2, #51	@ 0x33
 8003390:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003394:	4618      	mov	r0, r3
 8003396:	f000 ff3d 	bl	8004214 <CODEC_IO_Write>
 800339a:	4603      	mov	r3, r0
 800339c:	461a      	mov	r2, r3
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	61fb      	str	r3, [r7, #28]
    break;
 80033a4:	e061      	b.n	800346a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2263      	movs	r2, #99	@ 0x63
 80033ac:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 ff2f 	bl	8004214 <CODEC_IO_Write>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4413      	add	r3, r2
 80033be:	61fb      	str	r3, [r7, #28]
    break;
 80033c0:	e053      	b.n	800346a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80033c2:	89fb      	ldrh	r3, [r7, #14]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2283      	movs	r2, #131	@ 0x83
 80033c8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 ff21 	bl	8004214 <CODEC_IO_Write>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	61fb      	str	r3, [r7, #28]
    break;
 80033dc:	e045      	b.n	800346a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80033de:	89fb      	ldrh	r3, [r7, #14]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	22a3      	movs	r2, #163	@ 0xa3
 80033e4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 ff13 	bl	8004214 <CODEC_IO_Write>
 80033ee:	4603      	mov	r3, r0
 80033f0:	461a      	mov	r2, r3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	61fb      	str	r3, [r7, #28]
    break;
 80033f8:	e037      	b.n	800346a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80033fa:	89fb      	ldrh	r3, [r7, #14]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2213      	movs	r2, #19
 8003400:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003404:	4618      	mov	r0, r3
 8003406:	f000 ff05 	bl	8004214 <CODEC_IO_Write>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	61fb      	str	r3, [r7, #28]
    break;
 8003414:	e029      	b.n	800346a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003416:	89fb      	ldrh	r3, [r7, #14]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2243      	movs	r2, #67	@ 0x43
 800341c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fef7 	bl	8004214 <CODEC_IO_Write>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	61fb      	str	r3, [r7, #28]
    break;
 8003430:	e01b      	b.n	800346a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003432:	89fb      	ldrh	r3, [r7, #14]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2273      	movs	r2, #115	@ 0x73
 8003438:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fee9 	bl	8004214 <CODEC_IO_Write>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	61fb      	str	r3, [r7, #28]
    break; 
 800344c:	e00d      	b.n	800346a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800344e:	89fb      	ldrh	r3, [r7, #14]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2283      	movs	r2, #131	@ 0x83
 8003454:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fedb 	bl	8004214 <CODEC_IO_Write>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	61fb      	str	r3, [r7, #28]
    break; 
 8003468:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800346a:	8afb      	ldrh	r3, [r7, #22]
 800346c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003470:	d10e      	bne.n	8003490 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8003472:	89fb      	ldrh	r3, [r7, #14]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f244 0218 	movw	r2, #16408	@ 0x4018
 800347a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fec8 	bl	8004214 <CODEC_IO_Write>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e00d      	b.n	80034ac <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8003490:	89fb      	ldrh	r3, [r7, #14]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f244 0210 	movw	r2, #16400	@ 0x4010
 8003498:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800349c:	4618      	mov	r0, r3
 800349e:	f000 feb9 	bl	8004214 <CODEC_IO_Write>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80034ac:	89fb      	ldrh	r3, [r7, #14]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	f240 3102 	movw	r1, #770	@ 0x302
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 feac 	bl	8004214 <CODEC_IO_Write>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	4413      	add	r3, r2
 80034c4:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80034c6:	89fb      	ldrh	r3, [r7, #14]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	220a      	movs	r2, #10
 80034cc:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fe9f 	bl	8004214 <CODEC_IO_Write>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461a      	mov	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80034e0:	89fb      	ldrh	r3, [r7, #14]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2201      	movs	r2, #1
 80034e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fe92 	bl	8004214 <CODEC_IO_Write>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	4413      	add	r3, r2
 80034f8:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80034fa:	8b3b      	ldrh	r3, [r7, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 817b 	beq.w	80037f8 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8003502:	8b3b      	ldrh	r3, [r7, #24]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d157      	bne.n	80035b8 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003510:	212d      	movs	r1, #45	@ 0x2d
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fe7e 	bl	8004214 <CODEC_IO_Write>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800352a:	212e      	movs	r1, #46	@ 0x2e
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fe71 	bl	8004214 <CODEC_IO_Write>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 800353c:	4b0e      	ldr	r3, [pc, #56]	@ (8003578 <wm8994_Init+0x998>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01b      	beq.n	800357c <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 800354c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fe5f 	bl	8004214 <CODEC_IO_Write>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <wm8994_Init+0x998>)
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8003566:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800356a:	f001 f829 	bl	80045c0 <AUDIO_IO_Delay>
 800356e:	e016      	b.n	800359e <wm8994_Init+0x9be>
 8003570:	20030d78 	.word	0x20030d78
 8003574:	00017700 	.word	0x00017700
 8003578:	2000004c 	.word	0x2000004c
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 800357c:	89fb      	ldrh	r3, [r7, #14]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f248 1208 	movw	r2, #33032	@ 0x8108
 8003584:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fe43 	bl	8004214 <CODEC_IO_Write>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8003598:	2032      	movs	r0, #50	@ 0x32
 800359a:	f001 f811 	bl	80045c0 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800359e:	89fb      	ldrh	r3, [r7, #14]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2200      	movs	r2, #0
 80035a4:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fe33 	bl	8004214 <CODEC_IO_Write>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80035b8:	89fb      	ldrh	r3, [r7, #14]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80035c0:	2103      	movs	r1, #3
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fe26 	bl	8004214 <CODEC_IO_Write>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80035d2:	89fb      	ldrh	r3, [r7, #14]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2200      	movs	r2, #0
 80035d8:	2122      	movs	r1, #34	@ 0x22
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fe1a 	bl	8004214 <CODEC_IO_Write>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461a      	mov	r2, r3
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80035ea:	89fb      	ldrh	r3, [r7, #14]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	2123      	movs	r1, #35	@ 0x23
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fe0e 	bl	8004214 <CODEC_IO_Write>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	4413      	add	r3, r2
 8003600:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8003602:	89fb      	ldrh	r3, [r7, #14]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800360a:	2136      	movs	r1, #54	@ 0x36
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fe01 	bl	8004214 <CODEC_IO_Write>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800361c:	89fb      	ldrh	r3, [r7, #14]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f243 0203 	movw	r2, #12291	@ 0x3003
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fdf4 	bl	8004214 <CODEC_IO_Write>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003636:	8afb      	ldrh	r3, [r7, #22]
 8003638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800363c:	d10d      	bne.n	800365a <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800363e:	89fb      	ldrh	r3, [r7, #14]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f240 2205 	movw	r2, #517	@ 0x205
 8003646:	2151      	movs	r1, #81	@ 0x51
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fde3 	bl	8004214 <CODEC_IO_Write>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e00b      	b.n	8003672 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800365a:	89fb      	ldrh	r3, [r7, #14]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2205      	movs	r2, #5
 8003660:	2151      	movs	r1, #81	@ 0x51
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fdd6 	bl	8004214 <CODEC_IO_Write>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8003672:	8b7b      	ldrh	r3, [r7, #26]
 8003674:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8003678:	f043 0303 	orr.w	r3, r3, #3
 800367c:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800367e:	89fb      	ldrh	r3, [r7, #14]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	8b7a      	ldrh	r2, [r7, #26]
 8003684:	2101      	movs	r1, #1
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fdc4 	bl	8004214 <CODEC_IO_Write>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8003696:	89fb      	ldrh	r3, [r7, #14]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2222      	movs	r2, #34	@ 0x22
 800369c:	2160      	movs	r1, #96	@ 0x60
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fdb8 	bl	8004214 <CODEC_IO_Write>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80036ae:	89fb      	ldrh	r3, [r7, #14]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80036b6:	214c      	movs	r1, #76	@ 0x4c
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fdab 	bl	8004214 <CODEC_IO_Write>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	4413      	add	r3, r2
 80036c6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80036c8:	200f      	movs	r0, #15
 80036ca:	f000 ff79 	bl	80045c0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80036ce:	89fb      	ldrh	r3, [r7, #14]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2201      	movs	r2, #1
 80036d4:	212d      	movs	r1, #45	@ 0x2d
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fd9c 	bl	8004214 <CODEC_IO_Write>
 80036dc:	4603      	mov	r3, r0
 80036de:	461a      	mov	r2, r3
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80036e6:	89fb      	ldrh	r3, [r7, #14]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2201      	movs	r2, #1
 80036ec:	212e      	movs	r1, #46	@ 0x2e
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fd90 	bl	8004214 <CODEC_IO_Write>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4413      	add	r3, r2
 80036fc:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80036fe:	89fb      	ldrh	r3, [r7, #14]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8003706:	2103      	movs	r1, #3
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fd83 	bl	8004214 <CODEC_IO_Write>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8003718:	89fb      	ldrh	r3, [r7, #14]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2233      	movs	r2, #51	@ 0x33
 800371e:	2154      	movs	r1, #84	@ 0x54
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fd77 	bl	8004214 <CODEC_IO_Write>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8003730:	f240 1001 	movw	r0, #257	@ 0x101
 8003734:	f000 ff44 	bl	80045c0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8003738:	89fb      	ldrh	r3, [r7, #14]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	22ee      	movs	r2, #238	@ 0xee
 800373e:	2160      	movs	r1, #96	@ 0x60
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fd67 	bl	8004214 <CODEC_IO_Write>
 8003746:	4603      	mov	r3, r0
 8003748:	461a      	mov	r2, r3
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003750:	89fb      	ldrh	r3, [r7, #14]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	22c0      	movs	r2, #192	@ 0xc0
 8003756:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fd5a 	bl	8004214 <CODEC_IO_Write>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800376a:	89fb      	ldrh	r3, [r7, #14]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	22c0      	movs	r2, #192	@ 0xc0
 8003770:	f240 6111 	movw	r1, #1553	@ 0x611
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fd4d 	bl	8004214 <CODEC_IO_Write>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003784:	89fb      	ldrh	r3, [r7, #14]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2210      	movs	r2, #16
 800378a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fd40 	bl	8004214 <CODEC_IO_Write>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800379e:	89fb      	ldrh	r3, [r7, #14]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	22c0      	movs	r2, #192	@ 0xc0
 80037a4:	f240 6112 	movw	r1, #1554	@ 0x612
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fd33 	bl	8004214 <CODEC_IO_Write>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461a      	mov	r2, r3
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80037b8:	89fb      	ldrh	r3, [r7, #14]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	22c0      	movs	r2, #192	@ 0xc0
 80037be:	f240 6113 	movw	r1, #1555	@ 0x613
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fd26 	bl	8004214 <CODEC_IO_Write>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80037d2:	89fb      	ldrh	r3, [r7, #14]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2210      	movs	r2, #16
 80037d8:	f240 4122 	movw	r1, #1058	@ 0x422
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fd19 	bl	8004214 <CODEC_IO_Write>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80037ec:	7afa      	ldrb	r2, [r7, #11]
 80037ee:	89fb      	ldrh	r3, [r7, #14]
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f984 	bl	8003b00 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80037f8:	8afb      	ldrh	r3, [r7, #22]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80a6 	beq.w	800394c <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003800:	8afb      	ldrh	r3, [r7, #22]
 8003802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003806:	d003      	beq.n	8003810 <wm8994_Init+0xc30>
 8003808:	8afb      	ldrh	r3, [r7, #22]
 800380a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800380e:	d12b      	bne.n	8003868 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003810:	8b7b      	ldrh	r3, [r7, #26]
 8003812:	f043 0313 	orr.w	r3, r3, #19
 8003816:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003818:	89fb      	ldrh	r3, [r7, #14]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	8b7a      	ldrh	r2, [r7, #26]
 800381e:	2101      	movs	r1, #1
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fcf7 	bl	8004214 <CODEC_IO_Write>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003830:	89fb      	ldrh	r3, [r7, #14]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2202      	movs	r2, #2
 8003836:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fcea 	bl	8004214 <CODEC_IO_Write>
 8003840:	4603      	mov	r3, r0
 8003842:	461a      	mov	r2, r3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4413      	add	r3, r2
 8003848:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800384a:	89fb      	ldrh	r3, [r7, #14]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003852:	f240 4111 	movw	r1, #1041	@ 0x411
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fcdc 	bl	8004214 <CODEC_IO_Write>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	4413      	add	r3, r2
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e06b      	b.n	8003940 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003868:	8afb      	ldrh	r3, [r7, #22]
 800386a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800386e:	d139      	bne.n	80038e4 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003870:	8b7b      	ldrh	r3, [r7, #26]
 8003872:	f043 0313 	orr.w	r3, r3, #19
 8003876:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003878:	89fb      	ldrh	r3, [r7, #14]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	8b7a      	ldrh	r2, [r7, #26]
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fcc7 	bl	8004214 <CODEC_IO_Write>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003890:	89fb      	ldrh	r3, [r7, #14]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2202      	movs	r2, #2
 8003896:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fcba 	bl	8004214 <CODEC_IO_Write>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80038aa:	89fb      	ldrh	r3, [r7, #14]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80038b2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fcac 	bl	8004214 <CODEC_IO_Write>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80038ce:	f240 4111 	movw	r1, #1041	@ 0x411
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fc9e 	bl	8004214 <CODEC_IO_Write>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	e02d      	b.n	8003940 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80038e4:	8afb      	ldrh	r3, [r7, #22]
 80038e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ea:	d003      	beq.n	80038f4 <wm8994_Init+0xd14>
 80038ec:	8afb      	ldrh	r3, [r7, #22]
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f2:	d125      	bne.n	8003940 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80038f4:	89fb      	ldrh	r3, [r7, #14]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	220b      	movs	r2, #11
 80038fa:	2118      	movs	r1, #24
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fc89 	bl	8004214 <CODEC_IO_Write>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 800390c:	89fb      	ldrh	r3, [r7, #14]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	220b      	movs	r2, #11
 8003912:	211a      	movs	r1, #26
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fc7d 	bl	8004214 <CODEC_IO_Write>
 800391a:	4603      	mov	r3, r0
 800391c:	461a      	mov	r2, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003924:	89fb      	ldrh	r3, [r7, #14]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800392c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fc6f 	bl	8004214 <CODEC_IO_Write>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003940:	7afa      	ldrb	r2, [r7, #11]
 8003942:	89fb      	ldrh	r3, [r7, #14]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f8da 	bl	8003b00 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 800394c:	69fb      	ldr	r3, [r7, #28]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop

08003958 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800395c:	f000 fdd2 	bl	8004504 <AUDIO_IO_DeInit>
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}

08003964 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800396e:	f000 fdbf 	bl	80044f0 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fdf5 	bl	8004568 <AUDIO_IO_Read>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	6039      	str	r1, [r7, #0]
 8003992:	80fb      	strh	r3, [r7, #6]
 8003994:	4613      	mov	r3, r2
 8003996:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f9d1 	bl	8003d48 <wm8994_SetMute>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f9bc 	bl	8003d48 <wm8994_SetMute>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4413      	add	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2201      	movs	r2, #1
 80039de:	2102      	movs	r1, #2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fc17 	bl	8004214 <CODEC_IO_Write>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80039f0:	68fb      	ldr	r3, [r7, #12]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f99b 	bl	8003d48 <wm8994_SetMute>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8003a34:	4b31      	ldr	r3, [pc, #196]	@ (8003afc <wm8994_Stop+0xd8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05a      	beq.n	8003af2 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f981 	bl	8003d48 <wm8994_SetMute>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d04e      	beq.n	8003af2 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a5c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fbd7 	bl	8004214 <CODEC_IO_Write>
 8003a66:	4603      	mov	r3, r0
 8003a68:	461a      	mov	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a78:	f240 4122 	movw	r1, #1058	@ 0x422
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fbc9 	bl	8004214 <CODEC_IO_Write>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	212d      	movs	r1, #45	@ 0x2d
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fbbd 	bl	8004214 <CODEC_IO_Write>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	212e      	movs	r1, #46	@ 0x2e
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fbb1 	bl	8004214 <CODEC_IO_Write>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2105      	movs	r1, #5
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fba5 	bl	8004214 <CODEC_IO_Write>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fb99 	bl	8004214 <CODEC_IO_Write>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003aec:	4b03      	ldr	r3, [pc, #12]	@ (8003afc <wm8994_Stop+0xd8>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20030d74 	.word	0x20030d74

08003b00 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	460a      	mov	r2, r1
 8003b0a:	80fb      	strh	r3, [r7, #6]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003b14:	797b      	ldrb	r3, [r7, #5]
 8003b16:	2b64      	cmp	r3, #100	@ 0x64
 8003b18:	d80b      	bhi.n	8003b32 <wm8994_SetVolume+0x32>
 8003b1a:	797a      	ldrb	r2, [r7, #5]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	019b      	lsls	r3, r3, #6
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	4a86      	ldr	r2, [pc, #536]	@ (8003d3c <wm8994_SetVolume+0x23c>)
 8003b24:	fb82 1203 	smull	r1, r2, r2, r3
 8003b28:	1152      	asrs	r2, r2, #5
 8003b2a:	17db      	asrs	r3, r3, #31
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e000      	b.n	8003b34 <wm8994_SetVolume+0x34>
 8003b32:	2364      	movs	r3, #100	@ 0x64
 8003b34:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8003b36:	4b82      	ldr	r3, [pc, #520]	@ (8003d40 <wm8994_SetVolume+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 809b 	beq.w	8003c76 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003b40:	7afb      	ldrb	r3, [r7, #11]
 8003b42:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b44:	d93d      	bls.n	8003bc2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f8fc 	bl	8003d48 <wm8994_SetMute>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f240 127f 	movw	r2, #383	@ 0x17f
 8003b60:	211c      	movs	r1, #28
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fb56 	bl	8004214 <CODEC_IO_Write>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f240 127f 	movw	r2, #383	@ 0x17f
 8003b7a:	211d      	movs	r1, #29
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fb49 	bl	8004214 <CODEC_IO_Write>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f240 127f 	movw	r2, #383	@ 0x17f
 8003b94:	2126      	movs	r1, #38	@ 0x26
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fb3c 	bl	8004214 <CODEC_IO_Write>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f240 127f 	movw	r2, #383	@ 0x17f
 8003bae:	2127      	movs	r1, #39	@ 0x27
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fb2f 	bl	8004214 <CODEC_IO_Write>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e059      	b.n	8003c76 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003bc2:	797b      	ldrb	r3, [r7, #5]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 f8bb 	bl	8003d48 <wm8994_SetMute>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e04c      	b.n	8003c76 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f8b1 	bl	8003d48 <wm8994_SetMute>
 8003be6:	4602      	mov	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	b2d8      	uxtb	r0, r3
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003bfa:	b21b      	sxth	r3, r3
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	211c      	movs	r1, #28
 8003c02:	f000 fb07 	bl	8004214 <CODEC_IO_Write>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	b2d8      	uxtb	r0, r3
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	b21b      	sxth	r3, r3
 8003c18:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	211d      	movs	r1, #29
 8003c24:	f000 faf6 	bl	8004214 <CODEC_IO_Write>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	b2d8      	uxtb	r0, r3
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	2126      	movs	r1, #38	@ 0x26
 8003c46:	f000 fae5 	bl	8004214 <CODEC_IO_Write>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4413      	add	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	b2d8      	uxtb	r0, r3
 8003c58:	7afb      	ldrb	r3, [r7, #11]
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	2127      	movs	r1, #39	@ 0x27
 8003c68:	f000 fad4 	bl	8004214 <CODEC_IO_Write>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8003c76:	4b33      	ldr	r3, [pc, #204]	@ (8003d44 <wm8994_SetVolume+0x244>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d059      	beq.n	8003d32 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003c7e:	797b      	ldrb	r3, [r7, #5]
 8003c80:	2b63      	cmp	r3, #99	@ 0x63
 8003c82:	d80c      	bhi.n	8003c9e <wm8994_SetVolume+0x19e>
 8003c84:	797a      	ldrb	r2, [r7, #5]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003d3c <wm8994_SetVolume+0x23c>)
 8003c90:	fb82 1203 	smull	r1, r2, r2, r3
 8003c94:	1152      	asrs	r2, r2, #5
 8003c96:	17db      	asrs	r3, r3, #31
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	e000      	b.n	8003ca0 <wm8994_SetVolume+0x1a0>
 8003c9e:	23ef      	movs	r3, #239	@ 0xef
 8003ca0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	b2d8      	uxtb	r0, r3
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cae:	b21b      	sxth	r3, r3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003cb8:	f000 faac 	bl	8004214 <CODEC_IO_Write>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	b2d8      	uxtb	r0, r3
 8003cca:	7afb      	ldrb	r3, [r7, #11]
 8003ccc:	b21b      	sxth	r3, r3
 8003cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd2:	b21b      	sxth	r3, r3
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f240 4101 	movw	r1, #1025	@ 0x401
 8003cdc:	f000 fa9a 	bl	8004214 <CODEC_IO_Write>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	b2d8      	uxtb	r0, r3
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf6:	b21b      	sxth	r3, r3
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f240 4104 	movw	r1, #1028	@ 0x404
 8003d00:	f000 fa88 	bl	8004214 <CODEC_IO_Write>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	b2d8      	uxtb	r0, r3
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	b21b      	sxth	r3, r3
 8003d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f240 4105 	movw	r1, #1029	@ 0x405
 8003d24:	f000 fa76 	bl	8004214 <CODEC_IO_Write>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	51eb851f 	.word	0x51eb851f
 8003d40:	20030d74 	.word	0x20030d74
 8003d44:	20030d78 	.word	0x20030d78

08003d48 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	6039      	str	r1, [r7, #0]
 8003d52:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003d58:	4b21      	ldr	r3, [pc, #132]	@ (8003de0 <wm8994_SetMute+0x98>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d039      	beq.n	8003dd4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d11c      	bne.n	8003da0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d6e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fa4e 	bl	8004214 <CODEC_IO_Write>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8a:	f240 4122 	movw	r1, #1058	@ 0x422
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fa40 	bl	8004214 <CODEC_IO_Write>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	e019      	b.n	8003dd4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2210      	movs	r2, #16
 8003da6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fa32 	bl	8004214 <CODEC_IO_Write>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	f240 4122 	movw	r1, #1058	@ 0x422
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fa25 	bl	8004214 <CODEC_IO_Write>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20030d74 	.word	0x20030d74

08003de4 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	460a      	mov	r2, r1
 8003dee:	80fb      	strh	r3, [r7, #6]
 8003df0:	4613      	mov	r3, r2
 8003df2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003df8:	797b      	ldrb	r3, [r7, #5]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	f000 808c 	beq.w	8003f18 <wm8994_SetOutputMode+0x134>
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	f300 80cb 	bgt.w	8003f9c <wm8994_SetOutputMode+0x1b8>
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d002      	beq.n	8003e10 <wm8994_SetOutputMode+0x2c>
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d042      	beq.n	8003e94 <wm8994_SetOutputMode+0xb0>
 8003e0e:	e0c5      	b.n	8003f9c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003e18:	2105      	movs	r1, #5
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f9fa 	bl	8004214 <CODEC_IO_Write>
 8003e20:	4603      	mov	r3, r0
 8003e22:	461a      	mov	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f240 6101 	movw	r1, #1537	@ 0x601
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f9ed 	bl	8004214 <CODEC_IO_Write>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f240 6102 	movw	r1, #1538	@ 0x602
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f9e0 	bl	8004214 <CODEC_IO_Write>
 8003e54:	4603      	mov	r3, r0
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2202      	movs	r2, #2
 8003e64:	f240 6104 	movw	r1, #1540	@ 0x604
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f9d3 	bl	8004214 <CODEC_IO_Write>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f9c6 	bl	8004214 <CODEC_IO_Write>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
    break;
 8003e92:	e0c5      	b.n	8004020 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f240 3203 	movw	r2, #771	@ 0x303
 8003e9c:	2105      	movs	r1, #5
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f9b8 	bl	8004214 <CODEC_IO_Write>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f240 6101 	movw	r1, #1537	@ 0x601
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 f9ab 	bl	8004214 <CODEC_IO_Write>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f240 6102 	movw	r1, #1538	@ 0x602
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f99e 	bl	8004214 <CODEC_IO_Write>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f240 6104 	movw	r1, #1540	@ 0x604
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f991 	bl	8004214 <CODEC_IO_Write>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4413      	add	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2200      	movs	r2, #0
 8003f02:	f240 6105 	movw	r1, #1541	@ 0x605
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f984 	bl	8004214 <CODEC_IO_Write>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
    break;
 8003f16:	e083      	b.n	8004020 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003f20:	2105      	movs	r1, #5
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f976 	bl	8004214 <CODEC_IO_Write>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2201      	movs	r2, #1
 8003f38:	f240 6101 	movw	r1, #1537	@ 0x601
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 f969 	bl	8004214 <CODEC_IO_Write>
 8003f42:	4603      	mov	r3, r0
 8003f44:	461a      	mov	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2201      	movs	r2, #1
 8003f52:	f240 6102 	movw	r1, #1538	@ 0x602
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f95c 	bl	8004214 <CODEC_IO_Write>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 f94f 	bl	8004214 <CODEC_IO_Write>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2202      	movs	r2, #2
 8003f86:	f240 6105 	movw	r1, #1541	@ 0x605
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f942 	bl	8004214 <CODEC_IO_Write>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
    break;
 8003f9a:	e041      	b.n	8004020 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f240 3203 	movw	r2, #771	@ 0x303
 8003fa4:	2105      	movs	r1, #5
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f934 	bl	8004214 <CODEC_IO_Write>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f240 6101 	movw	r1, #1537	@ 0x601
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f927 	bl	8004214 <CODEC_IO_Write>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f240 6102 	movw	r1, #1538	@ 0x602
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f91a 	bl	8004214 <CODEC_IO_Write>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f240 6104 	movw	r1, #1540	@ 0x604
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 f90d 	bl	8004214 <CODEC_IO_Write>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2200      	movs	r2, #0
 800400a:	f240 6105 	movw	r1, #1541	@ 0x605
 800400e:	4618      	mov	r0, r3
 8004010:	f000 f900 	bl	8004214 <CODEC_IO_Write>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
    break;    
 800401e:	bf00      	nop
  }  
  return counter;
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	4a64      	ldr	r2, [pc, #400]	@ (80041d0 <wm8994_SetFrequency+0x1a4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d079      	beq.n	8004138 <wm8994_SetFrequency+0x10c>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4a62      	ldr	r2, [pc, #392]	@ (80041d0 <wm8994_SetFrequency+0x1a4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	f200 80ad 	bhi.w	80041a8 <wm8994_SetFrequency+0x17c>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8004054:	4293      	cmp	r3, r2
 8004056:	d061      	beq.n	800411c <wm8994_SetFrequency+0xf0>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800405e:	4293      	cmp	r3, r2
 8004060:	f200 80a2 	bhi.w	80041a8 <wm8994_SetFrequency+0x17c>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800406a:	4293      	cmp	r3, r2
 800406c:	f000 808e 	beq.w	800418c <wm8994_SetFrequency+0x160>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004076:	4293      	cmp	r3, r2
 8004078:	f200 8096 	bhi.w	80041a8 <wm8994_SetFrequency+0x17c>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8004082:	d03d      	beq.n	8004100 <wm8994_SetFrequency+0xd4>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800408a:	f200 808d 	bhi.w	80041a8 <wm8994_SetFrequency+0x17c>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f245 6222 	movw	r2, #22050	@ 0x5622
 8004094:	4293      	cmp	r3, r2
 8004096:	d06b      	beq.n	8004170 <wm8994_SetFrequency+0x144>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800409e:	4293      	cmp	r3, r2
 80040a0:	f200 8082 	bhi.w	80041a8 <wm8994_SetFrequency+0x17c>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80040aa:	d01b      	beq.n	80040e4 <wm8994_SetFrequency+0xb8>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80040b2:	d879      	bhi.n	80041a8 <wm8994_SetFrequency+0x17c>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80040ba:	d005      	beq.n	80040c8 <wm8994_SetFrequency+0x9c>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d046      	beq.n	8004154 <wm8994_SetFrequency+0x128>
 80040c6:	e06f      	b.n	80041a8 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2203      	movs	r2, #3
 80040ce:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f89e 	bl	8004214 <CODEC_IO_Write>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
    break;
 80040e2:	e06f      	b.n	80041c4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2233      	movs	r2, #51	@ 0x33
 80040ea:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f890 	bl	8004214 <CODEC_IO_Write>
 80040f4:	4603      	mov	r3, r0
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
    break;
 80040fe:	e061      	b.n	80041c4 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2263      	movs	r2, #99	@ 0x63
 8004106:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f882 	bl	8004214 <CODEC_IO_Write>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
    break;
 800411a:	e053      	b.n	80041c4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2283      	movs	r2, #131	@ 0x83
 8004122:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f874 	bl	8004214 <CODEC_IO_Write>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
    break;
 8004136:	e045      	b.n	80041c4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	22a3      	movs	r2, #163	@ 0xa3
 800413e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f866 	bl	8004214 <CODEC_IO_Write>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
    break;
 8004152:	e037      	b.n	80041c4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2213      	movs	r2, #19
 800415a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f858 	bl	8004214 <CODEC_IO_Write>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
    break;
 800416e:	e029      	b.n	80041c4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2243      	movs	r2, #67	@ 0x43
 8004176:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f84a 	bl	8004214 <CODEC_IO_Write>
 8004180:	4603      	mov	r3, r0
 8004182:	461a      	mov	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
    break;
 800418a:	e01b      	b.n	80041c4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2273      	movs	r2, #115	@ 0x73
 8004192:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f83c 	bl	8004214 <CODEC_IO_Write>
 800419c:	4603      	mov	r3, r0
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
    break; 
 80041a6:	e00d      	b.n	80041c4 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2283      	movs	r2, #131	@ 0x83
 80041ae:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f82e 	bl	8004214 <CODEC_IO_Write>
 80041b8:	4603      	mov	r3, r0
 80041ba:	461a      	mov	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
    break; 
 80041c2:	bf00      	nop
  }
  return counter;
 80041c4:	68fb      	ldr	r3, [r7, #12]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	00017700 	.word	0x00017700

080041d4 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2200      	movs	r2, #0
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f812 	bl	8004214 <CODEC_IO_Write>
 80041f0:	4603      	mov	r3, r0
 80041f2:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80041f4:	4b05      	ldr	r3, [pc, #20]	@ (800420c <wm8994_Reset+0x38>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <wm8994_Reset+0x3c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

  return counter;
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20030d74 	.word	0x20030d74
 8004210:	20030d78 	.word	0x20030d78

08004214 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
 800421e:	460b      	mov	r3, r1
 8004220:	80bb      	strh	r3, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	88b9      	ldrh	r1, [r7, #4]
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 f96f 	bl	8004514 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	b2db      	uxtb	r3, r3
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08c      	sub	sp, #48	@ 0x30
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a51      	ldr	r2, [pc, #324]	@ (8004394 <I2Cx_MspInit+0x150>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d14d      	bne.n	80042f0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004254:	4b50      	ldr	r3, [pc, #320]	@ (8004398 <I2Cx_MspInit+0x154>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	4a4f      	ldr	r2, [pc, #316]	@ (8004398 <I2Cx_MspInit+0x154>)
 800425a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800425e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004260:	4b4d      	ldr	r3, [pc, #308]	@ (8004398 <I2Cx_MspInit+0x154>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004270:	2312      	movs	r3, #18
 8004272:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004278:	2302      	movs	r3, #2
 800427a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800427c:	2304      	movs	r3, #4
 800427e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004280:	f107 031c 	add.w	r3, r7, #28
 8004284:	4619      	mov	r1, r3
 8004286:	4845      	ldr	r0, [pc, #276]	@ (800439c <I2Cx_MspInit+0x158>)
 8004288:	f001 fdf0 	bl	8005e6c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800428c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004292:	f107 031c 	add.w	r3, r7, #28
 8004296:	4619      	mov	r1, r3
 8004298:	4840      	ldr	r0, [pc, #256]	@ (800439c <I2Cx_MspInit+0x158>)
 800429a:	f001 fde7 	bl	8005e6c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800429e:	4b3e      	ldr	r3, [pc, #248]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	4a3d      	ldr	r2, [pc, #244]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80042b6:	4b38      	ldr	r3, [pc, #224]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a37      	ldr	r2, [pc, #220]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042c0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80042c2:	4b35      	ldr	r3, [pc, #212]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4a34      	ldr	r2, [pc, #208]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80042cc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80042ce:	2200      	movs	r2, #0
 80042d0:	210f      	movs	r1, #15
 80042d2:	2048      	movs	r0, #72	@ 0x48
 80042d4:	f001 f82d 	bl	8005332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80042d8:	2048      	movs	r0, #72	@ 0x48
 80042da:	f001 f846 	bl	800536a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80042de:	2200      	movs	r2, #0
 80042e0:	210f      	movs	r1, #15
 80042e2:	2049      	movs	r0, #73	@ 0x49
 80042e4:	f001 f825 	bl	8005332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80042e8:	2049      	movs	r0, #73	@ 0x49
 80042ea:	f001 f83e 	bl	800536a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80042ee:	e04d      	b.n	800438c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80042f0:	4b29      	ldr	r3, [pc, #164]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f4:	4a28      	ldr	r2, [pc, #160]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042f6:	f043 0302 	orr.w	r3, r3, #2
 80042fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fc:	4b26      	ldr	r3, [pc, #152]	@ (8004398 <I2Cx_MspInit+0x154>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800430c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800430e:	2312      	movs	r3, #18
 8004310:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004316:	2302      	movs	r3, #2
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800431a:	2304      	movs	r3, #4
 800431c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800431e:	f107 031c 	add.w	r3, r7, #28
 8004322:	4619      	mov	r1, r3
 8004324:	481e      	ldr	r0, [pc, #120]	@ (80043a0 <I2Cx_MspInit+0x15c>)
 8004326:	f001 fda1 	bl	8005e6c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800432a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800432e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004330:	f107 031c 	add.w	r3, r7, #28
 8004334:	4619      	mov	r1, r3
 8004336:	481a      	ldr	r0, [pc, #104]	@ (80043a0 <I2Cx_MspInit+0x15c>)
 8004338:	f001 fd98 	bl	8005e6c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800433c:	4b16      	ldr	r3, [pc, #88]	@ (8004398 <I2Cx_MspInit+0x154>)
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	4a15      	ldr	r2, [pc, #84]	@ (8004398 <I2Cx_MspInit+0x154>)
 8004342:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004346:	6413      	str	r3, [r2, #64]	@ 0x40
 8004348:	4b13      	ldr	r3, [pc, #76]	@ (8004398 <I2Cx_MspInit+0x154>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004354:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <I2Cx_MspInit+0x154>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4a0f      	ldr	r2, [pc, #60]	@ (8004398 <I2Cx_MspInit+0x154>)
 800435a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800435e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004360:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <I2Cx_MspInit+0x154>)
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4a0c      	ldr	r2, [pc, #48]	@ (8004398 <I2Cx_MspInit+0x154>)
 8004366:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800436a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	210f      	movs	r1, #15
 8004370:	201f      	movs	r0, #31
 8004372:	f000 ffde 	bl	8005332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004376:	201f      	movs	r0, #31
 8004378:	f000 fff7 	bl	800536a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800437c:	2200      	movs	r2, #0
 800437e:	210f      	movs	r1, #15
 8004380:	2020      	movs	r0, #32
 8004382:	f000 ffd6 	bl	8005332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004386:	2020      	movs	r0, #32
 8004388:	f000 ffef 	bl	800536a <HAL_NVIC_EnableIRQ>
}
 800438c:	bf00      	nop
 800438e:	3730      	adds	r7, #48	@ 0x30
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20030d7c 	.word	0x20030d7c
 8004398:	40023800 	.word	0x40023800
 800439c:	40021c00 	.word	0x40021c00
 80043a0:	40020400 	.word	0x40020400

080043a4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f002 fb87 	bl	8006ac0 <HAL_I2C_GetState>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d125      	bne.n	8004404 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a14      	ldr	r2, [pc, #80]	@ (800440c <I2Cx_Init+0x68>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d103      	bne.n	80043c8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a13      	ldr	r2, [pc, #76]	@ (8004410 <I2Cx_Init+0x6c>)
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	e002      	b.n	80043ce <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a12      	ldr	r2, [pc, #72]	@ (8004414 <I2Cx_Init+0x70>)
 80043cc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a11      	ldr	r2, [pc, #68]	@ (8004418 <I2Cx_Init+0x74>)
 80043d2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff23 	bl	8004244 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f002 f850 	bl	80064a4 <HAL_I2C_Init>
  }
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20030d7c 	.word	0x20030d7c
 8004410:	40005c00 	.word	0x40005c00
 8004414:	40005400 	.word	0x40005400
 8004418:	40912732 	.word	0x40912732

0800441c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	@ 0x28
 8004420:	af04      	add	r7, sp, #16
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4603      	mov	r3, r0
 800442c:	72fb      	strb	r3, [r7, #11]
 800442e:	460b      	mov	r3, r1
 8004430:	813b      	strh	r3, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800443a:	7afb      	ldrb	r3, [r7, #11]
 800443c:	b299      	uxth	r1, r3
 800443e:	88f8      	ldrh	r0, [r7, #6]
 8004440:	893a      	ldrh	r2, [r7, #8]
 8004442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004446:	9302      	str	r3, [sp, #8]
 8004448:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	4603      	mov	r3, r0
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f002 fa1a 	bl	800688c <HAL_I2C_Mem_Read>
 8004458:	4603      	mov	r3, r0
 800445a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d004      	beq.n	800446c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004462:	7afb      	ldrb	r3, [r7, #11]
 8004464:	4619      	mov	r1, r3
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f832 	bl	80044d0 <I2Cx_Error>
  }
  return status;    
 800446c:	7dfb      	ldrb	r3, [r7, #23]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b08a      	sub	sp, #40	@ 0x28
 800447a:	af04      	add	r7, sp, #16
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	4608      	mov	r0, r1
 8004480:	4611      	mov	r1, r2
 8004482:	461a      	mov	r2, r3
 8004484:	4603      	mov	r3, r0
 8004486:	72fb      	strb	r3, [r7, #11]
 8004488:	460b      	mov	r3, r1
 800448a:	813b      	strh	r3, [r7, #8]
 800448c:	4613      	mov	r3, r2
 800448e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004494:	7afb      	ldrb	r3, [r7, #11]
 8004496:	b299      	uxth	r1, r3
 8004498:	88f8      	ldrh	r0, [r7, #6]
 800449a:	893a      	ldrh	r2, [r7, #8]
 800449c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4603      	mov	r3, r0
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f002 f8d9 	bl	8006664 <HAL_I2C_Mem_Write>
 80044b2:	4603      	mov	r3, r0
 80044b4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80044bc:	7afb      	ldrb	r3, [r7, #11]
 80044be:	4619      	mov	r1, r3
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f805 	bl	80044d0 <I2Cx_Error>
  }
  return status;
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f002 f87d 	bl	80065dc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff ff5e 	bl	80043a4 <I2Cx_Init>
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80044f4:	4802      	ldr	r0, [pc, #8]	@ (8004500 <AUDIO_IO_Init+0x10>)
 80044f6:	f7ff ff55 	bl	80043a4 <I2Cx_Init>
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20030d7c 	.word	0x20030d7c

08004504 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af02      	add	r7, sp, #8
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
 800451e:	460b      	mov	r3, r1
 8004520:	80bb      	strh	r3, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8004526:	887b      	ldrh	r3, [r7, #2]
 8004528:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800452a:	89fb      	ldrh	r3, [r7, #14]
 800452c:	0a1b      	lsrs	r3, r3, #8
 800452e:	b29b      	uxth	r3, r3
 8004530:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	b21a      	sxth	r2, r3
 800453a:	887b      	ldrh	r3, [r7, #2]
 800453c:	b21b      	sxth	r3, r3
 800453e:	4313      	orrs	r3, r2
 8004540:	b21b      	sxth	r3, r3
 8004542:	b29b      	uxth	r3, r3
 8004544:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004546:	88ba      	ldrh	r2, [r7, #4]
 8004548:	79f9      	ldrb	r1, [r7, #7]
 800454a:	2302      	movs	r3, #2
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	1cbb      	adds	r3, r7, #2
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	2302      	movs	r3, #2
 8004554:	4803      	ldr	r0, [pc, #12]	@ (8004564 <AUDIO_IO_Write+0x50>)
 8004556:	f7ff ff8e 	bl	8004476 <I2Cx_WriteMultiple>
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20030d7c 	.word	0x20030d7c

08004568 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af02      	add	r7, sp, #8
 800456e:	4603      	mov	r3, r0
 8004570:	460a      	mov	r2, r1
 8004572:	71fb      	strb	r3, [r7, #7]
 8004574:	4613      	mov	r3, r2
 8004576:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	81bb      	strh	r3, [r7, #12]
 800457c:	2300      	movs	r3, #0
 800457e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004580:	88ba      	ldrh	r2, [r7, #4]
 8004582:	79f9      	ldrb	r1, [r7, #7]
 8004584:	2302      	movs	r3, #2
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	f107 030c 	add.w	r3, r7, #12
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	2302      	movs	r3, #2
 8004590:	480a      	ldr	r0, [pc, #40]	@ (80045bc <AUDIO_IO_Read+0x54>)
 8004592:	f7ff ff43 	bl	800441c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004596:	89bb      	ldrh	r3, [r7, #12]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800459c:	89bb      	ldrh	r3, [r7, #12]
 800459e:	b21b      	sxth	r3, r3
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	b21a      	sxth	r2, r3
 80045a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	b21b      	sxth	r3, r3
 80045ac:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80045ae:	89fb      	ldrh	r3, [r7, #14]
 80045b0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80045b2:	89bb      	ldrh	r3, [r7, #12]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20030d7c 	.word	0x20030d7c

080045c0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fdb3 	bl	8005134 <HAL_Delay>
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80045e0:	480e      	ldr	r0, [pc, #56]	@ (800461c <HAL_SAI_ErrorCallback+0x44>)
 80045e2:	f004 fb07 	bl	8008bf4 <HAL_SAI_GetState>
 80045e6:	4603      	mov	r3, r0
 80045e8:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80045ea:	480d      	ldr	r0, [pc, #52]	@ (8004620 <HAL_SAI_ErrorCallback+0x48>)
 80045ec:	f004 fb02 	bl	8008bf4 <HAL_SAI_GetState>
 80045f0:	4603      	mov	r3, r0
 80045f2:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d002      	beq.n	8004600 <HAL_SAI_ErrorCallback+0x28>
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b12      	cmp	r3, #18
 80045fe:	d101      	bne.n	8004604 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8004600:	f000 f810 	bl	8004624 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8004604:	7bbb      	ldrb	r3, [r7, #14]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d002      	beq.n	8004610 <HAL_SAI_ErrorCallback+0x38>
 800460a:	7bbb      	ldrb	r3, [r7, #14]
 800460c:	2b22      	cmp	r3, #34	@ 0x22
 800460e:	d101      	bne.n	8004614 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8004610:	f000 f9f6 	bl	8004a00 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20030dd4 	.word	0x20030dd4
 8004620:	20030e58 	.word	0x20030e58

08004624 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	@ 0x30
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800463e:	4b63      	ldr	r3, [pc, #396]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004642:	4a62      	ldr	r2, [pc, #392]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004644:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004648:	6453      	str	r3, [r2, #68]	@ 0x44
 800464a:	4b60      	ldr	r3, [pc, #384]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8004656:	4b5d      	ldr	r3, [pc, #372]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	4a5c      	ldr	r2, [pc, #368]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004660:	6313      	str	r3, [r2, #48]	@ 0x30
 8004662:	4b5a      	ldr	r3, [pc, #360]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800466e:	4b57      	ldr	r3, [pc, #348]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	4a56      	ldr	r2, [pc, #344]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004678:	6313      	str	r3, [r2, #48]	@ 0x30
 800467a:	4b54      	ldr	r3, [pc, #336]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8004686:	4b51      	ldr	r3, [pc, #324]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	4a50      	ldr	r2, [pc, #320]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004690:	6313      	str	r3, [r2, #48]	@ 0x30
 8004692:	4b4e      	ldr	r3, [pc, #312]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800469e:	2380      	movs	r3, #128	@ 0x80
 80046a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80046a2:	2302      	movs	r3, #2
 80046a4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80046aa:	2303      	movs	r3, #3
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80046ae:	230a      	movs	r3, #10
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80046b2:	f107 031c 	add.w	r3, r7, #28
 80046b6:	4619      	mov	r1, r3
 80046b8:	4845      	ldr	r0, [pc, #276]	@ (80047d0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80046ba:	f001 fbd7 	bl	8005e6c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80046be:	2320      	movs	r3, #32
 80046c0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80046c2:	2302      	movs	r3, #2
 80046c4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80046ca:	2303      	movs	r3, #3
 80046cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80046ce:	230a      	movs	r3, #10
 80046d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80046d2:	f107 031c 	add.w	r3, r7, #28
 80046d6:	4619      	mov	r1, r3
 80046d8:	483d      	ldr	r0, [pc, #244]	@ (80047d0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80046da:	f001 fbc7 	bl	8005e6c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80046de:	2340      	movs	r3, #64	@ 0x40
 80046e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80046e2:	2302      	movs	r3, #2
 80046e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80046ea:	2303      	movs	r3, #3
 80046ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80046ee:	230a      	movs	r3, #10
 80046f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80046f2:	f107 031c 	add.w	r3, r7, #28
 80046f6:	4619      	mov	r1, r3
 80046f8:	4835      	ldr	r0, [pc, #212]	@ (80047d0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80046fa:	f001 fbb7 	bl	8005e6c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80046fe:	2310      	movs	r3, #16
 8004700:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004702:	2302      	movs	r3, #2
 8004704:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800470a:	2303      	movs	r3, #3
 800470c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800470e:	230a      	movs	r3, #10
 8004710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004712:	f107 031c 	add.w	r3, r7, #28
 8004716:	4619      	mov	r1, r3
 8004718:	482d      	ldr	r0, [pc, #180]	@ (80047d0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800471a:	f001 fba7 	bl	8005e6c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800471e:	4b2b      	ldr	r3, [pc, #172]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004728:	6313      	str	r3, [r2, #48]	@ 0x30
 800472a:	4b28      	ldr	r3, [pc, #160]	@ (80047cc <BSP_AUDIO_OUT_MspInit+0x198>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a26      	ldr	r2, [pc, #152]	@ (80047d4 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d138      	bne.n	80047b2 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004740:	4b25      	ldr	r3, [pc, #148]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004742:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004746:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004748:	4b23      	ldr	r3, [pc, #140]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800474a:	2240      	movs	r2, #64	@ 0x40
 800474c:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800474e:	4b22      	ldr	r3, [pc, #136]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004750:	2200      	movs	r2, #0
 8004752:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004754:	4b20      	ldr	r3, [pc, #128]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004756:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800475a:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800475c:	4b1e      	ldr	r3, [pc, #120]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800475e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004762:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004764:	4b1c      	ldr	r3, [pc, #112]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004766:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800476a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800476c:	4b1a      	ldr	r3, [pc, #104]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800476e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004772:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004774:	4b18      	ldr	r3, [pc, #96]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004776:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800477a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800477c:	4b16      	ldr	r3, [pc, #88]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800477e:	2204      	movs	r2, #4
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004782:	4b15      	ldr	r3, [pc, #84]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004784:	2203      	movs	r2, #3
 8004786:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004788:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800478a:	2200      	movs	r2, #0
 800478c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800478e:	4b12      	ldr	r3, [pc, #72]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004794:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004796:	4a11      	ldr	r2, [pc, #68]	@ (80047dc <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004798:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a0e      	ldr	r2, [pc, #56]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800479e:	66da      	str	r2, [r3, #108]	@ 0x6c
 80047a0:	4a0d      	ldr	r2, [pc, #52]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80047a6:	480c      	ldr	r0, [pc, #48]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80047a8:	f000 ff9a 	bl	80056e0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 80047ac:	480a      	ldr	r0, [pc, #40]	@ (80047d8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80047ae:	f000 fee9 	bl	8005584 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80047b2:	2200      	movs	r2, #0
 80047b4:	210e      	movs	r1, #14
 80047b6:	203c      	movs	r0, #60	@ 0x3c
 80047b8:	f000 fdbb 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80047bc:	203c      	movs	r0, #60	@ 0x3c
 80047be:	f000 fdd4 	bl	800536a <HAL_NVIC_EnableIRQ>
}
 80047c2:	bf00      	nop
 80047c4:	3730      	adds	r7, #48	@ 0x30
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40022000 	.word	0x40022000
 80047d4:	40015c04 	.word	0x40015c04
 80047d8:	20030edc 	.word	0x20030edc
 80047dc:	40026470 	.word	0x40026470

080047e0 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b0a6      	sub	sp, #152	@ 0x98
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80047ec:	f107 0314 	add.w	r3, r7, #20
 80047f0:	4618      	mov	r0, r3
 80047f2:	f003 fcff 	bl	80081f4 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f245 6222 	movw	r2, #22050	@ 0x5622
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004810:	4293      	cmp	r3, r2
 8004812:	d112      	bne.n	800483a <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004814:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004818:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800481a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800481e:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004820:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8004824:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8004826:	2302      	movs	r3, #2
 8004828:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800482a:	2313      	movs	r3, #19
 800482c:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800482e:	f107 0314 	add.w	r3, r7, #20
 8004832:	4618      	mov	r0, r3
 8004834:	f003 f8ee 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 8004838:	e012      	b.n	8004860 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800483a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800483e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004840:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004844:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8004846:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800484a:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 800484c:	2307      	movs	r3, #7
 800484e:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004850:	2301      	movs	r3, #1
 8004852:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004854:	f107 0314 	add.w	r3, r7, #20
 8004858:	4618      	mov	r0, r3
 800485a:	f003 f8db 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	3798      	adds	r7, #152	@ 0x98
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); // MICROPHONE_1 for mono, 2 for stereo
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	68f9      	ldr	r1, [r7, #12]
 800487a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800487e:	f000 f805 	bl	800488c <BSP_AUDIO_IN_InitEx>
 8004882:	4603      	mov	r3, r0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b089      	sub	sp, #36	@ 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4603      	mov	r3, r0
 800489a:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80048a4:	89fb      	ldrh	r3, [r7, #14]
 80048a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048aa:	d006      	beq.n	80048ba <BSP_AUDIO_IN_InitEx+0x2e>
 80048ac:	89fb      	ldrh	r3, [r7, #14]
 80048ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b2:	d002      	beq.n	80048ba <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e046      	b.n	8004948 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80048ba:	f000 fa11 	bl	8004ce0 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80048be:	2200      	movs	r2, #0
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	4824      	ldr	r0, [pc, #144]	@ (8004954 <BSP_AUDIO_IN_InitEx+0xc8>)
 80048c4:	f7ff ff8c 	bl	80047e0 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80048c8:	4b22      	ldr	r3, [pc, #136]	@ (8004954 <BSP_AUDIO_IN_InitEx+0xc8>)
 80048ca:	4a23      	ldr	r2, [pc, #140]	@ (8004958 <BSP_AUDIO_IN_InitEx+0xcc>)
 80048cc:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80048ce:	4821      	ldr	r0, [pc, #132]	@ (8004954 <BSP_AUDIO_IN_InitEx+0xc8>)
 80048d0:	f004 f990 	bl	8008bf4 <HAL_SAI_GetState>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80048da:	2100      	movs	r1, #0
 80048dc:	481d      	ldr	r0, [pc, #116]	@ (8004954 <BSP_AUDIO_IN_InitEx+0xc8>)
 80048de:	f7ff fea9 	bl	8004634 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80048e2:	2100      	movs	r1, #0
 80048e4:	481b      	ldr	r0, [pc, #108]	@ (8004954 <BSP_AUDIO_IN_InitEx+0xc8>)
 80048e6:	f000 f893 	bl	8004a10 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80048ea:	89fb      	ldrh	r3, [r7, #14]
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048f0:	d102      	bne.n	80048f8 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80048f2:	230a      	movs	r3, #10
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e001      	b.n	80048fc <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80048f8:	2305      	movs	r3, #5
 80048fa:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	69b9      	ldr	r1, [r7, #24]
 8004900:	2001      	movs	r0, #1
 8004902:	f000 f937 	bl	8004b74 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8004906:	4b15      	ldr	r3, [pc, #84]	@ (800495c <BSP_AUDIO_IN_InitEx+0xd0>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2034      	movs	r0, #52	@ 0x34
 800490c:	4798      	blx	r3
 800490e:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f648 1294 	movw	r2, #35220	@ 0x8994
 8004916:	4293      	cmp	r3, r2
 8004918:	d109      	bne.n	800492e <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800491a:	4b10      	ldr	r3, [pc, #64]	@ (800495c <BSP_AUDIO_IN_InitEx+0xd0>)
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	2034      	movs	r0, #52	@ 0x34
 8004920:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8004922:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004924:	4a0d      	ldr	r2, [pc, #52]	@ (800495c <BSP_AUDIO_IN_InitEx+0xd0>)
 8004926:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e001      	b.n	8004932 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8004932:	7ffb      	ldrb	r3, [r7, #31]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8004938:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <BSP_AUDIO_IN_InitEx+0xd4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681c      	ldr	r4, [r3, #0]
 800493e:	89f9      	ldrh	r1, [r7, #14]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2264      	movs	r2, #100	@ 0x64
 8004944:	2034      	movs	r0, #52	@ 0x34
 8004946:	47a0      	blx	r4
    }
  }
  return ret;
 8004948:	7ffb      	ldrb	r3, [r7, #31]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3724      	adds	r7, #36	@ 0x24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd90      	pop	{r4, r7, pc}
 8004952:	bf00      	nop
 8004954:	20030e58 	.word	0x20030e58
 8004958:	40015c24 	.word	0x40015c24
 800495c:	2000001c 	.word	0x2000001c
 8004960:	20030dd0 	.word	0x20030dd0

08004964 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4805      	ldr	r0, [pc, #20]	@ (8004990 <BSP_AUDIO_IN_Record+0x2c>)
 800497c:	f004 f8ac 	bl	8008ad8 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	b2db      	uxtb	r3, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20030e58 	.word	0x20030e58

08004994 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 800499c:	480c      	ldr	r0, [pc, #48]	@ (80049d0 <BSP_AUDIO_IN_Stop+0x3c>)
 800499e:	f004 f828 	bl	80089f2 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80049a2:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <BSP_AUDIO_IN_Stop+0x40>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	2034      	movs	r0, #52	@ 0x34
 80049ac:	4798      	blx	r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e006      	b.n	80049c6 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d102      	bne.n	80049c4 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 80049be:	2001      	movs	r0, #1
 80049c0:	f000 fbb8 	bl	8005134 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80049c4:	2300      	movs	r3, #0
  }
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20030e58 	.word	0x20030e58
 80049d4:	20030dd0 	.word	0x20030dd0

080049d8 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80049e0:	f007 f844 	bl	800ba6c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80049f4:	f007 f882 	bl	800bafc <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8004a04:	bf00      	nop
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08c      	sub	sp, #48	@ 0x30
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8004a1a:	4b50      	ldr	r3, [pc, #320]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	4a4f      	ldr	r2, [pc, #316]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a26:	4b4d      	ldr	r3, [pc, #308]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8004a32:	4b4a      	ldr	r3, [pc, #296]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	4a49      	ldr	r2, [pc, #292]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a3e:	4b47      	ldr	r3, [pc, #284]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8004a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a4e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004a50:	2302      	movs	r3, #2
 8004a52:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004a5c:	230a      	movs	r3, #10
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004a60:	f107 031c 	add.w	r3, r7, #28
 8004a64:	4619      	mov	r1, r3
 8004a66:	483e      	ldr	r0, [pc, #248]	@ (8004b60 <BSP_AUDIO_IN_MspInit+0x150>)
 8004a68:	f001 fa00 	bl	8005e6c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a70:	4a3a      	ldr	r2, [pc, #232]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a78:	4b38      	ldr	r3, [pc, #224]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004a84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a88:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004a92:	2302      	movs	r3, #2
 8004a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8004a96:	f107 031c 	add.w	r3, r7, #28
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4831      	ldr	r0, [pc, #196]	@ (8004b64 <BSP_AUDIO_IN_MspInit+0x154>)
 8004a9e:	f001 f9e5 	bl	8005e6c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004aa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aae:	4b2b      	ldr	r3, [pc, #172]	@ (8004b5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2a      	ldr	r2, [pc, #168]	@ (8004b68 <BSP_AUDIO_IN_MspInit+0x158>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d137      	bne.n	8004b34 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004ac4:	4b29      	ldr	r3, [pc, #164]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004aca:	4b28      	ldr	r3, [pc, #160]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004ad0:	4b26      	ldr	r3, [pc, #152]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004ad6:	4b25      	ldr	r3, [pc, #148]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ad8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004adc:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004ade:	4b23      	ldr	r3, [pc, #140]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ae0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ae4:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004ae6:	4b21      	ldr	r3, [pc, #132]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ae8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004aec:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004aee:	4b1f      	ldr	r3, [pc, #124]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004af0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004af4:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004af6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004af8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004afc:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004afe:	4b1b      	ldr	r3, [pc, #108]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004b04:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004b06:	2203      	movs	r2, #3
 8004b08:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004b0a:	4b18      	ldr	r3, [pc, #96]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004b10:	4b16      	ldr	r3, [pc, #88]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004b16:	4b15      	ldr	r3, [pc, #84]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004b18:	4a15      	ldr	r2, [pc, #84]	@ (8004b70 <BSP_AUDIO_IN_MspInit+0x160>)
 8004b1a:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a13      	ldr	r2, [pc, #76]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004b20:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b22:	4a12      	ldr	r2, [pc, #72]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004b28:	4810      	ldr	r0, [pc, #64]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004b2a:	f000 fdd9 	bl	80056e0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8004b2e:	480f      	ldr	r0, [pc, #60]	@ (8004b6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004b30:	f000 fd28 	bl	8005584 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004b34:	2200      	movs	r2, #0
 8004b36:	210f      	movs	r1, #15
 8004b38:	2046      	movs	r0, #70	@ 0x46
 8004b3a:	f000 fbfa 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004b3e:	2046      	movs	r0, #70	@ 0x46
 8004b40:	f000 fc13 	bl	800536a <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004b44:	2200      	movs	r2, #0
 8004b46:	210f      	movs	r1, #15
 8004b48:	2028      	movs	r0, #40	@ 0x28
 8004b4a:	f000 fbf2 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004b4e:	2028      	movs	r0, #40	@ 0x28
 8004b50:	f000 fc0b 	bl	800536a <HAL_NVIC_EnableIRQ>
}
 8004b54:	bf00      	nop
 8004b56:	3730      	adds	r7, #48	@ 0x30
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40021800 	.word	0x40021800
 8004b64:	40021c00 	.word	0x40021c00
 8004b68:	40015c24 	.word	0x40015c24
 8004b6c:	20030f3c 	.word	0x20030f3c
 8004b70:	400264b8 	.word	0x400264b8

08004b74 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004b80:	4b53      	ldr	r3, [pc, #332]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004b82:	4a54      	ldr	r2, [pc, #336]	@ (8004cd4 <SAIx_In_Init+0x160>)
 8004b84:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8004b86:	4b52      	ldr	r3, [pc, #328]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b50      	ldr	r3, [pc, #320]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004b94:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004b96:	4a4e      	ldr	r2, [pc, #312]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004ba8:	4b49      	ldr	r3, [pc, #292]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004bae:	4b48      	ldr	r3, [pc, #288]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bb0:	2280      	movs	r2, #128	@ 0x80
 8004bb2:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004bb4:	4b46      	ldr	r3, [pc, #280]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004bba:	4b45      	ldr	r3, [pc, #276]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004bc0:	4b43      	ldr	r3, [pc, #268]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004bc6:	4b42      	ldr	r3, [pc, #264]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bcc:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004bce:	4b40      	ldr	r3, [pc, #256]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bd6:	2240      	movs	r2, #64	@ 0x40
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004bda:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bdc:	2220      	movs	r2, #32
 8004bde:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004be0:	4b3b      	ldr	r3, [pc, #236]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004be2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004be6:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004be8:	4b39      	ldr	r3, [pc, #228]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004bee:	4b38      	ldr	r3, [pc, #224]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bf0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004bf4:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004bf6:	4b36      	ldr	r3, [pc, #216]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004bfc:	4b34      	ldr	r3, [pc, #208]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8004c02:	4b33      	ldr	r3, [pc, #204]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004c04:	2204      	movs	r2, #4
 8004c06:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004c08:	4a31      	ldr	r2, [pc, #196]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8004c0e:	4830      	ldr	r0, [pc, #192]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004c10:	f003 fd3c 	bl	800868c <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004c14:	4b30      	ldr	r3, [pc, #192]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c16:	4a31      	ldr	r2, [pc, #196]	@ (8004cdc <SAIx_In_Init+0x168>)
 8004c18:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004c28:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004c30:	4b29      	ldr	r3, [pc, #164]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c32:	2203      	movs	r2, #3
 8004c34:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004c36:	4b28      	ldr	r3, [pc, #160]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004c3c:	4b26      	ldr	r3, [pc, #152]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8004c42:	4b25      	ldr	r3, [pc, #148]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c44:	2280      	movs	r2, #128	@ 0x80
 8004c46:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004c48:	4b23      	ldr	r3, [pc, #140]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004c4e:	4b22      	ldr	r3, [pc, #136]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8004c54:	4b20      	ldr	r3, [pc, #128]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004c60:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8004c66:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c68:	2240      	movs	r2, #64	@ 0x40
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c6e:	2220      	movs	r2, #32
 8004c70:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004c72:	4b19      	ldr	r3, [pc, #100]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004c78:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004c7a:	4b17      	ldr	r3, [pc, #92]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004c80:	4b15      	ldr	r3, [pc, #84]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c82:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004c86:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004c88:	4b13      	ldr	r3, [pc, #76]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004c8e:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004c94:	4b10      	ldr	r3, [pc, #64]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c96:	2204      	movs	r2, #4
 8004c98:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8004c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004ca0:	480d      	ldr	r0, [pc, #52]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004ca2:	f003 fcf3 	bl	800868c <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b08      	ldr	r3, [pc, #32]	@ (8004cd0 <SAIx_In_Init+0x15c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004cb6:	4b08      	ldr	r3, [pc, #32]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <SAIx_In_Init+0x164>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20030dd4 	.word	0x20030dd4
 8004cd4:	40015c04 	.word	0x40015c04
 8004cd8:	20030e58 	.word	0x20030e58
 8004cdc:	40015c24 	.word	0x40015c24

08004ce0 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004ce4:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <SAIx_In_DeInit+0x24>)
 8004ce6:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <SAIx_In_DeInit+0x28>)
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004cea:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <SAIx_In_DeInit+0x24>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <SAIx_In_DeInit+0x24>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004cf8:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8004cfa:	4802      	ldr	r0, [pc, #8]	@ (8004d04 <SAIx_In_DeInit+0x24>)
 8004cfc:	f003 fe44 	bl	8008988 <HAL_SAI_DeInit>
}
 8004d00:	bf00      	nop
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20030e58 	.word	0x20030e58
 8004d08:	40015c24 	.word	0x40015c24

08004d0c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004d10:	4b29      	ldr	r3, [pc, #164]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d12:	4a2a      	ldr	r2, [pc, #168]	@ (8004dbc <BSP_SDRAM_Init+0xb0>)
 8004d14:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004d16:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d18:	2202      	movs	r2, #2
 8004d1a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004d1c:	4b28      	ldr	r3, [pc, #160]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d1e:	2207      	movs	r2, #7
 8004d20:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004d22:	4b27      	ldr	r3, [pc, #156]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d24:	2204      	movs	r2, #4
 8004d26:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004d28:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d2a:	2207      	movs	r2, #7
 8004d2c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004d2e:	4b24      	ldr	r3, [pc, #144]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d30:	2202      	movs	r2, #2
 8004d32:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004d34:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d36:	2202      	movs	r2, #2
 8004d38:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004d3a:	4b21      	ldr	r3, [pc, #132]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004d40:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004d46:	4b1c      	ldr	r3, [pc, #112]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d4e:	2204      	movs	r2, #4
 8004d50:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004d52:	4b19      	ldr	r3, [pc, #100]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d54:	2210      	movs	r2, #16
 8004d56:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004d58:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d5a:	2240      	movs	r2, #64	@ 0x40
 8004d5c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004d5e:	4b16      	ldr	r3, [pc, #88]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d64:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004d66:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004d6c:	4b12      	ldr	r3, [pc, #72]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d72:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004d74:	4b10      	ldr	r3, [pc, #64]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d7a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004d82:	2100      	movs	r1, #0
 8004d84:	480c      	ldr	r0, [pc, #48]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d86:	f000 f87f 	bl	8004e88 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004d8a:	490d      	ldr	r1, [pc, #52]	@ (8004dc0 <BSP_SDRAM_Init+0xb4>)
 8004d8c:	480a      	ldr	r0, [pc, #40]	@ (8004db8 <BSP_SDRAM_Init+0xac>)
 8004d8e:	f005 f947 	bl	800a020 <HAL_SDRAM_Init>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004d98:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <BSP_SDRAM_Init+0xb8>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e002      	b.n	8004da6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004da0:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <BSP_SDRAM_Init+0xb8>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004da6:	f240 6003 	movw	r0, #1539	@ 0x603
 8004daa:	f000 f80d 	bl	8004dc8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004dae:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <BSP_SDRAM_Init+0xb8>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20030f9c 	.word	0x20030f9c
 8004dbc:	a0000140 	.word	0xa0000140
 8004dc0:	20030fd0 	.word	0x20030fd0
 8004dc4:	2000004d 	.word	0x2000004d

08004dc8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004dda:	4b29      	ldr	r3, [pc, #164]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ddc:	2210      	movs	r2, #16
 8004dde:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004de0:	4b27      	ldr	r3, [pc, #156]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004de6:	4b26      	ldr	r3, [pc, #152]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004df0:	4923      	ldr	r1, [pc, #140]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004df2:	4824      	ldr	r0, [pc, #144]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004df4:	f005 f948 	bl	800a088 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004df8:	2001      	movs	r0, #1
 8004dfa:	f000 f99b 	bl	8005134 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004dfe:	4b20      	ldr	r3, [pc, #128]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e00:	2202      	movs	r2, #2
 8004e02:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004e04:	4b1e      	ldr	r3, [pc, #120]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e06:	2210      	movs	r2, #16
 8004e08:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004e16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e1a:	4919      	ldr	r1, [pc, #100]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e1c:	4819      	ldr	r0, [pc, #100]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e1e:	f005 f933 	bl	800a088 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004e22:	4b17      	ldr	r3, [pc, #92]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e24:	2203      	movs	r2, #3
 8004e26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004e28:	4b15      	ldr	r3, [pc, #84]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e2a:	2210      	movs	r2, #16
 8004e2c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004e2e:	4b14      	ldr	r3, [pc, #80]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e30:	2208      	movs	r2, #8
 8004e32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004e34:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e3e:	4910      	ldr	r1, [pc, #64]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e40:	4810      	ldr	r0, [pc, #64]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e42:	f005 f921 	bl	800a088 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004e46:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004e4a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e4e:	2204      	movs	r2, #4
 8004e50:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e54:	2210      	movs	r2, #16
 8004e56:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a07      	ldr	r2, [pc, #28]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e62:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004e64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e68:	4905      	ldr	r1, [pc, #20]	@ (8004e80 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e6a:	4806      	ldr	r0, [pc, #24]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e6c:	f005 f90c 	bl	800a088 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4804      	ldr	r0, [pc, #16]	@ (8004e84 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e74:	f005 f93d 	bl	800a0f2 <HAL_SDRAM_ProgramRefreshRate>
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20030fec 	.word	0x20030fec
 8004e84:	20030f9c 	.word	0x20030f9c

08004e88 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b090      	sub	sp, #64	@ 0x40
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004e92:	4b70      	ldr	r3, [pc, #448]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e96:	4a6f      	ldr	r2, [pc, #444]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6393      	str	r3, [r2, #56]	@ 0x38
 8004e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eae:	4a69      	ldr	r2, [pc, #420]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004eb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eb6:	4b67      	ldr	r3, [pc, #412]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ec2:	4b64      	ldr	r3, [pc, #400]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	4a63      	ldr	r2, [pc, #396]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004ec8:	f043 0304 	orr.w	r3, r3, #4
 8004ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ece:	4b61      	ldr	r3, [pc, #388]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	623b      	str	r3, [r7, #32]
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eda:	4b5e      	ldr	r3, [pc, #376]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ede:	4a5d      	ldr	r2, [pc, #372]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004ee0:	f043 0308 	orr.w	r3, r3, #8
 8004ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ef2:	4b58      	ldr	r3, [pc, #352]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	4a57      	ldr	r2, [pc, #348]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004ef8:	f043 0310 	orr.w	r3, r3, #16
 8004efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004efe:	4b55      	ldr	r3, [pc, #340]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f0a:	4b52      	ldr	r3, [pc, #328]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	4a51      	ldr	r2, [pc, #324]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f10:	f043 0320 	orr.w	r3, r3, #32
 8004f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f16:	4b4f      	ldr	r3, [pc, #316]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f22:	4b4c      	ldr	r3, [pc, #304]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	4a4b      	ldr	r2, [pc, #300]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f2e:	4b49      	ldr	r3, [pc, #292]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f3a:	4b46      	ldr	r3, [pc, #280]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	4a45      	ldr	r2, [pc, #276]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f46:	4b43      	ldr	r3, [pc, #268]	@ (8005054 <BSP_SDRAM_MspInit+0x1cc>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004f52:	2302      	movs	r3, #2
 8004f54:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004f56:	2301      	movs	r3, #1
 8004f58:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004f5e:	230c      	movs	r3, #12
 8004f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004f62:	2308      	movs	r3, #8
 8004f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	483a      	ldr	r0, [pc, #232]	@ (8005058 <BSP_SDRAM_MspInit+0x1d0>)
 8004f6e:	f000 ff7d 	bl	8005e6c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004f72:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004f78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4837      	ldr	r0, [pc, #220]	@ (800505c <BSP_SDRAM_MspInit+0x1d4>)
 8004f80:	f000 ff74 	bl	8005e6c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004f84:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4833      	ldr	r0, [pc, #204]	@ (8005060 <BSP_SDRAM_MspInit+0x1d8>)
 8004f92:	f000 ff6b 	bl	8005e6c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004f96:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004f9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4830      	ldr	r0, [pc, #192]	@ (8005064 <BSP_SDRAM_MspInit+0x1dc>)
 8004fa4:	f000 ff62 	bl	8005e6c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004fa8:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004fae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	482c      	ldr	r0, [pc, #176]	@ (8005068 <BSP_SDRAM_MspInit+0x1e0>)
 8004fb6:	f000 ff59 	bl	8005e6c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004fba:	2328      	movs	r3, #40	@ 0x28
 8004fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004fbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4829      	ldr	r0, [pc, #164]	@ (800506c <BSP_SDRAM_MspInit+0x1e4>)
 8004fc6:	f000 ff51 	bl	8005e6c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004fca:	4b29      	ldr	r3, [pc, #164]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004fd0:	4b27      	ldr	r3, [pc, #156]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8004fd2:	2280      	movs	r2, #128	@ 0x80
 8004fd4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004fd6:	4b26      	ldr	r3, [pc, #152]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8004fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fdc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004fde:	4b24      	ldr	r3, [pc, #144]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8004fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004fe4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fe6:	4b22      	ldr	r3, [pc, #136]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8004fe8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004fec:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004fee:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8004ff0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ff4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8004ffe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005002:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005004:	4b1a      	ldr	r3, [pc, #104]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8005006:	2200      	movs	r2, #0
 8005008:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800500a:	4b19      	ldr	r3, [pc, #100]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 800500c:	2203      	movs	r2, #3
 800500e:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005010:	4b17      	ldr	r3, [pc, #92]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8005012:	2200      	movs	r2, #0
 8005014:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005016:	4b16      	ldr	r3, [pc, #88]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800501c:	4b14      	ldr	r3, [pc, #80]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 800501e:	4a15      	ldr	r2, [pc, #84]	@ (8005074 <BSP_SDRAM_MspInit+0x1ec>)
 8005020:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30
 8005028:	4a11      	ldr	r2, [pc, #68]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800502e:	4810      	ldr	r0, [pc, #64]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8005030:	f000 fb56 	bl	80056e0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005034:	480e      	ldr	r0, [pc, #56]	@ (8005070 <BSP_SDRAM_MspInit+0x1e8>)
 8005036:	f000 faa5 	bl	8005584 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800503a:	2200      	movs	r2, #0
 800503c:	210f      	movs	r1, #15
 800503e:	2038      	movs	r0, #56	@ 0x38
 8005040:	f000 f977 	bl	8005332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005044:	2038      	movs	r0, #56	@ 0x38
 8005046:	f000 f990 	bl	800536a <HAL_NVIC_EnableIRQ>
}
 800504a:	bf00      	nop
 800504c:	3740      	adds	r7, #64	@ 0x40
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40023800 	.word	0x40023800
 8005058:	40020800 	.word	0x40020800
 800505c:	40020c00 	.word	0x40020c00
 8005060:	40021000 	.word	0x40021000
 8005064:	40021400 	.word	0x40021400
 8005068:	40021800 	.word	0x40021800
 800506c:	40021c00 	.word	0x40021c00
 8005070:	20030ffc 	.word	0x20030ffc
 8005074:	40026410 	.word	0x40026410

08005078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800507c:	2003      	movs	r0, #3
 800507e:	f000 f94d 	bl	800531c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005082:	2000      	movs	r0, #0
 8005084:	f000 f806 	bl	8005094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005088:	f7fd fb66 	bl	8002758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800509c:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <HAL_InitTick+0x54>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <HAL_InitTick+0x58>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4619      	mov	r1, r3
 80050a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f967 	bl	8005386 <HAL_SYSTICK_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e00e      	b.n	80050e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b0f      	cmp	r3, #15
 80050c6:	d80a      	bhi.n	80050de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050c8:	2200      	movs	r2, #0
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	f000 f92f 	bl	8005332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050d4:	4a06      	ldr	r2, [pc, #24]	@ (80050f0 <HAL_InitTick+0x5c>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000018 	.word	0x20000018
 80050ec:	20000054 	.word	0x20000054
 80050f0:	20000050 	.word	0x20000050

080050f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050f8:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <HAL_IncTick+0x20>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <HAL_IncTick+0x24>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4413      	add	r3, r2
 8005104:	4a04      	ldr	r2, [pc, #16]	@ (8005118 <HAL_IncTick+0x24>)
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000054 	.word	0x20000054
 8005118:	2003105c 	.word	0x2003105c

0800511c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return uwTick;
 8005120:	4b03      	ldr	r3, [pc, #12]	@ (8005130 <HAL_GetTick+0x14>)
 8005122:	681b      	ldr	r3, [r3, #0]
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	2003105c 	.word	0x2003105c

08005134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800513c:	f7ff ffee 	bl	800511c <HAL_GetTick>
 8005140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d005      	beq.n	800515a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800514e:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <HAL_Delay+0x44>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800515a:	bf00      	nop
 800515c:	f7ff ffde 	bl	800511c <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	429a      	cmp	r2, r3
 800516a:	d8f7      	bhi.n	800515c <HAL_Delay+0x28>
  {
  }
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000054 	.word	0x20000054

0800517c <__NVIC_SetPriorityGrouping>:
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800518c:	4b0b      	ldr	r3, [pc, #44]	@ (80051bc <__NVIC_SetPriorityGrouping+0x40>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005198:	4013      	ands	r3, r2
 800519a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051a4:	4b06      	ldr	r3, [pc, #24]	@ (80051c0 <__NVIC_SetPriorityGrouping+0x44>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051aa:	4a04      	ldr	r2, [pc, #16]	@ (80051bc <__NVIC_SetPriorityGrouping+0x40>)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	60d3      	str	r3, [r2, #12]
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	e000ed00 	.word	0xe000ed00
 80051c0:	05fa0000 	.word	0x05fa0000

080051c4 <__NVIC_GetPriorityGrouping>:
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051c8:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <__NVIC_GetPriorityGrouping+0x18>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	0a1b      	lsrs	r3, r3, #8
 80051ce:	f003 0307 	and.w	r3, r3, #7
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	e000ed00 	.word	0xe000ed00

080051e0 <__NVIC_EnableIRQ>:
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	db0b      	blt.n	800520a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	f003 021f 	and.w	r2, r3, #31
 80051f8:	4907      	ldr	r1, [pc, #28]	@ (8005218 <__NVIC_EnableIRQ+0x38>)
 80051fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	2001      	movs	r0, #1
 8005202:	fa00 f202 	lsl.w	r2, r0, r2
 8005206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	e000e100 	.word	0xe000e100

0800521c <__NVIC_SetPriority>:
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	6039      	str	r1, [r7, #0]
 8005226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522c:	2b00      	cmp	r3, #0
 800522e:	db0a      	blt.n	8005246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	490c      	ldr	r1, [pc, #48]	@ (8005268 <__NVIC_SetPriority+0x4c>)
 8005236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523a:	0112      	lsls	r2, r2, #4
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	440b      	add	r3, r1
 8005240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005244:	e00a      	b.n	800525c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	4908      	ldr	r1, [pc, #32]	@ (800526c <__NVIC_SetPriority+0x50>)
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	3b04      	subs	r3, #4
 8005254:	0112      	lsls	r2, r2, #4
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	440b      	add	r3, r1
 800525a:	761a      	strb	r2, [r3, #24]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	e000e100 	.word	0xe000e100
 800526c:	e000ed00 	.word	0xe000ed00

08005270 <NVIC_EncodePriority>:
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	@ 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f1c3 0307 	rsb	r3, r3, #7
 800528a:	2b04      	cmp	r3, #4
 800528c:	bf28      	it	cs
 800528e:	2304      	movcs	r3, #4
 8005290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	3304      	adds	r3, #4
 8005296:	2b06      	cmp	r3, #6
 8005298:	d902      	bls.n	80052a0 <NVIC_EncodePriority+0x30>
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3b03      	subs	r3, #3
 800529e:	e000      	b.n	80052a2 <NVIC_EncodePriority+0x32>
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a4:	f04f 32ff 	mov.w	r2, #4294967295
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43da      	mvns	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	401a      	ands	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052b8:	f04f 31ff 	mov.w	r1, #4294967295
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	fa01 f303 	lsl.w	r3, r1, r3
 80052c2:	43d9      	mvns	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052c8:	4313      	orrs	r3, r2
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3724      	adds	r7, #36	@ 0x24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052e8:	d301      	bcc.n	80052ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052ea:	2301      	movs	r3, #1
 80052ec:	e00f      	b.n	800530e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005318 <SysTick_Config+0x40>)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052f6:	210f      	movs	r1, #15
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	f7ff ff8e 	bl	800521c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005300:	4b05      	ldr	r3, [pc, #20]	@ (8005318 <SysTick_Config+0x40>)
 8005302:	2200      	movs	r2, #0
 8005304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005306:	4b04      	ldr	r3, [pc, #16]	@ (8005318 <SysTick_Config+0x40>)
 8005308:	2207      	movs	r2, #7
 800530a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	e000e010 	.word	0xe000e010

0800531c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff ff29 	bl	800517c <__NVIC_SetPriorityGrouping>
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005332:	b580      	push	{r7, lr}
 8005334:	b086      	sub	sp, #24
 8005336:	af00      	add	r7, sp, #0
 8005338:	4603      	mov	r3, r0
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005344:	f7ff ff3e 	bl	80051c4 <__NVIC_GetPriorityGrouping>
 8005348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f7ff ff8e 	bl	8005270 <NVIC_EncodePriority>
 8005354:	4602      	mov	r2, r0
 8005356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff ff5d 	bl	800521c <__NVIC_SetPriority>
}
 8005362:	bf00      	nop
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	4603      	mov	r3, r0
 8005372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff ff31 	bl	80051e0 <__NVIC_EnableIRQ>
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff ffa2 	bl	80052d8 <SysTick_Config>
 8005394:	4603      	mov	r3, r0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e054      	b.n	800545c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7f5b      	ldrb	r3, [r3, #29]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fb fe0a 	bl	8000fdc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	791b      	ldrb	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10c      	bne.n	80053f0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <HAL_CRC_Init+0xc4>)
 80053dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0218 	bic.w	r2, r2, #24
 80053ec:	609a      	str	r2, [r3, #8]
 80053ee:	e00c      	b.n	800540a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6899      	ldr	r1, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f834 	bl	8005468 <HAL_CRCEx_Polynomial_Set>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e028      	b.n	800545c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	795b      	ldrb	r3, [r3, #5]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d105      	bne.n	800541e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	611a      	str	r2, [r3, #16]
 800541c:	e004      	b.n	8005428 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6912      	ldr	r2, [r2, #16]
 8005426:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	04c11db7 	.word	0x04c11db7

08005468 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005478:	231f      	movs	r3, #31
 800547a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d102      	bne.n	800548c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	75fb      	strb	r3, [r7, #23]
 800548a:	e063      	b.n	8005554 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800548c:	bf00      	nop
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1e5a      	subs	r2, r3, #1
 8005492:	613a      	str	r2, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <HAL_CRCEx_Polynomial_Set+0x44>
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b18      	cmp	r3, #24
 80054b0:	d846      	bhi.n	8005540 <HAL_CRCEx_Polynomial_Set+0xd8>
 80054b2:	a201      	add	r2, pc, #4	@ (adr r2, 80054b8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	08005547 	.word	0x08005547
 80054bc:	08005541 	.word	0x08005541
 80054c0:	08005541 	.word	0x08005541
 80054c4:	08005541 	.word	0x08005541
 80054c8:	08005541 	.word	0x08005541
 80054cc:	08005541 	.word	0x08005541
 80054d0:	08005541 	.word	0x08005541
 80054d4:	08005541 	.word	0x08005541
 80054d8:	08005535 	.word	0x08005535
 80054dc:	08005541 	.word	0x08005541
 80054e0:	08005541 	.word	0x08005541
 80054e4:	08005541 	.word	0x08005541
 80054e8:	08005541 	.word	0x08005541
 80054ec:	08005541 	.word	0x08005541
 80054f0:	08005541 	.word	0x08005541
 80054f4:	08005541 	.word	0x08005541
 80054f8:	08005529 	.word	0x08005529
 80054fc:	08005541 	.word	0x08005541
 8005500:	08005541 	.word	0x08005541
 8005504:	08005541 	.word	0x08005541
 8005508:	08005541 	.word	0x08005541
 800550c:	08005541 	.word	0x08005541
 8005510:	08005541 	.word	0x08005541
 8005514:	08005541 	.word	0x08005541
 8005518:	0800551d 	.word	0x0800551d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b06      	cmp	r3, #6
 8005520:	d913      	bls.n	800554a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005526:	e010      	b.n	800554a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b07      	cmp	r3, #7
 800552c:	d90f      	bls.n	800554e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005532:	e00c      	b.n	800554e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b0f      	cmp	r3, #15
 8005538:	d90b      	bls.n	8005552 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800553e:	e008      	b.n	8005552 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	75fb      	strb	r3, [r7, #23]
        break;
 8005544:	e006      	b.n	8005554 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005546:	bf00      	nop
 8005548:	e004      	b.n	8005554 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005552:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 0118 	bic.w	r1, r3, #24
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
}
 8005578:	4618      	mov	r0, r3
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005590:	f7ff fdc4 	bl	800511c <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e099      	b.n	80056d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055c0:	e00f      	b.n	80055e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055c2:	f7ff fdab 	bl	800511c <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d908      	bls.n	80055e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2203      	movs	r2, #3
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e078      	b.n	80056d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e8      	bne.n	80055c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4b38      	ldr	r3, [pc, #224]	@ (80056dc <HAL_DMA_Init+0x158>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800560e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	2b04      	cmp	r3, #4
 800563a:	d107      	bne.n	800564c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	4313      	orrs	r3, r2
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	2b04      	cmp	r3, #4
 8005674:	d117      	bne.n	80056a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00e      	beq.n	80056a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb73 	bl	8005d74 <DMA_CheckFifoParam>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2240      	movs	r2, #64	@ 0x40
 8005698:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80056a2:	2301      	movs	r3, #1
 80056a4:	e016      	b.n	80056d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fb2a 	bl	8005d08 <DMA_CalcBaseAndBitshift>
 80056b4:	4603      	mov	r3, r0
 80056b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	223f      	movs	r2, #63	@ 0x3f
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	f010803f 	.word	0xf010803f

080056e0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e050      	b.n	8005794 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d101      	bne.n	8005702 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
 8005700:	e048      	b.n	8005794 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2221      	movs	r2, #33	@ 0x21
 8005740:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fae0 	bl	8005d08 <DMA_CalcBaseAndBitshift>
 8005748:	4603      	mov	r3, r0
 800574a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005750:	223f      	movs	r2, #63	@ 0x3f
 8005752:	409a      	lsls	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_DMA_Start_IT+0x26>
 80057be:	2302      	movs	r3, #2
 80057c0:	e048      	b.n	8005854 <HAL_DMA_Start_IT+0xb8>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d137      	bne.n	8005846 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fa5e 	bl	8005cac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f4:	223f      	movs	r2, #63	@ 0x3f
 80057f6:	409a      	lsls	r2, r3
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0216 	orr.w	r2, r2, #22
 800580a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800581a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0208 	orr.w	r2, r2, #8
 8005832:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e005      	b.n	8005852 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800584e:	2302      	movs	r3, #2
 8005850:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005868:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800586a:	f7ff fc57 	bl	800511c <HAL_GetTick>
 800586e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d008      	beq.n	800588e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2280      	movs	r2, #128	@ 0x80
 8005880:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e052      	b.n	8005934 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0216 	bic.w	r2, r2, #22
 800589c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <HAL_DMA_Abort+0x62>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0208 	bic.w	r2, r2, #8
 80058cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058de:	e013      	b.n	8005908 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058e0:	f7ff fc1c 	bl	800511c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d90c      	bls.n	8005908 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2203      	movs	r2, #3
 80058f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e015      	b.n	8005934 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e4      	bne.n	80058e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591a:	223f      	movs	r2, #63	@ 0x3f
 800591c:	409a      	lsls	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d004      	beq.n	800595a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2280      	movs	r2, #128	@ 0x80
 8005954:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e00c      	b.n	8005974 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2205      	movs	r2, #5
 800595e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800598c:	4b8e      	ldr	r3, [pc, #568]	@ (8005bc8 <HAL_DMA_IRQHandler+0x248>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a8e      	ldr	r2, [pc, #568]	@ (8005bcc <HAL_DMA_IRQHandler+0x24c>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	0a9b      	lsrs	r3, r3, #10
 8005998:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059aa:	2208      	movs	r2, #8
 80059ac:	409a      	lsls	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01a      	beq.n	80059ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d013      	beq.n	80059ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0204 	bic.w	r2, r2, #4
 80059d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d8:	2208      	movs	r2, #8
 80059da:	409a      	lsls	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e4:	f043 0201 	orr.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f0:	2201      	movs	r2, #1
 80059f2:	409a      	lsls	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d012      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a0e:	2201      	movs	r2, #1
 8005a10:	409a      	lsls	r2, r3
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1a:	f043 0202 	orr.w	r2, r3, #2
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a26:	2204      	movs	r2, #4
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d012      	beq.n	8005a58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a44:	2204      	movs	r2, #4
 8005a46:	409a      	lsls	r2, r3
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a50:	f043 0204 	orr.w	r2, r3, #4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4013      	ands	r3, r2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d043      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d03c      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	409a      	lsls	r2, r3
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d018      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d024      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
 8005aae:	e01f      	b.n	8005af0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01b      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	4798      	blx	r3
 8005ac0:	e016      	b.n	8005af0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0208 	bic.w	r2, r2, #8
 8005ade:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af4:	2220      	movs	r2, #32
 8005af6:	409a      	lsls	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 808f 	beq.w	8005c20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8087 	beq.w	8005c20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b16:	2220      	movs	r2, #32
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d136      	bne.n	8005b98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0216 	bic.w	r2, r2, #22
 8005b38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <HAL_DMA_IRQHandler+0x1da>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0208 	bic.w	r2, r2, #8
 8005b68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6e:	223f      	movs	r2, #63	@ 0x3f
 8005b70:	409a      	lsls	r2, r3
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d07e      	beq.n	8005c8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
        }
        return;
 8005b96:	e079      	b.n	8005c8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01d      	beq.n	8005be2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10d      	bne.n	8005bd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d031      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
 8005bc4:	e02c      	b.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
 8005bc6:	bf00      	nop
 8005bc8:	20000018 	.word	0x20000018
 8005bcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d023      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
 8005be0:	e01e      	b.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10f      	bne.n	8005c10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0210 	bic.w	r2, r2, #16
 8005bfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d032      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d022      	beq.n	8005c7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2205      	movs	r2, #5
 8005c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d307      	bcc.n	8005c68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1f2      	bne.n	8005c4c <HAL_DMA_IRQHandler+0x2cc>
 8005c66:	e000      	b.n	8005c6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
 8005c8a:	e000      	b.n	8005c8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c8c:	bf00      	nop
    }
  }
}
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005cc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b40      	cmp	r3, #64	@ 0x40
 8005cd8:	d108      	bne.n	8005cec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005cea:	e007      	b.n	8005cfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	60da      	str	r2, [r3, #12]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	3b10      	subs	r3, #16
 8005d18:	4a13      	ldr	r2, [pc, #76]	@ (8005d68 <DMA_CalcBaseAndBitshift+0x60>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	091b      	lsrs	r3, r3, #4
 8005d20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d22:	4a12      	ldr	r2, [pc, #72]	@ (8005d6c <DMA_CalcBaseAndBitshift+0x64>)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d908      	bls.n	8005d48 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d70 <DMA_CalcBaseAndBitshift+0x68>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	1d1a      	adds	r2, r3, #4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d46:	e006      	b.n	8005d56 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b08      	ldr	r3, [pc, #32]	@ (8005d70 <DMA_CalcBaseAndBitshift+0x68>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	aaaaaaab 	.word	0xaaaaaaab
 8005d6c:	08017fc0 	.word	0x08017fc0
 8005d70:	fffffc00 	.word	0xfffffc00

08005d74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d11f      	bne.n	8005dce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d856      	bhi.n	8005e42 <DMA_CheckFifoParam+0xce>
 8005d94:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <DMA_CheckFifoParam+0x28>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005dbf 	.word	0x08005dbf
 8005da4:	08005dad 	.word	0x08005dad
 8005da8:	08005e43 	.word	0x08005e43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d046      	beq.n	8005e46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dbc:	e043      	b.n	8005e46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005dc6:	d140      	bne.n	8005e4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dcc:	e03d      	b.n	8005e4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dd6:	d121      	bne.n	8005e1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d837      	bhi.n	8005e4e <DMA_CheckFifoParam+0xda>
 8005dde:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <DMA_CheckFifoParam+0x70>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005dfb 	.word	0x08005dfb
 8005dec:	08005df5 	.word	0x08005df5
 8005df0:	08005e0d 	.word	0x08005e0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
      break;
 8005df8:	e030      	b.n	8005e5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d025      	beq.n	8005e52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e0a:	e022      	b.n	8005e52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e14:	d11f      	bne.n	8005e56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e1a:	e01c      	b.n	8005e56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d903      	bls.n	8005e2a <DMA_CheckFifoParam+0xb6>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d003      	beq.n	8005e30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e28:	e018      	b.n	8005e5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e2e:	e015      	b.n	8005e5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00e      	beq.n	8005e5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e40:	e00b      	b.n	8005e5a <DMA_CheckFifoParam+0xe6>
      break;
 8005e42:	bf00      	nop
 8005e44:	e00a      	b.n	8005e5c <DMA_CheckFifoParam+0xe8>
      break;
 8005e46:	bf00      	nop
 8005e48:	e008      	b.n	8005e5c <DMA_CheckFifoParam+0xe8>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e006      	b.n	8005e5c <DMA_CheckFifoParam+0xe8>
      break;
 8005e4e:	bf00      	nop
 8005e50:	e004      	b.n	8005e5c <DMA_CheckFifoParam+0xe8>
      break;
 8005e52:	bf00      	nop
 8005e54:	e002      	b.n	8005e5c <DMA_CheckFifoParam+0xe8>
      break;   
 8005e56:	bf00      	nop
 8005e58:	e000      	b.n	8005e5c <DMA_CheckFifoParam+0xe8>
      break;
 8005e5a:	bf00      	nop
    }
  } 
  
  return status; 
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop

08005e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	@ 0x24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	e175      	b.n	8006178 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	f040 8164 	bne.w	8006172 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d005      	beq.n	8005ec2 <HAL_GPIO_Init+0x56>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d130      	bne.n	8005f24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	2203      	movs	r2, #3
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ef8:	2201      	movs	r2, #1
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	f003 0201 	and.w	r2, r3, #1
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d017      	beq.n	8005f60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d123      	bne.n	8005fb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	08da      	lsrs	r2, r3, #3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3208      	adds	r2, #8
 8005f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	220f      	movs	r2, #15
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	08da      	lsrs	r2, r3, #3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3208      	adds	r2, #8
 8005fae:	69b9      	ldr	r1, [r7, #24]
 8005fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f003 0203 	and.w	r2, r3, #3
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80be 	beq.w	8006172 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ff6:	4b66      	ldr	r3, [pc, #408]	@ (8006190 <HAL_GPIO_Init+0x324>)
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffa:	4a65      	ldr	r2, [pc, #404]	@ (8006190 <HAL_GPIO_Init+0x324>)
 8005ffc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006000:	6453      	str	r3, [r2, #68]	@ 0x44
 8006002:	4b63      	ldr	r3, [pc, #396]	@ (8006190 <HAL_GPIO_Init+0x324>)
 8006004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800600e:	4a61      	ldr	r2, [pc, #388]	@ (8006194 <HAL_GPIO_Init+0x328>)
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	3302      	adds	r3, #2
 8006016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	220f      	movs	r2, #15
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	43db      	mvns	r3, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a58      	ldr	r2, [pc, #352]	@ (8006198 <HAL_GPIO_Init+0x32c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d037      	beq.n	80060aa <HAL_GPIO_Init+0x23e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a57      	ldr	r2, [pc, #348]	@ (800619c <HAL_GPIO_Init+0x330>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d031      	beq.n	80060a6 <HAL_GPIO_Init+0x23a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a56      	ldr	r2, [pc, #344]	@ (80061a0 <HAL_GPIO_Init+0x334>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d02b      	beq.n	80060a2 <HAL_GPIO_Init+0x236>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a55      	ldr	r2, [pc, #340]	@ (80061a4 <HAL_GPIO_Init+0x338>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d025      	beq.n	800609e <HAL_GPIO_Init+0x232>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a54      	ldr	r2, [pc, #336]	@ (80061a8 <HAL_GPIO_Init+0x33c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d01f      	beq.n	800609a <HAL_GPIO_Init+0x22e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a53      	ldr	r2, [pc, #332]	@ (80061ac <HAL_GPIO_Init+0x340>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d019      	beq.n	8006096 <HAL_GPIO_Init+0x22a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a52      	ldr	r2, [pc, #328]	@ (80061b0 <HAL_GPIO_Init+0x344>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_GPIO_Init+0x226>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a51      	ldr	r2, [pc, #324]	@ (80061b4 <HAL_GPIO_Init+0x348>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00d      	beq.n	800608e <HAL_GPIO_Init+0x222>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a50      	ldr	r2, [pc, #320]	@ (80061b8 <HAL_GPIO_Init+0x34c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d007      	beq.n	800608a <HAL_GPIO_Init+0x21e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a4f      	ldr	r2, [pc, #316]	@ (80061bc <HAL_GPIO_Init+0x350>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d101      	bne.n	8006086 <HAL_GPIO_Init+0x21a>
 8006082:	2309      	movs	r3, #9
 8006084:	e012      	b.n	80060ac <HAL_GPIO_Init+0x240>
 8006086:	230a      	movs	r3, #10
 8006088:	e010      	b.n	80060ac <HAL_GPIO_Init+0x240>
 800608a:	2308      	movs	r3, #8
 800608c:	e00e      	b.n	80060ac <HAL_GPIO_Init+0x240>
 800608e:	2307      	movs	r3, #7
 8006090:	e00c      	b.n	80060ac <HAL_GPIO_Init+0x240>
 8006092:	2306      	movs	r3, #6
 8006094:	e00a      	b.n	80060ac <HAL_GPIO_Init+0x240>
 8006096:	2305      	movs	r3, #5
 8006098:	e008      	b.n	80060ac <HAL_GPIO_Init+0x240>
 800609a:	2304      	movs	r3, #4
 800609c:	e006      	b.n	80060ac <HAL_GPIO_Init+0x240>
 800609e:	2303      	movs	r3, #3
 80060a0:	e004      	b.n	80060ac <HAL_GPIO_Init+0x240>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e002      	b.n	80060ac <HAL_GPIO_Init+0x240>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <HAL_GPIO_Init+0x240>
 80060aa:	2300      	movs	r3, #0
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	f002 0203 	and.w	r2, r2, #3
 80060b2:	0092      	lsls	r2, r2, #2
 80060b4:	4093      	lsls	r3, r2
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80060bc:	4935      	ldr	r1, [pc, #212]	@ (8006194 <HAL_GPIO_Init+0x328>)
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	089b      	lsrs	r3, r3, #2
 80060c2:	3302      	adds	r3, #2
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060ca:	4b3d      	ldr	r3, [pc, #244]	@ (80061c0 <HAL_GPIO_Init+0x354>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	43db      	mvns	r3, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4013      	ands	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060ee:	4a34      	ldr	r2, [pc, #208]	@ (80061c0 <HAL_GPIO_Init+0x354>)
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060f4:	4b32      	ldr	r3, [pc, #200]	@ (80061c0 <HAL_GPIO_Init+0x354>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006118:	4a29      	ldr	r2, [pc, #164]	@ (80061c0 <HAL_GPIO_Init+0x354>)
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800611e:	4b28      	ldr	r3, [pc, #160]	@ (80061c0 <HAL_GPIO_Init+0x354>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006142:	4a1f      	ldr	r2, [pc, #124]	@ (80061c0 <HAL_GPIO_Init+0x354>)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006148:	4b1d      	ldr	r3, [pc, #116]	@ (80061c0 <HAL_GPIO_Init+0x354>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	43db      	mvns	r3, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4013      	ands	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800616c:	4a14      	ldr	r2, [pc, #80]	@ (80061c0 <HAL_GPIO_Init+0x354>)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3301      	adds	r3, #1
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	2b0f      	cmp	r3, #15
 800617c:	f67f ae86 	bls.w	8005e8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006180:	bf00      	nop
 8006182:	bf00      	nop
 8006184:	3724      	adds	r7, #36	@ 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40023800 	.word	0x40023800
 8006194:	40013800 	.word	0x40013800
 8006198:	40020000 	.word	0x40020000
 800619c:	40020400 	.word	0x40020400
 80061a0:	40020800 	.word	0x40020800
 80061a4:	40020c00 	.word	0x40020c00
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40021400 	.word	0x40021400
 80061b0:	40021800 	.word	0x40021800
 80061b4:	40021c00 	.word	0x40021c00
 80061b8:	40022000 	.word	0x40022000
 80061bc:	40022400 	.word	0x40022400
 80061c0:	40013c00 	.word	0x40013c00

080061c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e0d9      	b.n	8006394 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80061e0:	2201      	movs	r2, #1
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4013      	ands	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	f040 80c9 	bne.w	800638e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80061fc:	4a6b      	ldr	r2, [pc, #428]	@ (80063ac <HAL_GPIO_DeInit+0x1e8>)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	089b      	lsrs	r3, r3, #2
 8006202:	3302      	adds	r3, #2
 8006204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006208:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	220f      	movs	r2, #15
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a63      	ldr	r2, [pc, #396]	@ (80063b0 <HAL_GPIO_DeInit+0x1ec>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d037      	beq.n	8006296 <HAL_GPIO_DeInit+0xd2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a62      	ldr	r2, [pc, #392]	@ (80063b4 <HAL_GPIO_DeInit+0x1f0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d031      	beq.n	8006292 <HAL_GPIO_DeInit+0xce>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a61      	ldr	r2, [pc, #388]	@ (80063b8 <HAL_GPIO_DeInit+0x1f4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d02b      	beq.n	800628e <HAL_GPIO_DeInit+0xca>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a60      	ldr	r2, [pc, #384]	@ (80063bc <HAL_GPIO_DeInit+0x1f8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d025      	beq.n	800628a <HAL_GPIO_DeInit+0xc6>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a5f      	ldr	r2, [pc, #380]	@ (80063c0 <HAL_GPIO_DeInit+0x1fc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01f      	beq.n	8006286 <HAL_GPIO_DeInit+0xc2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a5e      	ldr	r2, [pc, #376]	@ (80063c4 <HAL_GPIO_DeInit+0x200>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d019      	beq.n	8006282 <HAL_GPIO_DeInit+0xbe>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a5d      	ldr	r2, [pc, #372]	@ (80063c8 <HAL_GPIO_DeInit+0x204>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_GPIO_DeInit+0xba>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a5c      	ldr	r2, [pc, #368]	@ (80063cc <HAL_GPIO_DeInit+0x208>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00d      	beq.n	800627a <HAL_GPIO_DeInit+0xb6>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a5b      	ldr	r2, [pc, #364]	@ (80063d0 <HAL_GPIO_DeInit+0x20c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d007      	beq.n	8006276 <HAL_GPIO_DeInit+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a5a      	ldr	r2, [pc, #360]	@ (80063d4 <HAL_GPIO_DeInit+0x210>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d101      	bne.n	8006272 <HAL_GPIO_DeInit+0xae>
 800626e:	2309      	movs	r3, #9
 8006270:	e012      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 8006272:	230a      	movs	r3, #10
 8006274:	e010      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 8006276:	2308      	movs	r3, #8
 8006278:	e00e      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 800627a:	2307      	movs	r3, #7
 800627c:	e00c      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 800627e:	2306      	movs	r3, #6
 8006280:	e00a      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 8006282:	2305      	movs	r3, #5
 8006284:	e008      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 8006286:	2304      	movs	r3, #4
 8006288:	e006      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 800628a:	2303      	movs	r3, #3
 800628c:	e004      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 800628e:	2302      	movs	r3, #2
 8006290:	e002      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <HAL_GPIO_DeInit+0xd4>
 8006296:	2300      	movs	r3, #0
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	f002 0203 	and.w	r2, r2, #3
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	4093      	lsls	r3, r2
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d132      	bne.n	800630e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80062a8:	4b4b      	ldr	r3, [pc, #300]	@ (80063d8 <HAL_GPIO_DeInit+0x214>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	43db      	mvns	r3, r3
 80062b0:	4949      	ldr	r1, [pc, #292]	@ (80063d8 <HAL_GPIO_DeInit+0x214>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80062b6:	4b48      	ldr	r3, [pc, #288]	@ (80063d8 <HAL_GPIO_DeInit+0x214>)
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	43db      	mvns	r3, r3
 80062be:	4946      	ldr	r1, [pc, #280]	@ (80063d8 <HAL_GPIO_DeInit+0x214>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80062c4:	4b44      	ldr	r3, [pc, #272]	@ (80063d8 <HAL_GPIO_DeInit+0x214>)
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	43db      	mvns	r3, r3
 80062cc:	4942      	ldr	r1, [pc, #264]	@ (80063d8 <HAL_GPIO_DeInit+0x214>)
 80062ce:	4013      	ands	r3, r2
 80062d0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80062d2:	4b41      	ldr	r3, [pc, #260]	@ (80063d8 <HAL_GPIO_DeInit+0x214>)
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	43db      	mvns	r3, r3
 80062da:	493f      	ldr	r1, [pc, #252]	@ (80063d8 <HAL_GPIO_DeInit+0x214>)
 80062dc:	4013      	ands	r3, r2
 80062de:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	220f      	movs	r2, #15
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80062f0:	4a2e      	ldr	r2, [pc, #184]	@ (80063ac <HAL_GPIO_DeInit+0x1e8>)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	089b      	lsrs	r3, r3, #2
 80062f6:	3302      	adds	r3, #2
 80062f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	43da      	mvns	r2, r3
 8006300:	482a      	ldr	r0, [pc, #168]	@ (80063ac <HAL_GPIO_DeInit+0x1e8>)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	089b      	lsrs	r3, r3, #2
 8006306:	400a      	ands	r2, r1
 8006308:	3302      	adds	r3, #2
 800630a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	2103      	movs	r1, #3
 8006318:	fa01 f303 	lsl.w	r3, r1, r3
 800631c:	43db      	mvns	r3, r3
 800631e:	401a      	ands	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	08da      	lsrs	r2, r3, #3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3208      	adds	r2, #8
 800632c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	220f      	movs	r2, #15
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43db      	mvns	r3, r3
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	08d2      	lsrs	r2, r2, #3
 8006344:	4019      	ands	r1, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3208      	adds	r2, #8
 800634a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	2103      	movs	r1, #3
 8006358:	fa01 f303 	lsl.w	r3, r1, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	401a      	ands	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	2101      	movs	r1, #1
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	fa01 f303 	lsl.w	r3, r1, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	401a      	ands	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	2103      	movs	r1, #3
 8006382:	fa01 f303 	lsl.w	r3, r1, r3
 8006386:	43db      	mvns	r3, r3
 8006388:	401a      	ands	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	3301      	adds	r3, #1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	f67f af22 	bls.w	80061e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40013800 	.word	0x40013800
 80063b0:	40020000 	.word	0x40020000
 80063b4:	40020400 	.word	0x40020400
 80063b8:	40020800 	.word	0x40020800
 80063bc:	40020c00 	.word	0x40020c00
 80063c0:	40021000 	.word	0x40021000
 80063c4:	40021400 	.word	0x40021400
 80063c8:	40021800 	.word	0x40021800
 80063cc:	40021c00 	.word	0x40021c00
 80063d0:	40022000 	.word	0x40022000
 80063d4:	40022400 	.word	0x40022400
 80063d8:	40013c00 	.word	0x40013c00

080063dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	887b      	ldrh	r3, [r7, #2]
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
 80063f8:	e001      	b.n	80063fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063fa:	2300      	movs	r3, #0
 80063fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	807b      	strh	r3, [r7, #2]
 8006418:	4613      	mov	r3, r2
 800641a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800641c:	787b      	ldrb	r3, [r7, #1]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006422:	887a      	ldrh	r2, [r7, #2]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006428:	e003      	b.n	8006432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800642a:	887b      	ldrh	r3, [r7, #2]
 800642c:	041a      	lsls	r2, r3, #16
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	619a      	str	r2, [r3, #24]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006450:	887a      	ldrh	r2, [r7, #2]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4013      	ands	r3, r2
 8006456:	041a      	lsls	r2, r3, #16
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	43d9      	mvns	r1, r3
 800645c:	887b      	ldrh	r3, [r7, #2]
 800645e:	400b      	ands	r3, r1
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	619a      	str	r2, [r3, #24]
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
	...

08006474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800647e:	4b08      	ldr	r3, [pc, #32]	@ (80064a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006480:	695a      	ldr	r2, [r3, #20]
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800648a:	4a05      	ldr	r2, [pc, #20]	@ (80064a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fb fcda 	bl	8001e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40013c00 	.word	0x40013c00

080064a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e08b      	b.n	80065ce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f8b5 	bl	800663a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2224      	movs	r2, #36	@ 0x24
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80064f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006504:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d107      	bne.n	800651e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800651a:	609a      	str	r2, [r3, #8]
 800651c:	e006      	b.n	800652c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800652a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d108      	bne.n	8006546 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006542:	605a      	str	r2, [r3, #4]
 8006544:	e007      	b.n	8006556 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006554:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6859      	ldr	r1, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	4b1d      	ldr	r3, [pc, #116]	@ (80065d8 <HAL_I2C_Init+0x134>)
 8006562:	430b      	orrs	r3, r1
 8006564:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006574:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69d9      	ldr	r1, [r3, #28]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1a      	ldr	r2, [r3, #32]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	02008000 	.word	0x02008000

080065dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e021      	b.n	8006632 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2224      	movs	r2, #36	@ 0x24
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f821 	bl	800664e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
	...

08006664 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	4608      	mov	r0, r1
 800666e:	4611      	mov	r1, r2
 8006670:	461a      	mov	r2, r3
 8006672:	4603      	mov	r3, r0
 8006674:	817b      	strh	r3, [r7, #10]
 8006676:	460b      	mov	r3, r1
 8006678:	813b      	strh	r3, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b20      	cmp	r3, #32
 8006688:	f040 80f9 	bne.w	800687e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_I2C_Mem_Write+0x34>
 8006692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	d105      	bne.n	80066a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800669e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0ed      	b.n	8006880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_I2C_Mem_Write+0x4e>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e0e6      	b.n	8006880 <HAL_I2C_Mem_Write+0x21c>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066ba:	f7fe fd2f 	bl	800511c <HAL_GetTick>
 80066be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	2319      	movs	r3, #25
 80066c6:	2201      	movs	r2, #1
 80066c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fad1 	bl	8006c74 <I2C_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0d1      	b.n	8006880 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2221      	movs	r2, #33	@ 0x21
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2240      	movs	r2, #64	@ 0x40
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a3a      	ldr	r2, [r7, #32]
 80066f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006704:	88f8      	ldrh	r0, [r7, #6]
 8006706:	893a      	ldrh	r2, [r7, #8]
 8006708:	8979      	ldrh	r1, [r7, #10]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	4603      	mov	r3, r0
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f9e1 	bl	8006adc <I2C_RequestMemoryWrite>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0a9      	b.n	8006880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	2bff      	cmp	r3, #255	@ 0xff
 8006734:	d90e      	bls.n	8006754 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	22ff      	movs	r2, #255	@ 0xff
 800673a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006740:	b2da      	uxtb	r2, r3
 8006742:	8979      	ldrh	r1, [r7, #10]
 8006744:	2300      	movs	r3, #0
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fc55 	bl	8006ffc <I2C_TransferConfig>
 8006752:	e00f      	b.n	8006774 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006762:	b2da      	uxtb	r2, r3
 8006764:	8979      	ldrh	r1, [r7, #10]
 8006766:	2300      	movs	r3, #0
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fc44 	bl	8006ffc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 fad4 	bl	8006d26 <I2C_WaitOnTXISFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e07b      	b.n	8006880 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d034      	beq.n	800682c <HAL_I2C_Mem_Write+0x1c8>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d130      	bne.n	800682c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	2200      	movs	r2, #0
 80067d2:	2180      	movs	r1, #128	@ 0x80
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fa4d 	bl	8006c74 <I2C_WaitOnFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e04d      	b.n	8006880 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2bff      	cmp	r3, #255	@ 0xff
 80067ec:	d90e      	bls.n	800680c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	22ff      	movs	r2, #255	@ 0xff
 80067f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	8979      	ldrh	r1, [r7, #10]
 80067fc:	2300      	movs	r3, #0
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 fbf9 	bl	8006ffc <I2C_TransferConfig>
 800680a:	e00f      	b.n	800682c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800681a:	b2da      	uxtb	r2, r3
 800681c:	8979      	ldrh	r1, [r7, #10]
 800681e:	2300      	movs	r3, #0
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fbe8 	bl	8006ffc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d19e      	bne.n	8006774 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 faba 	bl	8006db4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e01a      	b.n	8006880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2220      	movs	r2, #32
 8006850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <HAL_I2C_Mem_Write+0x224>)
 800685e:	400b      	ands	r3, r1
 8006860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800687e:	2302      	movs	r3, #2
  }
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	fe00e800 	.word	0xfe00e800

0800688c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	4608      	mov	r0, r1
 8006896:	4611      	mov	r1, r2
 8006898:	461a      	mov	r2, r3
 800689a:	4603      	mov	r3, r0
 800689c:	817b      	strh	r3, [r7, #10]
 800689e:	460b      	mov	r3, r1
 80068a0:	813b      	strh	r3, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	f040 80fd 	bne.w	8006aae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_I2C_Mem_Read+0x34>
 80068ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0f1      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_I2C_Mem_Read+0x4e>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e0ea      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x224>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068e2:	f7fe fc1b 	bl	800511c <HAL_GetTick>
 80068e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	2319      	movs	r3, #25
 80068ee:	2201      	movs	r2, #1
 80068f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f9bd 	bl	8006c74 <I2C_WaitOnFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0d5      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2222      	movs	r2, #34	@ 0x22
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2240      	movs	r2, #64	@ 0x40
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800692c:	88f8      	ldrh	r0, [r7, #6]
 800692e:	893a      	ldrh	r2, [r7, #8]
 8006930:	8979      	ldrh	r1, [r7, #10]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4603      	mov	r3, r0
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f921 	bl	8006b84 <I2C_RequestMemoryRead>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0ad      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006958:	b29b      	uxth	r3, r3
 800695a:	2bff      	cmp	r3, #255	@ 0xff
 800695c:	d90e      	bls.n	800697c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006968:	b2da      	uxtb	r2, r3
 800696a:	8979      	ldrh	r1, [r7, #10]
 800696c:	4b52      	ldr	r3, [pc, #328]	@ (8006ab8 <HAL_I2C_Mem_Read+0x22c>)
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fb41 	bl	8006ffc <I2C_TransferConfig>
 800697a:	e00f      	b.n	800699c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800698a:	b2da      	uxtb	r2, r3
 800698c:	8979      	ldrh	r1, [r7, #10]
 800698e:	4b4a      	ldr	r3, [pc, #296]	@ (8006ab8 <HAL_I2C_Mem_Read+0x22c>)
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 fb30 	bl	8006ffc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a2:	2200      	movs	r2, #0
 80069a4:	2104      	movs	r1, #4
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f964 	bl	8006c74 <I2C_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e07c      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d034      	beq.n	8006a5c <HAL_I2C_Mem_Read+0x1d0>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d130      	bne.n	8006a5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a00:	2200      	movs	r2, #0
 8006a02:	2180      	movs	r1, #128	@ 0x80
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f935 	bl	8006c74 <I2C_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e04d      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2bff      	cmp	r3, #255	@ 0xff
 8006a1c:	d90e      	bls.n	8006a3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	8979      	ldrh	r1, [r7, #10]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 fae1 	bl	8006ffc <I2C_TransferConfig>
 8006a3a:	e00f      	b.n	8006a5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	8979      	ldrh	r1, [r7, #10]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fad0 	bl	8006ffc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d19a      	bne.n	800699c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f9a2 	bl	8006db4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e01a      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6859      	ldr	r1, [r3, #4]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006abc <HAL_I2C_Mem_Read+0x230>)
 8006a8e:	400b      	ands	r3, r1
 8006a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	80002400 	.word	0x80002400
 8006abc:	fe00e800 	.word	0xfe00e800

08006ac0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ace:	b2db      	uxtb	r3, r3
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4603      	mov	r3, r0
 8006aec:	817b      	strh	r3, [r7, #10]
 8006aee:	460b      	mov	r3, r1
 8006af0:	813b      	strh	r3, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	8979      	ldrh	r1, [r7, #10]
 8006afc:	4b20      	ldr	r3, [pc, #128]	@ (8006b80 <I2C_RequestMemoryWrite+0xa4>)
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fa79 	bl	8006ffc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	69b9      	ldr	r1, [r7, #24]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f909 	bl	8006d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e02c      	b.n	8006b78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b1e:	88fb      	ldrh	r3, [r7, #6]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d105      	bne.n	8006b30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b24:	893b      	ldrh	r3, [r7, #8]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b2e:	e015      	b.n	8006b5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b30:	893b      	ldrh	r3, [r7, #8]
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	69b9      	ldr	r1, [r7, #24]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f8ef 	bl	8006d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e012      	b.n	8006b78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b52:	893b      	ldrh	r3, [r7, #8]
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2200      	movs	r2, #0
 8006b64:	2180      	movs	r1, #128	@ 0x80
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 f884 	bl	8006c74 <I2C_WaitOnFlagUntilTimeout>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	80002000 	.word	0x80002000

08006b84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	461a      	mov	r2, r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	817b      	strh	r3, [r7, #10]
 8006b96:	460b      	mov	r3, r1
 8006b98:	813b      	strh	r3, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	8979      	ldrh	r1, [r7, #10]
 8006ba4:	4b20      	ldr	r3, [pc, #128]	@ (8006c28 <I2C_RequestMemoryRead+0xa4>)
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fa26 	bl	8006ffc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	69b9      	ldr	r1, [r7, #24]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f8b6 	bl	8006d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e02c      	b.n	8006c1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d105      	bne.n	8006bd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bca:	893b      	ldrh	r3, [r7, #8]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bd4:	e015      	b.n	8006c02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bd6:	893b      	ldrh	r3, [r7, #8]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	69b9      	ldr	r1, [r7, #24]
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f89c 	bl	8006d26 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e012      	b.n	8006c1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bf8:	893b      	ldrh	r3, [r7, #8]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2140      	movs	r1, #64	@ 0x40
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f831 	bl	8006c74 <I2C_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e000      	b.n	8006c1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	80002000 	.word	0x80002000

08006c2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d103      	bne.n	8006c4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2200      	movs	r2, #0
 8006c48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d007      	beq.n	8006c68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	619a      	str	r2, [r3, #24]
  }
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	4613      	mov	r3, r2
 8006c82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c84:	e03b      	b.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f8d6 	bl	8006e3c <I2C_IsErrorOccurred>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e041      	b.n	8006d1e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca0:	d02d      	beq.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca2:	f7fe fa3b 	bl	800511c <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d302      	bcc.n	8006cb8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d122      	bne.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2301      	moveq	r3, #1
 8006cca:	2300      	movne	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d113      	bne.n	8006cfe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e00f      	b.n	8006d1e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699a      	ldr	r2, [r3, #24]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4013      	ands	r3, r2
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	bf0c      	ite	eq
 8006d0e:	2301      	moveq	r3, #1
 8006d10:	2300      	movne	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d0b4      	beq.n	8006c86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d32:	e033      	b.n	8006d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f87f 	bl	8006e3c <I2C_IsErrorOccurred>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e031      	b.n	8006dac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d025      	beq.n	8006d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d50:	f7fe f9e4 	bl	800511c <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d302      	bcc.n	8006d66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d11a      	bne.n	8006d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d013      	beq.n	8006d9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d78:	f043 0220 	orr.w	r2, r3, #32
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e007      	b.n	8006dac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d1c4      	bne.n	8006d34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dc0:	e02f      	b.n	8006e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 f838 	bl	8006e3c <I2C_IsErrorOccurred>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e02d      	b.n	8006e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd6:	f7fe f9a1 	bl	800511c <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d302      	bcc.n	8006dec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d11a      	bne.n	8006e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d013      	beq.n	8006e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfe:	f043 0220 	orr.w	r2, r3, #32
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e007      	b.n	8006e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d1c8      	bne.n	8006dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	@ 0x28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d068      	beq.n	8006f3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e70:	e049      	b.n	8006f06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d045      	beq.n	8006f06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e7a:	f7fe f94f 	bl	800511c <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d302      	bcc.n	8006e90 <I2C_IsErrorOccurred+0x54>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d13a      	bne.n	8006f06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ea2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eb2:	d121      	bne.n	8006ef8 <I2C_IsErrorOccurred+0xbc>
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eba:	d01d      	beq.n	8006ef8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006ebc:	7cfb      	ldrb	r3, [r7, #19]
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	d01a      	beq.n	8006ef8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ed0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ed2:	f7fe f923 	bl	800511c <HAL_GetTick>
 8006ed6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ed8:	e00e      	b.n	8006ef8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006eda:	f7fe f91f 	bl	800511c <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b19      	cmp	r3, #25
 8006ee6:	d907      	bls.n	8006ef8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	f043 0320 	orr.w	r3, r3, #32
 8006eee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006ef6:	e006      	b.n	8006f06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d1e9      	bne.n	8006eda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d003      	beq.n	8006f1c <I2C_IsErrorOccurred+0xe0>
 8006f14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0aa      	beq.n	8006e72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d103      	bne.n	8006f2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	f043 0304 	orr.w	r3, r3, #4
 8006f32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	f043 0308 	orr.w	r3, r3, #8
 8006f74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	f043 0302 	orr.w	r3, r3, #2
 8006f96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fa0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01c      	beq.n	8006fea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fe3b 	bl	8006c2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6859      	ldr	r1, [r3, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <I2C_IsErrorOccurred+0x1bc>)
 8006fc2:	400b      	ands	r3, r1
 8006fc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006fea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3728      	adds	r7, #40	@ 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	fe00e800 	.word	0xfe00e800

08006ffc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	607b      	str	r3, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	817b      	strh	r3, [r7, #10]
 800700a:	4613      	mov	r3, r2
 800700c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800700e:	897b      	ldrh	r3, [r7, #10]
 8007010:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007014:	7a7b      	ldrb	r3, [r7, #9]
 8007016:	041b      	lsls	r3, r3, #16
 8007018:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800701c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	4313      	orrs	r3, r2
 8007026:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800702a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	0d5b      	lsrs	r3, r3, #21
 8007036:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800703a:	4b08      	ldr	r3, [pc, #32]	@ (800705c <I2C_TransferConfig+0x60>)
 800703c:	430b      	orrs	r3, r1
 800703e:	43db      	mvns	r3, r3
 8007040:	ea02 0103 	and.w	r1, r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	03ff63ff 	.word	0x03ff63ff

08007060 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800706a:	4b23      	ldr	r3, [pc, #140]	@ (80070f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	4a22      	ldr	r2, [pc, #136]	@ (80070f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007074:	6413      	str	r3, [r2, #64]	@ 0x40
 8007076:	4b20      	ldr	r3, [pc, #128]	@ (80070f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800707e:	603b      	str	r3, [r7, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007082:	4b1e      	ldr	r3, [pc, #120]	@ (80070fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1d      	ldr	r2, [pc, #116]	@ (80070fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800708c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800708e:	f7fe f845 	bl	800511c <HAL_GetTick>
 8007092:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007094:	e009      	b.n	80070aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007096:	f7fe f841 	bl	800511c <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070a4:	d901      	bls.n	80070aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e022      	b.n	80070f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80070aa:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070b6:	d1ee      	bne.n	8007096 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80070b8:	4b10      	ldr	r3, [pc, #64]	@ (80070fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a0f      	ldr	r2, [pc, #60]	@ (80070fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80070be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070c4:	f7fe f82a 	bl	800511c <HAL_GetTick>
 80070c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070ca:	e009      	b.n	80070e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80070cc:	f7fe f826 	bl	800511c <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070da:	d901      	bls.n	80070e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e007      	b.n	80070f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070e0:	4b06      	ldr	r3, [pc, #24]	@ (80070fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070ec:	d1ee      	bne.n	80070cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40023800 	.word	0x40023800
 80070fc:	40007000 	.word	0x40007000

08007100 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007108:	2300      	movs	r3, #0
 800710a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e291      	b.n	800763a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 8087 	beq.w	8007232 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007124:	4b96      	ldr	r3, [pc, #600]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 030c 	and.w	r3, r3, #12
 800712c:	2b04      	cmp	r3, #4
 800712e:	d00c      	beq.n	800714a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007130:	4b93      	ldr	r3, [pc, #588]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 030c 	and.w	r3, r3, #12
 8007138:	2b08      	cmp	r3, #8
 800713a:	d112      	bne.n	8007162 <HAL_RCC_OscConfig+0x62>
 800713c:	4b90      	ldr	r3, [pc, #576]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007148:	d10b      	bne.n	8007162 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800714a:	4b8d      	ldr	r3, [pc, #564]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d06c      	beq.n	8007230 <HAL_RCC_OscConfig+0x130>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d168      	bne.n	8007230 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e26b      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800716a:	d106      	bne.n	800717a <HAL_RCC_OscConfig+0x7a>
 800716c:	4b84      	ldr	r3, [pc, #528]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a83      	ldr	r2, [pc, #524]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	e02e      	b.n	80071d8 <HAL_RCC_OscConfig+0xd8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10c      	bne.n	800719c <HAL_RCC_OscConfig+0x9c>
 8007182:	4b7f      	ldr	r3, [pc, #508]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a7e      	ldr	r2, [pc, #504]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	4b7c      	ldr	r3, [pc, #496]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a7b      	ldr	r2, [pc, #492]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007194:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	e01d      	b.n	80071d8 <HAL_RCC_OscConfig+0xd8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071a4:	d10c      	bne.n	80071c0 <HAL_RCC_OscConfig+0xc0>
 80071a6:	4b76      	ldr	r3, [pc, #472]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a75      	ldr	r2, [pc, #468]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80071ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	4b73      	ldr	r3, [pc, #460]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a72      	ldr	r2, [pc, #456]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80071b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	e00b      	b.n	80071d8 <HAL_RCC_OscConfig+0xd8>
 80071c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a6e      	ldr	r2, [pc, #440]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80071c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	4b6c      	ldr	r3, [pc, #432]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a6b      	ldr	r2, [pc, #428]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80071d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d013      	beq.n	8007208 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e0:	f7fd ff9c 	bl	800511c <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071e8:	f7fd ff98 	bl	800511c <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b64      	cmp	r3, #100	@ 0x64
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e21f      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fa:	4b61      	ldr	r3, [pc, #388]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0xe8>
 8007206:	e014      	b.n	8007232 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007208:	f7fd ff88 	bl	800511c <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007210:	f7fd ff84 	bl	800511c <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b64      	cmp	r3, #100	@ 0x64
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e20b      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007222:	4b57      	ldr	r3, [pc, #348]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f0      	bne.n	8007210 <HAL_RCC_OscConfig+0x110>
 800722e:	e000      	b.n	8007232 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d069      	beq.n	8007312 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800723e:	4b50      	ldr	r3, [pc, #320]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 030c 	and.w	r3, r3, #12
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800724a:	4b4d      	ldr	r3, [pc, #308]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 030c 	and.w	r3, r3, #12
 8007252:	2b08      	cmp	r3, #8
 8007254:	d11c      	bne.n	8007290 <HAL_RCC_OscConfig+0x190>
 8007256:	4b4a      	ldr	r3, [pc, #296]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d116      	bne.n	8007290 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007262:	4b47      	ldr	r3, [pc, #284]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <HAL_RCC_OscConfig+0x17a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d001      	beq.n	800727a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e1df      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800727a:	4b41      	ldr	r3, [pc, #260]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	493d      	ldr	r1, [pc, #244]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800728e:	e040      	b.n	8007312 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d023      	beq.n	80072e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007298:	4b39      	ldr	r3, [pc, #228]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a38      	ldr	r2, [pc, #224]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800729e:	f043 0301 	orr.w	r3, r3, #1
 80072a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fd ff3a 	bl	800511c <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072ac:	f7fd ff36 	bl	800511c <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e1bd      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072be:	4b30      	ldr	r3, [pc, #192]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	4929      	ldr	r1, [pc, #164]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	600b      	str	r3, [r1, #0]
 80072de:	e018      	b.n	8007312 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072e0:	4b27      	ldr	r3, [pc, #156]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a26      	ldr	r2, [pc, #152]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 80072e6:	f023 0301 	bic.w	r3, r3, #1
 80072ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ec:	f7fd ff16 	bl	800511c <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072f4:	f7fd ff12 	bl	800511c <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e199      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007306:	4b1e      	ldr	r3, [pc, #120]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d038      	beq.n	8007390 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d019      	beq.n	800735a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007326:	4b16      	ldr	r3, [pc, #88]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732a:	4a15      	ldr	r2, [pc, #84]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800732c:	f043 0301 	orr.w	r3, r3, #1
 8007330:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007332:	f7fd fef3 	bl	800511c <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007338:	e008      	b.n	800734c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800733a:	f7fd feef 	bl	800511c <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e176      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800734c:	4b0c      	ldr	r3, [pc, #48]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800734e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0f0      	beq.n	800733a <HAL_RCC_OscConfig+0x23a>
 8007358:	e01a      	b.n	8007390 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800735a:	4b09      	ldr	r3, [pc, #36]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 800735c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800735e:	4a08      	ldr	r2, [pc, #32]	@ (8007380 <HAL_RCC_OscConfig+0x280>)
 8007360:	f023 0301 	bic.w	r3, r3, #1
 8007364:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007366:	f7fd fed9 	bl	800511c <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800736c:	e00a      	b.n	8007384 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800736e:	f7fd fed5 	bl	800511c <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d903      	bls.n	8007384 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e15c      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
 8007380:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007384:	4b91      	ldr	r3, [pc, #580]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1ee      	bne.n	800736e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 80a4 	beq.w	80074e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800739e:	4b8b      	ldr	r3, [pc, #556]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 80073a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10d      	bne.n	80073c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80073aa:	4b88      	ldr	r3, [pc, #544]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ae:	4a87      	ldr	r2, [pc, #540]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 80073b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80073b6:	4b85      	ldr	r3, [pc, #532]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073c2:	2301      	movs	r3, #1
 80073c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073c6:	4b82      	ldr	r3, [pc, #520]	@ (80075d0 <HAL_RCC_OscConfig+0x4d0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d118      	bne.n	8007404 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80073d2:	4b7f      	ldr	r3, [pc, #508]	@ (80075d0 <HAL_RCC_OscConfig+0x4d0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a7e      	ldr	r2, [pc, #504]	@ (80075d0 <HAL_RCC_OscConfig+0x4d0>)
 80073d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073de:	f7fd fe9d 	bl	800511c <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073e4:	e008      	b.n	80073f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073e6:	f7fd fe99 	bl	800511c <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b64      	cmp	r3, #100	@ 0x64
 80073f2:	d901      	bls.n	80073f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e120      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073f8:	4b75      	ldr	r3, [pc, #468]	@ (80075d0 <HAL_RCC_OscConfig+0x4d0>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0f0      	beq.n	80073e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d106      	bne.n	800741a <HAL_RCC_OscConfig+0x31a>
 800740c:	4b6f      	ldr	r3, [pc, #444]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800740e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007410:	4a6e      	ldr	r2, [pc, #440]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	6713      	str	r3, [r2, #112]	@ 0x70
 8007418:	e02d      	b.n	8007476 <HAL_RCC_OscConfig+0x376>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10c      	bne.n	800743c <HAL_RCC_OscConfig+0x33c>
 8007422:	4b6a      	ldr	r3, [pc, #424]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007426:	4a69      	ldr	r2, [pc, #420]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	6713      	str	r3, [r2, #112]	@ 0x70
 800742e:	4b67      	ldr	r3, [pc, #412]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007432:	4a66      	ldr	r2, [pc, #408]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007434:	f023 0304 	bic.w	r3, r3, #4
 8007438:	6713      	str	r3, [r2, #112]	@ 0x70
 800743a:	e01c      	b.n	8007476 <HAL_RCC_OscConfig+0x376>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b05      	cmp	r3, #5
 8007442:	d10c      	bne.n	800745e <HAL_RCC_OscConfig+0x35e>
 8007444:	4b61      	ldr	r3, [pc, #388]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007448:	4a60      	ldr	r2, [pc, #384]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800744a:	f043 0304 	orr.w	r3, r3, #4
 800744e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007450:	4b5e      	ldr	r3, [pc, #376]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007454:	4a5d      	ldr	r2, [pc, #372]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007456:	f043 0301 	orr.w	r3, r3, #1
 800745a:	6713      	str	r3, [r2, #112]	@ 0x70
 800745c:	e00b      	b.n	8007476 <HAL_RCC_OscConfig+0x376>
 800745e:	4b5b      	ldr	r3, [pc, #364]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007462:	4a5a      	ldr	r2, [pc, #360]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007464:	f023 0301 	bic.w	r3, r3, #1
 8007468:	6713      	str	r3, [r2, #112]	@ 0x70
 800746a:	4b58      	ldr	r3, [pc, #352]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746e:	4a57      	ldr	r2, [pc, #348]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007470:	f023 0304 	bic.w	r3, r3, #4
 8007474:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d015      	beq.n	80074aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800747e:	f7fd fe4d 	bl	800511c <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007484:	e00a      	b.n	800749c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007486:	f7fd fe49 	bl	800511c <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007494:	4293      	cmp	r3, r2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e0ce      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800749c:	4b4b      	ldr	r3, [pc, #300]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800749e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0ee      	beq.n	8007486 <HAL_RCC_OscConfig+0x386>
 80074a8:	e014      	b.n	80074d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074aa:	f7fd fe37 	bl	800511c <HAL_GetTick>
 80074ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074b0:	e00a      	b.n	80074c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b2:	f7fd fe33 	bl	800511c <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d901      	bls.n	80074c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e0b8      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074c8:	4b40      	ldr	r3, [pc, #256]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 80074ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1ee      	bne.n	80074b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d105      	bne.n	80074e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074da:	4b3c      	ldr	r3, [pc, #240]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 80074dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074de:	4a3b      	ldr	r2, [pc, #236]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 80074e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80a4 	beq.w	8007638 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074f0:	4b36      	ldr	r3, [pc, #216]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 030c 	and.w	r3, r3, #12
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d06b      	beq.n	80075d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d149      	bne.n	8007598 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007504:	4b31      	ldr	r3, [pc, #196]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a30      	ldr	r2, [pc, #192]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800750a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800750e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fd fe04 	bl	800511c <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007518:	f7fd fe00 	bl	800511c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e087      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800752a:	4b28      	ldr	r3, [pc, #160]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007544:	019b      	lsls	r3, r3, #6
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	3b01      	subs	r3, #1
 8007550:	041b      	lsls	r3, r3, #16
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	061b      	lsls	r3, r3, #24
 800755a:	4313      	orrs	r3, r2
 800755c:	4a1b      	ldr	r2, [pc, #108]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800755e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007562:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007564:	4b19      	ldr	r3, [pc, #100]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a18      	ldr	r2, [pc, #96]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800756a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800756e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007570:	f7fd fdd4 	bl	800511c <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007578:	f7fd fdd0 	bl	800511c <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e057      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800758a:	4b10      	ldr	r3, [pc, #64]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f0      	beq.n	8007578 <HAL_RCC_OscConfig+0x478>
 8007596:	e04f      	b.n	8007638 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007598:	4b0c      	ldr	r3, [pc, #48]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a0b      	ldr	r2, [pc, #44]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 800759e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a4:	f7fd fdba 	bl	800511c <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ac:	f7fd fdb6 	bl	800511c <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e03d      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075be:	4b03      	ldr	r3, [pc, #12]	@ (80075cc <HAL_RCC_OscConfig+0x4cc>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1f0      	bne.n	80075ac <HAL_RCC_OscConfig+0x4ac>
 80075ca:	e035      	b.n	8007638 <HAL_RCC_OscConfig+0x538>
 80075cc:	40023800 	.word	0x40023800
 80075d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80075d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007644 <HAL_RCC_OscConfig+0x544>)
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d028      	beq.n	8007634 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d121      	bne.n	8007634 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d11a      	bne.n	8007634 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007604:	4013      	ands	r3, r2
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800760a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800760c:	4293      	cmp	r3, r2
 800760e:	d111      	bne.n	8007634 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	3b01      	subs	r3, #1
 800761e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007620:	429a      	cmp	r2, r3
 8007622:	d107      	bne.n	8007634 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007630:	429a      	cmp	r2, r3
 8007632:	d001      	beq.n	8007638 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800

08007648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0d0      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007660:	4b6a      	ldr	r3, [pc, #424]	@ (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d910      	bls.n	8007690 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766e:	4b67      	ldr	r3, [pc, #412]	@ (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f023 020f 	bic.w	r2, r3, #15
 8007676:	4965      	ldr	r1, [pc, #404]	@ (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	4313      	orrs	r3, r2
 800767c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800767e:	4b63      	ldr	r3, [pc, #396]	@ (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d001      	beq.n	8007690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e0b8      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d020      	beq.n	80076de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076a8:	4b59      	ldr	r3, [pc, #356]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	4a58      	ldr	r2, [pc, #352]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80076b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076c0:	4b53      	ldr	r3, [pc, #332]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4a52      	ldr	r2, [pc, #328]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80076ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076cc:	4b50      	ldr	r3, [pc, #320]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	494d      	ldr	r1, [pc, #308]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d040      	beq.n	800776c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d107      	bne.n	8007702 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f2:	4b47      	ldr	r3, [pc, #284]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d115      	bne.n	800772a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e07f      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d107      	bne.n	800771a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800770a:	4b41      	ldr	r3, [pc, #260]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e073      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800771a:	4b3d      	ldr	r3, [pc, #244]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e06b      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800772a:	4b39      	ldr	r3, [pc, #228]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f023 0203 	bic.w	r2, r3, #3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	4936      	ldr	r1, [pc, #216]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 8007738:	4313      	orrs	r3, r2
 800773a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773c:	f7fd fcee 	bl	800511c <HAL_GetTick>
 8007740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007742:	e00a      	b.n	800775a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007744:	f7fd fcea 	bl	800511c <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e053      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800775a:	4b2d      	ldr	r3, [pc, #180]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 020c 	and.w	r2, r3, #12
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	429a      	cmp	r2, r3
 800776a:	d1eb      	bne.n	8007744 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800776c:	4b27      	ldr	r3, [pc, #156]	@ (800780c <HAL_RCC_ClockConfig+0x1c4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d210      	bcs.n	800779c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777a:	4b24      	ldr	r3, [pc, #144]	@ (800780c <HAL_RCC_ClockConfig+0x1c4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f023 020f 	bic.w	r2, r3, #15
 8007782:	4922      	ldr	r1, [pc, #136]	@ (800780c <HAL_RCC_ClockConfig+0x1c4>)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	4313      	orrs	r3, r2
 8007788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b20      	ldr	r3, [pc, #128]	@ (800780c <HAL_RCC_ClockConfig+0x1c4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e032      	b.n	8007802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a8:	4b19      	ldr	r3, [pc, #100]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4916      	ldr	r1, [pc, #88]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077c6:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	490e      	ldr	r1, [pc, #56]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80077da:	f000 f821 	bl	8007820 <HAL_RCC_GetSysClockFreq>
 80077de:	4602      	mov	r2, r0
 80077e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <HAL_RCC_ClockConfig+0x1c8>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	091b      	lsrs	r3, r3, #4
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	490a      	ldr	r1, [pc, #40]	@ (8007814 <HAL_RCC_ClockConfig+0x1cc>)
 80077ec:	5ccb      	ldrb	r3, [r1, r3]
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	4a09      	ldr	r2, [pc, #36]	@ (8007818 <HAL_RCC_ClockConfig+0x1d0>)
 80077f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077f6:	4b09      	ldr	r3, [pc, #36]	@ (800781c <HAL_RCC_ClockConfig+0x1d4>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fd fc4a 	bl	8005094 <HAL_InitTick>

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40023c00 	.word	0x40023c00
 8007810:	40023800 	.word	0x40023800
 8007814:	08017fa8 	.word	0x08017fa8
 8007818:	20000018 	.word	0x20000018
 800781c:	20000050 	.word	0x20000050

08007820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007824:	b090      	sub	sp, #64	@ 0x40
 8007826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	637b      	str	r3, [r7, #52]	@ 0x34
 800782c:	2300      	movs	r3, #0
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007830:	2300      	movs	r3, #0
 8007832:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007838:	4b59      	ldr	r3, [pc, #356]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 030c 	and.w	r3, r3, #12
 8007840:	2b08      	cmp	r3, #8
 8007842:	d00d      	beq.n	8007860 <HAL_RCC_GetSysClockFreq+0x40>
 8007844:	2b08      	cmp	r3, #8
 8007846:	f200 80a1 	bhi.w	800798c <HAL_RCC_GetSysClockFreq+0x16c>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_RCC_GetSysClockFreq+0x34>
 800784e:	2b04      	cmp	r3, #4
 8007850:	d003      	beq.n	800785a <HAL_RCC_GetSysClockFreq+0x3a>
 8007852:	e09b      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007854:	4b53      	ldr	r3, [pc, #332]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007856:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007858:	e09b      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800785a:	4b53      	ldr	r3, [pc, #332]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800785c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800785e:	e098      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007860:	4b4f      	ldr	r3, [pc, #316]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800786a:	4b4d      	ldr	r3, [pc, #308]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d028      	beq.n	80078c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007876:	4b4a      	ldr	r3, [pc, #296]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	099b      	lsrs	r3, r3, #6
 800787c:	2200      	movs	r2, #0
 800787e:	623b      	str	r3, [r7, #32]
 8007880:	627a      	str	r2, [r7, #36]	@ 0x24
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007888:	2100      	movs	r1, #0
 800788a:	4b47      	ldr	r3, [pc, #284]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800788c:	fb03 f201 	mul.w	r2, r3, r1
 8007890:	2300      	movs	r3, #0
 8007892:	fb00 f303 	mul.w	r3, r0, r3
 8007896:	4413      	add	r3, r2
 8007898:	4a43      	ldr	r2, [pc, #268]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800789a:	fba0 1202 	umull	r1, r2, r0, r2
 800789e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078a0:	460a      	mov	r2, r1
 80078a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80078a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078a6:	4413      	add	r3, r2
 80078a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ac:	2200      	movs	r2, #0
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	61fa      	str	r2, [r7, #28]
 80078b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80078ba:	f7f9 f9f5 	bl	8000ca8 <__aeabi_uldivmod>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4613      	mov	r3, r2
 80078c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c6:	e053      	b.n	8007970 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078c8:	4b35      	ldr	r3, [pc, #212]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	099b      	lsrs	r3, r3, #6
 80078ce:	2200      	movs	r2, #0
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	617a      	str	r2, [r7, #20]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80078da:	f04f 0b00 	mov.w	fp, #0
 80078de:	4652      	mov	r2, sl
 80078e0:	465b      	mov	r3, fp
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f04f 0100 	mov.w	r1, #0
 80078ea:	0159      	lsls	r1, r3, #5
 80078ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078f0:	0150      	lsls	r0, r2, #5
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	ebb2 080a 	subs.w	r8, r2, sl
 80078fa:	eb63 090b 	sbc.w	r9, r3, fp
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	f04f 0300 	mov.w	r3, #0
 8007906:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800790a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800790e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007912:	ebb2 0408 	subs.w	r4, r2, r8
 8007916:	eb63 0509 	sbc.w	r5, r3, r9
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	00eb      	lsls	r3, r5, #3
 8007924:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007928:	00e2      	lsls	r2, r4, #3
 800792a:	4614      	mov	r4, r2
 800792c:	461d      	mov	r5, r3
 800792e:	eb14 030a 	adds.w	r3, r4, sl
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	eb45 030b 	adc.w	r3, r5, fp
 8007938:	607b      	str	r3, [r7, #4]
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007946:	4629      	mov	r1, r5
 8007948:	028b      	lsls	r3, r1, #10
 800794a:	4621      	mov	r1, r4
 800794c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007950:	4621      	mov	r1, r4
 8007952:	028a      	lsls	r2, r1, #10
 8007954:	4610      	mov	r0, r2
 8007956:	4619      	mov	r1, r3
 8007958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795a:	2200      	movs	r2, #0
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	60fa      	str	r2, [r7, #12]
 8007960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007964:	f7f9 f9a0 	bl	8000ca8 <__aeabi_uldivmod>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	4613      	mov	r3, r2
 800796e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007970:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	0c1b      	lsrs	r3, r3, #16
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	3301      	adds	r3, #1
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007980:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	fbb2 f3f3 	udiv	r3, r2, r3
 8007988:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800798a:	e002      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800798c:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800798e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007994:	4618      	mov	r0, r3
 8007996:	3740      	adds	r7, #64	@ 0x40
 8007998:	46bd      	mov	sp, r7
 800799a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800799e:	bf00      	nop
 80079a0:	40023800 	.word	0x40023800
 80079a4:	00f42400 	.word	0x00f42400
 80079a8:	017d7840 	.word	0x017d7840

080079ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079b0:	4b03      	ldr	r3, [pc, #12]	@ (80079c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80079b2:	681b      	ldr	r3, [r3, #0]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20000018 	.word	0x20000018

080079c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079c8:	f7ff fff0 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 80079cc:	4602      	mov	r2, r0
 80079ce:	4b05      	ldr	r3, [pc, #20]	@ (80079e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	0a9b      	lsrs	r3, r3, #10
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	4903      	ldr	r1, [pc, #12]	@ (80079e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079da:	5ccb      	ldrb	r3, [r1, r3]
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40023800 	.word	0x40023800
 80079e8:	08017fb8 	.word	0x08017fb8

080079ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079f0:	f7ff ffdc 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 80079f4:	4602      	mov	r2, r0
 80079f6:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	0b5b      	lsrs	r3, r3, #13
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	4903      	ldr	r1, [pc, #12]	@ (8007a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a02:	5ccb      	ldrb	r3, [r1, r3]
 8007a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	08017fb8 	.word	0x08017fb8

08007a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d012      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a3c:	4b69      	ldr	r3, [pc, #420]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	4a68      	ldr	r2, [pc, #416]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007a46:	6093      	str	r3, [r2, #8]
 8007a48:	4b66      	ldr	r3, [pc, #408]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a50:	4964      	ldr	r1, [pc, #400]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d017      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7c:	4959      	ldr	r1, [pc, #356]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a8c:	d101      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d017      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ab0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab8:	494a      	ldr	r1, [pc, #296]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ac8:	d101      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 808b 	beq.w	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007af8:	4b3a      	ldr	r3, [pc, #232]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afc:	4a39      	ldr	r2, [pc, #228]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b04:	4b37      	ldr	r3, [pc, #220]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b0c:	60bb      	str	r3, [r7, #8]
 8007b0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b10:	4b35      	ldr	r3, [pc, #212]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a34      	ldr	r2, [pc, #208]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b1c:	f7fd fafe 	bl	800511c <HAL_GetTick>
 8007b20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b22:	e008      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b24:	f7fd fafa 	bl	800511c <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b64      	cmp	r3, #100	@ 0x64
 8007b30:	d901      	bls.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e357      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b36:	4b2c      	ldr	r3, [pc, #176]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0f0      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b42:	4b28      	ldr	r3, [pc, #160]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d035      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d02e      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b60:	4b20      	ldr	r3, [pc, #128]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b76:	4b1b      	ldr	r3, [pc, #108]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b82:	4a18      	ldr	r2, [pc, #96]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b88:	4b16      	ldr	r3, [pc, #88]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d114      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b94:	f7fd fac2 	bl	800511c <HAL_GetTick>
 8007b98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b9a:	e00a      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b9c:	f7fd fabe 	bl	800511c <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e319      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0ee      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bca:	d111      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007bcc:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007bd8:	4b04      	ldr	r3, [pc, #16]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bda:	400b      	ands	r3, r1
 8007bdc:	4901      	ldr	r1, [pc, #4]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	608b      	str	r3, [r1, #8]
 8007be2:	e00b      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007be4:	40023800 	.word	0x40023800
 8007be8:	40007000 	.word	0x40007000
 8007bec:	0ffffcff 	.word	0x0ffffcff
 8007bf0:	4baa      	ldr	r3, [pc, #680]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	4aa9      	ldr	r2, [pc, #676]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007bfa:	6093      	str	r3, [r2, #8]
 8007bfc:	4ba7      	ldr	r3, [pc, #668]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c08:	49a4      	ldr	r1, [pc, #656]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d010      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c1a:	4ba0      	ldr	r3, [pc, #640]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c20:	4a9e      	ldr	r2, [pc, #632]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007c2a:	4b9c      	ldr	r3, [pc, #624]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c34:	4999      	ldr	r1, [pc, #612]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c48:	4b94      	ldr	r3, [pc, #592]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c56:	4991      	ldr	r1, [pc, #580]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c6a:	4b8c      	ldr	r3, [pc, #560]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c78:	4988      	ldr	r1, [pc, #544]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c8c:	4b83      	ldr	r3, [pc, #524]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c9a:	4980      	ldr	r1, [pc, #512]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cae:	4b7b      	ldr	r3, [pc, #492]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cbc:	4977      	ldr	r1, [pc, #476]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cd0:	4b72      	ldr	r3, [pc, #456]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cd6:	f023 0203 	bic.w	r2, r3, #3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cde:	496f      	ldr	r1, [pc, #444]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf8:	f023 020c 	bic.w	r2, r3, #12
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d00:	4966      	ldr	r1, [pc, #408]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d14:	4b61      	ldr	r3, [pc, #388]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d22:	495e      	ldr	r1, [pc, #376]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d36:	4b59      	ldr	r3, [pc, #356]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d44:	4955      	ldr	r1, [pc, #340]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d58:	4b50      	ldr	r3, [pc, #320]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d66:	494d      	ldr	r1, [pc, #308]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00a      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d7a:	4b48      	ldr	r3, [pc, #288]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d88:	4944      	ldr	r1, [pc, #272]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007daa:	493c      	ldr	r1, [pc, #240]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007dbe:	4b37      	ldr	r3, [pc, #220]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dcc:	4933      	ldr	r1, [pc, #204]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007de0:	4b2e      	ldr	r3, [pc, #184]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dee:	492b      	ldr	r1, [pc, #172]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d011      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007e02:	4b26      	ldr	r3, [pc, #152]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e08:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e10:	4922      	ldr	r1, [pc, #136]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e20:	d101      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007e22:	2301      	movs	r3, #1
 8007e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007e32:	2301      	movs	r3, #1
 8007e34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e42:	4b16      	ldr	r3, [pc, #88]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e50:	4912      	ldr	r1, [pc, #72]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e64:	4b0d      	ldr	r3, [pc, #52]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e74:	4909      	ldr	r1, [pc, #36]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d006      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 80d9 	beq.w	8008042 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e90:	4b02      	ldr	r3, [pc, #8]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a01      	ldr	r2, [pc, #4]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e9a:	e001      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ea2:	f7fd f93b 	bl	800511c <HAL_GetTick>
 8007ea6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ea8:	e008      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007eaa:	f7fd f937 	bl	800511c <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b64      	cmp	r3, #100	@ 0x64
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e194      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1f0      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d021      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d11d      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007edc:	4b64      	ldr	r3, [pc, #400]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ee2:	0c1b      	lsrs	r3, r3, #16
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007eea:	4b61      	ldr	r3, [pc, #388]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef0:	0e1b      	lsrs	r3, r3, #24
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	019a      	lsls	r2, r3, #6
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	041b      	lsls	r3, r3, #16
 8007f02:	431a      	orrs	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	061b      	lsls	r3, r3, #24
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	071b      	lsls	r3, r3, #28
 8007f10:	4957      	ldr	r1, [pc, #348]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f2c:	d00a      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d02e      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f42:	d129      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f44:	4b4a      	ldr	r3, [pc, #296]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f4a:	0c1b      	lsrs	r3, r3, #16
 8007f4c:	f003 0303 	and.w	r3, r3, #3
 8007f50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f52:	4b47      	ldr	r3, [pc, #284]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f58:	0f1b      	lsrs	r3, r3, #28
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	019a      	lsls	r2, r3, #6
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	041b      	lsls	r3, r3, #16
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	061b      	lsls	r3, r3, #24
 8007f72:	431a      	orrs	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	071b      	lsls	r3, r3, #28
 8007f78:	493d      	ldr	r1, [pc, #244]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f80:	4b3b      	ldr	r3, [pc, #236]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f86:	f023 021f 	bic.w	r2, r3, #31
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	4937      	ldr	r1, [pc, #220]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01d      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007fa4:	4b32      	ldr	r3, [pc, #200]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007faa:	0e1b      	lsrs	r3, r3, #24
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fb8:	0f1b      	lsrs	r3, r3, #28
 8007fba:	f003 0307 	and.w	r3, r3, #7
 8007fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	019a      	lsls	r2, r3, #6
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	041b      	lsls	r3, r3, #16
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	061b      	lsls	r3, r3, #24
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	071b      	lsls	r3, r3, #28
 8007fd8:	4925      	ldr	r1, [pc, #148]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d011      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	019a      	lsls	r2, r3, #6
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	061b      	lsls	r3, r3, #24
 8008000:	431a      	orrs	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	071b      	lsls	r3, r3, #28
 8008008:	4919      	ldr	r1, [pc, #100]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800800a:	4313      	orrs	r3, r2
 800800c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008010:	4b17      	ldr	r3, [pc, #92]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a16      	ldr	r2, [pc, #88]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008016:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800801a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800801c:	f7fd f87e 	bl	800511c <HAL_GetTick>
 8008020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008022:	e008      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008024:	f7fd f87a 	bl	800511c <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b64      	cmp	r3, #100	@ 0x64
 8008030:	d901      	bls.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e0d7      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008036:	4b0e      	ldr	r3, [pc, #56]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f0      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b01      	cmp	r3, #1
 8008046:	f040 80cd 	bne.w	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800804a:	4b09      	ldr	r3, [pc, #36]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a08      	ldr	r2, [pc, #32]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008056:	f7fd f861 	bl	800511c <HAL_GetTick>
 800805a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800805c:	e00a      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800805e:	f7fd f85d 	bl	800511c <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b64      	cmp	r3, #100	@ 0x64
 800806a:	d903      	bls.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e0ba      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008070:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008074:	4b5e      	ldr	r3, [pc, #376]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800807c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008080:	d0ed      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d02e      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d12a      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080aa:	4b51      	ldr	r3, [pc, #324]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080b0:	0c1b      	lsrs	r3, r3, #16
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080b8:	4b4d      	ldr	r3, [pc, #308]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080be:	0f1b      	lsrs	r3, r3, #28
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	019a      	lsls	r2, r3, #6
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	041b      	lsls	r3, r3, #16
 80080d0:	431a      	orrs	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	061b      	lsls	r3, r3, #24
 80080d8:	431a      	orrs	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	071b      	lsls	r3, r3, #28
 80080de:	4944      	ldr	r1, [pc, #272]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80080e6:	4b42      	ldr	r3, [pc, #264]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f4:	3b01      	subs	r3, #1
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	493d      	ldr	r1, [pc, #244]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d022      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008114:	d11d      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008116:	4b36      	ldr	r3, [pc, #216]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800811c:	0e1b      	lsrs	r3, r3, #24
 800811e:	f003 030f 	and.w	r3, r3, #15
 8008122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008124:	4b32      	ldr	r3, [pc, #200]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800812a:	0f1b      	lsrs	r3, r3, #28
 800812c:	f003 0307 	and.w	r3, r3, #7
 8008130:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	019a      	lsls	r2, r3, #6
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	041b      	lsls	r3, r3, #16
 800813e:	431a      	orrs	r2, r3
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	061b      	lsls	r3, r3, #24
 8008144:	431a      	orrs	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	071b      	lsls	r3, r3, #28
 800814a:	4929      	ldr	r1, [pc, #164]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800814c:	4313      	orrs	r3, r2
 800814e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d028      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800815e:	4b24      	ldr	r3, [pc, #144]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008164:	0e1b      	lsrs	r3, r3, #24
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800816c:	4b20      	ldr	r3, [pc, #128]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800816e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008172:	0c1b      	lsrs	r3, r3, #16
 8008174:	f003 0303 	and.w	r3, r3, #3
 8008178:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	019a      	lsls	r2, r3, #6
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	041b      	lsls	r3, r3, #16
 8008184:	431a      	orrs	r2, r3
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	061b      	lsls	r3, r3, #24
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	071b      	lsls	r3, r3, #28
 8008192:	4917      	ldr	r1, [pc, #92]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008194:	4313      	orrs	r3, r2
 8008196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800819a:	4b15      	ldr	r3, [pc, #84]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800819c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a8:	4911      	ldr	r1, [pc, #68]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80081b0:	4b0f      	ldr	r3, [pc, #60]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a0e      	ldr	r2, [pc, #56]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081bc:	f7fc ffae 	bl	800511c <HAL_GetTick>
 80081c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081c2:	e008      	b.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80081c4:	f7fc ffaa 	bl	800511c <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b64      	cmp	r3, #100	@ 0x64
 80081d0:	d901      	bls.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e007      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081d6:	4b06      	ldr	r3, [pc, #24]	@ (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081e2:	d1ef      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3720      	adds	r7, #32
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40023800 	.word	0x40023800

080081f4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a80      	ldr	r2, [pc, #512]	@ (8008404 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8008204:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008206:	4b80      	ldr	r3, [pc, #512]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800820c:	099b      	lsrs	r3, r3, #6
 800820e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008216:	4b7c      	ldr	r3, [pc, #496]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800821c:	0c1b      	lsrs	r3, r3, #16
 800821e:	f003 0203 	and.w	r2, r3, #3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008226:	4b78      	ldr	r3, [pc, #480]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800822c:	0e1b      	lsrs	r3, r3, #24
 800822e:	f003 020f 	and.w	r2, r3, #15
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008236:	4b74      	ldr	r3, [pc, #464]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800823c:	0f1b      	lsrs	r3, r3, #28
 800823e:	f003 0207 	and.w	r2, r3, #7
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8008246:	4b70      	ldr	r3, [pc, #448]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800824c:	099b      	lsrs	r3, r3, #6
 800824e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008256:	4b6c      	ldr	r3, [pc, #432]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800825c:	0c1b      	lsrs	r3, r3, #16
 800825e:	f003 0203 	and.w	r2, r3, #3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008266:	4b68      	ldr	r3, [pc, #416]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800826c:	0e1b      	lsrs	r3, r3, #24
 800826e:	f003 020f 	and.w	r2, r3, #15
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008276:	4b64      	ldr	r3, [pc, #400]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800827c:	0f1b      	lsrs	r3, r3, #28
 800827e:	f003 0207 	and.w	r2, r3, #7
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8008286:	4b60      	ldr	r3, [pc, #384]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800828c:	f003 021f 	and.w	r2, r3, #31
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8008294:	4b5c      	ldr	r3, [pc, #368]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	f003 021f 	and.w	r2, r3, #31
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80082a4:	4b58      	ldr	r3, [pc, #352]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80082a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082aa:	0c1b      	lsrs	r3, r3, #16
 80082ac:	f003 0203 	and.w	r2, r3, #3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80082b4:	4b54      	ldr	r3, [pc, #336]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80082b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ba:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80082c2:	4b51      	ldr	r3, [pc, #324]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80082c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80082d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80082dc:	4b4a      	ldr	r3, [pc, #296]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80082de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80082ea:	4b47      	ldr	r3, [pc, #284]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80082ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f0:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80082f8:	4b43      	ldr	r3, [pc, #268]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80082fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082fe:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8008306:	4b40      	ldr	r3, [pc, #256]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800830c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8008314:	4b3c      	ldr	r3, [pc, #240]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800831a:	f003 0203 	and.w	r2, r3, #3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8008322:	4b39      	ldr	r3, [pc, #228]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008328:	f003 020c 	and.w	r2, r3, #12
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8008330:	4b35      	ldr	r3, [pc, #212]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008336:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800833e:	4b32      	ldr	r3, [pc, #200]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008344:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800834c:	4b2e      	ldr	r3, [pc, #184]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800834e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008352:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800835a:	4b2b      	ldr	r3, [pc, #172]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800835c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008360:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8008368:	4b27      	ldr	r3, [pc, #156]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800836a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800836e:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8008376:	4b24      	ldr	r3, [pc, #144]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800837c:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008384:	4b20      	ldr	r3, [pc, #128]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800838a:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8008392:	4b1d      	ldr	r3, [pc, #116]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008398:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80083a0:	4b19      	ldr	r3, [pc, #100]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80083a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a6:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80083ae:	4b16      	ldr	r3, [pc, #88]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80083be:	4b12      	ldr	r3, [pc, #72]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80083c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80083c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083cc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80083d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008408 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80083da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d103      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80083ec:	e003      	b.n	80083f6 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	00fffff1 	.word	0x00fffff1
 8008408:	40023800 	.word	0x40023800

0800840c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800842a:	f040 808d 	bne.w	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800842e:	4b93      	ldr	r3, [pc, #588]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008434:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800843c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008444:	d07c      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800844c:	d87b      	bhi.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800845a:	d039      	beq.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800845c:	e073      	b.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800845e:	4b87      	ldr	r3, [pc, #540]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d108      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800846a:	4b84      	ldr	r3, [pc, #528]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008472:	4a83      	ldr	r2, [pc, #524]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008474:	fbb2 f3f3 	udiv	r3, r2, r3
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	e007      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800847c:	4b7f      	ldr	r3, [pc, #508]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008484:	4a7f      	ldr	r2, [pc, #508]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008486:	fbb2 f3f3 	udiv	r3, r2, r3
 800848a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800848c:	4b7b      	ldr	r3, [pc, #492]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800848e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008492:	0e1b      	lsrs	r3, r3, #24
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800849a:	4b78      	ldr	r3, [pc, #480]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800849c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084a0:	099b      	lsrs	r3, r3, #6
 80084a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	fb03 f202 	mul.w	r2, r3, r2
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80084b4:	4b71      	ldr	r3, [pc, #452]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80084b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084ba:	0a1b      	lsrs	r3, r3, #8
 80084bc:	f003 031f 	and.w	r3, r3, #31
 80084c0:	3301      	adds	r3, #1
 80084c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084cc:	617b      	str	r3, [r7, #20]
        break;
 80084ce:	e03b      	b.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80084d0:	4b6a      	ldr	r3, [pc, #424]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d108      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80084dc:	4b67      	ldr	r3, [pc, #412]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084e4:	4a66      	ldr	r2, [pc, #408]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80084e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ea:	613b      	str	r3, [r7, #16]
 80084ec:	e007      	b.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80084ee:	4b63      	ldr	r3, [pc, #396]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084f6:	4a63      	ldr	r2, [pc, #396]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80084fe:	4b5f      	ldr	r3, [pc, #380]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008504:	0e1b      	lsrs	r3, r3, #24
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800850c:	4b5b      	ldr	r3, [pc, #364]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800850e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008512:	099b      	lsrs	r3, r3, #6
 8008514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	fb03 f202 	mul.w	r2, r3, r2
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	fbb2 f3f3 	udiv	r3, r2, r3
 8008524:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008526:	4b55      	ldr	r3, [pc, #340]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800852c:	f003 031f 	and.w	r3, r3, #31
 8008530:	3301      	adds	r3, #1
 8008532:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	fbb2 f3f3 	udiv	r3, r2, r3
 800853c:	617b      	str	r3, [r7, #20]
        break;
 800853e:	e003      	b.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008540:	4b51      	ldr	r3, [pc, #324]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008542:	617b      	str	r3, [r7, #20]
        break;
 8008544:	e000      	b.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008546:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800854e:	f040 808d 	bne.w	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008552:	4b4a      	ldr	r3, [pc, #296]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008558:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008560:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008568:	d07c      	beq.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008570:	d87b      	bhi.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800857e:	d039      	beq.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008580:	e073      	b.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008582:	4b3e      	ldr	r3, [pc, #248]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d108      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800858e:	4b3b      	ldr	r3, [pc, #236]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008596:	4a3a      	ldr	r2, [pc, #232]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008598:	fbb2 f3f3 	udiv	r3, r2, r3
 800859c:	613b      	str	r3, [r7, #16]
 800859e:	e007      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80085a0:	4b36      	ldr	r3, [pc, #216]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085a8:	4a36      	ldr	r2, [pc, #216]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80085b0:	4b32      	ldr	r3, [pc, #200]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b6:	0e1b      	lsrs	r3, r3, #24
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80085be:	4b2f      	ldr	r3, [pc, #188]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80085c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c4:	099b      	lsrs	r3, r3, #6
 80085c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	fb03 f202 	mul.w	r2, r3, r2
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80085d8:	4b28      	ldr	r3, [pc, #160]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80085da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085de:	0a1b      	lsrs	r3, r3, #8
 80085e0:	f003 031f 	and.w	r3, r3, #31
 80085e4:	3301      	adds	r3, #1
 80085e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f0:	617b      	str	r3, [r7, #20]
        break;
 80085f2:	e03b      	b.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80085f4:	4b21      	ldr	r3, [pc, #132]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d108      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008600:	4b1e      	ldr	r3, [pc, #120]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008608:	4a1d      	ldr	r2, [pc, #116]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800860a:	fbb2 f3f3 	udiv	r3, r2, r3
 800860e:	613b      	str	r3, [r7, #16]
 8008610:	e007      	b.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008612:	4b1a      	ldr	r3, [pc, #104]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800861a:	4a1a      	ldr	r2, [pc, #104]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800861c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008620:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008622:	4b16      	ldr	r3, [pc, #88]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008628:	0e1b      	lsrs	r3, r3, #24
 800862a:	f003 030f 	and.w	r3, r3, #15
 800862e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008630:	4b12      	ldr	r3, [pc, #72]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008636:	099b      	lsrs	r3, r3, #6
 8008638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	fb03 f202 	mul.w	r2, r3, r2
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	fbb2 f3f3 	udiv	r3, r2, r3
 8008648:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800864a:	4b0c      	ldr	r3, [pc, #48]	@ (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800864c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008650:	f003 031f 	and.w	r3, r3, #31
 8008654:	3301      	adds	r3, #1
 8008656:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008660:	617b      	str	r3, [r7, #20]
        break;
 8008662:	e003      	b.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008664:	4b08      	ldr	r3, [pc, #32]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008666:	617b      	str	r3, [r7, #20]
        break;
 8008668:	e000      	b.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800866a:	bf00      	nop
      }
    }
  }

  return frequency;
 800866c:	697b      	ldr	r3, [r7, #20]
}
 800866e:	4618      	mov	r0, r3
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	40023800 	.word	0x40023800
 8008680:	00f42400 	.word	0x00f42400
 8008684:	017d7840 	.word	0x017d7840
 8008688:	00bb8000 	.word	0x00bb8000

0800868c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e156      	b.n	8008958 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7f9 fe4e 	bl	8002360 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fad5 	bl	8008c7c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d00c      	beq.n	80086f4 <HAL_SAI_Init+0x68>
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d80d      	bhi.n	80086fa <HAL_SAI_Init+0x6e>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d002      	beq.n	80086e8 <HAL_SAI_Init+0x5c>
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d003      	beq.n	80086ee <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80086e6:	e008      	b.n	80086fa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61fb      	str	r3, [r7, #28]
      break;
 80086ec:	e006      	b.n	80086fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80086ee:	2310      	movs	r3, #16
 80086f0:	61fb      	str	r3, [r7, #28]
      break;
 80086f2:	e003      	b.n	80086fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80086f4:	2320      	movs	r3, #32
 80086f6:	61fb      	str	r3, [r7, #28]
      break;
 80086f8:	e000      	b.n	80086fc <HAL_SAI_Init+0x70>
      break;
 80086fa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	2b03      	cmp	r3, #3
 8008702:	d81e      	bhi.n	8008742 <HAL_SAI_Init+0xb6>
 8008704:	a201      	add	r2, pc, #4	@ (adr r2, 800870c <HAL_SAI_Init+0x80>)
 8008706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870a:	bf00      	nop
 800870c:	0800871d 	.word	0x0800871d
 8008710:	08008723 	.word	0x08008723
 8008714:	0800872b 	.word	0x0800872b
 8008718:	08008733 	.word	0x08008733
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008720:	e010      	b.n	8008744 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008726:	617b      	str	r3, [r7, #20]
    }
    break;
 8008728:	e00c      	b.n	8008744 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800872a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800872e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008730:	e008      	b.n	8008744 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008732:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008736:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f043 0301 	orr.w	r3, r3, #1
 800873e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008740:	e000      	b.n	8008744 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008742:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a85      	ldr	r2, [pc, #532]	@ (8008960 <HAL_SAI_Init+0x2d4>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d004      	beq.n	8008758 <HAL_SAI_Init+0xcc>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a84      	ldr	r2, [pc, #528]	@ (8008964 <HAL_SAI_Init+0x2d8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d103      	bne.n	8008760 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008758:	4a83      	ldr	r2, [pc, #524]	@ (8008968 <HAL_SAI_Init+0x2dc>)
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	e002      	b.n	8008766 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008760:	4a82      	ldr	r2, [pc, #520]	@ (800896c <HAL_SAI_Init+0x2e0>)
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d04c      	beq.n	8008808 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a7a      	ldr	r2, [pc, #488]	@ (8008960 <HAL_SAI_Init+0x2d4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d004      	beq.n	8008786 <HAL_SAI_Init+0xfa>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a78      	ldr	r2, [pc, #480]	@ (8008964 <HAL_SAI_Init+0x2d8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d104      	bne.n	8008790 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008786:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800878a:	f7ff fe3f 	bl	800840c <HAL_RCCEx_GetPeriphCLKFreq>
 800878e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a76      	ldr	r2, [pc, #472]	@ (8008970 <HAL_SAI_Init+0x2e4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d004      	beq.n	80087a4 <HAL_SAI_Init+0x118>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a75      	ldr	r2, [pc, #468]	@ (8008974 <HAL_SAI_Init+0x2e8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d104      	bne.n	80087ae <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80087a4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80087a8:	f7ff fe30 	bl	800840c <HAL_RCCEx_GetPeriphCLKFreq>
 80087ac:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	461a      	mov	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	025b      	lsls	r3, r3, #9
 80087c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4a6b      	ldr	r2, [pc, #428]	@ (8008978 <HAL_SAI_Init+0x2ec>)
 80087ca:	fba2 2303 	umull	r2, r3, r2, r3
 80087ce:	08da      	lsrs	r2, r3, #3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80087d4:	68f9      	ldr	r1, [r7, #12]
 80087d6:	4b68      	ldr	r3, [pc, #416]	@ (8008978 <HAL_SAI_Init+0x2ec>)
 80087d8:	fba3 2301 	umull	r2, r3, r3, r1
 80087dc:	08da      	lsrs	r2, r3, #3
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	1aca      	subs	r2, r1, r3
 80087e8:	2a08      	cmp	r2, #8
 80087ea:	d904      	bls.n	80087f6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d104      	bne.n	8008808 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	085a      	lsrs	r2, r3, #1
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_SAI_Init+0x18c>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d109      	bne.n	800882c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800881c:	2b01      	cmp	r3, #1
 800881e:	d101      	bne.n	8008824 <HAL_SAI_Init+0x198>
 8008820:	2300      	movs	r3, #0
 8008822:	e001      	b.n	8008828 <HAL_SAI_Init+0x19c>
 8008824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008828:	61bb      	str	r3, [r7, #24]
 800882a:	e008      	b.n	800883e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008830:	2b01      	cmp	r3, #1
 8008832:	d102      	bne.n	800883a <HAL_SAI_Init+0x1ae>
 8008834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008838:	e000      	b.n	800883c <HAL_SAI_Init+0x1b0>
 800883a:	2300      	movs	r3, #0
 800883c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	4b4c      	ldr	r3, [pc, #304]	@ (800897c <HAL_SAI_Init+0x2f0>)
 800884a:	400b      	ands	r3, r1
 800884c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800885c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008862:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008868:	431a      	orrs	r2, r3
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8008876:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008882:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	051b      	lsls	r3, r3, #20
 800888a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6859      	ldr	r1, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	4b38      	ldr	r3, [pc, #224]	@ (8008980 <HAL_SAI_Init+0x2f4>)
 80088a0:	400b      	ands	r3, r1
 80088a2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6859      	ldr	r1, [r3, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6899      	ldr	r1, [r3, #8]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008984 <HAL_SAI_Init+0x2f8>)
 80088ce:	400b      	ands	r3, r1
 80088d0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6899      	ldr	r1, [r3, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088dc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80088e2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80088e8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80088ee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088f4:	3b01      	subs	r3, #1
 80088f6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80088f8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68d9      	ldr	r1, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008910:	400b      	ands	r3, r1
 8008912:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68d9      	ldr	r1, [r3, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008922:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008928:	041b      	lsls	r3, r3, #16
 800892a:	431a      	orrs	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008930:	3b01      	subs	r3, #1
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3720      	adds	r7, #32
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	40015804 	.word	0x40015804
 8008964:	40015824 	.word	0x40015824
 8008968:	40015800 	.word	0x40015800
 800896c:	40015c00 	.word	0x40015c00
 8008970:	40015c04 	.word	0x40015c04
 8008974:	40015c24 	.word	0x40015c24
 8008978:	cccccccd 	.word	0xcccccccd
 800897c:	ff05c010 	.word	0xff05c010
 8008980:	ffff1ff0 	.word	0xffff1ff0
 8008984:	fff88000 	.word	0xfff88000

08008988 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e027      	b.n	80089ea <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2202      	movs	r2, #2
 800899e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2200      	movs	r2, #0
 80089a8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f04f 32ff 	mov.w	r2, #4294967295
 80089b2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f961 	bl	8008c7c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f042 0208 	orr.w	r2, r2, #8
 80089c8:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7f9 fd64 	bl	8002498 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d101      	bne.n	8008a0c <HAL_SAI_DMAStop+0x1a>
 8008a08:	2302      	movs	r3, #2
 8008a0a:	e061      	b.n	8008ad0 <HAL_SAI_DMAStop+0xde>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f931 	bl	8008c7c <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008a28:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d01c      	beq.n	8008a6c <HAL_SAI_DMAStop+0x7a>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b12      	cmp	r3, #18
 8008a3c:	d116      	bne.n	8008a6c <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fc ff0a 	bl	800585c <HAL_DMA_Abort>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00e      	beq.n	8008a6c <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a54:	2b80      	cmp	r3, #128	@ 0x80
 8008a56:	d009      	beq.n	8008a6c <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01c      	beq.n	8008aae <HAL_SAI_DMAStop+0xbc>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b22      	cmp	r3, #34	@ 0x22
 8008a7e:	d116      	bne.n	8008aae <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fc fee9 	bl	800585c <HAL_DMA_Abort>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a96:	2b80      	cmp	r3, #128	@ 0x80
 8008a98:	d009      	beq.n	8008aae <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aa4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f042 0208 	orr.w	r2, r2, #8
 8008abc:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <HAL_SAI_Receive_DMA+0x1a>
 8008aec:	88fb      	ldrh	r3, [r7, #6]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e074      	b.n	8008be0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d16d      	bne.n	8008bde <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <HAL_SAI_Receive_DMA+0x38>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e067      	b.n	8008be0 <HAL_SAI_Receive_DMA+0x108>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	88fa      	ldrh	r2, [r7, #6]
 8008b22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	88fa      	ldrh	r2, [r7, #6]
 8008b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2222      	movs	r2, #34	@ 0x22
 8008b3a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b42:	4a29      	ldr	r2, [pc, #164]	@ (8008be8 <HAL_SAI_Receive_DMA+0x110>)
 8008b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b4a:	4a28      	ldr	r2, [pc, #160]	@ (8008bec <HAL_SAI_Receive_DMA+0x114>)
 8008b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b52:	4a27      	ldr	r2, [pc, #156]	@ (8008bf0 <HAL_SAI_Receive_DMA+0x118>)
 8008b54:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	331c      	adds	r3, #28
 8008b68:	4619      	mov	r1, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b6e:	461a      	mov	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008b76:	f7fc fe11 	bl	800579c <HAL_DMA_Start_IT>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e029      	b.n	8008be0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 f83e 	bl	8008c10 <SAI_InterruptFlag>
 8008b94:	4601      	mov	r1, r0
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008bb2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d107      	bne.n	8008bd2 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008bd0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e000      	b.n	8008be0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8008bde:	2302      	movs	r3, #2
  }
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	08008d4d 	.word	0x08008d4d
 8008bec:	08008ced 	.word	0x08008ced
 8008bf0:	08008d69 	.word	0x08008d69

08008bf4 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008c02:	b2db      	uxtb	r3, r3
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d103      	bne.n	8008c2c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f043 0308 	orr.w	r3, r3, #8
 8008c2a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d10b      	bne.n	8008c4c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d003      	beq.n	8008c44 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d103      	bne.n	8008c4c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f043 0310 	orr.w	r3, r3, #16
 8008c4a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d003      	beq.n	8008c5c <SAI_InterruptFlag+0x4c>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d104      	bne.n	8008c66 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e003      	b.n	8008c6e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f043 0304 	orr.w	r3, r3, #4
 8008c6c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008c84:	4b17      	ldr	r3, [pc, #92]	@ (8008ce4 <SAI_Disable+0x68>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a17      	ldr	r2, [pc, #92]	@ (8008ce8 <SAI_Disable+0x6c>)
 8008c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8e:	0b1b      	lsrs	r3, r3, #12
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008ca6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	1e5a      	subs	r2, r3, #1
 8008cac:	60fa      	str	r2, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	72fb      	strb	r3, [r7, #11]
      break;
 8008cc6:	e006      	b.n	8008cd6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e8      	bne.n	8008ca8 <SAI_Disable+0x2c>

  return status;
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	20000018 	.word	0x20000018
 8008ce8:	95cbec1b 	.word	0x95cbec1b

08008cec <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d02:	d01c      	beq.n	8008d3e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008d12:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7ff ff76 	bl	8008c10 <SAI_InterruptFlag>
 8008d24:	4603      	mov	r3, r0
 8008d26:	43d9      	mvns	r1, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691a      	ldr	r2, [r3, #16]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	400a      	ands	r2, r1
 8008d34:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f7fb fe4a 	bl	80049d8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f7fb fe46 	bl	80049ec <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008d60:	bf00      	nop
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d74:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d004      	beq.n	8008d9a <SAI_DMAError+0x32>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d112      	bne.n	8008dc0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008da8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7ff ff66 	bl	8008c7c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7fb fc09 	bl	80045d8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e022      	b.n	8008e26 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d105      	bne.n	8008df8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7f9 fba2 	bl	800253c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f815 	bl	8008e30 <HAL_SD_InitCard>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e00a      	b.n	8008e26 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e30:	b5b0      	push	{r4, r5, r7, lr}
 8008e32:	b08e      	sub	sp, #56	@ 0x38
 8008e34:	af04      	add	r7, sp, #16
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008e44:	2300      	movs	r3, #0
 8008e46:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008e4c:	2376      	movs	r3, #118	@ 0x76
 8008e4e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681d      	ldr	r5, [r3, #0]
 8008e54:	466c      	mov	r4, sp
 8008e56:	f107 0314 	add.w	r3, r7, #20
 8008e5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e62:	f107 0308 	add.w	r3, r7, #8
 8008e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f001 ff71 	bl	800ad50 <SDMMC_Init>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e059      	b.n	8008f34 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e8e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 ffa5 	bl	800ade4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ea8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008eaa:	2002      	movs	r0, #2
 8008eac:	f7fc f942 	bl	8005134 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 ff59 	bl	8009d68 <SD_PowerON>
 8008eb6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e02e      	b.n	8008f34 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fe78 	bl	8009bcc <SD_InitCard>
 8008edc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00b      	beq.n	8008efc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e01b      	b.n	8008f34 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 ffff 	bl	800af08 <SDMMC_CmdBlockLength>
 8008f0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00f      	beq.n	8008f32 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a09      	ldr	r2, [pc, #36]	@ (8008f3c <HAL_SD_InitCard+0x10c>)
 8008f18:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	431a      	orrs	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3728      	adds	r7, #40	@ 0x28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8008f3c:	004005ff 	.word	0x004005ff

08008f40 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08c      	sub	sp, #48	@ 0x30
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d107      	bne.n	8008f68 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e0c3      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	f040 80bc 	bne.w	80090ee <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	441a      	add	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d907      	bls.n	8008f9a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f8e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e0aa      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80090f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc6:	4a4d      	ldr	r2, [pc, #308]	@ (80090fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008fc8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fce:	2200      	movs	r2, #0
 8008fd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fea:	689a      	ldr	r2, [r3, #8]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3380      	adds	r3, #128	@ 0x80
 8009000:	4619      	mov	r1, r3
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	025b      	lsls	r3, r3, #9
 8009008:	089b      	lsrs	r3, r3, #2
 800900a:	f7fc fbc7 	bl	800579c <HAL_DMA_Start_IT>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d017      	beq.n	8009044 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009022:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a35      	ldr	r2, [pc, #212]	@ (8009100 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800902a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009030:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e055      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0208 	orr.w	r2, r2, #8
 8009052:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009058:	2b01      	cmp	r3, #1
 800905a:	d002      	beq.n	8009062 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	025b      	lsls	r3, r3, #9
 8009060:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009062:	f04f 33ff 	mov.w	r3, #4294967295
 8009066:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	025b      	lsls	r3, r3, #9
 800906c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800906e:	2390      	movs	r3, #144	@ 0x90
 8009070:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009072:	2302      	movs	r3, #2
 8009074:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009076:	2300      	movs	r3, #0
 8009078:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800907a:	2301      	movs	r3, #1
 800907c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f107 0210 	add.w	r2, r7, #16
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f001 ff11 	bl	800aeb0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d90a      	bls.n	80090aa <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2282      	movs	r2, #130	@ 0x82
 8009098:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090a0:	4618      	mov	r0, r3
 80090a2:	f001 ff75 	bl	800af90 <SDMMC_CmdReadMultiBlock>
 80090a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80090a8:	e009      	b.n	80090be <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2281      	movs	r2, #129	@ 0x81
 80090ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090b6:	4618      	mov	r0, r3
 80090b8:	f001 ff48 	bl	800af4c <SDMMC_CmdReadSingleBlock>
 80090bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80090be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d012      	beq.n	80090ea <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009100 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80090ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d2:	431a      	orrs	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e002      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e000      	b.n	80090f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80090ee:	2302      	movs	r3, #2
  }
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3730      	adds	r7, #48	@ 0x30
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	080099db 	.word	0x080099db
 80090fc:	08009a4d 	.word	0x08009a4d
 8009100:	004005ff 	.word	0x004005ff

08009104 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08c      	sub	sp, #48	@ 0x30
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d107      	bne.n	800912c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009120:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e0c6      	b.n	80092ba <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b01      	cmp	r3, #1
 8009136:	f040 80bf 	bne.w	80092b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	441a      	add	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800914a:	429a      	cmp	r2, r3
 800914c:	d907      	bls.n	800915e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009152:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e0ad      	b.n	80092ba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2203      	movs	r2, #3
 8009162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2200      	movs	r2, #0
 800916c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f042 021a 	orr.w	r2, r2, #26
 800917c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009182:	4a50      	ldr	r2, [pc, #320]	@ (80092c4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009184:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800918a:	4a4f      	ldr	r2, [pc, #316]	@ (80092c8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800918c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009192:	2200      	movs	r2, #0
 8009194:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800919a:	2b01      	cmp	r3, #1
 800919c:	d002      	beq.n	80091a4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800919e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a0:	025b      	lsls	r3, r3, #9
 80091a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d90a      	bls.n	80091c0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	22a0      	movs	r2, #160	@ 0xa0
 80091ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091b6:	4618      	mov	r0, r3
 80091b8:	f001 ff2e 	bl	800b018 <SDMMC_CmdWriteMultiBlock>
 80091bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80091be:	e009      	b.n	80091d4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2290      	movs	r2, #144	@ 0x90
 80091c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091cc:	4618      	mov	r0, r3
 80091ce:	f001 ff01 	bl	800afd4 <SDMMC_CmdWriteSingleBlock>
 80091d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80091d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d012      	beq.n	8009200 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a3b      	ldr	r2, [pc, #236]	@ (80092cc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80091e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e8:	431a      	orrs	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e05c      	b.n	80092ba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0208 	orr.w	r2, r2, #8
 800920e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009214:	2240      	movs	r2, #64	@ 0x40
 8009216:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3380      	adds	r3, #128	@ 0x80
 8009240:	461a      	mov	r2, r3
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	025b      	lsls	r3, r3, #9
 8009246:	089b      	lsrs	r3, r3, #2
 8009248:	f7fc faa8 	bl	800579c <HAL_DMA_Start_IT>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d01a      	beq.n	8009288 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 021a 	bic.w	r2, r2, #26
 8009260:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a19      	ldr	r2, [pc, #100]	@ (80092cc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009268:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e018      	b.n	80092ba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009288:	f04f 33ff 	mov.w	r3, #4294967295
 800928c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	025b      	lsls	r3, r3, #9
 8009292:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009294:	2390      	movs	r3, #144	@ 0x90
 8009296:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009298:	2300      	movs	r3, #0
 800929a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800929c:	2300      	movs	r3, #0
 800929e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80092a0:	2301      	movs	r3, #1
 80092a2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f107 0210 	add.w	r2, r7, #16
 80092ac:	4611      	mov	r1, r2
 80092ae:	4618      	mov	r0, r3
 80092b0:	f001 fdfe 	bl	800aeb0 <SDMMC_ConfigData>

      return HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	e000      	b.n	80092ba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80092b8:	2302      	movs	r3, #2
  }
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3730      	adds	r7, #48	@ 0x30
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	080099b1 	.word	0x080099b1
 80092c8:	08009a4d 	.word	0x08009a4d
 80092cc:	004005ff 	.word	0x004005ff

080092d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d008      	beq.n	80092fe <HAL_SD_IRQHandler+0x2e>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f003 0308 	and.w	r3, r3, #8
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fdec 	bl	8009ed4 <SD_Read_IT>
 80092fc:	e15a      	b.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 808d 	beq.w	8009428 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009316:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b9a      	ldr	r3, [pc, #616]	@ (800958c <HAL_SD_IRQHandler+0x2bc>)
 8009324:	400b      	ands	r3, r1
 8009326:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0201 	bic.w	r2, r2, #1
 8009336:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f003 0308 	and.w	r3, r3, #8
 800933e:	2b00      	cmp	r3, #0
 8009340:	d039      	beq.n	80093b6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f003 0302 	and.w	r3, r3, #2
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <HAL_SD_IRQHandler+0x86>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d011      	beq.n	800937a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4618      	mov	r0, r3
 800935c:	f001 fe7e 	bl	800b05c <SDMMC_CmdStopTransfer>
 8009360:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d008      	beq.n	800937a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f921 	bl	80095bc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009382:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <HAL_SD_IRQHandler+0xd6>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f002 fe08 	bl	800bfbc <HAL_SD_RxCpltCallback>
 80093ac:	e102      	b.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f002 fdfa 	bl	800bfa8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80093b4:	e0fe      	b.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 80f9 	beq.w	80095b4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d011      	beq.n	80093f0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 fe43 	bl	800b05c <SDMMC_CmdStopTransfer>
 80093d6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d008      	beq.n	80093f0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	431a      	orrs	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f8e6 	bl	80095bc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f040 80dc 	bne.w	80095b4 <HAL_SD_IRQHandler+0x2e4>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	f040 80d6 	bne.w	80095b4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f022 0208 	bic.w	r2, r2, #8
 8009416:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f002 fdc1 	bl	800bfa8 <HAL_SD_TxCpltCallback>
}
 8009426:	e0c5      	b.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800942e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d008      	beq.n	8009448 <HAL_SD_IRQHandler+0x178>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f003 0308 	and.w	r3, r3, #8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fd98 	bl	8009f76 <SD_Write_IT>
 8009446:	e0b5      	b.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800944e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 80ae 	beq.w	80095b4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	d005      	beq.n	8009472 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946a:	f043 0202 	orr.w	r2, r3, #2
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009478:	f003 0308 	and.w	r3, r3, #8
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009484:	f043 0208 	orr.w	r2, r3, #8
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009492:	f003 0320 	and.w	r3, r3, #32
 8009496:	2b00      	cmp	r3, #0
 8009498:	d005      	beq.n	80094a6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949e:	f043 0220 	orr.w	r2, r3, #32
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ac:	f003 0310 	and.w	r3, r3, #16
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d005      	beq.n	80094c0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b8:	f043 0210 	orr.w	r2, r3, #16
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80094c8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80094d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 fdbc 	bl	800b05c <SDMMC_CmdStopTransfer>
 80094e4:	4602      	mov	r2, r0
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f857 	bl	80095bc <HAL_SD_ErrorCallback>
}
 800950e:	e051      	b.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009516:	2b00      	cmp	r3, #0
 8009518:	d04c      	beq.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <HAL_SD_IRQHandler+0x25e>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b00      	cmp	r3, #0
 800952c:	d011      	beq.n	8009552 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009532:	4a17      	ldr	r2, [pc, #92]	@ (8009590 <HAL_SD_IRQHandler+0x2c0>)
 8009534:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800953a:	4618      	mov	r0, r3
 800953c:	f7fc f9fe 	bl	800593c <HAL_DMA_Abort_IT>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d036      	beq.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800954a:	4618      	mov	r0, r3
 800954c:	f000 fad0 	bl	8009af0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009550:	e030      	b.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d104      	bne.n	8009566 <HAL_SD_IRQHandler+0x296>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d018      	beq.n	8009598 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800956a:	4a0a      	ldr	r2, [pc, #40]	@ (8009594 <HAL_SD_IRQHandler+0x2c4>)
 800956c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009572:	4618      	mov	r0, r3
 8009574:	f7fc f9e2 	bl	800593c <HAL_DMA_Abort_IT>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d01a      	beq.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009582:	4618      	mov	r0, r3
 8009584:	f000 faeb 	bl	8009b5e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009588:	e014      	b.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
 800958a:	bf00      	nop
 800958c:	ffff3ec5 	.word	0xffff3ec5
 8009590:	08009af1 	.word	0x08009af1
 8009594:	08009b5f 	.word	0x08009b5f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f002 fcf1 	bl	800bf94 <HAL_SD_AbortCallback>
}
 80095b2:	e7ff      	b.n	80095b4 <HAL_SD_IRQHandler+0x2e4>
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095de:	0f9b      	lsrs	r3, r3, #30
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095ea:	0e9b      	lsrs	r3, r3, #26
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 030f 	and.w	r3, r3, #15
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095fc:	0e1b      	lsrs	r3, r3, #24
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	b2da      	uxtb	r2, r3
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800960e:	0c1b      	lsrs	r3, r3, #16
 8009610:	b2da      	uxtb	r2, r3
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	b2da      	uxtb	r2, r3
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009626:	b2da      	uxtb	r2, r3
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009630:	0d1b      	lsrs	r3, r3, #20
 8009632:	b29a      	uxth	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800963c:	0c1b      	lsrs	r3, r3, #16
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	b2da      	uxtb	r2, r3
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800964e:	0bdb      	lsrs	r3, r3, #15
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	b2da      	uxtb	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009660:	0b9b      	lsrs	r3, r3, #14
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	b2da      	uxtb	r2, r3
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009672:	0b5b      	lsrs	r3, r3, #13
 8009674:	b2db      	uxtb	r3, r3
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	b2da      	uxtb	r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009684:	0b1b      	lsrs	r3, r3, #12
 8009686:	b2db      	uxtb	r3, r3
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	b2da      	uxtb	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2200      	movs	r2, #0
 8009696:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800969c:	2b00      	cmp	r3, #0
 800969e:	d163      	bne.n	8009768 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096a4:	009a      	lsls	r2, r3, #2
 80096a6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80096aa:	4013      	ands	r3, r2
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80096b0:	0f92      	lsrs	r2, r2, #30
 80096b2:	431a      	orrs	r2, r3
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096bc:	0edb      	lsrs	r3, r3, #27
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	f003 0307 	and.w	r3, r3, #7
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096ce:	0e1b      	lsrs	r3, r3, #24
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	f003 0307 	and.w	r3, r3, #7
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096e0:	0d5b      	lsrs	r3, r3, #21
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 0307 	and.w	r3, r3, #7
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096f2:	0c9b      	lsrs	r3, r3, #18
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009704:	0bdb      	lsrs	r3, r3, #15
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f003 0307 	and.w	r3, r3, #7
 800970c:	b2da      	uxtb	r2, r3
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	7e1b      	ldrb	r3, [r3, #24]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	3302      	adds	r3, #2
 8009728:	2201      	movs	r2, #1
 800972a:	fa02 f303 	lsl.w	r3, r2, r3
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009732:	fb03 f202 	mul.w	r2, r3, r2
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	7a1b      	ldrb	r3, [r3, #8]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	2201      	movs	r2, #1
 8009746:	409a      	lsls	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009754:	0a52      	lsrs	r2, r2, #9
 8009756:	fb03 f202 	mul.w	r2, r3, r2
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009764:	661a      	str	r2, [r3, #96]	@ 0x60
 8009766:	e031      	b.n	80097cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800976c:	2b01      	cmp	r3, #1
 800976e:	d11d      	bne.n	80097ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800977e:	0c1b      	lsrs	r3, r3, #16
 8009780:	431a      	orrs	r2, r3
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	3301      	adds	r3, #1
 800978c:	029a      	lsls	r2, r3, #10
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097a0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80097aa:	e00f      	b.n	80097cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a58      	ldr	r2, [pc, #352]	@ (8009914 <HAL_SD_GetCardCSD+0x344>)
 80097b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e09d      	b.n	8009908 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097d0:	0b9b      	lsrs	r3, r3, #14
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097e2:	09db      	lsrs	r3, r3, #7
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009804:	0fdb      	lsrs	r3, r3, #31
 8009806:	b2da      	uxtb	r2, r3
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009810:	0f5b      	lsrs	r3, r3, #29
 8009812:	b2db      	uxtb	r3, r3
 8009814:	f003 0303 	and.w	r3, r3, #3
 8009818:	b2da      	uxtb	r2, r3
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009822:	0e9b      	lsrs	r3, r3, #26
 8009824:	b2db      	uxtb	r3, r3
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	b2da      	uxtb	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009834:	0d9b      	lsrs	r3, r3, #22
 8009836:	b2db      	uxtb	r3, r3
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	b2da      	uxtb	r2, r3
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009846:	0d5b      	lsrs	r3, r3, #21
 8009848:	b2db      	uxtb	r3, r3
 800984a:	f003 0301 	and.w	r3, r3, #1
 800984e:	b2da      	uxtb	r2, r3
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009862:	0c1b      	lsrs	r3, r3, #16
 8009864:	b2db      	uxtb	r3, r3
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	b2da      	uxtb	r2, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009876:	0bdb      	lsrs	r3, r3, #15
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800988a:	0b9b      	lsrs	r3, r3, #14
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	b2da      	uxtb	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800989e:	0b5b      	lsrs	r3, r3, #13
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098b2:	0b1b      	lsrs	r3, r3, #12
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098c6:	0a9b      	lsrs	r3, r3, #10
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	f003 0303 	and.w	r3, r3, #3
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098da:	0a1b      	lsrs	r3, r3, #8
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 0303 	and.w	r3, r3, #3
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ee:	085b      	lsrs	r3, r3, #1
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	004005ff 	.word	0x004005ff

08009918 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800997c:	f107 030c 	add.w	r3, r7, #12
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa7e 	bl	8009e84 <SD_SendStatus>
 8009988:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d005      	beq.n	800999c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	0a5b      	lsrs	r3, r3, #9
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80099a6:	693b      	ldr	r3, [r7, #16]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099cc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80099ce:	bf00      	nop
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ec:	2b82      	cmp	r3, #130	@ 0x82
 80099ee:	d111      	bne.n	8009a14 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 fb31 	bl	800b05c <SDMMC_CmdStopTransfer>
 80099fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d008      	beq.n	8009a14 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f7ff fdd4 	bl	80095bc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 0208 	bic.w	r2, r2, #8
 8009a22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009a2c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f002 fabd 	bl	800bfbc <HAL_SD_RxCpltCallback>
#endif
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a58:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f7fc f91a 	bl	8005c94 <HAL_DMA_GetError>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d03e      	beq.n	8009ae4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a6c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a74:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d002      	beq.n	8009a82 <SD_DMAError+0x36>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d12d      	bne.n	8009ade <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a19      	ldr	r2, [pc, #100]	@ (8009aec <SD_DMAError+0xa0>)
 8009a88:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009a98:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009aa6:	6978      	ldr	r0, [r7, #20]
 8009aa8:	f7ff ff62 	bl	8009970 <HAL_SD_GetCardState>
 8009aac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b06      	cmp	r3, #6
 8009ab2:	d002      	beq.n	8009aba <SD_DMAError+0x6e>
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	d10a      	bne.n	8009ad0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 facc 	bl	800b05c <SDMMC_CmdStopTransfer>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aca:	431a      	orrs	r2, r3
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2200      	movs	r2, #0
 8009adc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009ade:	6978      	ldr	r0, [r7, #20]
 8009ae0:	f7ff fd6c 	bl	80095bc <HAL_SD_ErrorCallback>
#endif
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	004005ff 	.word	0x004005ff

08009af0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009afc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009b06:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f7ff ff31 	bl	8009970 <HAL_SD_GetCardState>
 8009b0e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2b06      	cmp	r3, #6
 8009b22:	d002      	beq.n	8009b2a <SD_DMATxAbort+0x3a>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	d10a      	bne.n	8009b40 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f001 fa94 	bl	800b05c <SDMMC_CmdStopTransfer>
 8009b34:	4602      	mov	r2, r0
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3a:	431a      	orrs	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d103      	bne.n	8009b50 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f002 fa23 	bl	800bf94 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009b4e:	e002      	b.n	8009b56 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f7ff fd33 	bl	80095bc <HAL_SD_ErrorCallback>
}
 8009b56:	bf00      	nop
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009b74:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7ff fefa 	bl	8009970 <HAL_SD_GetCardState>
 8009b7c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2b06      	cmp	r3, #6
 8009b90:	d002      	beq.n	8009b98 <SD_DMARxAbort+0x3a>
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2b05      	cmp	r3, #5
 8009b96:	d10a      	bne.n	8009bae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 fa5d 	bl	800b05c <SDMMC_CmdStopTransfer>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d103      	bne.n	8009bbe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f002 f9ec 	bl	800bf94 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009bbc:	e002      	b.n	8009bc4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7ff fcfc 	bl	80095bc <HAL_SD_ErrorCallback>
}
 8009bc4:	bf00      	nop
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009bcc:	b5b0      	push	{r4, r5, r7, lr}
 8009bce:	b094      	sub	sp, #80	@ 0x50
 8009bd0:	af04      	add	r7, sp, #16
 8009bd2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f001 f90f 	bl	800ae00 <SDMMC_GetPowerState>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009be8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009bec:	e0b8      	b.n	8009d60 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d02f      	beq.n	8009c56 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f001 faf6 	bl	800b1ec <SDMMC_CmdSendCID>
 8009c00:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <SD_InitCard+0x40>
    {
      return errorstate;
 8009c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c0a:	e0a9      	b.n	8009d60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2100      	movs	r1, #0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f001 f939 	bl	800ae8a <SDMMC_GetResponse>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2104      	movs	r1, #4
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 f930 	bl	800ae8a <SDMMC_GetResponse>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2108      	movs	r1, #8
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 f927 	bl	800ae8a <SDMMC_GetResponse>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	210c      	movs	r1, #12
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 f91e 	bl	800ae8a <SDMMC_GetResponse>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d00d      	beq.n	8009c7a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f107 020e 	add.w	r2, r7, #14
 8009c66:	4611      	mov	r1, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fafc 	bl	800b266 <SDMMC_CmdSetRelAdd>
 8009c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <SD_InitCard+0xae>
    {
      return errorstate;
 8009c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c78:	e072      	b.n	8009d60 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d036      	beq.n	8009cf0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009c82:	89fb      	ldrh	r3, [r7, #14]
 8009c84:	461a      	mov	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c92:	041b      	lsls	r3, r3, #16
 8009c94:	4619      	mov	r1, r3
 8009c96:	4610      	mov	r0, r2
 8009c98:	f001 fac6 	bl	800b228 <SDMMC_CmdSendCSD>
 8009c9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca6:	e05b      	b.n	8009d60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2100      	movs	r1, #0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 f8eb 	bl	800ae8a <SDMMC_GetResponse>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2104      	movs	r1, #4
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f001 f8e2 	bl	800ae8a <SDMMC_GetResponse>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2108      	movs	r1, #8
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f001 f8d9 	bl	800ae8a <SDMMC_GetResponse>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	210c      	movs	r1, #12
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f001 f8d0 	bl	800ae8a <SDMMC_GetResponse>
 8009cea:	4602      	mov	r2, r0
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2104      	movs	r1, #4
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f001 f8c7 	bl	800ae8a <SDMMC_GetResponse>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	0d1a      	lsrs	r2, r3, #20
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009d04:	f107 0310 	add.w	r3, r7, #16
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff fc60 	bl	80095d0 <HAL_SD_GetCardCSD>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d16:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009d1a:	e021      	b.n	8009d60 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6819      	ldr	r1, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d24:	041b      	lsls	r3, r3, #16
 8009d26:	2200      	movs	r2, #0
 8009d28:	461c      	mov	r4, r3
 8009d2a:	4615      	mov	r5, r2
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	462b      	mov	r3, r5
 8009d30:	4608      	mov	r0, r1
 8009d32:	f001 f9b5 	bl	800b0a0 <SDMMC_CmdSelDesel>
 8009d36:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <SD_InitCard+0x176>
  {
    return errorstate;
 8009d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d40:	e00e      	b.n	8009d60 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681d      	ldr	r5, [r3, #0]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	466c      	mov	r4, sp
 8009d4a:	f103 0210 	add.w	r2, r3, #16
 8009d4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009d50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d54:	3304      	adds	r3, #4
 8009d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f000 fff9 	bl	800ad50 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3740      	adds	r7, #64	@ 0x40
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bdb0      	pop	{r4, r5, r7, pc}

08009d68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d70:	2300      	movs	r3, #0
 8009d72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 f9b0 	bl	800b0e6 <SDMMC_CmdGoIdleState>
 8009d86:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	e072      	b.n	8009e78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 f9c3 	bl	800b122 <SDMMC_CmdOperCond>
 8009d9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00d      	beq.n	8009dc0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f001 f999 	bl	800b0e6 <SDMMC_CmdGoIdleState>
 8009db4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d004      	beq.n	8009dc6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	e05b      	b.n	8009e78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d137      	bne.n	8009e3e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 f9c3 	bl	800b160 <SDMMC_CmdAppCommand>
 8009dda:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d02d      	beq.n	8009e3e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009de2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009de6:	e047      	b.n	8009e78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2100      	movs	r1, #0
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 f9b6 	bl	800b160 <SDMMC_CmdAppCommand>
 8009df4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <SD_PowerON+0x98>
    {
      return errorstate;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	e03b      	b.n	8009e78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	491e      	ldr	r1, [pc, #120]	@ (8009e80 <SD_PowerON+0x118>)
 8009e06:	4618      	mov	r0, r3
 8009e08:	f001 f9cc 	bl	800b1a4 <SDMMC_CmdAppOperCommand>
 8009e0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009e18:	e02e      	b.n	8009e78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2100      	movs	r1, #0
 8009e20:	4618      	mov	r0, r3
 8009e22:	f001 f832 	bl	800ae8a <SDMMC_GetResponse>
 8009e26:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	0fdb      	lsrs	r3, r3, #31
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <SD_PowerON+0xcc>
 8009e30:	2301      	movs	r3, #1
 8009e32:	e000      	b.n	8009e36 <SD_PowerON+0xce>
 8009e34:	2300      	movs	r3, #0
 8009e36:	613b      	str	r3, [r7, #16]

    count++;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d802      	bhi.n	8009e4e <SD_PowerON+0xe6>
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0cc      	beq.n	8009de8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d902      	bls.n	8009e5e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009e58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009e5c:	e00c      	b.n	8009e78 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	645a      	str	r2, [r3, #68]	@ 0x44
 8009e6e:	e002      	b.n	8009e76 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	c1100000 	.word	0xc1100000

08009e84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d102      	bne.n	8009e9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e98:	e018      	b.n	8009ecc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ea2:	041b      	lsls	r3, r3, #16
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	f001 f9fe 	bl	800b2a8 <SDMMC_CmdSendStatus>
 8009eac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	e009      	b.n	8009ecc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f000 ffe3 	bl	800ae8a <SDMMC_GetResponse>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d03f      	beq.n	8009f6e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	e033      	b.n	8009f5c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 ff55 	bl	800ada8 <SDMMC_ReadFIFO>
 8009efe:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	0a1b      	lsrs	r3, r3, #8
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3301      	adds	r3, #1
 8009f22:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	0c1b      	lsrs	r3, r3, #16
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	0e1b      	lsrs	r3, r3, #24
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b07      	cmp	r3, #7
 8009f60:	d9c8      	bls.n	8009ef4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8009f6e:	bf00      	nop
 8009f70:	3718      	adds	r7, #24
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b086      	sub	sp, #24
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f88:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d043      	beq.n	800a018 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
 8009f94:	e037      	b.n	800a006 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	021a      	lsls	r2, r3, #8
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	041a      	lsls	r2, r3, #16
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	061a      	lsls	r2, r3, #24
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f107 0208 	add.w	r2, r7, #8
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f000 fee1 	bl	800adc2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	3301      	adds	r3, #1
 800a004:	617b      	str	r3, [r7, #20]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b07      	cmp	r3, #7
 800a00a:	d9c4      	bls.n	8009f96 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800a018:	bf00      	nop
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e025      	b.n	800a080 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d106      	bne.n	800a04e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7f7 f8e5 	bl	8001218 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2202      	movs	r2, #2
 800a052:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3304      	adds	r3, #4
 800a05e:	4619      	mov	r1, r3
 800a060:	4610      	mov	r0, r2
 800a062:	f000 fd73 	bl	800ab4c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	461a      	mov	r2, r3
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	f000 fdc7 	bl	800ac04 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a09a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d101      	bne.n	800a0a6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e021      	b.n	800a0ea <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a0a6:	7dfb      	ldrb	r3, [r7, #23]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d002      	beq.n	800a0b2 <HAL_SDRAM_SendCommand+0x2a>
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	2b05      	cmp	r3, #5
 800a0b0:	d118      	bne.n	800a0e4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	68b9      	ldr	r1, [r7, #8]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fe08 	bl	800acd8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d104      	bne.n	800a0da <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a0d8:	e006      	b.n	800a0e8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a0e2:	e001      	b.n	800a0e8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e000      	b.n	800a0ea <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3718      	adds	r7, #24
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b02      	cmp	r3, #2
 800a106:	d101      	bne.n	800a10c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a108:	2302      	movs	r3, #2
 800a10a:	e016      	b.n	800a13a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b01      	cmp	r3, #1
 800a116:	d10f      	bne.n	800a138 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fdfa 	bl	800ad20 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	e000      	b.n	800a13a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e040      	b.n	800a1d6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d106      	bne.n	800a16a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7f8 fc8f 	bl	8002a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2224      	movs	r2, #36	@ 0x24
 800a16e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f022 0201 	bic.w	r2, r2, #1
 800a17e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fb15 	bl	800a7b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f8ae 	bl	800a2f0 <UART_SetConfig>
 800a194:	4603      	mov	r3, r0
 800a196:	2b01      	cmp	r3, #1
 800a198:	d101      	bne.n	800a19e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e01b      	b.n	800a1d6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f042 0201 	orr.w	r2, r2, #1
 800a1cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fb94 	bl	800a8fc <UART_CheckIdleState>
 800a1d4:	4603      	mov	r3, r0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b08a      	sub	sp, #40	@ 0x28
 800a1e2:	af02      	add	r7, sp, #8
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	603b      	str	r3, [r7, #0]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1f2:	2b20      	cmp	r3, #32
 800a1f4:	d177      	bne.n	800a2e6 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <HAL_UART_Transmit+0x24>
 800a1fc:	88fb      	ldrh	r3, [r7, #6]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d101      	bne.n	800a206 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e070      	b.n	800a2e8 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2221      	movs	r2, #33	@ 0x21
 800a212:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a214:	f7fa ff82 	bl	800511c <HAL_GetTick>
 800a218:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	88fa      	ldrh	r2, [r7, #6]
 800a21e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	88fa      	ldrh	r2, [r7, #6]
 800a226:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a232:	d108      	bne.n	800a246 <HAL_UART_Transmit+0x68>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d104      	bne.n	800a246 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a23c:	2300      	movs	r3, #0
 800a23e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	61bb      	str	r3, [r7, #24]
 800a244:	e003      	b.n	800a24e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a24e:	e02f      	b.n	800a2b0 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2200      	movs	r2, #0
 800a258:	2180      	movs	r1, #128	@ 0x80
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 fba5 	bl	800a9aa <UART_WaitOnFlagUntilTimeout>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d004      	beq.n	800a270 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2220      	movs	r2, #32
 800a26a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e03b      	b.n	800a2e8 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10b      	bne.n	800a28e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	881b      	ldrh	r3, [r3, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a284:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	3302      	adds	r3, #2
 800a28a:	61bb      	str	r3, [r7, #24]
 800a28c:	e007      	b.n	800a29e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	781a      	ldrb	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	3301      	adds	r3, #1
 800a29c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1c9      	bne.n	800a250 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2140      	movs	r1, #64	@ 0x40
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f000 fb6f 	bl	800a9aa <UART_WaitOnFlagUntilTimeout>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d004      	beq.n	800a2dc <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e005      	b.n	800a2e8 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2220      	movs	r2, #32
 800a2e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e000      	b.n	800a2e8 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a2e6:	2302      	movs	r3, #2
  }
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3720      	adds	r7, #32
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	431a      	orrs	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	69db      	ldr	r3, [r3, #28]
 800a310:	4313      	orrs	r3, r2
 800a312:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	4ba6      	ldr	r3, [pc, #664]	@ (800a5b4 <UART_SetConfig+0x2c4>)
 800a31c:	4013      	ands	r3, r2
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	6812      	ldr	r2, [r2, #0]
 800a322:	6979      	ldr	r1, [r7, #20]
 800a324:	430b      	orrs	r3, r1
 800a326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	430a      	orrs	r2, r1
 800a360:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a94      	ldr	r2, [pc, #592]	@ (800a5b8 <UART_SetConfig+0x2c8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d120      	bne.n	800a3ae <UART_SetConfig+0xbe>
 800a36c:	4b93      	ldr	r3, [pc, #588]	@ (800a5bc <UART_SetConfig+0x2cc>)
 800a36e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	2b03      	cmp	r3, #3
 800a378:	d816      	bhi.n	800a3a8 <UART_SetConfig+0xb8>
 800a37a:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <UART_SetConfig+0x90>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a391 	.word	0x0800a391
 800a384:	0800a39d 	.word	0x0800a39d
 800a388:	0800a397 	.word	0x0800a397
 800a38c:	0800a3a3 	.word	0x0800a3a3
 800a390:	2301      	movs	r3, #1
 800a392:	77fb      	strb	r3, [r7, #31]
 800a394:	e150      	b.n	800a638 <UART_SetConfig+0x348>
 800a396:	2302      	movs	r3, #2
 800a398:	77fb      	strb	r3, [r7, #31]
 800a39a:	e14d      	b.n	800a638 <UART_SetConfig+0x348>
 800a39c:	2304      	movs	r3, #4
 800a39e:	77fb      	strb	r3, [r7, #31]
 800a3a0:	e14a      	b.n	800a638 <UART_SetConfig+0x348>
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	77fb      	strb	r3, [r7, #31]
 800a3a6:	e147      	b.n	800a638 <UART_SetConfig+0x348>
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	77fb      	strb	r3, [r7, #31]
 800a3ac:	e144      	b.n	800a638 <UART_SetConfig+0x348>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a83      	ldr	r2, [pc, #524]	@ (800a5c0 <UART_SetConfig+0x2d0>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d132      	bne.n	800a41e <UART_SetConfig+0x12e>
 800a3b8:	4b80      	ldr	r3, [pc, #512]	@ (800a5bc <UART_SetConfig+0x2cc>)
 800a3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3be:	f003 030c 	and.w	r3, r3, #12
 800a3c2:	2b0c      	cmp	r3, #12
 800a3c4:	d828      	bhi.n	800a418 <UART_SetConfig+0x128>
 800a3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3cc <UART_SetConfig+0xdc>)
 800a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3cc:	0800a401 	.word	0x0800a401
 800a3d0:	0800a419 	.word	0x0800a419
 800a3d4:	0800a419 	.word	0x0800a419
 800a3d8:	0800a419 	.word	0x0800a419
 800a3dc:	0800a40d 	.word	0x0800a40d
 800a3e0:	0800a419 	.word	0x0800a419
 800a3e4:	0800a419 	.word	0x0800a419
 800a3e8:	0800a419 	.word	0x0800a419
 800a3ec:	0800a407 	.word	0x0800a407
 800a3f0:	0800a419 	.word	0x0800a419
 800a3f4:	0800a419 	.word	0x0800a419
 800a3f8:	0800a419 	.word	0x0800a419
 800a3fc:	0800a413 	.word	0x0800a413
 800a400:	2300      	movs	r3, #0
 800a402:	77fb      	strb	r3, [r7, #31]
 800a404:	e118      	b.n	800a638 <UART_SetConfig+0x348>
 800a406:	2302      	movs	r3, #2
 800a408:	77fb      	strb	r3, [r7, #31]
 800a40a:	e115      	b.n	800a638 <UART_SetConfig+0x348>
 800a40c:	2304      	movs	r3, #4
 800a40e:	77fb      	strb	r3, [r7, #31]
 800a410:	e112      	b.n	800a638 <UART_SetConfig+0x348>
 800a412:	2308      	movs	r3, #8
 800a414:	77fb      	strb	r3, [r7, #31]
 800a416:	e10f      	b.n	800a638 <UART_SetConfig+0x348>
 800a418:	2310      	movs	r3, #16
 800a41a:	77fb      	strb	r3, [r7, #31]
 800a41c:	e10c      	b.n	800a638 <UART_SetConfig+0x348>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a68      	ldr	r2, [pc, #416]	@ (800a5c4 <UART_SetConfig+0x2d4>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d120      	bne.n	800a46a <UART_SetConfig+0x17a>
 800a428:	4b64      	ldr	r3, [pc, #400]	@ (800a5bc <UART_SetConfig+0x2cc>)
 800a42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a42e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a432:	2b30      	cmp	r3, #48	@ 0x30
 800a434:	d013      	beq.n	800a45e <UART_SetConfig+0x16e>
 800a436:	2b30      	cmp	r3, #48	@ 0x30
 800a438:	d814      	bhi.n	800a464 <UART_SetConfig+0x174>
 800a43a:	2b20      	cmp	r3, #32
 800a43c:	d009      	beq.n	800a452 <UART_SetConfig+0x162>
 800a43e:	2b20      	cmp	r3, #32
 800a440:	d810      	bhi.n	800a464 <UART_SetConfig+0x174>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <UART_SetConfig+0x15c>
 800a446:	2b10      	cmp	r3, #16
 800a448:	d006      	beq.n	800a458 <UART_SetConfig+0x168>
 800a44a:	e00b      	b.n	800a464 <UART_SetConfig+0x174>
 800a44c:	2300      	movs	r3, #0
 800a44e:	77fb      	strb	r3, [r7, #31]
 800a450:	e0f2      	b.n	800a638 <UART_SetConfig+0x348>
 800a452:	2302      	movs	r3, #2
 800a454:	77fb      	strb	r3, [r7, #31]
 800a456:	e0ef      	b.n	800a638 <UART_SetConfig+0x348>
 800a458:	2304      	movs	r3, #4
 800a45a:	77fb      	strb	r3, [r7, #31]
 800a45c:	e0ec      	b.n	800a638 <UART_SetConfig+0x348>
 800a45e:	2308      	movs	r3, #8
 800a460:	77fb      	strb	r3, [r7, #31]
 800a462:	e0e9      	b.n	800a638 <UART_SetConfig+0x348>
 800a464:	2310      	movs	r3, #16
 800a466:	77fb      	strb	r3, [r7, #31]
 800a468:	e0e6      	b.n	800a638 <UART_SetConfig+0x348>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a56      	ldr	r2, [pc, #344]	@ (800a5c8 <UART_SetConfig+0x2d8>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d120      	bne.n	800a4b6 <UART_SetConfig+0x1c6>
 800a474:	4b51      	ldr	r3, [pc, #324]	@ (800a5bc <UART_SetConfig+0x2cc>)
 800a476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a47a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a47e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a480:	d013      	beq.n	800a4aa <UART_SetConfig+0x1ba>
 800a482:	2bc0      	cmp	r3, #192	@ 0xc0
 800a484:	d814      	bhi.n	800a4b0 <UART_SetConfig+0x1c0>
 800a486:	2b80      	cmp	r3, #128	@ 0x80
 800a488:	d009      	beq.n	800a49e <UART_SetConfig+0x1ae>
 800a48a:	2b80      	cmp	r3, #128	@ 0x80
 800a48c:	d810      	bhi.n	800a4b0 <UART_SetConfig+0x1c0>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <UART_SetConfig+0x1a8>
 800a492:	2b40      	cmp	r3, #64	@ 0x40
 800a494:	d006      	beq.n	800a4a4 <UART_SetConfig+0x1b4>
 800a496:	e00b      	b.n	800a4b0 <UART_SetConfig+0x1c0>
 800a498:	2300      	movs	r3, #0
 800a49a:	77fb      	strb	r3, [r7, #31]
 800a49c:	e0cc      	b.n	800a638 <UART_SetConfig+0x348>
 800a49e:	2302      	movs	r3, #2
 800a4a0:	77fb      	strb	r3, [r7, #31]
 800a4a2:	e0c9      	b.n	800a638 <UART_SetConfig+0x348>
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	77fb      	strb	r3, [r7, #31]
 800a4a8:	e0c6      	b.n	800a638 <UART_SetConfig+0x348>
 800a4aa:	2308      	movs	r3, #8
 800a4ac:	77fb      	strb	r3, [r7, #31]
 800a4ae:	e0c3      	b.n	800a638 <UART_SetConfig+0x348>
 800a4b0:	2310      	movs	r3, #16
 800a4b2:	77fb      	strb	r3, [r7, #31]
 800a4b4:	e0c0      	b.n	800a638 <UART_SetConfig+0x348>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a44      	ldr	r2, [pc, #272]	@ (800a5cc <UART_SetConfig+0x2dc>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d125      	bne.n	800a50c <UART_SetConfig+0x21c>
 800a4c0:	4b3e      	ldr	r3, [pc, #248]	@ (800a5bc <UART_SetConfig+0x2cc>)
 800a4c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4ce:	d017      	beq.n	800a500 <UART_SetConfig+0x210>
 800a4d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4d4:	d817      	bhi.n	800a506 <UART_SetConfig+0x216>
 800a4d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4da:	d00b      	beq.n	800a4f4 <UART_SetConfig+0x204>
 800a4dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4e0:	d811      	bhi.n	800a506 <UART_SetConfig+0x216>
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d003      	beq.n	800a4ee <UART_SetConfig+0x1fe>
 800a4e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ea:	d006      	beq.n	800a4fa <UART_SetConfig+0x20a>
 800a4ec:	e00b      	b.n	800a506 <UART_SetConfig+0x216>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	77fb      	strb	r3, [r7, #31]
 800a4f2:	e0a1      	b.n	800a638 <UART_SetConfig+0x348>
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	77fb      	strb	r3, [r7, #31]
 800a4f8:	e09e      	b.n	800a638 <UART_SetConfig+0x348>
 800a4fa:	2304      	movs	r3, #4
 800a4fc:	77fb      	strb	r3, [r7, #31]
 800a4fe:	e09b      	b.n	800a638 <UART_SetConfig+0x348>
 800a500:	2308      	movs	r3, #8
 800a502:	77fb      	strb	r3, [r7, #31]
 800a504:	e098      	b.n	800a638 <UART_SetConfig+0x348>
 800a506:	2310      	movs	r3, #16
 800a508:	77fb      	strb	r3, [r7, #31]
 800a50a:	e095      	b.n	800a638 <UART_SetConfig+0x348>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a2f      	ldr	r2, [pc, #188]	@ (800a5d0 <UART_SetConfig+0x2e0>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d125      	bne.n	800a562 <UART_SetConfig+0x272>
 800a516:	4b29      	ldr	r3, [pc, #164]	@ (800a5bc <UART_SetConfig+0x2cc>)
 800a518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a51c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a520:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a524:	d017      	beq.n	800a556 <UART_SetConfig+0x266>
 800a526:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a52a:	d817      	bhi.n	800a55c <UART_SetConfig+0x26c>
 800a52c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a530:	d00b      	beq.n	800a54a <UART_SetConfig+0x25a>
 800a532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a536:	d811      	bhi.n	800a55c <UART_SetConfig+0x26c>
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <UART_SetConfig+0x254>
 800a53c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a540:	d006      	beq.n	800a550 <UART_SetConfig+0x260>
 800a542:	e00b      	b.n	800a55c <UART_SetConfig+0x26c>
 800a544:	2301      	movs	r3, #1
 800a546:	77fb      	strb	r3, [r7, #31]
 800a548:	e076      	b.n	800a638 <UART_SetConfig+0x348>
 800a54a:	2302      	movs	r3, #2
 800a54c:	77fb      	strb	r3, [r7, #31]
 800a54e:	e073      	b.n	800a638 <UART_SetConfig+0x348>
 800a550:	2304      	movs	r3, #4
 800a552:	77fb      	strb	r3, [r7, #31]
 800a554:	e070      	b.n	800a638 <UART_SetConfig+0x348>
 800a556:	2308      	movs	r3, #8
 800a558:	77fb      	strb	r3, [r7, #31]
 800a55a:	e06d      	b.n	800a638 <UART_SetConfig+0x348>
 800a55c:	2310      	movs	r3, #16
 800a55e:	77fb      	strb	r3, [r7, #31]
 800a560:	e06a      	b.n	800a638 <UART_SetConfig+0x348>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a1b      	ldr	r2, [pc, #108]	@ (800a5d4 <UART_SetConfig+0x2e4>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d138      	bne.n	800a5de <UART_SetConfig+0x2ee>
 800a56c:	4b13      	ldr	r3, [pc, #76]	@ (800a5bc <UART_SetConfig+0x2cc>)
 800a56e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a572:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a576:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a57a:	d017      	beq.n	800a5ac <UART_SetConfig+0x2bc>
 800a57c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a580:	d82a      	bhi.n	800a5d8 <UART_SetConfig+0x2e8>
 800a582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a586:	d00b      	beq.n	800a5a0 <UART_SetConfig+0x2b0>
 800a588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a58c:	d824      	bhi.n	800a5d8 <UART_SetConfig+0x2e8>
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <UART_SetConfig+0x2aa>
 800a592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a596:	d006      	beq.n	800a5a6 <UART_SetConfig+0x2b6>
 800a598:	e01e      	b.n	800a5d8 <UART_SetConfig+0x2e8>
 800a59a:	2300      	movs	r3, #0
 800a59c:	77fb      	strb	r3, [r7, #31]
 800a59e:	e04b      	b.n	800a638 <UART_SetConfig+0x348>
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	77fb      	strb	r3, [r7, #31]
 800a5a4:	e048      	b.n	800a638 <UART_SetConfig+0x348>
 800a5a6:	2304      	movs	r3, #4
 800a5a8:	77fb      	strb	r3, [r7, #31]
 800a5aa:	e045      	b.n	800a638 <UART_SetConfig+0x348>
 800a5ac:	2308      	movs	r3, #8
 800a5ae:	77fb      	strb	r3, [r7, #31]
 800a5b0:	e042      	b.n	800a638 <UART_SetConfig+0x348>
 800a5b2:	bf00      	nop
 800a5b4:	efff69f3 	.word	0xefff69f3
 800a5b8:	40011000 	.word	0x40011000
 800a5bc:	40023800 	.word	0x40023800
 800a5c0:	40004400 	.word	0x40004400
 800a5c4:	40004800 	.word	0x40004800
 800a5c8:	40004c00 	.word	0x40004c00
 800a5cc:	40005000 	.word	0x40005000
 800a5d0:	40011400 	.word	0x40011400
 800a5d4:	40007800 	.word	0x40007800
 800a5d8:	2310      	movs	r3, #16
 800a5da:	77fb      	strb	r3, [r7, #31]
 800a5dc:	e02c      	b.n	800a638 <UART_SetConfig+0x348>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a72      	ldr	r2, [pc, #456]	@ (800a7ac <UART_SetConfig+0x4bc>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d125      	bne.n	800a634 <UART_SetConfig+0x344>
 800a5e8:	4b71      	ldr	r3, [pc, #452]	@ (800a7b0 <UART_SetConfig+0x4c0>)
 800a5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a5f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a5f6:	d017      	beq.n	800a628 <UART_SetConfig+0x338>
 800a5f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a5fc:	d817      	bhi.n	800a62e <UART_SetConfig+0x33e>
 800a5fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a602:	d00b      	beq.n	800a61c <UART_SetConfig+0x32c>
 800a604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a608:	d811      	bhi.n	800a62e <UART_SetConfig+0x33e>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d003      	beq.n	800a616 <UART_SetConfig+0x326>
 800a60e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a612:	d006      	beq.n	800a622 <UART_SetConfig+0x332>
 800a614:	e00b      	b.n	800a62e <UART_SetConfig+0x33e>
 800a616:	2300      	movs	r3, #0
 800a618:	77fb      	strb	r3, [r7, #31]
 800a61a:	e00d      	b.n	800a638 <UART_SetConfig+0x348>
 800a61c:	2302      	movs	r3, #2
 800a61e:	77fb      	strb	r3, [r7, #31]
 800a620:	e00a      	b.n	800a638 <UART_SetConfig+0x348>
 800a622:	2304      	movs	r3, #4
 800a624:	77fb      	strb	r3, [r7, #31]
 800a626:	e007      	b.n	800a638 <UART_SetConfig+0x348>
 800a628:	2308      	movs	r3, #8
 800a62a:	77fb      	strb	r3, [r7, #31]
 800a62c:	e004      	b.n	800a638 <UART_SetConfig+0x348>
 800a62e:	2310      	movs	r3, #16
 800a630:	77fb      	strb	r3, [r7, #31]
 800a632:	e001      	b.n	800a638 <UART_SetConfig+0x348>
 800a634:	2310      	movs	r3, #16
 800a636:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a640:	d15b      	bne.n	800a6fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a642:	7ffb      	ldrb	r3, [r7, #31]
 800a644:	2b08      	cmp	r3, #8
 800a646:	d828      	bhi.n	800a69a <UART_SetConfig+0x3aa>
 800a648:	a201      	add	r2, pc, #4	@ (adr r2, 800a650 <UART_SetConfig+0x360>)
 800a64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64e:	bf00      	nop
 800a650:	0800a675 	.word	0x0800a675
 800a654:	0800a67d 	.word	0x0800a67d
 800a658:	0800a685 	.word	0x0800a685
 800a65c:	0800a69b 	.word	0x0800a69b
 800a660:	0800a68b 	.word	0x0800a68b
 800a664:	0800a69b 	.word	0x0800a69b
 800a668:	0800a69b 	.word	0x0800a69b
 800a66c:	0800a69b 	.word	0x0800a69b
 800a670:	0800a693 	.word	0x0800a693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a674:	f7fd f9a6 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 800a678:	61b8      	str	r0, [r7, #24]
        break;
 800a67a:	e013      	b.n	800a6a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a67c:	f7fd f9b6 	bl	80079ec <HAL_RCC_GetPCLK2Freq>
 800a680:	61b8      	str	r0, [r7, #24]
        break;
 800a682:	e00f      	b.n	800a6a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a684:	4b4b      	ldr	r3, [pc, #300]	@ (800a7b4 <UART_SetConfig+0x4c4>)
 800a686:	61bb      	str	r3, [r7, #24]
        break;
 800a688:	e00c      	b.n	800a6a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a68a:	f7fd f8c9 	bl	8007820 <HAL_RCC_GetSysClockFreq>
 800a68e:	61b8      	str	r0, [r7, #24]
        break;
 800a690:	e008      	b.n	800a6a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a696:	61bb      	str	r3, [r7, #24]
        break;
 800a698:	e004      	b.n	800a6a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a69a:	2300      	movs	r3, #0
 800a69c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	77bb      	strb	r3, [r7, #30]
        break;
 800a6a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d074      	beq.n	800a794 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	005a      	lsls	r2, r3, #1
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	085b      	lsrs	r3, r3, #1
 800a6b4:	441a      	add	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2b0f      	cmp	r3, #15
 800a6c4:	d916      	bls.n	800a6f4 <UART_SetConfig+0x404>
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6cc:	d212      	bcs.n	800a6f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	f023 030f 	bic.w	r3, r3, #15
 800a6d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	085b      	lsrs	r3, r3, #1
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	f003 0307 	and.w	r3, r3, #7
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	89fb      	ldrh	r3, [r7, #14]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	89fa      	ldrh	r2, [r7, #14]
 800a6f0:	60da      	str	r2, [r3, #12]
 800a6f2:	e04f      	b.n	800a794 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	77bb      	strb	r3, [r7, #30]
 800a6f8:	e04c      	b.n	800a794 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6fa:	7ffb      	ldrb	r3, [r7, #31]
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d828      	bhi.n	800a752 <UART_SetConfig+0x462>
 800a700:	a201      	add	r2, pc, #4	@ (adr r2, 800a708 <UART_SetConfig+0x418>)
 800a702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a706:	bf00      	nop
 800a708:	0800a72d 	.word	0x0800a72d
 800a70c:	0800a735 	.word	0x0800a735
 800a710:	0800a73d 	.word	0x0800a73d
 800a714:	0800a753 	.word	0x0800a753
 800a718:	0800a743 	.word	0x0800a743
 800a71c:	0800a753 	.word	0x0800a753
 800a720:	0800a753 	.word	0x0800a753
 800a724:	0800a753 	.word	0x0800a753
 800a728:	0800a74b 	.word	0x0800a74b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a72c:	f7fd f94a 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 800a730:	61b8      	str	r0, [r7, #24]
        break;
 800a732:	e013      	b.n	800a75c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a734:	f7fd f95a 	bl	80079ec <HAL_RCC_GetPCLK2Freq>
 800a738:	61b8      	str	r0, [r7, #24]
        break;
 800a73a:	e00f      	b.n	800a75c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a73c:	4b1d      	ldr	r3, [pc, #116]	@ (800a7b4 <UART_SetConfig+0x4c4>)
 800a73e:	61bb      	str	r3, [r7, #24]
        break;
 800a740:	e00c      	b.n	800a75c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a742:	f7fd f86d 	bl	8007820 <HAL_RCC_GetSysClockFreq>
 800a746:	61b8      	str	r0, [r7, #24]
        break;
 800a748:	e008      	b.n	800a75c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a74a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a74e:	61bb      	str	r3, [r7, #24]
        break;
 800a750:	e004      	b.n	800a75c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a752:	2300      	movs	r3, #0
 800a754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	77bb      	strb	r3, [r7, #30]
        break;
 800a75a:	bf00      	nop
    }

    if (pclk != 0U)
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d018      	beq.n	800a794 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	085a      	lsrs	r2, r3, #1
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	441a      	add	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	fbb2 f3f3 	udiv	r3, r2, r3
 800a774:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	2b0f      	cmp	r3, #15
 800a77a:	d909      	bls.n	800a790 <UART_SetConfig+0x4a0>
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a782:	d205      	bcs.n	800a790 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	b29a      	uxth	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	60da      	str	r2, [r3, #12]
 800a78e:	e001      	b.n	800a794 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a7a0:	7fbb      	ldrb	r3, [r7, #30]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3720      	adds	r7, #32
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	40007c00 	.word	0x40007c00
 800a7b0:	40023800 	.word	0x40023800
 800a7b4:	00f42400 	.word	0x00f42400

0800a7b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c4:	f003 0308 	and.w	r3, r3, #8
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00a      	beq.n	800a7e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00a      	beq.n	800a804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	430a      	orrs	r2, r1
 800a802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a808:	f003 0302 	and.w	r3, r3, #2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00a      	beq.n	800a826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82a:	f003 0304 	and.w	r3, r3, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00a      	beq.n	800a848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	430a      	orrs	r2, r1
 800a846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00a      	beq.n	800a86a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	430a      	orrs	r2, r1
 800a868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	430a      	orrs	r2, r1
 800a88a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01a      	beq.n	800a8ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8b6:	d10a      	bne.n	800a8ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	430a      	orrs	r2, r1
 800a8cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	605a      	str	r2, [r3, #4]
  }
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08c      	sub	sp, #48	@ 0x30
 800a900:	af02      	add	r7, sp, #8
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a90c:	f7fa fc06 	bl	800511c <HAL_GetTick>
 800a910:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0308 	and.w	r3, r3, #8
 800a91c:	2b08      	cmp	r3, #8
 800a91e:	d12e      	bne.n	800a97e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a920:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	2200      	movs	r2, #0
 800a92a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f83b 	bl	800a9aa <UART_WaitOnFlagUntilTimeout>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d021      	beq.n	800a97e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	e853 3f00 	ldrex	r3, [r3]
 800a946:	60fb      	str	r3, [r7, #12]
   return(result);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a94e:	623b      	str	r3, [r7, #32]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	461a      	mov	r2, r3
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	61fb      	str	r3, [r7, #28]
 800a95a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95c:	69b9      	ldr	r1, [r7, #24]
 800a95e:	69fa      	ldr	r2, [r7, #28]
 800a960:	e841 2300 	strex	r3, r2, [r1]
 800a964:	617b      	str	r3, [r7, #20]
   return(result);
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1e6      	bne.n	800a93a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2220      	movs	r2, #32
 800a970:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e011      	b.n	800a9a2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2220      	movs	r2, #32
 800a982:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2220      	movs	r2, #32
 800a988:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3728      	adds	r7, #40	@ 0x28
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	60b9      	str	r1, [r7, #8]
 800a9b4:	603b      	str	r3, [r7, #0]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ba:	e04f      	b.n	800aa5c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c2:	d04b      	beq.n	800aa5c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9c4:	f7fa fbaa 	bl	800511c <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d302      	bcc.n	800a9da <UART_WaitOnFlagUntilTimeout+0x30>
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e04e      	b.n	800aa7c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0304 	and.w	r3, r3, #4
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d037      	beq.n	800aa5c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b80      	cmp	r3, #128	@ 0x80
 800a9f0:	d034      	beq.n	800aa5c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b40      	cmp	r3, #64	@ 0x40
 800a9f6:	d031      	beq.n	800aa5c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f003 0308 	and.w	r3, r3, #8
 800aa02:	2b08      	cmp	r3, #8
 800aa04:	d110      	bne.n	800aa28 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2208      	movs	r2, #8
 800aa0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f000 f838 	bl	800aa84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2208      	movs	r2, #8
 800aa18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e029      	b.n	800aa7c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa36:	d111      	bne.n	800aa5c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f000 f81e 	bl	800aa84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e00f      	b.n	800aa7c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69da      	ldr	r2, [r3, #28]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	4013      	ands	r3, r2
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	bf0c      	ite	eq
 800aa6c:	2301      	moveq	r3, #1
 800aa6e:	2300      	movne	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	461a      	mov	r2, r3
 800aa74:	79fb      	ldrb	r3, [r7, #7]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d0a0      	beq.n	800a9bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b095      	sub	sp, #84	@ 0x54
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aaa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaaa:	643b      	str	r3, [r7, #64]	@ 0x40
 800aaac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aab0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aab2:	e841 2300 	strex	r3, r2, [r1]
 800aab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e6      	bne.n	800aa8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3308      	adds	r3, #8
 800aac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	e853 3f00 	ldrex	r3, [r3]
 800aacc:	61fb      	str	r3, [r7, #28]
   return(result);
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	f023 0301 	bic.w	r3, r3, #1
 800aad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3308      	adds	r3, #8
 800aadc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aae6:	e841 2300 	strex	r3, r2, [r1]
 800aaea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1e5      	bne.n	800aabe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d118      	bne.n	800ab2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	f023 0310 	bic.w	r3, r3, #16
 800ab0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	461a      	mov	r2, r3
 800ab16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab18:	61bb      	str	r3, [r7, #24]
 800ab1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6979      	ldr	r1, [r7, #20]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	613b      	str	r3, [r7, #16]
   return(result);
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e6      	bne.n	800aafa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2220      	movs	r2, #32
 800ab30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ab40:	bf00      	nop
 800ab42:	3754      	adds	r7, #84	@ 0x54
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d121      	bne.n	800aba2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4b27      	ldr	r3, [pc, #156]	@ (800ac00 <FMC_SDRAM_Init+0xb4>)
 800ab64:	4013      	ands	r3, r2
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	6851      	ldr	r1, [r2, #4]
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	6892      	ldr	r2, [r2, #8]
 800ab6e:	4311      	orrs	r1, r2
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	68d2      	ldr	r2, [r2, #12]
 800ab74:	4311      	orrs	r1, r2
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	6912      	ldr	r2, [r2, #16]
 800ab7a:	4311      	orrs	r1, r2
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	6952      	ldr	r2, [r2, #20]
 800ab80:	4311      	orrs	r1, r2
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	6992      	ldr	r2, [r2, #24]
 800ab86:	4311      	orrs	r1, r2
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	69d2      	ldr	r2, [r2, #28]
 800ab8c:	4311      	orrs	r1, r2
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	6a12      	ldr	r2, [r2, #32]
 800ab92:	4311      	orrs	r1, r2
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	e026      	b.n	800abf0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	69d9      	ldr	r1, [r3, #28]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	4319      	orrs	r1, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb8:	430b      	orrs	r3, r1
 800abba:	431a      	orrs	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac00 <FMC_SDRAM_Init+0xb4>)
 800abc6:	4013      	ands	r3, r2
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	6851      	ldr	r1, [r2, #4]
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	6892      	ldr	r2, [r2, #8]
 800abd0:	4311      	orrs	r1, r2
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	68d2      	ldr	r2, [r2, #12]
 800abd6:	4311      	orrs	r1, r2
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	6912      	ldr	r2, [r2, #16]
 800abdc:	4311      	orrs	r1, r2
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	6952      	ldr	r2, [r2, #20]
 800abe2:	4311      	orrs	r1, r2
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	6992      	ldr	r2, [r2, #24]
 800abe8:	430a      	orrs	r2, r1
 800abea:	431a      	orrs	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	ffff8000 	.word	0xffff8000

0800ac04 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d128      	bne.n	800ac68 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	1e59      	subs	r1, r3, #1
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	4319      	orrs	r1, r3
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	3b01      	subs	r3, #1
 800ac34:	021b      	lsls	r3, r3, #8
 800ac36:	4319      	orrs	r1, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	031b      	lsls	r3, r3, #12
 800ac40:	4319      	orrs	r1, r3
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	041b      	lsls	r3, r3, #16
 800ac4a:	4319      	orrs	r1, r3
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	3b01      	subs	r3, #1
 800ac52:	051b      	lsls	r3, r3, #20
 800ac54:	4319      	orrs	r1, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	061b      	lsls	r3, r3, #24
 800ac5e:	430b      	orrs	r3, r1
 800ac60:	431a      	orrs	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	609a      	str	r2, [r3, #8]
 800ac66:	e02d      	b.n	800acc4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	689a      	ldr	r2, [r3, #8]
 800ac6c:	4b19      	ldr	r3, [pc, #100]	@ (800acd4 <FMC_SDRAM_Timing_Init+0xd0>)
 800ac6e:	4013      	ands	r3, r2
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	68d2      	ldr	r2, [r2, #12]
 800ac74:	3a01      	subs	r2, #1
 800ac76:	0311      	lsls	r1, r2, #12
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	6952      	ldr	r2, [r2, #20]
 800ac7c:	3a01      	subs	r2, #1
 800ac7e:	0512      	lsls	r2, r2, #20
 800ac80:	430a      	orrs	r2, r1
 800ac82:	431a      	orrs	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	1e59      	subs	r1, r3, #1
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	011b      	lsls	r3, r3, #4
 800ac9e:	4319      	orrs	r1, r3
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	021b      	lsls	r3, r3, #8
 800aca8:	4319      	orrs	r1, r3
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	3b01      	subs	r3, #1
 800acb0:	041b      	lsls	r3, r3, #16
 800acb2:	4319      	orrs	r1, r3
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	3b01      	subs	r3, #1
 800acba:	061b      	lsls	r3, r3, #24
 800acbc:	430b      	orrs	r3, r1
 800acbe:	431a      	orrs	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	ff0f0fff 	.word	0xff0f0fff

0800acd8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	691a      	ldr	r2, [r3, #16]
 800ace8:	4b0c      	ldr	r3, [pc, #48]	@ (800ad1c <FMC_SDRAM_SendCommand+0x44>)
 800acea:	4013      	ands	r3, r2
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	6811      	ldr	r1, [r2, #0]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	6852      	ldr	r2, [r2, #4]
 800acf4:	4311      	orrs	r1, r2
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	6892      	ldr	r2, [r2, #8]
 800acfa:	3a01      	subs	r2, #1
 800acfc:	0152      	lsls	r2, r2, #5
 800acfe:	4311      	orrs	r1, r2
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	68d2      	ldr	r2, [r2, #12]
 800ad04:	0252      	lsls	r2, r2, #9
 800ad06:	430a      	orrs	r2, r1
 800ad08:	431a      	orrs	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	ffc00000 	.word	0xffc00000

0800ad20 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	695a      	ldr	r2, [r3, #20]
 800ad2e:	4b07      	ldr	r3, [pc, #28]	@ (800ad4c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ad30:	4013      	ands	r3, r2
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	0052      	lsls	r2, r2, #1
 800ad36:	431a      	orrs	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	ffffc001 	.word	0xffffc001

0800ad50 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ad50:	b084      	sub	sp, #16
 800ad52:	b480      	push	{r7}
 800ad54:	b085      	sub	sp, #20
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	f107 001c 	add.w	r0, r7, #28
 800ad5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ad66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ad68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ad6a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800ad6e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ad70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800ad72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ad74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800ad76:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ad78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800ad7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685a      	ldr	r2, [r3, #4]
 800ad86:	4b07      	ldr	r3, [pc, #28]	@ (800ada4 <SDMMC_Init+0x54>)
 800ad88:	4013      	ands	r3, r2
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	431a      	orrs	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	b004      	add	sp, #16
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	ffff8100 	.word	0xffff8100

0800ada8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800adc2:	b480      	push	{r7}
 800adc4:	b083      	sub	sp, #12
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2203      	movs	r2, #3
 800adf0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0303 	and.w	r3, r3, #3
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae3a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ae40:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ae46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68da      	ldr	r2, [r3, #12]
 800ae52:	4b06      	ldr	r3, [pc, #24]	@ (800ae6c <SDMMC_SendCommand+0x50>)
 800ae54:	4013      	ands	r3, r2
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	fffff000 	.word	0xfffff000

0800ae70 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	b2db      	uxtb	r3, r3
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	3314      	adds	r3, #20
 800ae98:	461a      	mov	r2, r3
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
}  
 800aea4:	4618      	mov	r0, r3
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	685a      	ldr	r2, [r3, #4]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aed6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aedc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aee2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeee:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	431a      	orrs	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0

}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b088      	sub	sp, #32
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800af16:	2310      	movs	r3, #16
 800af18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af1a:	2340      	movs	r3, #64	@ 0x40
 800af1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af28:	f107 0308 	add.w	r3, r7, #8
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff ff74 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800af34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af38:	2110      	movs	r1, #16
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f9d6 	bl	800b2ec <SDMMC_GetCmdResp1>
 800af40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af42:	69fb      	ldr	r3, [r7, #28]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3720      	adds	r7, #32
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b088      	sub	sp, #32
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800af5a:	2311      	movs	r3, #17
 800af5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af5e:	2340      	movs	r3, #64	@ 0x40
 800af60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af62:	2300      	movs	r3, #0
 800af64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af6c:	f107 0308 	add.w	r3, r7, #8
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f7ff ff52 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800af78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af7c:	2111      	movs	r1, #17
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f9b4 	bl	800b2ec <SDMMC_GetCmdResp1>
 800af84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af86:	69fb      	ldr	r3, [r7, #28]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3720      	adds	r7, #32
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800af9e:	2312      	movs	r3, #18
 800afa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afa2:	2340      	movs	r3, #64	@ 0x40
 800afa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afb0:	f107 0308 	add.w	r3, r7, #8
 800afb4:	4619      	mov	r1, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ff30 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800afbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afc0:	2112      	movs	r1, #18
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f992 	bl	800b2ec <SDMMC_GetCmdResp1>
 800afc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afca:	69fb      	ldr	r3, [r7, #28]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3720      	adds	r7, #32
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800afe2:	2318      	movs	r3, #24
 800afe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afe6:	2340      	movs	r3, #64	@ 0x40
 800afe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff ff0e 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b000:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b004:	2118      	movs	r1, #24
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f970 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b00c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b00e:	69fb      	ldr	r3, [r7, #28]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3720      	adds	r7, #32
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b026:	2319      	movs	r3, #25
 800b028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b02a:	2340      	movs	r3, #64	@ 0x40
 800b02c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b02e:	2300      	movs	r3, #0
 800b030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b038:	f107 0308 	add.w	r3, r7, #8
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff feec 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b044:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b048:	2119      	movs	r1, #25
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f94e 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b052:	69fb      	ldr	r3, [r7, #28]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b068:	230c      	movs	r3, #12
 800b06a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b06c:	2340      	movs	r3, #64	@ 0x40
 800b06e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b070:	2300      	movs	r3, #0
 800b072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b078:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b07a:	f107 0308 	add.w	r3, r7, #8
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff fecb 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b086:	4a05      	ldr	r2, [pc, #20]	@ (800b09c <SDMMC_CmdStopTransfer+0x40>)
 800b088:	210c      	movs	r1, #12
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f92e 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b092:	69fb      	ldr	r3, [r7, #28]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3720      	adds	r7, #32
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	05f5e100 	.word	0x05f5e100

0800b0a0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08a      	sub	sp, #40	@ 0x28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b0b0:	2307      	movs	r3, #7
 800b0b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0b4:	2340      	movs	r3, #64	@ 0x40
 800b0b6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0c0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c2:	f107 0310 	add.w	r3, r7, #16
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f7ff fea7 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b0ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0d2:	2107      	movs	r1, #7
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 f909 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b0da:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3728      	adds	r7, #40	@ 0x28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b088      	sub	sp, #32
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b102:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b104:	f107 0308 	add.w	r3, r7, #8
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7ff fe86 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fb23 	bl	800b75c <SDMMC_GetCmdError>
 800b116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b118:	69fb      	ldr	r3, [r7, #28]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3720      	adds	r7, #32
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b088      	sub	sp, #32
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b12a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b12e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b130:	2308      	movs	r3, #8
 800b132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b134:	2340      	movs	r3, #64	@ 0x40
 800b136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b138:	2300      	movs	r3, #0
 800b13a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b13c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b142:	f107 0308 	add.w	r3, r7, #8
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff fe67 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fab6 	bl	800b6c0 <SDMMC_GetCmdResp7>
 800b154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b156:	69fb      	ldr	r3, [r7, #28]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b16e:	2337      	movs	r3, #55	@ 0x37
 800b170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b172:	2340      	movs	r3, #64	@ 0x40
 800b174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b176:	2300      	movs	r3, #0
 800b178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b17a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b17e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b180:	f107 0308 	add.w	r3, r7, #8
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff fe48 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b18c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b190:	2137      	movs	r1, #55	@ 0x37
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f8aa 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b19a:	69fb      	ldr	r3, [r7, #28]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3720      	adds	r7, #32
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b088      	sub	sp, #32
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e8 <SDMMC_CmdAppOperCommand+0x44>)
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b1b6:	2329      	movs	r3, #41	@ 0x29
 800b1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1ba:	2340      	movs	r3, #64	@ 0x40
 800b1bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1c8:	f107 0308 	add.w	r3, r7, #8
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff fe24 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f9bf 	bl	800b558 <SDMMC_GetCmdResp3>
 800b1da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3720      	adds	r7, #32
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	80100000 	.word	0x80100000

0800b1ec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b088      	sub	sp, #32
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b1fc:	23c0      	movs	r3, #192	@ 0xc0
 800b1fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b200:	2300      	movs	r3, #0
 800b202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b208:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b20a:	f107 0308 	add.w	r3, r7, #8
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff fe03 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f956 	bl	800b4c8 <SDMMC_GetCmdResp2>
 800b21c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b21e:	69fb      	ldr	r3, [r7, #28]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3720      	adds	r7, #32
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b236:	2309      	movs	r3, #9
 800b238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b23a:	23c0      	movs	r3, #192	@ 0xc0
 800b23c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b23e:	2300      	movs	r3, #0
 800b240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b246:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b248:	f107 0308 	add.w	r3, r7, #8
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7ff fde4 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f937 	bl	800b4c8 <SDMMC_GetCmdResp2>
 800b25a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b25c:	69fb      	ldr	r3, [r7, #28]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b088      	sub	sp, #32
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b270:	2300      	movs	r3, #0
 800b272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b274:	2303      	movs	r3, #3
 800b276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b278:	2340      	movs	r3, #64	@ 0x40
 800b27a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b27c:	2300      	movs	r3, #0
 800b27e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b284:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b286:	f107 0308 	add.w	r3, r7, #8
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7ff fdc5 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	2103      	movs	r1, #3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f99c 	bl	800b5d4 <SDMMC_GetCmdResp6>
 800b29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b29e:	69fb      	ldr	r3, [r7, #28]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b2b6:	230d      	movs	r3, #13
 800b2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2ba:	2340      	movs	r3, #64	@ 0x40
 800b2bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2c8:	f107 0308 	add.w	r3, r7, #8
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff fda4 	bl	800ae1c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b2d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2d8:	210d      	movs	r1, #13
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f806 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b2e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2e2:	69fb      	ldr	r3, [r7, #28]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3720      	adds	r7, #32
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b088      	sub	sp, #32
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b2fa:	4b70      	ldr	r3, [pc, #448]	@ (800b4bc <SDMMC_GetCmdResp1+0x1d0>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a70      	ldr	r2, [pc, #448]	@ (800b4c0 <SDMMC_GetCmdResp1+0x1d4>)
 800b300:	fba2 2303 	umull	r2, r3, r2, r3
 800b304:	0a5a      	lsrs	r2, r3, #9
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	fb02 f303 	mul.w	r3, r2, r3
 800b30c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	1e5a      	subs	r2, r3, #1
 800b312:	61fa      	str	r2, [r7, #28]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d102      	bne.n	800b31e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b318:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b31c:	e0c9      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b322:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0ef      	beq.n	800b30e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1ea      	bne.n	800b30e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	d004      	beq.n	800b34e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2204      	movs	r2, #4
 800b348:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b34a:	2304      	movs	r3, #4
 800b34c:	e0b1      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b00      	cmp	r3, #0
 800b358:	d004      	beq.n	800b364 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2201      	movs	r2, #1
 800b35e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b360:	2301      	movs	r3, #1
 800b362:	e0a6      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	22c5      	movs	r2, #197	@ 0xc5
 800b368:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f7ff fd80 	bl	800ae70 <SDMMC_GetCommandResponse>
 800b370:	4603      	mov	r3, r0
 800b372:	461a      	mov	r2, r3
 800b374:	7afb      	ldrb	r3, [r7, #11]
 800b376:	4293      	cmp	r3, r2
 800b378:	d001      	beq.n	800b37e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e099      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b37e:	2100      	movs	r1, #0
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f7ff fd82 	bl	800ae8a <SDMMC_GetResponse>
 800b386:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	4b4e      	ldr	r3, [pc, #312]	@ (800b4c4 <SDMMC_GetCmdResp1+0x1d8>)
 800b38c:	4013      	ands	r3, r2
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b392:	2300      	movs	r3, #0
 800b394:	e08d      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	da02      	bge.n	800b3a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b39c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b3a0:	e087      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b3ac:	2340      	movs	r3, #64	@ 0x40
 800b3ae:	e080      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b3ba:	2380      	movs	r3, #128	@ 0x80
 800b3bc:	e079      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b3c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3cc:	e071      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d002      	beq.n	800b3de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b3d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3dc:	e069      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b3e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3ec:	e061      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d002      	beq.n	800b3fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b3f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b3fc:	e059      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b40c:	e051      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b418:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b41c:	e049      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b428:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b42c:	e041      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b438:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b43c:	e039      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b448:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b44c:	e031      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b458:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b45c:	e029      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b468:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b46c:	e021      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b478:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b47c:	e019      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b488:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b48c:	e011      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b498:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b49c:	e009      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f003 0308 	and.w	r3, r3, #8
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b4a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b4ac:	e001      	b.n	800b4b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3720      	adds	r7, #32
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000018 	.word	0x20000018
 800b4c0:	10624dd3 	.word	0x10624dd3
 800b4c4:	fdffe008 	.word	0xfdffe008

0800b4c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4d0:	4b1f      	ldr	r3, [pc, #124]	@ (800b550 <SDMMC_GetCmdResp2+0x88>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a1f      	ldr	r2, [pc, #124]	@ (800b554 <SDMMC_GetCmdResp2+0x8c>)
 800b4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4da:	0a5b      	lsrs	r3, r3, #9
 800b4dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4e0:	fb02 f303 	mul.w	r3, r2, r3
 800b4e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	1e5a      	subs	r2, r3, #1
 800b4ea:	60fa      	str	r2, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b4f4:	e026      	b.n	800b544 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0ef      	beq.n	800b4e6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1ea      	bne.n	800b4e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b514:	f003 0304 	and.w	r3, r3, #4
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d004      	beq.n	800b526 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2204      	movs	r2, #4
 800b520:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b522:	2304      	movs	r3, #4
 800b524:	e00e      	b.n	800b544 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d004      	beq.n	800b53c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b538:	2301      	movs	r3, #1
 800b53a:	e003      	b.n	800b544 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	22c5      	movs	r2, #197	@ 0xc5
 800b540:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3714      	adds	r7, #20
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	20000018 	.word	0x20000018
 800b554:	10624dd3 	.word	0x10624dd3

0800b558 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b560:	4b1a      	ldr	r3, [pc, #104]	@ (800b5cc <SDMMC_GetCmdResp3+0x74>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a1a      	ldr	r2, [pc, #104]	@ (800b5d0 <SDMMC_GetCmdResp3+0x78>)
 800b566:	fba2 2303 	umull	r2, r3, r2, r3
 800b56a:	0a5b      	lsrs	r3, r3, #9
 800b56c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b570:	fb02 f303 	mul.w	r3, r2, r3
 800b574:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	1e5a      	subs	r2, r3, #1
 800b57a:	60fa      	str	r2, [r7, #12]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d102      	bne.n	800b586 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b580:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b584:	e01b      	b.n	800b5be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b58a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b592:	2b00      	cmp	r3, #0
 800b594:	d0ef      	beq.n	800b576 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1ea      	bne.n	800b576 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5a4:	f003 0304 	and.w	r3, r3, #4
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d004      	beq.n	800b5b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2204      	movs	r2, #4
 800b5b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5b2:	2304      	movs	r3, #4
 800b5b4:	e003      	b.n	800b5be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	22c5      	movs	r2, #197	@ 0xc5
 800b5ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	20000018 	.word	0x20000018
 800b5d0:	10624dd3 	.word	0x10624dd3

0800b5d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b088      	sub	sp, #32
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	607a      	str	r2, [r7, #4]
 800b5e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5e2:	4b35      	ldr	r3, [pc, #212]	@ (800b6b8 <SDMMC_GetCmdResp6+0xe4>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a35      	ldr	r2, [pc, #212]	@ (800b6bc <SDMMC_GetCmdResp6+0xe8>)
 800b5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ec:	0a5b      	lsrs	r3, r3, #9
 800b5ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b5f2:	fb02 f303 	mul.w	r3, r2, r3
 800b5f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	1e5a      	subs	r2, r3, #1
 800b5fc:	61fa      	str	r2, [r7, #28]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d102      	bne.n	800b608 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b602:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b606:	e052      	b.n	800b6ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b60c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b614:	2b00      	cmp	r3, #0
 800b616:	d0ef      	beq.n	800b5f8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1ea      	bne.n	800b5f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b626:	f003 0304 	and.w	r3, r3, #4
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d004      	beq.n	800b638 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2204      	movs	r2, #4
 800b632:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b634:	2304      	movs	r3, #4
 800b636:	e03a      	b.n	800b6ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b00      	cmp	r3, #0
 800b642:	d004      	beq.n	800b64e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2201      	movs	r2, #1
 800b648:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e02f      	b.n	800b6ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f7ff fc0e 	bl	800ae70 <SDMMC_GetCommandResponse>
 800b654:	4603      	mov	r3, r0
 800b656:	461a      	mov	r2, r3
 800b658:	7afb      	ldrb	r3, [r7, #11]
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d001      	beq.n	800b662 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b65e:	2301      	movs	r3, #1
 800b660:	e025      	b.n	800b6ae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	22c5      	movs	r2, #197	@ 0xc5
 800b666:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b668:	2100      	movs	r1, #0
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f7ff fc0d 	bl	800ae8a <SDMMC_GetResponse>
 800b670:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d106      	bne.n	800b68a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	0c1b      	lsrs	r3, r3, #16
 800b680:	b29a      	uxth	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b686:	2300      	movs	r3, #0
 800b688:	e011      	b.n	800b6ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b698:	e009      	b.n	800b6ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b6a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b6a8:	e001      	b.n	800b6ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3720      	adds	r7, #32
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20000018 	.word	0x20000018
 800b6bc:	10624dd3 	.word	0x10624dd3

0800b6c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6c8:	4b22      	ldr	r3, [pc, #136]	@ (800b754 <SDMMC_GetCmdResp7+0x94>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a22      	ldr	r2, [pc, #136]	@ (800b758 <SDMMC_GetCmdResp7+0x98>)
 800b6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d2:	0a5b      	lsrs	r3, r3, #9
 800b6d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6d8:	fb02 f303 	mul.w	r3, r2, r3
 800b6dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	1e5a      	subs	r2, r3, #1
 800b6e2:	60fa      	str	r2, [r7, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d102      	bne.n	800b6ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b6ec:	e02c      	b.n	800b748 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0ef      	beq.n	800b6de <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1ea      	bne.n	800b6de <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2204      	movs	r2, #4
 800b718:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b71a:	2304      	movs	r3, #4
 800b71c:	e014      	b.n	800b748 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b722:	f003 0301 	and.w	r3, r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	d004      	beq.n	800b734 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b730:	2301      	movs	r3, #1
 800b732:	e009      	b.n	800b748 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2240      	movs	r2, #64	@ 0x40
 800b744:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b746:	2300      	movs	r3, #0
  
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	20000018 	.word	0x20000018
 800b758:	10624dd3 	.word	0x10624dd3

0800b75c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b764:	4b11      	ldr	r3, [pc, #68]	@ (800b7ac <SDMMC_GetCmdError+0x50>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a11      	ldr	r2, [pc, #68]	@ (800b7b0 <SDMMC_GetCmdError+0x54>)
 800b76a:	fba2 2303 	umull	r2, r3, r2, r3
 800b76e:	0a5b      	lsrs	r3, r3, #9
 800b770:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b774:	fb02 f303 	mul.w	r3, r2, r3
 800b778:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	1e5a      	subs	r2, r3, #1
 800b77e:	60fa      	str	r2, [r7, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d102      	bne.n	800b78a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b784:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b788:	e009      	b.n	800b79e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b78e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b792:	2b00      	cmp	r3, #0
 800b794:	d0f1      	beq.n	800b77a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	22c5      	movs	r2, #197	@ 0xc5
 800b79a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	20000018 	.word	0x20000018
 800b7b0:	10624dd3 	.word	0x10624dd3

0800b7b4 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b090      	sub	sp, #64	@ 0x40
 800b7b8:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800b7be:	4b33      	ldr	r3, [pc, #204]	@ (800b88c <AUDIO_REC_Start+0xd8>)
 800b7c0:	2264      	movs	r2, #100	@ 0x64
 800b7c2:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4932      	ldr	r1, [pc, #200]	@ (800b890 <AUDIO_REC_Start+0xdc>)
 800b7c8:	4832      	ldr	r0, [pc, #200]	@ (800b894 <AUDIO_REC_Start+0xe0>)
 800b7ca:	f002 faed 	bl	800dda8 <f_mount>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800b7d4:	f7f6 fd67 	bl	80022a6 <Error_Handler>
 800b7d8:	e052      	b.n	800b880 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800b7da:	482f      	ldr	r0, [pc, #188]	@ (800b898 <AUDIO_REC_Start+0xe4>)
 800b7dc:	f009 fc1e 	bl	801501c <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800b7e0:	482e      	ldr	r0, [pc, #184]	@ (800b89c <AUDIO_REC_Start+0xe8>)
 800b7e2:	f009 fc1b 	bl	801501c <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800b7e6:	220a      	movs	r2, #10
 800b7e8:	492d      	ldr	r1, [pc, #180]	@ (800b8a0 <AUDIO_REC_Start+0xec>)
 800b7ea:	482e      	ldr	r0, [pc, #184]	@ (800b8a4 <AUDIO_REC_Start+0xf0>)
 800b7ec:	f002 fb22 	bl	800de34 <f_open>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d144      	bne.n	800b880 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800b7f6:	492c      	ldr	r1, [pc, #176]	@ (800b8a8 <AUDIO_REC_Start+0xf4>)
 800b7f8:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800b7fc:	f000 f9c6 	bl	800bb8c <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800b800:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b804:	222c      	movs	r2, #44	@ 0x2c
 800b806:	4928      	ldr	r1, [pc, #160]	@ (800b8a8 <AUDIO_REC_Start+0xf4>)
 800b808:	4826      	ldr	r0, [pc, #152]	@ (800b8a4 <AUDIO_REC_Start+0xf0>)
 800b80a:	f002 fe0c 	bl	800e426 <f_write>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d135      	bne.n	800b880 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800b814:	4825      	ldr	r0, [pc, #148]	@ (800b8ac <AUDIO_REC_Start+0xf8>)
 800b816:	f009 fc01 	bl	801501c <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800b81a:	4b25      	ldr	r3, [pc, #148]	@ (800b8b0 <AUDIO_REC_Start+0xfc>)
 800b81c:	2205      	movs	r2, #5
 800b81e:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800b820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b822:	2b00      	cmp	r3, #0
 800b824:	d02c      	beq.n	800b880 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR); // 1 mono
 800b826:	2202      	movs	r2, #2
 800b828:	2110      	movs	r1, #16
 800b82a:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800b82e:	f7f9 f81b 	bl	8004868 <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800b832:	4820      	ldr	r0, [pc, #128]	@ (800b8b4 <AUDIO_REC_Start+0x100>)
 800b834:	f009 fbf2 	bl	801501c <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800b838:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800b83c:	481e      	ldr	r0, [pc, #120]	@ (800b8b8 <AUDIO_REC_Start+0x104>)
 800b83e:	f7f9 f891 	bl	8004964 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800b842:	481e      	ldr	r0, [pc, #120]	@ (800b8bc <AUDIO_REC_Start+0x108>)
 800b844:	f009 fbea 	bl	801501c <puts>
			  BufferCtl.fptr = byteswritten;
 800b848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b84a:	4a1b      	ldr	r2, [pc, #108]	@ (800b8b8 <AUDIO_REC_Start+0x104>)
 800b84c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b850:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800b854:	4b18      	ldr	r3, [pc, #96]	@ (800b8b8 <AUDIO_REC_Start+0x104>)
 800b856:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b85a:	461a      	mov	r2, r3
 800b85c:	2300      	movs	r3, #0
 800b85e:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800b862:	4b15      	ldr	r3, [pc, #84]	@ (800b8b8 <AUDIO_REC_Start+0x104>)
 800b864:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b868:	461a      	mov	r2, r3
 800b86a:	2300      	movs	r3, #0
 800b86c:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800b870:	4b11      	ldr	r3, [pc, #68]	@ (800b8b8 <AUDIO_REC_Start+0x104>)
 800b872:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b876:	2200      	movs	r2, #0
 800b878:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800b87c:	2300      	movs	r3, #0
 800b87e:	e000      	b.n	800b882 <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800b880:	2301      	movs	r3, #1
}
 800b882:	4618      	mov	r0, r3
 800b884:	3740      	adds	r7, #64	@ 0x40
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20000058 	.word	0x20000058
 800b890:	20035afc 	.word	0x20035afc
 800b894:	20035b00 	.word	0x20035b00
 800b898:	08017e3c 	.word	0x08017e3c
 800b89c:	08017e50 	.word	0x08017e50
 800b8a0:	08017e64 	.word	0x08017e64
 800b8a4:	200358c8 	.word	0x200358c8
 800b8a8:	20031060 	.word	0x20031060
 800b8ac:	08017e70 	.word	0x08017e70
 800b8b0:	20000a58 	.word	0x20000a58
 800b8b4:	08017e8c 	.word	0x08017e8c
 800b8b8:	2003108c 	.word	0x2003108c
 800b8bc:	08017eac 	.word	0x08017eac

0800b8c0 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800b8ce:	4b59      	ldr	r3, [pc, #356]	@ (800ba34 <AUDIO_REC_Process+0x174>)
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b05      	cmp	r3, #5
 800b8d4:	d002      	beq.n	800b8dc <AUDIO_REC_Process+0x1c>
 800b8d6:	2b0a      	cmp	r3, #10
 800b8d8:	d079      	beq.n	800b9ce <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800b8da:	e0a7      	b.n	800ba2c <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800b8dc:	4b56      	ldr	r3, [pc, #344]	@ (800ba38 <AUDIO_REC_Process+0x178>)
 800b8de:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b8e2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b8e6:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800b8ea:	d303      	bcc.n	800b8f4 <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800b8ec:	4b51      	ldr	r3, [pc, #324]	@ (800ba34 <AUDIO_REC_Process+0x174>)
 800b8ee:	220a      	movs	r2, #10
 800b8f0:	701a      	strb	r2, [r3, #0]
        break;
 800b8f2:	e09b      	b.n	800ba2c <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800b8f4:	4b50      	ldr	r3, [pc, #320]	@ (800ba38 <AUDIO_REC_Process+0x178>)
 800b8f6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b8fa:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d128      	bne.n	800b954 <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800b902:	4b4d      	ldr	r3, [pc, #308]	@ (800ba38 <AUDIO_REC_Process+0x178>)
 800b904:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b908:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	4a4a      	ldr	r2, [pc, #296]	@ (800ba38 <AUDIO_REC_Process+0x178>)
 800b910:	1899      	adds	r1, r3, r2
 800b912:	f107 0314 	add.w	r3, r7, #20
 800b916:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800b91a:	4848      	ldr	r0, [pc, #288]	@ (800ba3c <AUDIO_REC_Process+0x17c>)
 800b91c:	f002 fd83 	bl	800e426 <f_write>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d004      	beq.n	800b930 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800b926:	4846      	ldr	r0, [pc, #280]	@ (800ba40 <AUDIO_REC_Process+0x180>)
 800b928:	f009 fb78 	bl	801501c <puts>
          return AUDIO_ERROR_IO;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e07d      	b.n	800ba2c <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800b930:	4b41      	ldr	r3, [pc, #260]	@ (800ba38 <AUDIO_REC_Process+0x178>)
 800b932:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b936:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	4413      	add	r3, r2
 800b93e:	4a3e      	ldr	r2, [pc, #248]	@ (800ba38 <AUDIO_REC_Process+0x178>)
 800b940:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b944:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800b948:	4b3b      	ldr	r3, [pc, #236]	@ (800ba38 <AUDIO_REC_Process+0x178>)
 800b94a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800b954:	4b38      	ldr	r3, [pc, #224]	@ (800ba38 <AUDIO_REC_Process+0x178>)
 800b956:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b95a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b95e:	4a39      	ldr	r2, [pc, #228]	@ (800ba44 <AUDIO_REC_Process+0x184>)
 800b960:	fba2 2303 	umull	r2, r3, r2, r3
 800b964:	0b1b      	lsrs	r3, r3, #12
 800b966:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800b968:	4b37      	ldr	r3, [pc, #220]	@ (800ba48 <AUDIO_REC_Process+0x188>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	69ba      	ldr	r2, [r7, #24]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d05b      	beq.n	800ba2a <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800b972:	4a35      	ldr	r2, [pc, #212]	@ (800ba48 <AUDIO_REC_Process+0x188>)
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800b978:	4834      	ldr	r0, [pc, #208]	@ (800ba4c <AUDIO_REC_Process+0x18c>)
 800b97a:	f009 fb4f 	bl	801501c <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	4a33      	ldr	r2, [pc, #204]	@ (800ba50 <AUDIO_REC_Process+0x190>)
 800b982:	fba2 2303 	umull	r2, r3, r2, r3
 800b986:	095b      	lsrs	r3, r3, #5
 800b988:	4618      	mov	r0, r3
 800b98a:	69b9      	ldr	r1, [r7, #24]
 800b98c:	4b30      	ldr	r3, [pc, #192]	@ (800ba50 <AUDIO_REC_Process+0x190>)
 800b98e:	fba3 2301 	umull	r2, r3, r3, r1
 800b992:	095a      	lsrs	r2, r3, #5
 800b994:	4613      	mov	r3, r2
 800b996:	011b      	lsls	r3, r3, #4
 800b998:	1a9b      	subs	r3, r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	1aca      	subs	r2, r1, r3
 800b99e:	4613      	mov	r3, r2
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4601      	mov	r1, r0
 800b9a4:	482b      	ldr	r0, [pc, #172]	@ (800ba54 <AUDIO_REC_Process+0x194>)
 800b9a6:	f009 fad1 	bl	8014f4c <iprintf>
        printf("File size : \r\n");
 800b9aa:	482b      	ldr	r0, [pc, #172]	@ (800ba58 <AUDIO_REC_Process+0x198>)
 800b9ac:	f009 fb36 	bl	801501c <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800b9b0:	4b21      	ldr	r3, [pc, #132]	@ (800ba38 <AUDIO_REC_Process+0x178>)
 800b9b2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b9b6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	da01      	bge.n	800b9c2 <AUDIO_REC_Process+0x102>
 800b9be:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800b9c2:	129b      	asrs	r3, r3, #10
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4825      	ldr	r0, [pc, #148]	@ (800ba5c <AUDIO_REC_Process+0x19c>)
 800b9c8:	f009 fac0 	bl	8014f4c <iprintf>
      break;
 800b9cc:	e02d      	b.n	800ba2a <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800b9ce:	2002      	movs	r0, #2
 800b9d0:	f7f8 ffe0 	bl	8004994 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800b9d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b9d8:	f7f9 fbac 	bl	8005134 <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800b9dc:	2100      	movs	r1, #0
 800b9de:	4817      	ldr	r0, [pc, #92]	@ (800ba3c <AUDIO_REC_Process+0x17c>)
 800b9e0:	f002 ff3e 	bl	800e860 <f_lseek>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d113      	bne.n	800ba12 <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800b9ea:	491d      	ldr	r1, [pc, #116]	@ (800ba60 <AUDIO_REC_Process+0x1a0>)
 800b9ec:	481d      	ldr	r0, [pc, #116]	@ (800ba64 <AUDIO_REC_Process+0x1a4>)
 800b9ee:	f000 f9e5 	bl	800bdbc <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800b9f2:	f107 0314 	add.w	r3, r7, #20
 800b9f6:	222c      	movs	r2, #44	@ 0x2c
 800b9f8:	491a      	ldr	r1, [pc, #104]	@ (800ba64 <AUDIO_REC_Process+0x1a4>)
 800b9fa:	4810      	ldr	r0, [pc, #64]	@ (800ba3c <AUDIO_REC_Process+0x17c>)
 800b9fc:	f002 fd13 	bl	800e426 <f_write>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800ba06:	2302      	movs	r3, #2
 800ba08:	77fb      	strb	r3, [r7, #31]
 800ba0a:	e004      	b.n	800ba16 <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	77fb      	strb	r3, [r7, #31]
 800ba10:	e001      	b.n	800ba16 <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800ba12:	2301      	movs	r3, #1
 800ba14:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800ba16:	4b07      	ldr	r3, [pc, #28]	@ (800ba34 <AUDIO_REC_Process+0x174>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800ba1c:	4807      	ldr	r0, [pc, #28]	@ (800ba3c <AUDIO_REC_Process+0x17c>)
 800ba1e:	f002 fef5 	bl	800e80c <f_close>
      printf("wave file closed success\r\n");
 800ba22:	4811      	ldr	r0, [pc, #68]	@ (800ba68 <AUDIO_REC_Process+0x1a8>)
 800ba24:	f009 fafa 	bl	801501c <puts>
      break;
 800ba28:	e000      	b.n	800ba2c <AUDIO_REC_Process+0x16c>
      break;
 800ba2a:	bf00      	nop
      return audio_error;
    }
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3720      	adds	r7, #32
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20000a58 	.word	0x20000a58
 800ba38:	2003108c 	.word	0x2003108c
 800ba3c:	200358c8 	.word	0x200358c8
 800ba40:	08017ec4 	.word	0x08017ec4
 800ba44:	10624dd3 	.word	0x10624dd3
 800ba48:	2000005c 	.word	0x2000005c
 800ba4c:	08017ed8 	.word	0x08017ed8
 800ba50:	88888889 	.word	0x88888889
 800ba54:	08017eec 	.word	0x08017eec
 800ba58:	08017efc 	.word	0x08017efc
 800ba5c:	08017f0c 	.word	0x08017f0c
 800ba60:	2003589c 	.word	0x2003589c
 800ba64:	20031060 	.word	0x20031060
 800ba68:	08017f18 	.word	0x08017f18

0800ba6c <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800ba70:	4b21      	ldr	r3, [pc, #132]	@ (800baf8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ba72:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ba76:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ba7a:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800ba7e:	4a1e      	ldr	r2, [pc, #120]	@ (800baf8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ba80:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ba84:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800ba88:	4b1b      	ldr	r3, [pc, #108]	@ (800baf8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ba8a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ba8e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800ba92:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800ba96:	d10c      	bne.n	800bab2 <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800ba98:	4b17      	ldr	r3, [pc, #92]	@ (800baf8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800ba9a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800baa4:	4b14      	ldr	r3, [pc, #80]	@ (800baf8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800baa6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800baaa:	461a      	mov	r2, r3
 800baac:	2300      	movs	r3, #0
 800baae:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800bab2:	4b11      	ldr	r3, [pc, #68]	@ (800baf8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bab4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bab8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800babc:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800bac0:	d314      	bcc.n	800baec <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800bac2:	4b0d      	ldr	r3, [pc, #52]	@ (800baf8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bac4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800bace:	4b0a      	ldr	r3, [pc, #40]	@ (800baf8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bad0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bad4:	461a      	mov	r2, r3
 800bad6:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800bada:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800bade:	4b06      	ldr	r3, [pc, #24]	@ (800baf8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800bae0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bae4:	461a      	mov	r2, r3
 800bae6:	2300      	movs	r3, #0
 800bae8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800baec:	bf00      	nop
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	2003108c 	.word	0x2003108c

0800bafc <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800bafc:	b480      	push	{r7}
 800bafe:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800bb00:	4b21      	ldr	r3, [pc, #132]	@ (800bb88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bb02:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb06:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800bb0a:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800bb0e:	4a1e      	ldr	r2, [pc, #120]	@ (800bb88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bb10:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800bb14:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800bb18:	4b1b      	ldr	r3, [pc, #108]	@ (800bb88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bb1a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb1e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800bb22:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800bb26:	d10c      	bne.n	800bb42 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800bb28:	4b17      	ldr	r3, [pc, #92]	@ (800bb88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bb2a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800bb34:	4b14      	ldr	r3, [pc, #80]	@ (800bb88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bb36:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800bb42:	4b11      	ldr	r3, [pc, #68]	@ (800bb88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bb44:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb48:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800bb4c:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800bb50:	d314      	bcc.n	800bb7c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800bb52:	4b0d      	ldr	r3, [pc, #52]	@ (800bb88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bb54:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800bb5e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bb60:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb64:	461a      	mov	r2, r3
 800bb66:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800bb6a:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800bb6e:	4b06      	ldr	r3, [pc, #24]	@ (800bb88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800bb70:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bb74:	461a      	mov	r2, r3
 800bb76:	2300      	movs	r3, #0
 800bb78:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800bb7c:	bf00      	nop
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	2003108c 	.word	0x2003108c

0800bb8c <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800bb96:	4a1b      	ldr	r2, [pc, #108]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800bb9c:	4b19      	ldr	r3, [pc, #100]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bb9e:	2202      	movs	r2, #2
 800bba0:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800bba2:	4b18      	ldr	r3, [pc, #96]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bba4:	2210      	movs	r2, #16
 800bba6:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800bba8:	4b16      	ldr	r3, [pc, #88]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbaa:	4a17      	ldr	r2, [pc, #92]	@ (800bc08 <WavProcess_EncInit+0x7c>)
 800bbac:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800bbae:	4b15      	ldr	r3, [pc, #84]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbb0:	222c      	movs	r2, #44	@ 0x2c
 800bbb2:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bbb4:	4b13      	ldr	r3, [pc, #76]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbb6:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800bbb8:	4a12      	ldr	r2, [pc, #72]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbba:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800bbbc:	08d2      	lsrs	r2, r2, #3
 800bbbe:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bbc0:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800bbc4:	4a0f      	ldr	r2, [pc, #60]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbc6:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800bbc8:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800bbcc:	4a0d      	ldr	r2, [pc, #52]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbce:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbd2:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800bbd4:	4b0b      	ldr	r3, [pc, #44]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbd6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800bbd8:	08db      	lsrs	r3, r3, #3
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	fb12 f303 	smulbb	r3, r2, r3
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	4b08      	ldr	r3, [pc, #32]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbe4:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800bbe6:	4907      	ldr	r1, [pc, #28]	@ (800bc04 <WavProcess_EncInit+0x78>)
 800bbe8:	6838      	ldr	r0, [r7, #0]
 800bbea:	f000 f80f 	bl	800bc0c <WavProcess_HeaderInit>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d001      	beq.n	800bbf8 <WavProcess_EncInit+0x6c>
  {
    return 1;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e000      	b.n	800bbfa <WavProcess_EncInit+0x6e>
  }
  return 0;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	2003589c 	.word	0x2003589c
 800bc08:	001d4c00 	.word	0x001d4c00

0800bc0c <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2252      	movs	r2, #82	@ 0x52
 800bc1a:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	2249      	movs	r2, #73	@ 0x49
 800bc22:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	3302      	adds	r3, #2
 800bc28:	2246      	movs	r2, #70	@ 0x46
 800bc2a:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3303      	adds	r3, #3
 800bc30:	2246      	movs	r2, #70	@ 0x46
 800bc32:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	3304      	adds	r3, #4
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3305      	adds	r3, #5
 800bc40:	224c      	movs	r2, #76	@ 0x4c
 800bc42:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	3306      	adds	r3, #6
 800bc48:	221d      	movs	r2, #29
 800bc4a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3307      	adds	r3, #7
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	3308      	adds	r3, #8
 800bc58:	2257      	movs	r2, #87	@ 0x57
 800bc5a:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3309      	adds	r3, #9
 800bc60:	2241      	movs	r2, #65	@ 0x41
 800bc62:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	330a      	adds	r3, #10
 800bc68:	2256      	movs	r2, #86	@ 0x56
 800bc6a:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	330b      	adds	r3, #11
 800bc70:	2245      	movs	r2, #69	@ 0x45
 800bc72:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	330c      	adds	r3, #12
 800bc78:	2266      	movs	r2, #102	@ 0x66
 800bc7a:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	330d      	adds	r3, #13
 800bc80:	226d      	movs	r2, #109	@ 0x6d
 800bc82:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	330e      	adds	r3, #14
 800bc88:	2274      	movs	r2, #116	@ 0x74
 800bc8a:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	330f      	adds	r3, #15
 800bc90:	2220      	movs	r2, #32
 800bc92:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3310      	adds	r3, #16
 800bc98:	2210      	movs	r2, #16
 800bc9a:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	3311      	adds	r3, #17
 800bca0:	2200      	movs	r2, #0
 800bca2:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	3312      	adds	r3, #18
 800bca8:	2200      	movs	r2, #0
 800bcaa:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3313      	adds	r3, #19
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3314      	adds	r3, #20
 800bcb8:	2201      	movs	r2, #1
 800bcba:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3315      	adds	r3, #21
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	8ada      	ldrh	r2, [r3, #22]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	3316      	adds	r3, #22
 800bccc:	b2d2      	uxtb	r2, r2
 800bcce:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	3317      	adds	r3, #23
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	699a      	ldr	r2, [r3, #24]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	3318      	adds	r3, #24
 800bce0:	b2d2      	uxtb	r2, r2
 800bce2:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	0a1a      	lsrs	r2, r3, #8
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3319      	adds	r3, #25
 800bcee:	b2d2      	uxtb	r2, r2
 800bcf0:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	0c1a      	lsrs	r2, r3, #16
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	331a      	adds	r3, #26
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	0e1a      	lsrs	r2, r3, #24
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	331b      	adds	r3, #27
 800bd0a:	b2d2      	uxtb	r2, r2
 800bd0c:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	69da      	ldr	r2, [r3, #28]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	331c      	adds	r3, #28
 800bd16:	b2d2      	uxtb	r2, r2
 800bd18:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	0a1a      	lsrs	r2, r3, #8
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	331d      	adds	r3, #29
 800bd24:	b2d2      	uxtb	r2, r2
 800bd26:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	0c1a      	lsrs	r2, r3, #16
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	331e      	adds	r3, #30
 800bd32:	b2d2      	uxtb	r2, r2
 800bd34:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	69db      	ldr	r3, [r3, #28]
 800bd3a:	0e1a      	lsrs	r2, r3, #24
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	331f      	adds	r3, #31
 800bd40:	b2d2      	uxtb	r2, r2
 800bd42:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	8c1a      	ldrh	r2, [r3, #32]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	3320      	adds	r3, #32
 800bd4c:	b2d2      	uxtb	r2, r2
 800bd4e:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	3321      	adds	r3, #33	@ 0x21
 800bd54:	2200      	movs	r2, #0
 800bd56:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	3322      	adds	r3, #34	@ 0x22
 800bd60:	b2d2      	uxtb	r2, r2
 800bd62:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3323      	adds	r3, #35	@ 0x23
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3324      	adds	r3, #36	@ 0x24
 800bd70:	2264      	movs	r2, #100	@ 0x64
 800bd72:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3325      	adds	r3, #37	@ 0x25
 800bd78:	2261      	movs	r2, #97	@ 0x61
 800bd7a:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3326      	adds	r3, #38	@ 0x26
 800bd80:	2274      	movs	r2, #116	@ 0x74
 800bd82:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	3327      	adds	r3, #39	@ 0x27
 800bd88:	2261      	movs	r2, #97	@ 0x61
 800bd8a:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	3328      	adds	r3, #40	@ 0x28
 800bd90:	2200      	movs	r2, #0
 800bd92:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3329      	adds	r3, #41	@ 0x29
 800bd98:	224c      	movs	r2, #76	@ 0x4c
 800bd9a:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	332a      	adds	r3, #42	@ 0x2a
 800bda0:	221d      	movs	r2, #29
 800bda2:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	332b      	adds	r3, #43	@ 0x2b
 800bda8:	2200      	movs	r2, #0
 800bdaa:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
	...

0800bdbc <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800bdc6:	4b30      	ldr	r3, [pc, #192]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800bdc8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bdcc:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	b2d2      	uxtb	r2, r2
 800bdd6:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800bdd8:	4b2b      	ldr	r3, [pc, #172]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800bdda:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bdde:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800bde2:	0a1a      	lsrs	r2, r3, #8
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3305      	adds	r3, #5
 800bde8:	b2d2      	uxtb	r2, r2
 800bdea:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800bdec:	4b26      	ldr	r3, [pc, #152]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800bdee:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800bdf2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800bdf6:	0c1a      	lsrs	r2, r3, #16
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3306      	adds	r3, #6
 800bdfc:	b2d2      	uxtb	r2, r2
 800bdfe:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800be00:	4b21      	ldr	r3, [pc, #132]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800be02:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be06:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800be0a:	0e1a      	lsrs	r2, r3, #24
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	3307      	adds	r3, #7
 800be10:	b2d2      	uxtb	r2, r2
 800be12:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800be14:	4b1c      	ldr	r3, [pc, #112]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800be16:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be1a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800be1e:	3b2c      	subs	r3, #44	@ 0x2c
 800be20:	4a19      	ldr	r2, [pc, #100]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800be22:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800be26:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800be2a:	4b17      	ldr	r3, [pc, #92]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800be2c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be30:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	3328      	adds	r3, #40	@ 0x28
 800be38:	b2d2      	uxtb	r2, r2
 800be3a:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800be3c:	4b12      	ldr	r3, [pc, #72]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800be3e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be42:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800be46:	0a1a      	lsrs	r2, r3, #8
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3329      	adds	r3, #41	@ 0x29
 800be4c:	b2d2      	uxtb	r2, r2
 800be4e:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800be50:	4b0d      	ldr	r3, [pc, #52]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800be52:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be56:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800be5a:	0c1a      	lsrs	r2, r3, #16
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	332a      	adds	r3, #42	@ 0x2a
 800be60:	b2d2      	uxtb	r2, r2
 800be62:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800be64:	4b08      	ldr	r3, [pc, #32]	@ (800be88 <WavProcess_HeaderUpdate+0xcc>)
 800be66:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800be6a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800be6e:	0e1a      	lsrs	r2, r3, #24
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	332b      	adds	r3, #43	@ 0x2b
 800be74:	b2d2      	uxtb	r2, r2
 800be76:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	370c      	adds	r7, #12
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	2003108c 	.word	0x2003108c

0800be8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800be90:	4904      	ldr	r1, [pc, #16]	@ (800bea4 <MX_FATFS_Init+0x18>)
 800be92:	4805      	ldr	r0, [pc, #20]	@ (800bea8 <MX_FATFS_Init+0x1c>)
 800be94:	f003 fb66 	bl	800f564 <FATFS_LinkDriver>
 800be98:	4603      	mov	r3, r0
 800be9a:	461a      	mov	r2, r3
 800be9c:	4b03      	ldr	r3, [pc, #12]	@ (800beac <MX_FATFS_Init+0x20>)
 800be9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bea0:	bf00      	nop
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	20035afc 	.word	0x20035afc
 800bea8:	08017fc8 	.word	0x08017fc8
 800beac:	20035af8 	.word	0x20035af8

0800beb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800beb0:	b480      	push	{r7}
 800beb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800beb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800beca:	f000 f888 	bl	800bfde <BSP_SD_IsDetected>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d001      	beq.n	800bed8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bed4:	2302      	movs	r3, #2
 800bed6:	e005      	b.n	800bee4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bed8:	4804      	ldr	r0, [pc, #16]	@ (800beec <BSP_SD_Init+0x2c>)
 800beda:	f7fc ff78 	bl	8008dce <HAL_SD_Init>
 800bede:	4603      	mov	r3, r0
 800bee0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800bee2:	79fb      	ldrb	r3, [r7, #7]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	20030ba4 	.word	0x20030ba4

0800bef0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	68f9      	ldr	r1, [r7, #12]
 800bf06:	4806      	ldr	r0, [pc, #24]	@ (800bf20 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bf08:	f7fd f81a 	bl	8008f40 <HAL_SD_ReadBlocks_DMA>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	20030ba4 	.word	0x20030ba4

0800bf24 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b086      	sub	sp, #24
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	68f9      	ldr	r1, [r7, #12]
 800bf3a:	4806      	ldr	r0, [pc, #24]	@ (800bf54 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bf3c:	f7fd f8e2 	bl	8009104 <HAL_SD_WriteBlocks_DMA>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d001      	beq.n	800bf4a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	20030ba4 	.word	0x20030ba4

0800bf58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bf5c:	4805      	ldr	r0, [pc, #20]	@ (800bf74 <BSP_SD_GetCardState+0x1c>)
 800bf5e:	f7fd fd07 	bl	8009970 <HAL_SD_GetCardState>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	bf14      	ite	ne
 800bf68:	2301      	movne	r3, #1
 800bf6a:	2300      	moveq	r3, #0
 800bf6c:	b2db      	uxtb	r3, r3
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	20030ba4 	.word	0x20030ba4

0800bf78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bf80:	6879      	ldr	r1, [r7, #4]
 800bf82:	4803      	ldr	r0, [pc, #12]	@ (800bf90 <BSP_SD_GetCardInfo+0x18>)
 800bf84:	f7fd fcc8 	bl	8009918 <HAL_SD_GetCardInfo>
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	20030ba4 	.word	0x20030ba4

0800bf94 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800bf9c:	f000 f818 	bl	800bfd0 <BSP_SD_AbortCallback>
}
 800bfa0:	bf00      	nop
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bfb0:	f000 f9a8 	bl	800c304 <BSP_SD_WriteCpltCallback>
}
 800bfb4:	bf00      	nop
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bfc4:	f000 f9aa 	bl	800c31c <BSP_SD_ReadCpltCallback>
}
 800bfc8:	bf00      	nop
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	af00      	add	r7, sp, #0

}
 800bfd4:	bf00      	nop
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b082      	sub	sp, #8
 800bfe2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bfe8:	f000 f80c 	bl	800c004 <BSP_PlatformIsDetected>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d101      	bne.n	800bff6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bff2:	2300      	movs	r3, #0
 800bff4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	b2db      	uxtb	r3, r3
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c00a:	2301      	movs	r3, #1
 800c00c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c00e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c012:	4806      	ldr	r0, [pc, #24]	@ (800c02c <BSP_PlatformIsDetected+0x28>)
 800c014:	f7fa f9e2 	bl	80063dc <HAL_GPIO_ReadPin>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d001      	beq.n	800c022 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c01e:	2300      	movs	r3, #0
 800c020:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c022:	79fb      	ldrb	r3, [r7, #7]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	40020800 	.word	0x40020800

0800c030 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c038:	f7f9 f870 	bl	800511c <HAL_GetTick>
 800c03c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c03e:	e006      	b.n	800c04e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c040:	f7ff ff8a 	bl	800bf58 <BSP_SD_GetCardState>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	e009      	b.n	800c062 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c04e:	f7f9 f865 	bl	800511c <HAL_GetTick>
 800c052:	4602      	mov	r2, r0
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	1ad3      	subs	r3, r2, r3
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d8f0      	bhi.n	800c040 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c05e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	4603      	mov	r3, r0
 800c074:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c076:	4b0b      	ldr	r3, [pc, #44]	@ (800c0a4 <SD_CheckStatus+0x38>)
 800c078:	2201      	movs	r2, #1
 800c07a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c07c:	f7ff ff6c 	bl	800bf58 <BSP_SD_GetCardState>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d107      	bne.n	800c096 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c086:	4b07      	ldr	r3, [pc, #28]	@ (800c0a4 <SD_CheckStatus+0x38>)
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	f023 0301 	bic.w	r3, r3, #1
 800c090:	b2da      	uxtb	r2, r3
 800c092:	4b04      	ldr	r3, [pc, #16]	@ (800c0a4 <SD_CheckStatus+0x38>)
 800c094:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c096:	4b03      	ldr	r3, [pc, #12]	@ (800c0a4 <SD_CheckStatus+0x38>)
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	b2db      	uxtb	r3, r3
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	20000060 	.word	0x20000060

0800c0a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c0b2:	f7ff ff05 	bl	800bec0 <BSP_SD_Init>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d107      	bne.n	800c0cc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7ff ffd4 	bl	800c06c <SD_CheckStatus>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	4b04      	ldr	r3, [pc, #16]	@ (800c0dc <SD_initialize+0x34>)
 800c0ca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c0cc:	4b03      	ldr	r3, [pc, #12]	@ (800c0dc <SD_initialize+0x34>)
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	b2db      	uxtb	r3, r3
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20000060 	.word	0x20000060

0800c0e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c0ea:	79fb      	ldrb	r3, [r7, #7]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7ff ffbd 	bl	800c06c <SD_CheckStatus>
 800c0f2:	4603      	mov	r3, r0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	60b9      	str	r1, [r7, #8]
 800c104:	607a      	str	r2, [r7, #4]
 800c106:	603b      	str	r3, [r7, #0]
 800c108:	4603      	mov	r3, r0
 800c10a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c110:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c114:	f7ff ff8c 	bl	800c030 <SD_CheckStatusWithTimeout>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	da01      	bge.n	800c122 <SD_read+0x26>
  {
    return res;
 800c11e:	7dfb      	ldrb	r3, [r7, #23]
 800c120:	e03b      	b.n	800c19a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	6879      	ldr	r1, [r7, #4]
 800c126:	68b8      	ldr	r0, [r7, #8]
 800c128:	f7ff fee2 	bl	800bef0 <BSP_SD_ReadBlocks_DMA>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d132      	bne.n	800c198 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c132:	4b1c      	ldr	r3, [pc, #112]	@ (800c1a4 <SD_read+0xa8>)
 800c134:	2200      	movs	r2, #0
 800c136:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c138:	f7f8 fff0 	bl	800511c <HAL_GetTick>
 800c13c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c13e:	bf00      	nop
 800c140:	4b18      	ldr	r3, [pc, #96]	@ (800c1a4 <SD_read+0xa8>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d108      	bne.n	800c15a <SD_read+0x5e>
 800c148:	f7f8 ffe8 	bl	800511c <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c156:	4293      	cmp	r3, r2
 800c158:	d9f2      	bls.n	800c140 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c15a:	4b12      	ldr	r3, [pc, #72]	@ (800c1a4 <SD_read+0xa8>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d102      	bne.n	800c168 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	75fb      	strb	r3, [r7, #23]
 800c166:	e017      	b.n	800c198 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c168:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a4 <SD_read+0xa8>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c16e:	f7f8 ffd5 	bl	800511c <HAL_GetTick>
 800c172:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c174:	e007      	b.n	800c186 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c176:	f7ff feef 	bl	800bf58 <BSP_SD_GetCardState>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d102      	bne.n	800c186 <SD_read+0x8a>
          {
            res = RES_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c184:	e008      	b.n	800c198 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c186:	f7f8 ffc9 	bl	800511c <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c194:	4293      	cmp	r3, r2
 800c196:	d9ee      	bls.n	800c176 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c198:	7dfb      	ldrb	r3, [r7, #23]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20035d34 	.word	0x20035d34

0800c1a8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60b9      	str	r1, [r7, #8]
 800c1b0:	607a      	str	r2, [r7, #4]
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c1bc:	4b24      	ldr	r3, [pc, #144]	@ (800c250 <SD_write+0xa8>)
 800c1be:	2200      	movs	r2, #0
 800c1c0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c1c2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c1c6:	f7ff ff33 	bl	800c030 <SD_CheckStatusWithTimeout>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	da01      	bge.n	800c1d4 <SD_write+0x2c>
  {
    return res;
 800c1d0:	7dfb      	ldrb	r3, [r7, #23]
 800c1d2:	e038      	b.n	800c246 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	68b8      	ldr	r0, [r7, #8]
 800c1da:	f7ff fea3 	bl	800bf24 <BSP_SD_WriteBlocks_DMA>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d12f      	bne.n	800c244 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c1e4:	f7f8 ff9a 	bl	800511c <HAL_GetTick>
 800c1e8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c1ea:	bf00      	nop
 800c1ec:	4b18      	ldr	r3, [pc, #96]	@ (800c250 <SD_write+0xa8>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d108      	bne.n	800c206 <SD_write+0x5e>
 800c1f4:	f7f8 ff92 	bl	800511c <HAL_GetTick>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c202:	4293      	cmp	r3, r2
 800c204:	d9f2      	bls.n	800c1ec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c206:	4b12      	ldr	r3, [pc, #72]	@ (800c250 <SD_write+0xa8>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d102      	bne.n	800c214 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	75fb      	strb	r3, [r7, #23]
 800c212:	e017      	b.n	800c244 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c214:	4b0e      	ldr	r3, [pc, #56]	@ (800c250 <SD_write+0xa8>)
 800c216:	2200      	movs	r2, #0
 800c218:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c21a:	f7f8 ff7f 	bl	800511c <HAL_GetTick>
 800c21e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c220:	e007      	b.n	800c232 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c222:	f7ff fe99 	bl	800bf58 <BSP_SD_GetCardState>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d102      	bne.n	800c232 <SD_write+0x8a>
          {
            res = RES_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	75fb      	strb	r3, [r7, #23]
            break;
 800c230:	e008      	b.n	800c244 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c232:	f7f8 ff73 	bl	800511c <HAL_GetTick>
 800c236:	4602      	mov	r2, r0
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c240:	4293      	cmp	r3, r2
 800c242:	d9ee      	bls.n	800c222 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c244:	7dfb      	ldrb	r3, [r7, #23]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20035d30 	.word	0x20035d30

0800c254 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b08c      	sub	sp, #48	@ 0x30
 800c258:	af00      	add	r7, sp, #0
 800c25a:	4603      	mov	r3, r0
 800c25c:	603a      	str	r2, [r7, #0]
 800c25e:	71fb      	strb	r3, [r7, #7]
 800c260:	460b      	mov	r3, r1
 800c262:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c264:	2301      	movs	r3, #1
 800c266:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c26a:	4b25      	ldr	r3, [pc, #148]	@ (800c300 <SD_ioctl+0xac>)
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	d001      	beq.n	800c27c <SD_ioctl+0x28>
 800c278:	2303      	movs	r3, #3
 800c27a:	e03c      	b.n	800c2f6 <SD_ioctl+0xa2>

  switch (cmd)
 800c27c:	79bb      	ldrb	r3, [r7, #6]
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d834      	bhi.n	800c2ec <SD_ioctl+0x98>
 800c282:	a201      	add	r2, pc, #4	@ (adr r2, 800c288 <SD_ioctl+0x34>)
 800c284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c288:	0800c299 	.word	0x0800c299
 800c28c:	0800c2a1 	.word	0x0800c2a1
 800c290:	0800c2b9 	.word	0x0800c2b9
 800c294:	0800c2d3 	.word	0x0800c2d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c29e:	e028      	b.n	800c2f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2a0:	f107 030c 	add.w	r3, r7, #12
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff fe67 	bl	800bf78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c2aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c2b6:	e01c      	b.n	800c2f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2b8:	f107 030c 	add.w	r3, r7, #12
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff fe5b 	bl	800bf78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c2d0:	e00f      	b.n	800c2f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2d2:	f107 030c 	add.w	r3, r7, #12
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7ff fe4e 	bl	800bf78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2de:	0a5a      	lsrs	r2, r3, #9
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c2ea:	e002      	b.n	800c2f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c2ec:	2304      	movs	r3, #4
 800c2ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c2f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3730      	adds	r7, #48	@ 0x30
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	20000060 	.word	0x20000060

0800c304 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c308:	4b03      	ldr	r3, [pc, #12]	@ (800c318 <BSP_SD_WriteCpltCallback+0x14>)
 800c30a:	2201      	movs	r2, #1
 800c30c:	601a      	str	r2, [r3, #0]
}
 800c30e:	bf00      	nop
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	20035d30 	.word	0x20035d30

0800c31c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c31c:	b480      	push	{r7}
 800c31e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c320:	4b03      	ldr	r3, [pc, #12]	@ (800c330 <BSP_SD_ReadCpltCallback+0x14>)
 800c322:	2201      	movs	r2, #1
 800c324:	601a      	str	r2, [r3, #0]
}
 800c326:	bf00      	nop
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	20035d34 	.word	0x20035d34

0800c334 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	4603      	mov	r3, r0
 800c33c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	4a08      	ldr	r2, [pc, #32]	@ (800c364 <disk_status+0x30>)
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	79fa      	ldrb	r2, [r7, #7]
 800c34c:	4905      	ldr	r1, [pc, #20]	@ (800c364 <disk_status+0x30>)
 800c34e:	440a      	add	r2, r1
 800c350:	7a12      	ldrb	r2, [r2, #8]
 800c352:	4610      	mov	r0, r2
 800c354:	4798      	blx	r3
 800c356:	4603      	mov	r3, r0
 800c358:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	20035d60 	.word	0x20035d60

0800c368 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	4603      	mov	r3, r0
 800c370:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c376:	79fb      	ldrb	r3, [r7, #7]
 800c378:	4a0d      	ldr	r2, [pc, #52]	@ (800c3b0 <disk_initialize+0x48>)
 800c37a:	5cd3      	ldrb	r3, [r2, r3]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d111      	bne.n	800c3a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	4a0b      	ldr	r2, [pc, #44]	@ (800c3b0 <disk_initialize+0x48>)
 800c384:	2101      	movs	r1, #1
 800c386:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c388:	79fb      	ldrb	r3, [r7, #7]
 800c38a:	4a09      	ldr	r2, [pc, #36]	@ (800c3b0 <disk_initialize+0x48>)
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4413      	add	r3, r2
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	79fa      	ldrb	r2, [r7, #7]
 800c396:	4906      	ldr	r1, [pc, #24]	@ (800c3b0 <disk_initialize+0x48>)
 800c398:	440a      	add	r2, r1
 800c39a:	7a12      	ldrb	r2, [r2, #8]
 800c39c:	4610      	mov	r0, r2
 800c39e:	4798      	blx	r3
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	20035d60 	.word	0x20035d60

0800c3b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c3b4:	b590      	push	{r4, r7, lr}
 800c3b6:	b087      	sub	sp, #28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60b9      	str	r1, [r7, #8]
 800c3bc:	607a      	str	r2, [r7, #4]
 800c3be:	603b      	str	r3, [r7, #0]
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
 800c3c6:	4a0a      	ldr	r2, [pc, #40]	@ (800c3f0 <disk_read+0x3c>)
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	4413      	add	r3, r2
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	689c      	ldr	r4, [r3, #8]
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	4a07      	ldr	r2, [pc, #28]	@ (800c3f0 <disk_read+0x3c>)
 800c3d4:	4413      	add	r3, r2
 800c3d6:	7a18      	ldrb	r0, [r3, #8]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	68b9      	ldr	r1, [r7, #8]
 800c3de:	47a0      	blx	r4
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	371c      	adds	r7, #28
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd90      	pop	{r4, r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20035d60 	.word	0x20035d60

0800c3f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c3f4:	b590      	push	{r4, r7, lr}
 800c3f6:	b087      	sub	sp, #28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	607a      	str	r2, [r7, #4]
 800c3fe:	603b      	str	r3, [r7, #0]
 800c400:	4603      	mov	r3, r0
 800c402:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	4a0a      	ldr	r2, [pc, #40]	@ (800c430 <disk_write+0x3c>)
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	68dc      	ldr	r4, [r3, #12]
 800c410:	7bfb      	ldrb	r3, [r7, #15]
 800c412:	4a07      	ldr	r2, [pc, #28]	@ (800c430 <disk_write+0x3c>)
 800c414:	4413      	add	r3, r2
 800c416:	7a18      	ldrb	r0, [r3, #8]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	68b9      	ldr	r1, [r7, #8]
 800c41e:	47a0      	blx	r4
 800c420:	4603      	mov	r3, r0
 800c422:	75fb      	strb	r3, [r7, #23]
  return res;
 800c424:	7dfb      	ldrb	r3, [r7, #23]
}
 800c426:	4618      	mov	r0, r3
 800c428:	371c      	adds	r7, #28
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd90      	pop	{r4, r7, pc}
 800c42e:	bf00      	nop
 800c430:	20035d60 	.word	0x20035d60

0800c434 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	603a      	str	r2, [r7, #0]
 800c43e:	71fb      	strb	r3, [r7, #7]
 800c440:	460b      	mov	r3, r1
 800c442:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c444:	79fb      	ldrb	r3, [r7, #7]
 800c446:	4a09      	ldr	r2, [pc, #36]	@ (800c46c <disk_ioctl+0x38>)
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	79fa      	ldrb	r2, [r7, #7]
 800c452:	4906      	ldr	r1, [pc, #24]	@ (800c46c <disk_ioctl+0x38>)
 800c454:	440a      	add	r2, r1
 800c456:	7a10      	ldrb	r0, [r2, #8]
 800c458:	79b9      	ldrb	r1, [r7, #6]
 800c45a:	683a      	ldr	r2, [r7, #0]
 800c45c:	4798      	blx	r3
 800c45e:	4603      	mov	r3, r0
 800c460:	73fb      	strb	r3, [r7, #15]
  return res;
 800c462:	7bfb      	ldrb	r3, [r7, #15]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20035d60 	.word	0x20035d60

0800c470 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3301      	adds	r3, #1
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c480:	89fb      	ldrh	r3, [r7, #14]
 800c482:	021b      	lsls	r3, r3, #8
 800c484:	b21a      	sxth	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	b21b      	sxth	r3, r3
 800c48c:	4313      	orrs	r3, r2
 800c48e:	b21b      	sxth	r3, r3
 800c490:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c492:	89fb      	ldrh	r3, [r7, #14]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3303      	adds	r3, #3
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	021b      	lsls	r3, r3, #8
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	3202      	adds	r2, #2
 800c4b8:	7812      	ldrb	r2, [r2, #0]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	021b      	lsls	r3, r3, #8
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	3201      	adds	r2, #1
 800c4c6:	7812      	ldrb	r2, [r2, #0]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	021b      	lsls	r3, r3, #8
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	7812      	ldrb	r2, [r2, #0]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]
	return rv;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	1c5a      	adds	r2, r3, #1
 800c4f6:	607a      	str	r2, [r7, #4]
 800c4f8:	887a      	ldrh	r2, [r7, #2]
 800c4fa:	b2d2      	uxtb	r2, r2
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	887b      	ldrh	r3, [r7, #2]
 800c500:	0a1b      	lsrs	r3, r3, #8
 800c502:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	607a      	str	r2, [r7, #4]
 800c50a:	887a      	ldrh	r2, [r7, #2]
 800c50c:	b2d2      	uxtb	r2, r2
 800c50e:	701a      	strb	r2, [r3, #0]
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	1c5a      	adds	r2, r3, #1
 800c52a:	607a      	str	r2, [r7, #4]
 800c52c:	683a      	ldr	r2, [r7, #0]
 800c52e:	b2d2      	uxtb	r2, r2
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	0a1b      	lsrs	r3, r3, #8
 800c536:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	607a      	str	r2, [r7, #4]
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	b2d2      	uxtb	r2, r2
 800c542:	701a      	strb	r2, [r3, #0]
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	0a1b      	lsrs	r3, r3, #8
 800c548:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	1c5a      	adds	r2, r3, #1
 800c54e:	607a      	str	r2, [r7, #4]
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	b2d2      	uxtb	r2, r2
 800c554:	701a      	strb	r2, [r3, #0]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	0a1b      	lsrs	r3, r3, #8
 800c55a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	607a      	str	r2, [r7, #4]
 800c562:	683a      	ldr	r2, [r7, #0]
 800c564:	b2d2      	uxtb	r2, r2
 800c566:	701a      	strb	r2, [r3, #0]
}
 800c568:	bf00      	nop
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c574:	b480      	push	{r7}
 800c576:	b087      	sub	sp, #28
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00d      	beq.n	800c5aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	1c53      	adds	r3, r2, #1
 800c592:	613b      	str	r3, [r7, #16]
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	1c59      	adds	r1, r3, #1
 800c598:	6179      	str	r1, [r7, #20]
 800c59a:	7812      	ldrb	r2, [r2, #0]
 800c59c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	607b      	str	r3, [r7, #4]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1f1      	bne.n	800c58e <mem_cpy+0x1a>
	}
}
 800c5aa:	bf00      	nop
 800c5ac:	371c      	adds	r7, #28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c5b6:	b480      	push	{r7}
 800c5b8:	b087      	sub	sp, #28
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	60f8      	str	r0, [r7, #12]
 800c5be:	60b9      	str	r1, [r7, #8]
 800c5c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	1c5a      	adds	r2, r3, #1
 800c5ca:	617a      	str	r2, [r7, #20]
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	b2d2      	uxtb	r2, r2
 800c5d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	607b      	str	r3, [r7, #4]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1f3      	bne.n	800c5c6 <mem_set+0x10>
}
 800c5de:	bf00      	nop
 800c5e0:	bf00      	nop
 800c5e2:	371c      	adds	r7, #28
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c5ec:	b480      	push	{r7}
 800c5ee:	b089      	sub	sp, #36	@ 0x24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	1c5a      	adds	r2, r3, #1
 800c608:	61fa      	str	r2, [r7, #28]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	4619      	mov	r1, r3
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	61ba      	str	r2, [r7, #24]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	1acb      	subs	r3, r1, r3
 800c618:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	607b      	str	r3, [r7, #4]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d002      	beq.n	800c62c <mem_cmp+0x40>
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d0eb      	beq.n	800c604 <mem_cmp+0x18>

	return r;
 800c62c:	697b      	ldr	r3, [r7, #20]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3724      	adds	r7, #36	@ 0x24
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c644:	e002      	b.n	800c64c <chk_chr+0x12>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3301      	adds	r3, #1
 800c64a:	607b      	str	r3, [r7, #4]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d005      	beq.n	800c660 <chk_chr+0x26>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d1f2      	bne.n	800c646 <chk_chr+0xc>
	return *str;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	781b      	ldrb	r3, [r3, #0]
}
 800c664:	4618      	mov	r0, r3
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c67a:	2300      	movs	r3, #0
 800c67c:	60bb      	str	r3, [r7, #8]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	60fb      	str	r3, [r7, #12]
 800c682:	e029      	b.n	800c6d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c684:	4a27      	ldr	r2, [pc, #156]	@ (800c724 <chk_lock+0xb4>)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	011b      	lsls	r3, r3, #4
 800c68a:	4413      	add	r3, r2
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d01d      	beq.n	800c6ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c692:	4a24      	ldr	r2, [pc, #144]	@ (800c724 <chk_lock+0xb4>)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	011b      	lsls	r3, r3, #4
 800c698:	4413      	add	r3, r2
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d116      	bne.n	800c6d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c6a4:	4a1f      	ldr	r2, [pc, #124]	@ (800c724 <chk_lock+0xb4>)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	011b      	lsls	r3, r3, #4
 800c6aa:	4413      	add	r3, r2
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d10c      	bne.n	800c6d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c6b8:	4a1a      	ldr	r2, [pc, #104]	@ (800c724 <chk_lock+0xb4>)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	011b      	lsls	r3, r3, #4
 800c6be:	4413      	add	r3, r2
 800c6c0:	3308      	adds	r3, #8
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d102      	bne.n	800c6d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c6cc:	e007      	b.n	800c6de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d9d2      	bls.n	800c684 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d109      	bne.n	800c6f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d102      	bne.n	800c6f0 <chk_lock+0x80>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d101      	bne.n	800c6f4 <chk_lock+0x84>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	e010      	b.n	800c716 <chk_lock+0xa6>
 800c6f4:	2312      	movs	r3, #18
 800c6f6:	e00e      	b.n	800c716 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d108      	bne.n	800c710 <chk_lock+0xa0>
 800c6fe:	4a09      	ldr	r2, [pc, #36]	@ (800c724 <chk_lock+0xb4>)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	011b      	lsls	r3, r3, #4
 800c704:	4413      	add	r3, r2
 800c706:	330c      	adds	r3, #12
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c70e:	d101      	bne.n	800c714 <chk_lock+0xa4>
 800c710:	2310      	movs	r3, #16
 800c712:	e000      	b.n	800c716 <chk_lock+0xa6>
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	20035d40 	.word	0x20035d40

0800c728 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c72e:	2300      	movs	r3, #0
 800c730:	607b      	str	r3, [r7, #4]
 800c732:	e002      	b.n	800c73a <enq_lock+0x12>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3301      	adds	r3, #1
 800c738:	607b      	str	r3, [r7, #4]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d806      	bhi.n	800c74e <enq_lock+0x26>
 800c740:	4a09      	ldr	r2, [pc, #36]	@ (800c768 <enq_lock+0x40>)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	011b      	lsls	r3, r3, #4
 800c746:	4413      	add	r3, r2
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1f2      	bne.n	800c734 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b02      	cmp	r3, #2
 800c752:	bf14      	ite	ne
 800c754:	2301      	movne	r3, #1
 800c756:	2300      	moveq	r3, #0
 800c758:	b2db      	uxtb	r3, r3
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	370c      	adds	r7, #12
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	20035d40 	.word	0x20035d40

0800c76c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c776:	2300      	movs	r3, #0
 800c778:	60fb      	str	r3, [r7, #12]
 800c77a:	e01f      	b.n	800c7bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c77c:	4a41      	ldr	r2, [pc, #260]	@ (800c884 <inc_lock+0x118>)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	011b      	lsls	r3, r3, #4
 800c782:	4413      	add	r3, r2
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d113      	bne.n	800c7b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c78e:	4a3d      	ldr	r2, [pc, #244]	@ (800c884 <inc_lock+0x118>)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	011b      	lsls	r3, r3, #4
 800c794:	4413      	add	r3, r2
 800c796:	3304      	adds	r3, #4
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d109      	bne.n	800c7b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c7a2:	4a38      	ldr	r2, [pc, #224]	@ (800c884 <inc_lock+0x118>)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	4413      	add	r3, r2
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d006      	beq.n	800c7c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d9dc      	bls.n	800c77c <inc_lock+0x10>
 800c7c2:	e000      	b.n	800c7c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c7c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d132      	bne.n	800c832 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	e002      	b.n	800c7d8 <inc_lock+0x6c>
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d806      	bhi.n	800c7ec <inc_lock+0x80>
 800c7de:	4a29      	ldr	r2, [pc, #164]	@ (800c884 <inc_lock+0x118>)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	011b      	lsls	r3, r3, #4
 800c7e4:	4413      	add	r3, r2
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1f2      	bne.n	800c7d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	d101      	bne.n	800c7f6 <inc_lock+0x8a>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	e040      	b.n	800c878 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	4922      	ldr	r1, [pc, #136]	@ (800c884 <inc_lock+0x118>)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	011b      	lsls	r3, r3, #4
 800c800:	440b      	add	r3, r1
 800c802:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	689a      	ldr	r2, [r3, #8]
 800c808:	491e      	ldr	r1, [pc, #120]	@ (800c884 <inc_lock+0x118>)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	011b      	lsls	r3, r3, #4
 800c80e:	440b      	add	r3, r1
 800c810:	3304      	adds	r3, #4
 800c812:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	695a      	ldr	r2, [r3, #20]
 800c818:	491a      	ldr	r1, [pc, #104]	@ (800c884 <inc_lock+0x118>)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	011b      	lsls	r3, r3, #4
 800c81e:	440b      	add	r3, r1
 800c820:	3308      	adds	r3, #8
 800c822:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c824:	4a17      	ldr	r2, [pc, #92]	@ (800c884 <inc_lock+0x118>)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	011b      	lsls	r3, r3, #4
 800c82a:	4413      	add	r3, r2
 800c82c:	330c      	adds	r3, #12
 800c82e:	2200      	movs	r2, #0
 800c830:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d009      	beq.n	800c84c <inc_lock+0xe0>
 800c838:	4a12      	ldr	r2, [pc, #72]	@ (800c884 <inc_lock+0x118>)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	011b      	lsls	r3, r3, #4
 800c83e:	4413      	add	r3, r2
 800c840:	330c      	adds	r3, #12
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <inc_lock+0xe0>
 800c848:	2300      	movs	r3, #0
 800c84a:	e015      	b.n	800c878 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d108      	bne.n	800c864 <inc_lock+0xf8>
 800c852:	4a0c      	ldr	r2, [pc, #48]	@ (800c884 <inc_lock+0x118>)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	011b      	lsls	r3, r3, #4
 800c858:	4413      	add	r3, r2
 800c85a:	330c      	adds	r3, #12
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	3301      	adds	r3, #1
 800c860:	b29a      	uxth	r2, r3
 800c862:	e001      	b.n	800c868 <inc_lock+0xfc>
 800c864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c868:	4906      	ldr	r1, [pc, #24]	@ (800c884 <inc_lock+0x118>)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	011b      	lsls	r3, r3, #4
 800c86e:	440b      	add	r3, r1
 800c870:	330c      	adds	r3, #12
 800c872:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	3301      	adds	r3, #1
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	20035d40 	.word	0x20035d40

0800c888 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	3b01      	subs	r3, #1
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d825      	bhi.n	800c8e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800c89c:	4a17      	ldr	r2, [pc, #92]	@ (800c8fc <dec_lock+0x74>)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	011b      	lsls	r3, r3, #4
 800c8a2:	4413      	add	r3, r2
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	881b      	ldrh	r3, [r3, #0]
 800c8a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c8aa:	89fb      	ldrh	r3, [r7, #14]
 800c8ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8b0:	d101      	bne.n	800c8b6 <dec_lock+0x2e>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c8b6:	89fb      	ldrh	r3, [r7, #14]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <dec_lock+0x3a>
 800c8bc:	89fb      	ldrh	r3, [r7, #14]
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c8c2:	4a0e      	ldr	r2, [pc, #56]	@ (800c8fc <dec_lock+0x74>)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	011b      	lsls	r3, r3, #4
 800c8c8:	4413      	add	r3, r2
 800c8ca:	330c      	adds	r3, #12
 800c8cc:	89fa      	ldrh	r2, [r7, #14]
 800c8ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c8d0:	89fb      	ldrh	r3, [r7, #14]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d105      	bne.n	800c8e2 <dec_lock+0x5a>
 800c8d6:	4a09      	ldr	r2, [pc, #36]	@ (800c8fc <dec_lock+0x74>)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	011b      	lsls	r3, r3, #4
 800c8dc:	4413      	add	r3, r2
 800c8de:	2200      	movs	r2, #0
 800c8e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	737b      	strb	r3, [r7, #13]
 800c8e6:	e001      	b.n	800c8ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c8e8:	2302      	movs	r3, #2
 800c8ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c8ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3714      	adds	r7, #20
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	20035d40 	.word	0x20035d40

0800c900 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c908:	2300      	movs	r3, #0
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	e010      	b.n	800c930 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c90e:	4a0d      	ldr	r2, [pc, #52]	@ (800c944 <clear_lock+0x44>)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	011b      	lsls	r3, r3, #4
 800c914:	4413      	add	r3, r2
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d105      	bne.n	800c92a <clear_lock+0x2a>
 800c91e:	4a09      	ldr	r2, [pc, #36]	@ (800c944 <clear_lock+0x44>)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	011b      	lsls	r3, r3, #4
 800c924:	4413      	add	r3, r2
 800c926:	2200      	movs	r2, #0
 800c928:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3301      	adds	r3, #1
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d9eb      	bls.n	800c90e <clear_lock+0xe>
	}
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	3714      	adds	r7, #20
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	20035d40 	.word	0x20035d40

0800c948 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	78db      	ldrb	r3, [r3, #3]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d034      	beq.n	800c9c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c960:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	7858      	ldrb	r0, [r3, #1]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c96c:	2301      	movs	r3, #1
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	f7ff fd40 	bl	800c3f4 <disk_write>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	73fb      	strb	r3, [r7, #15]
 800c97e:	e022      	b.n	800c9c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6a1b      	ldr	r3, [r3, #32]
 800c98a:	697a      	ldr	r2, [r7, #20]
 800c98c:	1ad2      	subs	r2, r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	429a      	cmp	r2, r3
 800c994:	d217      	bcs.n	800c9c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	789b      	ldrb	r3, [r3, #2]
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	e010      	b.n	800c9c0 <sync_window+0x78>
					wsect += fs->fsize;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7858      	ldrb	r0, [r3, #1]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	697a      	ldr	r2, [r7, #20]
 800c9b6:	f7ff fd1d 	bl	800c3f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	613b      	str	r3, [r7, #16]
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d8eb      	bhi.n	800c99e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d01b      	beq.n	800ca20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f7ff ffad 	bl	800c948 <sync_window>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d113      	bne.n	800ca20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7858      	ldrb	r0, [r3, #1]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca02:	2301      	movs	r3, #1
 800ca04:	683a      	ldr	r2, [r7, #0]
 800ca06:	f7ff fcd5 	bl	800c3b4 <disk_read>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d004      	beq.n	800ca1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ca10:	f04f 33ff 	mov.w	r3, #4294967295
 800ca14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	683a      	ldr	r2, [r7, #0]
 800ca1e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7ff ff87 	bl	800c948 <sync_window>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d158      	bne.n	800caf6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b03      	cmp	r3, #3
 800ca4a:	d148      	bne.n	800cade <sync_fs+0xb2>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	791b      	ldrb	r3, [r3, #4]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d144      	bne.n	800cade <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3330      	adds	r3, #48	@ 0x30
 800ca58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7ff fda9 	bl	800c5b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3330      	adds	r3, #48	@ 0x30
 800ca68:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ca6c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7ff fd38 	bl	800c4e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	3330      	adds	r3, #48	@ 0x30
 800ca7a:	4921      	ldr	r1, [pc, #132]	@ (800cb00 <sync_fs+0xd4>)
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7ff fd4d 	bl	800c51c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3330      	adds	r3, #48	@ 0x30
 800ca86:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ca8a:	491e      	ldr	r1, [pc, #120]	@ (800cb04 <sync_fs+0xd8>)
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7ff fd45 	bl	800c51c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3330      	adds	r3, #48	@ 0x30
 800ca96:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	4619      	mov	r1, r3
 800caa0:	4610      	mov	r0, r2
 800caa2:	f7ff fd3b 	bl	800c51c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3330      	adds	r3, #48	@ 0x30
 800caaa:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	4619      	mov	r1, r3
 800cab4:	4610      	mov	r0, r2
 800cab6:	f7ff fd31 	bl	800c51c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	69db      	ldr	r3, [r3, #28]
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	7858      	ldrb	r0, [r3, #1]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cad2:	2301      	movs	r3, #1
 800cad4:	f7ff fc8e 	bl	800c3f4 <disk_write>
			fs->fsi_flag = 0;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	2200      	movs	r2, #0
 800cae4:	2100      	movs	r1, #0
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff fca4 	bl	800c434 <disk_ioctl>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <sync_fs+0xca>
 800caf2:	2301      	movs	r3, #1
 800caf4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800caf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	41615252 	.word	0x41615252
 800cb04:	61417272 	.word	0x61417272

0800cb08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	3b02      	subs	r3, #2
 800cb16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	695b      	ldr	r3, [r3, #20]
 800cb1c:	3b02      	subs	r3, #2
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d301      	bcc.n	800cb28 <clust2sect+0x20>
 800cb24:	2300      	movs	r3, #0
 800cb26:	e008      	b.n	800cb3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	895b      	ldrh	r3, [r3, #10]
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	fb03 f202 	mul.w	r2, r3, r2
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb38:	4413      	add	r3, r2
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	370c      	adds	r7, #12
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr

0800cb46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b086      	sub	sp, #24
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
 800cb4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d904      	bls.n	800cb66 <get_fat+0x20>
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	695b      	ldr	r3, [r3, #20]
 800cb60:	683a      	ldr	r2, [r7, #0]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d302      	bcc.n	800cb6c <get_fat+0x26>
		val = 1;	/* Internal error */
 800cb66:	2301      	movs	r3, #1
 800cb68:	617b      	str	r3, [r7, #20]
 800cb6a:	e08e      	b.n	800cc8a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cb6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d061      	beq.n	800cc3e <get_fat+0xf8>
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	dc7b      	bgt.n	800cc76 <get_fat+0x130>
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d002      	beq.n	800cb88 <get_fat+0x42>
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	d041      	beq.n	800cc0a <get_fat+0xc4>
 800cb86:	e076      	b.n	800cc76 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	085b      	lsrs	r3, r3, #1
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	4413      	add	r3, r2
 800cb94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6a1a      	ldr	r2, [r3, #32]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	0a5b      	lsrs	r3, r3, #9
 800cb9e:	4413      	add	r3, r2
 800cba0:	4619      	mov	r1, r3
 800cba2:	6938      	ldr	r0, [r7, #16]
 800cba4:	f7ff ff14 	bl	800c9d0 <move_window>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d166      	bne.n	800cc7c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	1c5a      	adds	r2, r3, #1
 800cbb2:	60fa      	str	r2, [r7, #12]
 800cbb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	4413      	add	r3, r2
 800cbbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cbc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	6a1a      	ldr	r2, [r3, #32]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	0a5b      	lsrs	r3, r3, #9
 800cbca:	4413      	add	r3, r2
 800cbcc:	4619      	mov	r1, r3
 800cbce:	6938      	ldr	r0, [r7, #16]
 800cbd0:	f7ff fefe 	bl	800c9d0 <move_window>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d152      	bne.n	800cc80 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cbe8:	021b      	lsls	r3, r3, #8
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	f003 0301 	and.w	r3, r3, #1
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d002      	beq.n	800cc00 <get_fat+0xba>
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	091b      	lsrs	r3, r3, #4
 800cbfe:	e002      	b.n	800cc06 <get_fat+0xc0>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc06:	617b      	str	r3, [r7, #20]
			break;
 800cc08:	e03f      	b.n	800cc8a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	6a1a      	ldr	r2, [r3, #32]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	0a1b      	lsrs	r3, r3, #8
 800cc12:	4413      	add	r3, r2
 800cc14:	4619      	mov	r1, r3
 800cc16:	6938      	ldr	r0, [r7, #16]
 800cc18:	f7ff feda 	bl	800c9d0 <move_window>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d130      	bne.n	800cc84 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cc30:	4413      	add	r3, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff fc1c 	bl	800c470 <ld_word>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	617b      	str	r3, [r7, #20]
			break;
 800cc3c:	e025      	b.n	800cc8a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	6a1a      	ldr	r2, [r3, #32]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	09db      	lsrs	r3, r3, #7
 800cc46:	4413      	add	r3, r2
 800cc48:	4619      	mov	r1, r3
 800cc4a:	6938      	ldr	r0, [r7, #16]
 800cc4c:	f7ff fec0 	bl	800c9d0 <move_window>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d118      	bne.n	800cc88 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cc64:	4413      	add	r3, r2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7ff fc1a 	bl	800c4a0 <ld_dword>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cc72:	617b      	str	r3, [r7, #20]
			break;
 800cc74:	e009      	b.n	800cc8a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cc76:	2301      	movs	r3, #1
 800cc78:	617b      	str	r3, [r7, #20]
 800cc7a:	e006      	b.n	800cc8a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc7c:	bf00      	nop
 800cc7e:	e004      	b.n	800cc8a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc80:	bf00      	nop
 800cc82:	e002      	b.n	800cc8a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cc84:	bf00      	nop
 800cc86:	e000      	b.n	800cc8a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cc88:	bf00      	nop
		}
	}

	return val;
 800cc8a:	697b      	ldr	r3, [r7, #20]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cc94:	b590      	push	{r4, r7, lr}
 800cc96:	b089      	sub	sp, #36	@ 0x24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cca0:	2302      	movs	r3, #2
 800cca2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	f240 80d9 	bls.w	800ce5e <put_fat+0x1ca>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	695b      	ldr	r3, [r3, #20]
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	f080 80d3 	bcs.w	800ce5e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	f000 8096 	beq.w	800cdee <put_fat+0x15a>
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	f300 80cb 	bgt.w	800ce5e <put_fat+0x1ca>
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d002      	beq.n	800ccd2 <put_fat+0x3e>
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d06e      	beq.n	800cdae <put_fat+0x11a>
 800ccd0:	e0c5      	b.n	800ce5e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	61bb      	str	r3, [r7, #24]
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	085b      	lsrs	r3, r3, #1
 800ccda:	69ba      	ldr	r2, [r7, #24]
 800ccdc:	4413      	add	r3, r2
 800ccde:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6a1a      	ldr	r2, [r3, #32]
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	0a5b      	lsrs	r3, r3, #9
 800cce8:	4413      	add	r3, r2
 800ccea:	4619      	mov	r1, r3
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f7ff fe6f 	bl	800c9d0 <move_window>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccf6:	7ffb      	ldrb	r3, [r7, #31]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f040 80a9 	bne.w	800ce50 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	1c59      	adds	r1, r3, #1
 800cd08:	61b9      	str	r1, [r7, #24]
 800cd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd0e:	4413      	add	r3, r2
 800cd10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f003 0301 	and.w	r3, r3, #1
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00d      	beq.n	800cd38 <put_fat+0xa4>
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	b25b      	sxtb	r3, r3
 800cd22:	f003 030f 	and.w	r3, r3, #15
 800cd26:	b25a      	sxtb	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	011b      	lsls	r3, r3, #4
 800cd2e:	b25b      	sxtb	r3, r3
 800cd30:	4313      	orrs	r3, r2
 800cd32:	b25b      	sxtb	r3, r3
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	e001      	b.n	800cd3c <put_fat+0xa8>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	697a      	ldr	r2, [r7, #20]
 800cd3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2201      	movs	r2, #1
 800cd44:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6a1a      	ldr	r2, [r3, #32]
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	0a5b      	lsrs	r3, r3, #9
 800cd4e:	4413      	add	r3, r2
 800cd50:	4619      	mov	r1, r3
 800cd52:	68f8      	ldr	r0, [r7, #12]
 800cd54:	f7ff fe3c 	bl	800c9d0 <move_window>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd5c:	7ffb      	ldrb	r3, [r7, #31]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d178      	bne.n	800ce54 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd6e:	4413      	add	r3, r2
 800cd70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d003      	beq.n	800cd84 <put_fat+0xf0>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	091b      	lsrs	r3, r3, #4
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	e00e      	b.n	800cda2 <put_fat+0x10e>
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	b25b      	sxtb	r3, r3
 800cd8a:	f023 030f 	bic.w	r3, r3, #15
 800cd8e:	b25a      	sxtb	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	0a1b      	lsrs	r3, r3, #8
 800cd94:	b25b      	sxtb	r3, r3
 800cd96:	f003 030f 	and.w	r3, r3, #15
 800cd9a:	b25b      	sxtb	r3, r3
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	b25b      	sxtb	r3, r3
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	70da      	strb	r2, [r3, #3]
			break;
 800cdac:	e057      	b.n	800ce5e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6a1a      	ldr	r2, [r3, #32]
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	0a1b      	lsrs	r3, r3, #8
 800cdb6:	4413      	add	r3, r2
 800cdb8:	4619      	mov	r1, r3
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	f7ff fe08 	bl	800c9d0 <move_window>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cdc4:	7ffb      	ldrb	r3, [r7, #31]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d146      	bne.n	800ce58 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cdd8:	4413      	add	r3, r2
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	b292      	uxth	r2, r2
 800cdde:	4611      	mov	r1, r2
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff fb80 	bl	800c4e6 <st_word>
			fs->wflag = 1;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2201      	movs	r2, #1
 800cdea:	70da      	strb	r2, [r3, #3]
			break;
 800cdec:	e037      	b.n	800ce5e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6a1a      	ldr	r2, [r3, #32]
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	09db      	lsrs	r3, r3, #7
 800cdf6:	4413      	add	r3, r2
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f7ff fde8 	bl	800c9d0 <move_window>
 800ce00:	4603      	mov	r3, r0
 800ce02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce04:	7ffb      	ldrb	r3, [r7, #31]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d128      	bne.n	800ce5c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ce1e:	4413      	add	r3, r2
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fb3d 	bl	800c4a0 <ld_dword>
 800ce26:	4603      	mov	r3, r0
 800ce28:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ce2c:	4323      	orrs	r3, r4
 800ce2e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ce3e:	4413      	add	r3, r2
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7ff fb6a 	bl	800c51c <st_dword>
			fs->wflag = 1;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	70da      	strb	r2, [r3, #3]
			break;
 800ce4e:	e006      	b.n	800ce5e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce50:	bf00      	nop
 800ce52:	e004      	b.n	800ce5e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce54:	bf00      	nop
 800ce56:	e002      	b.n	800ce5e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce58:	bf00      	nop
 800ce5a:	e000      	b.n	800ce5e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ce5c:	bf00      	nop
		}
	}
	return res;
 800ce5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3724      	adds	r7, #36	@ 0x24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd90      	pop	{r4, r7, pc}

0800ce68 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b088      	sub	sp, #32
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ce74:	2300      	movs	r3, #0
 800ce76:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d904      	bls.n	800ce8e <remove_chain+0x26>
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	695b      	ldr	r3, [r3, #20]
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d301      	bcc.n	800ce92 <remove_chain+0x2a>
 800ce8e:	2302      	movs	r3, #2
 800ce90:	e04b      	b.n	800cf2a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00c      	beq.n	800ceb2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ce98:	f04f 32ff 	mov.w	r2, #4294967295
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	69b8      	ldr	r0, [r7, #24]
 800cea0:	f7ff fef8 	bl	800cc94 <put_fat>
 800cea4:	4603      	mov	r3, r0
 800cea6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cea8:	7ffb      	ldrb	r3, [r7, #31]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <remove_chain+0x4a>
 800ceae:	7ffb      	ldrb	r3, [r7, #31]
 800ceb0:	e03b      	b.n	800cf2a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ceb2:	68b9      	ldr	r1, [r7, #8]
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7ff fe46 	bl	800cb46 <get_fat>
 800ceba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d031      	beq.n	800cf26 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d101      	bne.n	800cecc <remove_chain+0x64>
 800cec8:	2302      	movs	r3, #2
 800ceca:	e02e      	b.n	800cf2a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced2:	d101      	bne.n	800ced8 <remove_chain+0x70>
 800ced4:	2301      	movs	r3, #1
 800ced6:	e028      	b.n	800cf2a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ced8:	2200      	movs	r2, #0
 800ceda:	68b9      	ldr	r1, [r7, #8]
 800cedc:	69b8      	ldr	r0, [r7, #24]
 800cede:	f7ff fed9 	bl	800cc94 <put_fat>
 800cee2:	4603      	mov	r3, r0
 800cee4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cee6:	7ffb      	ldrb	r3, [r7, #31]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d001      	beq.n	800cef0 <remove_chain+0x88>
 800ceec:	7ffb      	ldrb	r3, [r7, #31]
 800ceee:	e01c      	b.n	800cf2a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	691a      	ldr	r2, [r3, #16]
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	695b      	ldr	r3, [r3, #20]
 800cef8:	3b02      	subs	r3, #2
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d20b      	bcs.n	800cf16 <remove_chain+0xae>
			fs->free_clst++;
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	1c5a      	adds	r2, r3, #1
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	791b      	ldrb	r3, [r3, #4]
 800cf0c:	f043 0301 	orr.w	r3, r3, #1
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d3c6      	bcc.n	800ceb2 <remove_chain+0x4a>
 800cf24:	e000      	b.n	800cf28 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cf26:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3720      	adds	r7, #32
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b088      	sub	sp, #32
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
 800cf3a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10d      	bne.n	800cf64 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d004      	beq.n	800cf5e <create_chain+0x2c>
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	69ba      	ldr	r2, [r7, #24]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d31b      	bcc.n	800cf96 <create_chain+0x64>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	61bb      	str	r3, [r7, #24]
 800cf62:	e018      	b.n	800cf96 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7ff fded 	bl	800cb46 <get_fat>
 800cf6c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d801      	bhi.n	800cf78 <create_chain+0x46>
 800cf74:	2301      	movs	r3, #1
 800cf76:	e070      	b.n	800d05a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d101      	bne.n	800cf84 <create_chain+0x52>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	e06a      	b.n	800d05a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	695b      	ldr	r3, [r3, #20]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d201      	bcs.n	800cf92 <create_chain+0x60>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	e063      	b.n	800d05a <create_chain+0x128>
		scl = clst;
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	695b      	ldr	r3, [r3, #20]
 800cfa4:	69fa      	ldr	r2, [r7, #28]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d307      	bcc.n	800cfba <create_chain+0x88>
				ncl = 2;
 800cfaa:	2302      	movs	r3, #2
 800cfac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cfae:	69fa      	ldr	r2, [r7, #28]
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d901      	bls.n	800cfba <create_chain+0x88>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e04f      	b.n	800d05a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cfba:	69f9      	ldr	r1, [r7, #28]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7ff fdc2 	bl	800cb46 <get_fat>
 800cfc2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00e      	beq.n	800cfe8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d003      	beq.n	800cfd8 <create_chain+0xa6>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd6:	d101      	bne.n	800cfdc <create_chain+0xaa>
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	e03e      	b.n	800d05a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cfdc:	69fa      	ldr	r2, [r7, #28]
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d1da      	bne.n	800cf9a <create_chain+0x68>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	e038      	b.n	800d05a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cfe8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cfea:	f04f 32ff 	mov.w	r2, #4294967295
 800cfee:	69f9      	ldr	r1, [r7, #28]
 800cff0:	6938      	ldr	r0, [r7, #16]
 800cff2:	f7ff fe4f 	bl	800cc94 <put_fat>
 800cff6:	4603      	mov	r3, r0
 800cff8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d109      	bne.n	800d014 <create_chain+0xe2>
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d006      	beq.n	800d014 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d006:	69fa      	ldr	r2, [r7, #28]
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6938      	ldr	r0, [r7, #16]
 800d00c:	f7ff fe42 	bl	800cc94 <put_fat>
 800d010:	4603      	mov	r3, r0
 800d012:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d116      	bne.n	800d048 <create_chain+0x116>
		fs->last_clst = ncl;
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	69fa      	ldr	r2, [r7, #28]
 800d01e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	691a      	ldr	r2, [r3, #16]
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	3b02      	subs	r3, #2
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d804      	bhi.n	800d038 <create_chain+0x106>
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	1e5a      	subs	r2, r3, #1
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	791b      	ldrb	r3, [r3, #4]
 800d03c:	f043 0301 	orr.w	r3, r3, #1
 800d040:	b2da      	uxtb	r2, r3
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	711a      	strb	r2, [r3, #4]
 800d046:	e007      	b.n	800d058 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d102      	bne.n	800d054 <create_chain+0x122>
 800d04e:	f04f 33ff 	mov.w	r3, #4294967295
 800d052:	e000      	b.n	800d056 <create_chain+0x124>
 800d054:	2301      	movs	r3, #1
 800d056:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d058:	69fb      	ldr	r3, [r7, #28]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3720      	adds	r7, #32
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d062:	b480      	push	{r7}
 800d064:	b087      	sub	sp, #28
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d076:	3304      	adds	r3, #4
 800d078:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	0a5b      	lsrs	r3, r3, #9
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	8952      	ldrh	r2, [r2, #10]
 800d082:	fbb3 f3f2 	udiv	r3, r3, r2
 800d086:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	1d1a      	adds	r2, r3, #4
 800d08c:	613a      	str	r2, [r7, #16]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d101      	bne.n	800d09c <clmt_clust+0x3a>
 800d098:	2300      	movs	r3, #0
 800d09a:	e010      	b.n	800d0be <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d09c:	697a      	ldr	r2, [r7, #20]
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d307      	bcc.n	800d0b4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d0a4:	697a      	ldr	r2, [r7, #20]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	617b      	str	r3, [r7, #20]
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d0b2:	e7e9      	b.n	800d088 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d0b4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	4413      	add	r3, r2
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	371c      	adds	r7, #28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b086      	sub	sp, #24
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d0e0:	d204      	bcs.n	800d0ec <dir_sdi+0x22>
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	f003 031f 	and.w	r3, r3, #31
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	e063      	b.n	800d1b8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d106      	bne.n	800d110 <dir_sdi+0x46>
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b02      	cmp	r3, #2
 800d108:	d902      	bls.n	800d110 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d10e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d10c      	bne.n	800d130 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	095b      	lsrs	r3, r3, #5
 800d11a:	693a      	ldr	r2, [r7, #16]
 800d11c:	8912      	ldrh	r2, [r2, #8]
 800d11e:	4293      	cmp	r3, r2
 800d120:	d301      	bcc.n	800d126 <dir_sdi+0x5c>
 800d122:	2302      	movs	r3, #2
 800d124:	e048      	b.n	800d1b8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	61da      	str	r2, [r3, #28]
 800d12e:	e029      	b.n	800d184 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	895b      	ldrh	r3, [r3, #10]
 800d134:	025b      	lsls	r3, r3, #9
 800d136:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d138:	e019      	b.n	800d16e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6979      	ldr	r1, [r7, #20]
 800d13e:	4618      	mov	r0, r3
 800d140:	f7ff fd01 	bl	800cb46 <get_fat>
 800d144:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14c:	d101      	bne.n	800d152 <dir_sdi+0x88>
 800d14e:	2301      	movs	r3, #1
 800d150:	e032      	b.n	800d1b8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d904      	bls.n	800d162 <dir_sdi+0x98>
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	695b      	ldr	r3, [r3, #20]
 800d15c:	697a      	ldr	r2, [r7, #20]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d301      	bcc.n	800d166 <dir_sdi+0x9c>
 800d162:	2302      	movs	r3, #2
 800d164:	e028      	b.n	800d1b8 <dir_sdi+0xee>
			ofs -= csz;
 800d166:	683a      	ldr	r2, [r7, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	429a      	cmp	r2, r3
 800d174:	d2e1      	bcs.n	800d13a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d176:	6979      	ldr	r1, [r7, #20]
 800d178:	6938      	ldr	r0, [r7, #16]
 800d17a:	f7ff fcc5 	bl	800cb08 <clust2sect>
 800d17e:	4602      	mov	r2, r0
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	69db      	ldr	r3, [r3, #28]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d101      	bne.n	800d196 <dir_sdi+0xcc>
 800d192:	2302      	movs	r3, #2
 800d194:	e010      	b.n	800d1b8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	69da      	ldr	r2, [r3, #28]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	0a5b      	lsrs	r3, r3, #9
 800d19e:	441a      	add	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1b0:	441a      	add	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3718      	adds	r7, #24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	3320      	adds	r3, #32
 800d1d6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	69db      	ldr	r3, [r3, #28]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d003      	beq.n	800d1e8 <dir_next+0x28>
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d1e6:	d301      	bcc.n	800d1ec <dir_next+0x2c>
 800d1e8:	2304      	movs	r3, #4
 800d1ea:	e0aa      	b.n	800d342 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f040 8098 	bne.w	800d328 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	69db      	ldr	r3, [r3, #28]
 800d1fc:	1c5a      	adds	r2, r3, #1
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10b      	bne.n	800d222 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	095b      	lsrs	r3, r3, #5
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	8912      	ldrh	r2, [r2, #8]
 800d212:	4293      	cmp	r3, r2
 800d214:	f0c0 8088 	bcc.w	800d328 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	61da      	str	r2, [r3, #28]
 800d21e:	2304      	movs	r3, #4
 800d220:	e08f      	b.n	800d342 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	0a5b      	lsrs	r3, r3, #9
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	8952      	ldrh	r2, [r2, #10]
 800d22a:	3a01      	subs	r2, #1
 800d22c:	4013      	ands	r3, r2
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d17a      	bne.n	800d328 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	699b      	ldr	r3, [r3, #24]
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	f7ff fc83 	bl	800cb46 <get_fat>
 800d240:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d801      	bhi.n	800d24c <dir_next+0x8c>
 800d248:	2302      	movs	r3, #2
 800d24a:	e07a      	b.n	800d342 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d252:	d101      	bne.n	800d258 <dir_next+0x98>
 800d254:	2301      	movs	r3, #1
 800d256:	e074      	b.n	800d342 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	695b      	ldr	r3, [r3, #20]
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d358      	bcc.n	800d314 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d104      	bne.n	800d272 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	61da      	str	r2, [r3, #28]
 800d26e:	2304      	movs	r3, #4
 800d270:	e067      	b.n	800d342 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	699b      	ldr	r3, [r3, #24]
 800d278:	4619      	mov	r1, r3
 800d27a:	4610      	mov	r0, r2
 800d27c:	f7ff fe59 	bl	800cf32 <create_chain>
 800d280:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d101      	bne.n	800d28c <dir_next+0xcc>
 800d288:	2307      	movs	r3, #7
 800d28a:	e05a      	b.n	800d342 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d101      	bne.n	800d296 <dir_next+0xd6>
 800d292:	2302      	movs	r3, #2
 800d294:	e055      	b.n	800d342 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29c:	d101      	bne.n	800d2a2 <dir_next+0xe2>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e04f      	b.n	800d342 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f7ff fb50 	bl	800c948 <sync_window>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d001      	beq.n	800d2b2 <dir_next+0xf2>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e047      	b.n	800d342 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3330      	adds	r3, #48	@ 0x30
 800d2b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff f97a 	bl	800c5b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	613b      	str	r3, [r7, #16]
 800d2c6:	6979      	ldr	r1, [r7, #20]
 800d2c8:	68f8      	ldr	r0, [r7, #12]
 800d2ca:	f7ff fc1d 	bl	800cb08 <clust2sect>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d2d4:	e012      	b.n	800d2fc <dir_next+0x13c>
						fs->wflag = 1;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f7ff fb33 	bl	800c948 <sync_window>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <dir_next+0x12c>
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e02a      	b.n	800d342 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	613b      	str	r3, [r7, #16]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f6:	1c5a      	adds	r2, r3, #1
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	895b      	ldrh	r3, [r3, #10]
 800d300:	461a      	mov	r2, r3
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	4293      	cmp	r3, r2
 800d306:	d3e6      	bcc.n	800d2d6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	1ad2      	subs	r2, r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	697a      	ldr	r2, [r7, #20]
 800d318:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d31a:	6979      	ldr	r1, [r7, #20]
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f7ff fbf3 	bl	800cb08 <clust2sect>
 800d322:	4602      	mov	r2, r0
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d33a:	441a      	add	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3718      	adds	r7, #24
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b086      	sub	sp, #24
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d35a:	2100      	movs	r1, #0
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff feb4 	bl	800d0ca <dir_sdi>
 800d362:	4603      	mov	r3, r0
 800d364:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d12b      	bne.n	800d3c4 <dir_alloc+0x7a>
		n = 0;
 800d36c:	2300      	movs	r3, #0
 800d36e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	69db      	ldr	r3, [r3, #28]
 800d374:	4619      	mov	r1, r3
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f7ff fb2a 	bl	800c9d0 <move_window>
 800d37c:	4603      	mov	r3, r0
 800d37e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d380:	7dfb      	ldrb	r3, [r7, #23]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d11d      	bne.n	800d3c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2be5      	cmp	r3, #229	@ 0xe5
 800d38e:	d004      	beq.n	800d39a <dir_alloc+0x50>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6a1b      	ldr	r3, [r3, #32]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d107      	bne.n	800d3aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	3301      	adds	r3, #1
 800d39e:	613b      	str	r3, [r7, #16]
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d102      	bne.n	800d3ae <dir_alloc+0x64>
 800d3a8:	e00c      	b.n	800d3c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d3ae:	2101      	movs	r1, #1
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff ff05 	bl	800d1c0 <dir_next>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d0d7      	beq.n	800d370 <dir_alloc+0x26>
 800d3c0:	e000      	b.n	800d3c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d3c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	d101      	bne.n	800d3ce <dir_alloc+0x84>
 800d3ca:	2307      	movs	r3, #7
 800d3cc:	75fb      	strb	r3, [r7, #23]
	return res;
 800d3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	331a      	adds	r3, #26
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff f842 	bl	800c470 <ld_word>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	d109      	bne.n	800d40c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	3314      	adds	r3, #20
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff f837 	bl	800c470 <ld_word>
 800d402:	4603      	mov	r3, r0
 800d404:	041b      	lsls	r3, r3, #16
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	4313      	orrs	r3, r2
 800d40a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d40c:	68fb      	ldr	r3, [r7, #12]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	60f8      	str	r0, [r7, #12]
 800d41e:	60b9      	str	r1, [r7, #8]
 800d420:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	331a      	adds	r3, #26
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	b292      	uxth	r2, r2
 800d42a:	4611      	mov	r1, r2
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff f85a 	bl	800c4e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	2b03      	cmp	r3, #3
 800d438:	d109      	bne.n	800d44e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	f103 0214 	add.w	r2, r3, #20
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	0c1b      	lsrs	r3, r3, #16
 800d444:	b29b      	uxth	r3, r3
 800d446:	4619      	mov	r1, r3
 800d448:	4610      	mov	r0, r2
 800d44a:	f7ff f84c 	bl	800c4e6 <st_word>
	}
}
 800d44e:	bf00      	nop
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b086      	sub	sp, #24
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d464:	2100      	movs	r1, #0
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7ff fe2f 	bl	800d0ca <dir_sdi>
 800d46c:	4603      	mov	r3, r0
 800d46e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d470:	7dfb      	ldrb	r3, [r7, #23]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d001      	beq.n	800d47a <dir_find+0x24>
 800d476:	7dfb      	ldrb	r3, [r7, #23]
 800d478:	e03e      	b.n	800d4f8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	69db      	ldr	r3, [r3, #28]
 800d47e:	4619      	mov	r1, r3
 800d480:	6938      	ldr	r0, [r7, #16]
 800d482:	f7ff faa5 	bl	800c9d0 <move_window>
 800d486:	4603      	mov	r3, r0
 800d488:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d12f      	bne.n	800d4f0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6a1b      	ldr	r3, [r3, #32]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d498:	7bfb      	ldrb	r3, [r7, #15]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d102      	bne.n	800d4a4 <dir_find+0x4e>
 800d49e:	2304      	movs	r3, #4
 800d4a0:	75fb      	strb	r3, [r7, #23]
 800d4a2:	e028      	b.n	800d4f6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a1b      	ldr	r3, [r3, #32]
 800d4a8:	330b      	adds	r3, #11
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4b0:	b2da      	uxtb	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a1b      	ldr	r3, [r3, #32]
 800d4ba:	330b      	adds	r3, #11
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	f003 0308 	and.w	r3, r3, #8
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10a      	bne.n	800d4dc <dir_find+0x86>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a18      	ldr	r0, [r3, #32]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	3324      	adds	r3, #36	@ 0x24
 800d4ce:	220b      	movs	r2, #11
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	f7ff f88b 	bl	800c5ec <mem_cmp>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00b      	beq.n	800d4f4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d4dc:	2100      	movs	r1, #0
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff fe6e 	bl	800d1c0 <dir_next>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d4e8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d0c5      	beq.n	800d47a <dir_find+0x24>
 800d4ee:	e002      	b.n	800d4f6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d4f0:	bf00      	nop
 800d4f2:	e000      	b.n	800d4f6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d4f4:	bf00      	nop

	return res;
 800d4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d50e:	2101      	movs	r1, #1
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff ff1a 	bl	800d34a <dir_alloc>
 800d516:	4603      	mov	r3, r0
 800d518:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d11c      	bne.n	800d55a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	69db      	ldr	r3, [r3, #28]
 800d524:	4619      	mov	r1, r3
 800d526:	68b8      	ldr	r0, [r7, #8]
 800d528:	f7ff fa52 	bl	800c9d0 <move_window>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d530:	7bfb      	ldrb	r3, [r7, #15]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d111      	bne.n	800d55a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6a1b      	ldr	r3, [r3, #32]
 800d53a:	2220      	movs	r2, #32
 800d53c:	2100      	movs	r1, #0
 800d53e:	4618      	mov	r0, r3
 800d540:	f7ff f839 	bl	800c5b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a18      	ldr	r0, [r3, #32]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	3324      	adds	r3, #36	@ 0x24
 800d54c:	220b      	movs	r2, #11
 800d54e:	4619      	mov	r1, r3
 800d550:	f7ff f810 	bl	800c574 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	2201      	movs	r2, #1
 800d558:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b088      	sub	sp, #32
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	60fb      	str	r3, [r7, #12]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3324      	adds	r3, #36	@ 0x24
 800d578:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d57a:	220b      	movs	r2, #11
 800d57c:	2120      	movs	r1, #32
 800d57e:	68b8      	ldr	r0, [r7, #8]
 800d580:	f7ff f819 	bl	800c5b6 <mem_set>
	si = i = 0; ni = 8;
 800d584:	2300      	movs	r3, #0
 800d586:	613b      	str	r3, [r7, #16]
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	61fb      	str	r3, [r7, #28]
 800d58c:	2308      	movs	r3, #8
 800d58e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	1c5a      	adds	r2, r3, #1
 800d594:	61fa      	str	r2, [r7, #28]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	4413      	add	r3, r2
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d59e:	7efb      	ldrb	r3, [r7, #27]
 800d5a0:	2b20      	cmp	r3, #32
 800d5a2:	d94e      	bls.n	800d642 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d5a4:	7efb      	ldrb	r3, [r7, #27]
 800d5a6:	2b2f      	cmp	r3, #47	@ 0x2f
 800d5a8:	d006      	beq.n	800d5b8 <create_name+0x54>
 800d5aa:	7efb      	ldrb	r3, [r7, #27]
 800d5ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800d5ae:	d110      	bne.n	800d5d2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d5b0:	e002      	b.n	800d5b8 <create_name+0x54>
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	4413      	add	r3, r2
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d5c2:	d0f6      	beq.n	800d5b2 <create_name+0x4e>
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	2b5c      	cmp	r3, #92	@ 0x5c
 800d5ce:	d0f0      	beq.n	800d5b2 <create_name+0x4e>
			break;
 800d5d0:	e038      	b.n	800d644 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d5d2:	7efb      	ldrb	r3, [r7, #27]
 800d5d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5d6:	d003      	beq.n	800d5e0 <create_name+0x7c>
 800d5d8:	693a      	ldr	r2, [r7, #16]
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d30c      	bcc.n	800d5fa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	2b0b      	cmp	r3, #11
 800d5e4:	d002      	beq.n	800d5ec <create_name+0x88>
 800d5e6:	7efb      	ldrb	r3, [r7, #27]
 800d5e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5ea:	d001      	beq.n	800d5f0 <create_name+0x8c>
 800d5ec:	2306      	movs	r3, #6
 800d5ee:	e044      	b.n	800d67a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d5f0:	2308      	movs	r3, #8
 800d5f2:	613b      	str	r3, [r7, #16]
 800d5f4:	230b      	movs	r3, #11
 800d5f6:	617b      	str	r3, [r7, #20]
			continue;
 800d5f8:	e022      	b.n	800d640 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d5fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	da04      	bge.n	800d60c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d602:	7efb      	ldrb	r3, [r7, #27]
 800d604:	3b80      	subs	r3, #128	@ 0x80
 800d606:	4a1f      	ldr	r2, [pc, #124]	@ (800d684 <create_name+0x120>)
 800d608:	5cd3      	ldrb	r3, [r2, r3]
 800d60a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d60c:	7efb      	ldrb	r3, [r7, #27]
 800d60e:	4619      	mov	r1, r3
 800d610:	481d      	ldr	r0, [pc, #116]	@ (800d688 <create_name+0x124>)
 800d612:	f7ff f812 	bl	800c63a <chk_chr>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <create_name+0xbc>
 800d61c:	2306      	movs	r3, #6
 800d61e:	e02c      	b.n	800d67a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d620:	7efb      	ldrb	r3, [r7, #27]
 800d622:	2b60      	cmp	r3, #96	@ 0x60
 800d624:	d905      	bls.n	800d632 <create_name+0xce>
 800d626:	7efb      	ldrb	r3, [r7, #27]
 800d628:	2b7a      	cmp	r3, #122	@ 0x7a
 800d62a:	d802      	bhi.n	800d632 <create_name+0xce>
 800d62c:	7efb      	ldrb	r3, [r7, #27]
 800d62e:	3b20      	subs	r3, #32
 800d630:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	1c5a      	adds	r2, r3, #1
 800d636:	613a      	str	r2, [r7, #16]
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	4413      	add	r3, r2
 800d63c:	7efa      	ldrb	r2, [r7, #27]
 800d63e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d640:	e7a6      	b.n	800d590 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d642:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	441a      	add	r2, r3
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d101      	bne.n	800d658 <create_name+0xf4>
 800d654:	2306      	movs	r3, #6
 800d656:	e010      	b.n	800d67a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2be5      	cmp	r3, #229	@ 0xe5
 800d65e:	d102      	bne.n	800d666 <create_name+0x102>
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2205      	movs	r2, #5
 800d664:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d666:	7efb      	ldrb	r3, [r7, #27]
 800d668:	2b20      	cmp	r3, #32
 800d66a:	d801      	bhi.n	800d670 <create_name+0x10c>
 800d66c:	2204      	movs	r2, #4
 800d66e:	e000      	b.n	800d672 <create_name+0x10e>
 800d670:	2200      	movs	r2, #0
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	330b      	adds	r3, #11
 800d676:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d678:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3720      	adds	r7, #32
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	08017fdc 	.word	0x08017fdc
 800d688:	08017f34 	.word	0x08017f34

0800d68c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d6a0:	e002      	b.n	800d6a8 <follow_path+0x1c>
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	603b      	str	r3, [r7, #0]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800d6ae:	d0f8      	beq.n	800d6a2 <follow_path+0x16>
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800d6b6:	d0f4      	beq.n	800d6a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	2b1f      	cmp	r3, #31
 800d6c4:	d80a      	bhi.n	800d6dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2280      	movs	r2, #128	@ 0x80
 800d6ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7ff fcfa 	bl	800d0ca <dir_sdi>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	75fb      	strb	r3, [r7, #23]
 800d6da:	e043      	b.n	800d764 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d6dc:	463b      	mov	r3, r7
 800d6de:	4619      	mov	r1, r3
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7ff ff3f 	bl	800d564 <create_name>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d134      	bne.n	800d75a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff feb0 	bl	800d456 <dir_find>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d700:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00a      	beq.n	800d71e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d708:	7dfb      	ldrb	r3, [r7, #23]
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d127      	bne.n	800d75e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d70e:	7afb      	ldrb	r3, [r7, #11]
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	d122      	bne.n	800d75e <follow_path+0xd2>
 800d718:	2305      	movs	r3, #5
 800d71a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d71c:	e01f      	b.n	800d75e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d71e:	7afb      	ldrb	r3, [r7, #11]
 800d720:	f003 0304 	and.w	r3, r3, #4
 800d724:	2b00      	cmp	r3, #0
 800d726:	d11c      	bne.n	800d762 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	799b      	ldrb	r3, [r3, #6]
 800d72c:	f003 0310 	and.w	r3, r3, #16
 800d730:	2b00      	cmp	r3, #0
 800d732:	d102      	bne.n	800d73a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d734:	2305      	movs	r3, #5
 800d736:	75fb      	strb	r3, [r7, #23]
 800d738:	e014      	b.n	800d764 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	695b      	ldr	r3, [r3, #20]
 800d744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d748:	4413      	add	r3, r2
 800d74a:	4619      	mov	r1, r3
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f7ff fe43 	bl	800d3d8 <ld_clust>
 800d752:	4602      	mov	r2, r0
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d758:	e7c0      	b.n	800d6dc <follow_path+0x50>
			if (res != FR_OK) break;
 800d75a:	bf00      	nop
 800d75c:	e002      	b.n	800d764 <follow_path+0xd8>
				break;
 800d75e:	bf00      	nop
 800d760:	e000      	b.n	800d764 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d762:	bf00      	nop
			}
		}
	}

	return res;
 800d764:	7dfb      	ldrb	r3, [r7, #23]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d76e:	b480      	push	{r7}
 800d770:	b087      	sub	sp, #28
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d776:	f04f 33ff 	mov.w	r3, #4294967295
 800d77a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d031      	beq.n	800d7e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	617b      	str	r3, [r7, #20]
 800d78a:	e002      	b.n	800d792 <get_ldnumber+0x24>
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	3301      	adds	r3, #1
 800d790:	617b      	str	r3, [r7, #20]
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	2b20      	cmp	r3, #32
 800d798:	d903      	bls.n	800d7a2 <get_ldnumber+0x34>
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	2b3a      	cmp	r3, #58	@ 0x3a
 800d7a0:	d1f4      	bne.n	800d78c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	2b3a      	cmp	r3, #58	@ 0x3a
 800d7a8:	d11c      	bne.n	800d7e4 <get_ldnumber+0x76>
			tp = *path;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	1c5a      	adds	r2, r3, #1
 800d7b4:	60fa      	str	r2, [r7, #12]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	3b30      	subs	r3, #48	@ 0x30
 800d7ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	2b09      	cmp	r3, #9
 800d7c0:	d80e      	bhi.n	800d7e0 <get_ldnumber+0x72>
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d10a      	bne.n	800d7e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d107      	bne.n	800d7e0 <get_ldnumber+0x72>
					vol = (int)i;
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	617b      	str	r3, [r7, #20]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	697a      	ldr	r2, [r7, #20]
 800d7de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	e002      	b.n	800d7ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d7e8:	693b      	ldr	r3, [r7, #16]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	371c      	adds	r7, #28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
	...

0800d7f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	70da      	strb	r2, [r3, #3]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f04f 32ff 	mov.w	r2, #4294967295
 800d80e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff f8dc 	bl	800c9d0 <move_window>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <check_fs+0x2a>
 800d81e:	2304      	movs	r3, #4
 800d820:	e038      	b.n	800d894 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	3330      	adds	r3, #48	@ 0x30
 800d826:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe fe20 	bl	800c470 <ld_word>
 800d830:	4603      	mov	r3, r0
 800d832:	461a      	mov	r2, r3
 800d834:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d838:	429a      	cmp	r2, r3
 800d83a:	d001      	beq.n	800d840 <check_fs+0x48>
 800d83c:	2303      	movs	r3, #3
 800d83e:	e029      	b.n	800d894 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d846:	2be9      	cmp	r3, #233	@ 0xe9
 800d848:	d009      	beq.n	800d85e <check_fs+0x66>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d850:	2beb      	cmp	r3, #235	@ 0xeb
 800d852:	d11e      	bne.n	800d892 <check_fs+0x9a>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d85a:	2b90      	cmp	r3, #144	@ 0x90
 800d85c:	d119      	bne.n	800d892 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	3330      	adds	r3, #48	@ 0x30
 800d862:	3336      	adds	r3, #54	@ 0x36
 800d864:	4618      	mov	r0, r3
 800d866:	f7fe fe1b 	bl	800c4a0 <ld_dword>
 800d86a:	4603      	mov	r3, r0
 800d86c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d870:	4a0a      	ldr	r2, [pc, #40]	@ (800d89c <check_fs+0xa4>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d101      	bne.n	800d87a <check_fs+0x82>
 800d876:	2300      	movs	r3, #0
 800d878:	e00c      	b.n	800d894 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	3330      	adds	r3, #48	@ 0x30
 800d87e:	3352      	adds	r3, #82	@ 0x52
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe fe0d 	bl	800c4a0 <ld_dword>
 800d886:	4603      	mov	r3, r0
 800d888:	4a05      	ldr	r2, [pc, #20]	@ (800d8a0 <check_fs+0xa8>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d101      	bne.n	800d892 <check_fs+0x9a>
 800d88e:	2300      	movs	r3, #0
 800d890:	e000      	b.n	800d894 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d892:	2302      	movs	r3, #2
}
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	00544146 	.word	0x00544146
 800d8a0:	33544146 	.word	0x33544146

0800d8a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b096      	sub	sp, #88	@ 0x58
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f7ff ff58 	bl	800d76e <get_ldnumber>
 800d8be:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	da01      	bge.n	800d8ca <find_volume+0x26>
 800d8c6:	230b      	movs	r3, #11
 800d8c8:	e22d      	b.n	800dd26 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d8ca:	4aa1      	ldr	r2, [pc, #644]	@ (800db50 <find_volume+0x2ac>)
 800d8cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d101      	bne.n	800d8de <find_volume+0x3a>
 800d8da:	230c      	movs	r3, #12
 800d8dc:	e223      	b.n	800dd26 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d8e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d8e4:	79fb      	ldrb	r3, [r7, #7]
 800d8e6:	f023 0301 	bic.w	r3, r3, #1
 800d8ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d01a      	beq.n	800d92a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f6:	785b      	ldrb	r3, [r3, #1]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fe fd1b 	bl	800c334 <disk_status>
 800d8fe:	4603      	mov	r3, r0
 800d900:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d904:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d908:	f003 0301 	and.w	r3, r3, #1
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10c      	bne.n	800d92a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d910:	79fb      	ldrb	r3, [r7, #7]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d007      	beq.n	800d926 <find_volume+0x82>
 800d916:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d91a:	f003 0304 	and.w	r3, r3, #4
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d922:	230a      	movs	r3, #10
 800d924:	e1ff      	b.n	800dd26 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d926:	2300      	movs	r3, #0
 800d928:	e1fd      	b.n	800dd26 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92c:	2200      	movs	r2, #0
 800d92e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d932:	b2da      	uxtb	r2, r3
 800d934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d936:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93a:	785b      	ldrb	r3, [r3, #1]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fe fd13 	bl	800c368 <disk_initialize>
 800d942:	4603      	mov	r3, r0
 800d944:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d948:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d94c:	f003 0301 	and.w	r3, r3, #1
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d954:	2303      	movs	r3, #3
 800d956:	e1e6      	b.n	800dd26 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d958:	79fb      	ldrb	r3, [r7, #7]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d007      	beq.n	800d96e <find_volume+0xca>
 800d95e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d962:	f003 0304 	and.w	r3, r3, #4
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d96a:	230a      	movs	r3, #10
 800d96c:	e1db      	b.n	800dd26 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d972:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d974:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d976:	f7ff ff3f 	bl	800d7f8 <check_fs>
 800d97a:	4603      	mov	r3, r0
 800d97c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d980:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d984:	2b02      	cmp	r3, #2
 800d986:	d149      	bne.n	800da1c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d988:	2300      	movs	r3, #0
 800d98a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d98c:	e01e      	b.n	800d9cc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d990:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d994:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d996:	011b      	lsls	r3, r3, #4
 800d998:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d99c:	4413      	add	r3, r2
 800d99e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d006      	beq.n	800d9b8 <find_volume+0x114>
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fe fd76 	bl	800c4a0 <ld_dword>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	e000      	b.n	800d9ba <find_volume+0x116>
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	3358      	adds	r3, #88	@ 0x58
 800d9c0:	443b      	add	r3, r7
 800d9c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d9c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	d9dd      	bls.n	800d98e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d9d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <find_volume+0x13e>
 800d9dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d9e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	3358      	adds	r3, #88	@ 0x58
 800d9e8:	443b      	add	r3, r7
 800d9ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d9ee:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d9f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d005      	beq.n	800da02 <find_volume+0x15e>
 800d9f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d9f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d9fa:	f7ff fefd 	bl	800d7f8 <check_fs>
 800d9fe:	4603      	mov	r3, r0
 800da00:	e000      	b.n	800da04 <find_volume+0x160>
 800da02:	2303      	movs	r3, #3
 800da04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800da08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d905      	bls.n	800da1c <find_volume+0x178>
 800da10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da12:	3301      	adds	r3, #1
 800da14:	643b      	str	r3, [r7, #64]	@ 0x40
 800da16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da18:	2b03      	cmp	r3, #3
 800da1a:	d9e2      	bls.n	800d9e2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800da1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da20:	2b04      	cmp	r3, #4
 800da22:	d101      	bne.n	800da28 <find_volume+0x184>
 800da24:	2301      	movs	r3, #1
 800da26:	e17e      	b.n	800dd26 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800da28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d901      	bls.n	800da34 <find_volume+0x190>
 800da30:	230d      	movs	r3, #13
 800da32:	e178      	b.n	800dd26 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800da34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da36:	3330      	adds	r3, #48	@ 0x30
 800da38:	330b      	adds	r3, #11
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fe fd18 	bl	800c470 <ld_word>
 800da40:	4603      	mov	r3, r0
 800da42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da46:	d001      	beq.n	800da4c <find_volume+0x1a8>
 800da48:	230d      	movs	r3, #13
 800da4a:	e16c      	b.n	800dd26 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800da4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da4e:	3330      	adds	r3, #48	@ 0x30
 800da50:	3316      	adds	r3, #22
 800da52:	4618      	mov	r0, r3
 800da54:	f7fe fd0c 	bl	800c470 <ld_word>
 800da58:	4603      	mov	r3, r0
 800da5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800da5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d106      	bne.n	800da70 <find_volume+0x1cc>
 800da62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da64:	3330      	adds	r3, #48	@ 0x30
 800da66:	3324      	adds	r3, #36	@ 0x24
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe fd19 	bl	800c4a0 <ld_dword>
 800da6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800da70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800da74:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da78:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800da7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da82:	789b      	ldrb	r3, [r3, #2]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d005      	beq.n	800da94 <find_volume+0x1f0>
 800da88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da8a:	789b      	ldrb	r3, [r3, #2]
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d001      	beq.n	800da94 <find_volume+0x1f0>
 800da90:	230d      	movs	r3, #13
 800da92:	e148      	b.n	800dd26 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800da94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da96:	789b      	ldrb	r3, [r3, #2]
 800da98:	461a      	mov	r2, r3
 800da9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da9c:	fb02 f303 	mul.w	r3, r2, r3
 800daa0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800daa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800daa8:	461a      	mov	r2, r3
 800daaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800daae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab0:	895b      	ldrh	r3, [r3, #10]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d008      	beq.n	800dac8 <find_volume+0x224>
 800dab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab8:	895b      	ldrh	r3, [r3, #10]
 800daba:	461a      	mov	r2, r3
 800dabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dabe:	895b      	ldrh	r3, [r3, #10]
 800dac0:	3b01      	subs	r3, #1
 800dac2:	4013      	ands	r3, r2
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <find_volume+0x228>
 800dac8:	230d      	movs	r3, #13
 800daca:	e12c      	b.n	800dd26 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dace:	3330      	adds	r3, #48	@ 0x30
 800dad0:	3311      	adds	r3, #17
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fe fccc 	bl	800c470 <ld_word>
 800dad8:	4603      	mov	r3, r0
 800dada:	461a      	mov	r2, r3
 800dadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dade:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae2:	891b      	ldrh	r3, [r3, #8]
 800dae4:	f003 030f 	and.w	r3, r3, #15
 800dae8:	b29b      	uxth	r3, r3
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <find_volume+0x24e>
 800daee:	230d      	movs	r3, #13
 800daf0:	e119      	b.n	800dd26 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800daf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf4:	3330      	adds	r3, #48	@ 0x30
 800daf6:	3313      	adds	r3, #19
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fe fcb9 	bl	800c470 <ld_word>
 800dafe:	4603      	mov	r3, r0
 800db00:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800db02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db04:	2b00      	cmp	r3, #0
 800db06:	d106      	bne.n	800db16 <find_volume+0x272>
 800db08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0a:	3330      	adds	r3, #48	@ 0x30
 800db0c:	3320      	adds	r3, #32
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fe fcc6 	bl	800c4a0 <ld_dword>
 800db14:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800db16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db18:	3330      	adds	r3, #48	@ 0x30
 800db1a:	330e      	adds	r3, #14
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7fe fca7 	bl	800c470 <ld_word>
 800db22:	4603      	mov	r3, r0
 800db24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800db26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <find_volume+0x28c>
 800db2c:	230d      	movs	r3, #13
 800db2e:	e0fa      	b.n	800dd26 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800db30:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800db32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db34:	4413      	add	r3, r2
 800db36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db38:	8912      	ldrh	r2, [r2, #8]
 800db3a:	0912      	lsrs	r2, r2, #4
 800db3c:	b292      	uxth	r2, r2
 800db3e:	4413      	add	r3, r2
 800db40:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800db42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db46:	429a      	cmp	r2, r3
 800db48:	d204      	bcs.n	800db54 <find_volume+0x2b0>
 800db4a:	230d      	movs	r3, #13
 800db4c:	e0eb      	b.n	800dd26 <find_volume+0x482>
 800db4e:	bf00      	nop
 800db50:	20035d38 	.word	0x20035d38
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800db54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db5c:	8952      	ldrh	r2, [r2, #10]
 800db5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800db62:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db66:	2b00      	cmp	r3, #0
 800db68:	d101      	bne.n	800db6e <find_volume+0x2ca>
 800db6a:	230d      	movs	r3, #13
 800db6c:	e0db      	b.n	800dd26 <find_volume+0x482>
		fmt = FS_FAT32;
 800db6e:	2303      	movs	r3, #3
 800db70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db76:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d802      	bhi.n	800db84 <find_volume+0x2e0>
 800db7e:	2302      	movs	r3, #2
 800db80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db86:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d802      	bhi.n	800db94 <find_volume+0x2f0>
 800db8e:	2301      	movs	r3, #1
 800db90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db96:	1c9a      	adds	r2, r3, #2
 800db98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800db9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dba0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dba2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800dba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dba6:	441a      	add	r2, r3
 800dba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbaa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dbac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb0:	441a      	add	r2, r3
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800dbb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dbba:	2b03      	cmp	r3, #3
 800dbbc:	d11e      	bne.n	800dbfc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc0:	3330      	adds	r3, #48	@ 0x30
 800dbc2:	332a      	adds	r3, #42	@ 0x2a
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fe fc53 	bl	800c470 <ld_word>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d001      	beq.n	800dbd4 <find_volume+0x330>
 800dbd0:	230d      	movs	r3, #13
 800dbd2:	e0a8      	b.n	800dd26 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd6:	891b      	ldrh	r3, [r3, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <find_volume+0x33c>
 800dbdc:	230d      	movs	r3, #13
 800dbde:	e0a2      	b.n	800dd26 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe2:	3330      	adds	r3, #48	@ 0x30
 800dbe4:	332c      	adds	r3, #44	@ 0x2c
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fe fc5a 	bl	800c4a0 <ld_dword>
 800dbec:	4602      	mov	r2, r0
 800dbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf4:	695b      	ldr	r3, [r3, #20]
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbfa:	e01f      	b.n	800dc3c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbfe:	891b      	ldrh	r3, [r3, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d101      	bne.n	800dc08 <find_volume+0x364>
 800dc04:	230d      	movs	r3, #13
 800dc06:	e08e      	b.n	800dd26 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc0a:	6a1a      	ldr	r2, [r3, #32]
 800dc0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc0e:	441a      	add	r2, r3
 800dc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc12:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d103      	bne.n	800dc24 <find_volume+0x380>
 800dc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc1e:	695b      	ldr	r3, [r3, #20]
 800dc20:	005b      	lsls	r3, r3, #1
 800dc22:	e00a      	b.n	800dc3a <find_volume+0x396>
 800dc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc26:	695a      	ldr	r2, [r3, #20]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	005b      	lsls	r3, r3, #1
 800dc2c:	4413      	add	r3, r2
 800dc2e:	085a      	lsrs	r2, r3, #1
 800dc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc32:	695b      	ldr	r3, [r3, #20]
 800dc34:	f003 0301 	and.w	r3, r3, #1
 800dc38:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dc3a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3e:	699a      	ldr	r2, [r3, #24]
 800dc40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc42:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800dc46:	0a5b      	lsrs	r3, r3, #9
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d201      	bcs.n	800dc50 <find_volume+0x3ac>
 800dc4c:	230d      	movs	r3, #13
 800dc4e:	e06a      	b.n	800dd26 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc52:	f04f 32ff 	mov.w	r2, #4294967295
 800dc56:	611a      	str	r2, [r3, #16]
 800dc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5a:	691a      	ldr	r2, [r3, #16]
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800dc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc62:	2280      	movs	r2, #128	@ 0x80
 800dc64:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d149      	bne.n	800dd02 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc70:	3330      	adds	r3, #48	@ 0x30
 800dc72:	3330      	adds	r3, #48	@ 0x30
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe fbfb 	bl	800c470 <ld_word>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d140      	bne.n	800dd02 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc82:	3301      	adds	r3, #1
 800dc84:	4619      	mov	r1, r3
 800dc86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc88:	f7fe fea2 	bl	800c9d0 <move_window>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d137      	bne.n	800dd02 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800dc92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc94:	2200      	movs	r2, #0
 800dc96:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9a:	3330      	adds	r3, #48	@ 0x30
 800dc9c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fe fbe5 	bl	800c470 <ld_word>
 800dca6:	4603      	mov	r3, r0
 800dca8:	461a      	mov	r2, r3
 800dcaa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d127      	bne.n	800dd02 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb4:	3330      	adds	r3, #48	@ 0x30
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fe fbf2 	bl	800c4a0 <ld_dword>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	4a1c      	ldr	r2, [pc, #112]	@ (800dd30 <find_volume+0x48c>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d11e      	bne.n	800dd02 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc6:	3330      	adds	r3, #48	@ 0x30
 800dcc8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fe fbe7 	bl	800c4a0 <ld_dword>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	4a17      	ldr	r2, [pc, #92]	@ (800dd34 <find_volume+0x490>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d113      	bne.n	800dd02 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcdc:	3330      	adds	r3, #48	@ 0x30
 800dcde:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe fbdc 	bl	800c4a0 <ld_dword>
 800dce8:	4602      	mov	r2, r0
 800dcea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcec:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dcee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf0:	3330      	adds	r3, #48	@ 0x30
 800dcf2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fbd2 	bl	800c4a0 <ld_dword>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd00:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd04:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800dd08:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dd0a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd38 <find_volume+0x494>)
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	4b09      	ldr	r3, [pc, #36]	@ (800dd38 <find_volume+0x494>)
 800dd14:	801a      	strh	r2, [r3, #0]
 800dd16:	4b08      	ldr	r3, [pc, #32]	@ (800dd38 <find_volume+0x494>)
 800dd18:	881a      	ldrh	r2, [r3, #0]
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dd1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dd20:	f7fe fdee 	bl	800c900 <clear_lock>
#endif
	return FR_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3758      	adds	r7, #88	@ 0x58
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	41615252 	.word	0x41615252
 800dd34:	61417272 	.word	0x61417272
 800dd38:	20035d3c 	.word	0x20035d3c

0800dd3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dd46:	2309      	movs	r3, #9
 800dd48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d01c      	beq.n	800dd8a <validate+0x4e>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d018      	beq.n	800dd8a <validate+0x4e>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d013      	beq.n	800dd8a <validate+0x4e>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	889a      	ldrh	r2, [r3, #4]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	88db      	ldrh	r3, [r3, #6]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d10c      	bne.n	800dd8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	785b      	ldrb	r3, [r3, #1]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fe fadc 	bl	800c334 <disk_status>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <validate+0x4e>
			res = FR_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dd8a:	7bfb      	ldrb	r3, [r7, #15]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d102      	bne.n	800dd96 <validate+0x5a>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	e000      	b.n	800dd98 <validate+0x5c>
 800dd96:	2300      	movs	r3, #0
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	6013      	str	r3, [r2, #0]
	return res;
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
	...

0800dda8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b088      	sub	sp, #32
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	4613      	mov	r3, r2
 800ddb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ddba:	f107 0310 	add.w	r3, r7, #16
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7ff fcd5 	bl	800d76e <get_ldnumber>
 800ddc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	da01      	bge.n	800ddd0 <f_mount+0x28>
 800ddcc:	230b      	movs	r3, #11
 800ddce:	e02b      	b.n	800de28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ddd0:	4a17      	ldr	r2, [pc, #92]	@ (800de30 <f_mount+0x88>)
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d005      	beq.n	800ddec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dde0:	69b8      	ldr	r0, [r7, #24]
 800dde2:	f7fe fd8d 	bl	800c900 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	2200      	movs	r2, #0
 800ddea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d002      	beq.n	800ddf8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	490d      	ldr	r1, [pc, #52]	@ (800de30 <f_mount+0x88>)
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <f_mount+0x66>
 800de08:	79fb      	ldrb	r3, [r7, #7]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d001      	beq.n	800de12 <f_mount+0x6a>
 800de0e:	2300      	movs	r3, #0
 800de10:	e00a      	b.n	800de28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800de12:	f107 010c 	add.w	r1, r7, #12
 800de16:	f107 0308 	add.w	r3, r7, #8
 800de1a:	2200      	movs	r2, #0
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7ff fd41 	bl	800d8a4 <find_volume>
 800de22:	4603      	mov	r3, r0
 800de24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800de26:	7dfb      	ldrb	r3, [r7, #23]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3720      	adds	r7, #32
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	20035d38 	.word	0x20035d38

0800de34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b098      	sub	sp, #96	@ 0x60
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	4613      	mov	r3, r2
 800de40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d101      	bne.n	800de4c <f_open+0x18>
 800de48:	2309      	movs	r3, #9
 800de4a:	e1a9      	b.n	800e1a0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de4c:	79fb      	ldrb	r3, [r7, #7]
 800de4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800de54:	79fa      	ldrb	r2, [r7, #7]
 800de56:	f107 0110 	add.w	r1, r7, #16
 800de5a:	f107 0308 	add.w	r3, r7, #8
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff fd20 	bl	800d8a4 <find_volume>
 800de64:	4603      	mov	r3, r0
 800de66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800de6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f040 818d 	bne.w	800e18e <f_open+0x35a>
		dj.obj.fs = fs;
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	f107 0314 	add.w	r3, r7, #20
 800de7e:	4611      	mov	r1, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff fc03 	bl	800d68c <follow_path>
 800de86:	4603      	mov	r3, r0
 800de88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800de8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800de90:	2b00      	cmp	r3, #0
 800de92:	d118      	bne.n	800dec6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800de94:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de98:	b25b      	sxtb	r3, r3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	da03      	bge.n	800dea6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800de9e:	2306      	movs	r3, #6
 800dea0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dea4:	e00f      	b.n	800dec6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dea6:	79fb      	ldrb	r3, [r7, #7]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	bf8c      	ite	hi
 800deac:	2301      	movhi	r3, #1
 800deae:	2300      	movls	r3, #0
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	461a      	mov	r2, r3
 800deb4:	f107 0314 	add.w	r3, r7, #20
 800deb8:	4611      	mov	r1, r2
 800deba:	4618      	mov	r0, r3
 800debc:	f7fe fbd8 	bl	800c670 <chk_lock>
 800dec0:	4603      	mov	r3, r0
 800dec2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dec6:	79fb      	ldrb	r3, [r7, #7]
 800dec8:	f003 031c 	and.w	r3, r3, #28
 800decc:	2b00      	cmp	r3, #0
 800dece:	d07f      	beq.n	800dfd0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ded0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d017      	beq.n	800df08 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ded8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dedc:	2b04      	cmp	r3, #4
 800dede:	d10e      	bne.n	800defe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dee0:	f7fe fc22 	bl	800c728 <enq_lock>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d006      	beq.n	800def8 <f_open+0xc4>
 800deea:	f107 0314 	add.w	r3, r7, #20
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff fb06 	bl	800d500 <dir_register>
 800def4:	4603      	mov	r3, r0
 800def6:	e000      	b.n	800defa <f_open+0xc6>
 800def8:	2312      	movs	r3, #18
 800defa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800defe:	79fb      	ldrb	r3, [r7, #7]
 800df00:	f043 0308 	orr.w	r3, r3, #8
 800df04:	71fb      	strb	r3, [r7, #7]
 800df06:	e010      	b.n	800df2a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800df08:	7ebb      	ldrb	r3, [r7, #26]
 800df0a:	f003 0311 	and.w	r3, r3, #17
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d003      	beq.n	800df1a <f_open+0xe6>
					res = FR_DENIED;
 800df12:	2307      	movs	r3, #7
 800df14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800df18:	e007      	b.n	800df2a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	f003 0304 	and.w	r3, r3, #4
 800df20:	2b00      	cmp	r3, #0
 800df22:	d002      	beq.n	800df2a <f_open+0xf6>
 800df24:	2308      	movs	r3, #8
 800df26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d168      	bne.n	800e004 <f_open+0x1d0>
 800df32:	79fb      	ldrb	r3, [r7, #7]
 800df34:	f003 0308 	and.w	r3, r3, #8
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d063      	beq.n	800e004 <f_open+0x1d0>
				dw = GET_FATTIME();
 800df3c:	f7fd ffb8 	bl	800beb0 <get_fattime>
 800df40:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800df42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df44:	330e      	adds	r3, #14
 800df46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fe fae7 	bl	800c51c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800df4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df50:	3316      	adds	r3, #22
 800df52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800df54:	4618      	mov	r0, r3
 800df56:	f7fe fae1 	bl	800c51c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df5c:	330b      	adds	r3, #11
 800df5e:	2220      	movs	r2, #32
 800df60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df66:	4611      	mov	r1, r2
 800df68:	4618      	mov	r0, r3
 800df6a:	f7ff fa35 	bl	800d3d8 <ld_clust>
 800df6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800df74:	2200      	movs	r2, #0
 800df76:	4618      	mov	r0, r3
 800df78:	f7ff fa4d 	bl	800d416 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800df7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df7e:	331c      	adds	r3, #28
 800df80:	2100      	movs	r1, #0
 800df82:	4618      	mov	r0, r3
 800df84:	f7fe faca 	bl	800c51c <st_dword>
					fs->wflag = 1;
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	2201      	movs	r2, #1
 800df8c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800df8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df90:	2b00      	cmp	r3, #0
 800df92:	d037      	beq.n	800e004 <f_open+0x1d0>
						dw = fs->winsect;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df98:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800df9a:	f107 0314 	add.w	r3, r7, #20
 800df9e:	2200      	movs	r2, #0
 800dfa0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe ff60 	bl	800ce68 <remove_chain>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800dfae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d126      	bne.n	800e004 <f_open+0x1d0>
							res = move_window(fs, dw);
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fe fd08 	bl	800c9d0 <move_window>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfca:	3a01      	subs	r2, #1
 800dfcc:	60da      	str	r2, [r3, #12]
 800dfce:	e019      	b.n	800e004 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dfd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d115      	bne.n	800e004 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dfd8:	7ebb      	ldrb	r3, [r7, #26]
 800dfda:	f003 0310 	and.w	r3, r3, #16
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d003      	beq.n	800dfea <f_open+0x1b6>
					res = FR_NO_FILE;
 800dfe2:	2304      	movs	r3, #4
 800dfe4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dfe8:	e00c      	b.n	800e004 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	f003 0302 	and.w	r3, r3, #2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d007      	beq.n	800e004 <f_open+0x1d0>
 800dff4:	7ebb      	ldrb	r3, [r7, #26]
 800dff6:	f003 0301 	and.w	r3, r3, #1
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d002      	beq.n	800e004 <f_open+0x1d0>
						res = FR_DENIED;
 800dffe:	2307      	movs	r3, #7
 800e000:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e004:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d126      	bne.n	800e05a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e00c:	79fb      	ldrb	r3, [r7, #7]
 800e00e:	f003 0308 	and.w	r3, r3, #8
 800e012:	2b00      	cmp	r3, #0
 800e014:	d003      	beq.n	800e01e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e016:	79fb      	ldrb	r3, [r7, #7]
 800e018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e01c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e026:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e02c:	79fb      	ldrb	r3, [r7, #7]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	bf8c      	ite	hi
 800e032:	2301      	movhi	r3, #1
 800e034:	2300      	movls	r3, #0
 800e036:	b2db      	uxtb	r3, r3
 800e038:	461a      	mov	r2, r3
 800e03a:	f107 0314 	add.w	r3, r7, #20
 800e03e:	4611      	mov	r1, r2
 800e040:	4618      	mov	r0, r3
 800e042:	f7fe fb93 	bl	800c76c <inc_lock>
 800e046:	4602      	mov	r2, r0
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <f_open+0x226>
 800e054:	2302      	movs	r3, #2
 800e056:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e05a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e05e:	2b00      	cmp	r3, #0
 800e060:	f040 8095 	bne.w	800e18e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e068:	4611      	mov	r1, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff f9b4 	bl	800d3d8 <ld_clust>
 800e070:	4602      	mov	r2, r0
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e078:	331c      	adds	r3, #28
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fa10 	bl	800c4a0 <ld_dword>
 800e080:	4602      	mov	r2, r0
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e08c:	693a      	ldr	r2, [r7, #16]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	88da      	ldrh	r2, [r3, #6]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	79fa      	ldrb	r2, [r7, #7]
 800e09e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	3330      	adds	r3, #48	@ 0x30
 800e0b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0ba:	2100      	movs	r1, #0
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe fa7a 	bl	800c5b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
 800e0c4:	f003 0320 	and.w	r3, r3, #32
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d060      	beq.n	800e18e <f_open+0x35a>
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d05c      	beq.n	800e18e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	68da      	ldr	r2, [r3, #12]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	895b      	ldrh	r3, [r3, #10]
 800e0e0:	025b      	lsls	r3, r3, #9
 800e0e2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800e0f0:	e016      	b.n	800e120 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fe fd25 	bl	800cb46 <get_fat>
 800e0fc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e0fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e100:	2b01      	cmp	r3, #1
 800e102:	d802      	bhi.n	800e10a <f_open+0x2d6>
 800e104:	2302      	movs	r3, #2
 800e106:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e10a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e110:	d102      	bne.n	800e118 <f_open+0x2e4>
 800e112:	2301      	movs	r3, #1
 800e114:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e118:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e11a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e120:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e124:	2b00      	cmp	r3, #0
 800e126:	d103      	bne.n	800e130 <f_open+0x2fc>
 800e128:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e12a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d8e0      	bhi.n	800e0f2 <f_open+0x2be>
				}
				fp->clust = clst;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e134:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e136:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d127      	bne.n	800e18e <f_open+0x35a>
 800e13e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e144:	2b00      	cmp	r3, #0
 800e146:	d022      	beq.n	800e18e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe fcdb 	bl	800cb08 <clust2sect>
 800e152:	6478      	str	r0, [r7, #68]	@ 0x44
 800e154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e156:	2b00      	cmp	r3, #0
 800e158:	d103      	bne.n	800e162 <f_open+0x32e>
						res = FR_INT_ERR;
 800e15a:	2302      	movs	r3, #2
 800e15c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e160:	e015      	b.n	800e18e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e164:	0a5a      	lsrs	r2, r3, #9
 800e166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e168:	441a      	add	r2, r3
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	7858      	ldrb	r0, [r3, #1]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6a1a      	ldr	r2, [r3, #32]
 800e17c:	2301      	movs	r3, #1
 800e17e:	f7fe f919 	bl	800c3b4 <disk_read>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d002      	beq.n	800e18e <f_open+0x35a>
 800e188:	2301      	movs	r3, #1
 800e18a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e18e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e192:	2b00      	cmp	r3, #0
 800e194:	d002      	beq.n	800e19c <f_open+0x368>
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2200      	movs	r2, #0
 800e19a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e19c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3760      	adds	r7, #96	@ 0x60
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b08e      	sub	sp, #56	@ 0x38
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
 800e1b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f107 0214 	add.w	r2, r7, #20
 800e1c6:	4611      	mov	r1, r2
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7ff fdb7 	bl	800dd3c <validate>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e1d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d107      	bne.n	800e1ec <f_read+0x44>
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	7d5b      	ldrb	r3, [r3, #21]
 800e1e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e1e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <f_read+0x4a>
 800e1ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e1f0:	e115      	b.n	800e41e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	7d1b      	ldrb	r3, [r3, #20]
 800e1f6:	f003 0301 	and.w	r3, r3, #1
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <f_read+0x5a>
 800e1fe:	2307      	movs	r3, #7
 800e200:	e10d      	b.n	800e41e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	68da      	ldr	r2, [r3, #12]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	699b      	ldr	r3, [r3, #24]
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	6a3b      	ldr	r3, [r7, #32]
 800e212:	429a      	cmp	r2, r3
 800e214:	f240 80fe 	bls.w	800e414 <f_read+0x26c>
 800e218:	6a3b      	ldr	r3, [r7, #32]
 800e21a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e21c:	e0fa      	b.n	800e414 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e226:	2b00      	cmp	r3, #0
 800e228:	f040 80c6 	bne.w	800e3b8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	699b      	ldr	r3, [r3, #24]
 800e230:	0a5b      	lsrs	r3, r3, #9
 800e232:	697a      	ldr	r2, [r7, #20]
 800e234:	8952      	ldrh	r2, [r2, #10]
 800e236:	3a01      	subs	r2, #1
 800e238:	4013      	ands	r3, r2
 800e23a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d12f      	bne.n	800e2a2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	699b      	ldr	r3, [r3, #24]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d103      	bne.n	800e252 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	689b      	ldr	r3, [r3, #8]
 800e24e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e250:	e013      	b.n	800e27a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e256:	2b00      	cmp	r3, #0
 800e258:	d007      	beq.n	800e26a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	699b      	ldr	r3, [r3, #24]
 800e25e:	4619      	mov	r1, r3
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f7fe fefe 	bl	800d062 <clmt_clust>
 800e266:	6338      	str	r0, [r7, #48]	@ 0x30
 800e268:	e007      	b.n	800e27a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e26a:	68fa      	ldr	r2, [r7, #12]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	69db      	ldr	r3, [r3, #28]
 800e270:	4619      	mov	r1, r3
 800e272:	4610      	mov	r0, r2
 800e274:	f7fe fc67 	bl	800cb46 <get_fat>
 800e278:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d804      	bhi.n	800e28a <f_read+0xe2>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2202      	movs	r2, #2
 800e284:	755a      	strb	r2, [r3, #21]
 800e286:	2302      	movs	r3, #2
 800e288:	e0c9      	b.n	800e41e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e290:	d104      	bne.n	800e29c <f_read+0xf4>
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2201      	movs	r2, #1
 800e296:	755a      	strb	r2, [r3, #21]
 800e298:	2301      	movs	r3, #1
 800e29a:	e0c0      	b.n	800e41e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e2a2:	697a      	ldr	r2, [r7, #20]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	69db      	ldr	r3, [r3, #28]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	f7fe fc2c 	bl	800cb08 <clust2sect>
 800e2b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d104      	bne.n	800e2c2 <f_read+0x11a>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	755a      	strb	r2, [r3, #21]
 800e2be:	2302      	movs	r3, #2
 800e2c0:	e0ad      	b.n	800e41e <f_read+0x276>
			sect += csect;
 800e2c2:	69ba      	ldr	r2, [r7, #24]
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	0a5b      	lsrs	r3, r3, #9
 800e2ce:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d039      	beq.n	800e34a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e2d6:	69fa      	ldr	r2, [r7, #28]
 800e2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2da:	4413      	add	r3, r2
 800e2dc:	697a      	ldr	r2, [r7, #20]
 800e2de:	8952      	ldrh	r2, [r2, #10]
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d905      	bls.n	800e2f0 <f_read+0x148>
					cc = fs->csize - csect;
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	895b      	ldrh	r3, [r3, #10]
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	1ad3      	subs	r3, r2, r3
 800e2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	7858      	ldrb	r0, [r3, #1]
 800e2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f6:	69ba      	ldr	r2, [r7, #24]
 800e2f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e2fa:	f7fe f85b 	bl	800c3b4 <disk_read>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d004      	beq.n	800e30e <f_read+0x166>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2201      	movs	r2, #1
 800e308:	755a      	strb	r2, [r3, #21]
 800e30a:	2301      	movs	r3, #1
 800e30c:	e087      	b.n	800e41e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	7d1b      	ldrb	r3, [r3, #20]
 800e312:	b25b      	sxtb	r3, r3
 800e314:	2b00      	cmp	r3, #0
 800e316:	da14      	bge.n	800e342 <f_read+0x19a>
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6a1a      	ldr	r2, [r3, #32]
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e322:	429a      	cmp	r2, r3
 800e324:	d90d      	bls.n	800e342 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6a1a      	ldr	r2, [r3, #32]
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	1ad3      	subs	r3, r2, r3
 800e32e:	025b      	lsls	r3, r3, #9
 800e330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e332:	18d0      	adds	r0, r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	3330      	adds	r3, #48	@ 0x30
 800e338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e33c:	4619      	mov	r1, r3
 800e33e:	f7fe f919 	bl	800c574 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e344:	025b      	lsls	r3, r3, #9
 800e346:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e348:	e050      	b.n	800e3ec <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	6a1b      	ldr	r3, [r3, #32]
 800e34e:	69ba      	ldr	r2, [r7, #24]
 800e350:	429a      	cmp	r2, r3
 800e352:	d02e      	beq.n	800e3b2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	7d1b      	ldrb	r3, [r3, #20]
 800e358:	b25b      	sxtb	r3, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	da18      	bge.n	800e390 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	7858      	ldrb	r0, [r3, #1]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6a1a      	ldr	r2, [r3, #32]
 800e36c:	2301      	movs	r3, #1
 800e36e:	f7fe f841 	bl	800c3f4 <disk_write>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d004      	beq.n	800e382 <f_read+0x1da>
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2201      	movs	r2, #1
 800e37c:	755a      	strb	r2, [r3, #21]
 800e37e:	2301      	movs	r3, #1
 800e380:	e04d      	b.n	800e41e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	7d1b      	ldrb	r3, [r3, #20]
 800e386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	7858      	ldrb	r0, [r3, #1]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e39a:	2301      	movs	r3, #1
 800e39c:	69ba      	ldr	r2, [r7, #24]
 800e39e:	f7fe f809 	bl	800c3b4 <disk_read>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d004      	beq.n	800e3b2 <f_read+0x20a>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	755a      	strb	r2, [r3, #21]
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e035      	b.n	800e41e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	69ba      	ldr	r2, [r7, #24]
 800e3b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	699b      	ldr	r3, [r3, #24]
 800e3bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3c0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e3c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e3c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d901      	bls.n	800e3d2 <f_read+0x22a>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	699b      	ldr	r3, [r3, #24]
 800e3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3e0:	4413      	add	r3, r2
 800e3e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3e8:	f7fe f8c4 	bl	800c574 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e3ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f0:	4413      	add	r3, r2
 800e3f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	699a      	ldr	r2, [r3, #24]
 800e3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fa:	441a      	add	r2, r3
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	619a      	str	r2, [r3, #24]
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e406:	441a      	add	r2, r3
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	601a      	str	r2, [r3, #0]
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e410:	1ad3      	subs	r3, r2, r3
 800e412:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	f47f af01 	bne.w	800e21e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e41c:	2300      	movs	r3, #0
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3738      	adds	r7, #56	@ 0x38
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e426:	b580      	push	{r7, lr}
 800e428:	b08c      	sub	sp, #48	@ 0x30
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	60f8      	str	r0, [r7, #12]
 800e42e:	60b9      	str	r1, [r7, #8]
 800e430:	607a      	str	r2, [r7, #4]
 800e432:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	2200      	movs	r2, #0
 800e43c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f107 0210 	add.w	r2, r7, #16
 800e444:	4611      	mov	r1, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff fc78 	bl	800dd3c <validate>
 800e44c:	4603      	mov	r3, r0
 800e44e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e456:	2b00      	cmp	r3, #0
 800e458:	d107      	bne.n	800e46a <f_write+0x44>
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	7d5b      	ldrb	r3, [r3, #21]
 800e45e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e466:	2b00      	cmp	r3, #0
 800e468:	d002      	beq.n	800e470 <f_write+0x4a>
 800e46a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e46e:	e14b      	b.n	800e708 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	7d1b      	ldrb	r3, [r3, #20]
 800e474:	f003 0302 	and.w	r3, r3, #2
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d101      	bne.n	800e480 <f_write+0x5a>
 800e47c:	2307      	movs	r3, #7
 800e47e:	e143      	b.n	800e708 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	699a      	ldr	r2, [r3, #24]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	441a      	add	r2, r3
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	f080 812d 	bcs.w	800e6ec <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	43db      	mvns	r3, r3
 800e498:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e49a:	e127      	b.n	800e6ec <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	699b      	ldr	r3, [r3, #24]
 800e4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f040 80e3 	bne.w	800e670 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	699b      	ldr	r3, [r3, #24]
 800e4ae:	0a5b      	lsrs	r3, r3, #9
 800e4b0:	693a      	ldr	r2, [r7, #16]
 800e4b2:	8952      	ldrh	r2, [r2, #10]
 800e4b4:	3a01      	subs	r2, #1
 800e4b6:	4013      	ands	r3, r2
 800e4b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d143      	bne.n	800e548 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10c      	bne.n	800e4e2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d11a      	bne.n	800e50a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2100      	movs	r1, #0
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fe fd2a 	bl	800cf32 <create_chain>
 800e4de:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e4e0:	e013      	b.n	800e50a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d007      	beq.n	800e4fa <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f7fe fdb6 	bl	800d062 <clmt_clust>
 800e4f6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e4f8:	e007      	b.n	800e50a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	69db      	ldr	r3, [r3, #28]
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f7fe fd15 	bl	800cf32 <create_chain>
 800e508:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f000 80f2 	beq.w	800e6f6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e514:	2b01      	cmp	r3, #1
 800e516:	d104      	bne.n	800e522 <f_write+0xfc>
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2202      	movs	r2, #2
 800e51c:	755a      	strb	r2, [r3, #21]
 800e51e:	2302      	movs	r3, #2
 800e520:	e0f2      	b.n	800e708 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e528:	d104      	bne.n	800e534 <f_write+0x10e>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2201      	movs	r2, #1
 800e52e:	755a      	strb	r2, [r3, #21]
 800e530:	2301      	movs	r3, #1
 800e532:	e0e9      	b.n	800e708 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e538:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d102      	bne.n	800e548 <f_write+0x122>
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e546:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	7d1b      	ldrb	r3, [r3, #20]
 800e54c:	b25b      	sxtb	r3, r3
 800e54e:	2b00      	cmp	r3, #0
 800e550:	da18      	bge.n	800e584 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	7858      	ldrb	r0, [r3, #1]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6a1a      	ldr	r2, [r3, #32]
 800e560:	2301      	movs	r3, #1
 800e562:	f7fd ff47 	bl	800c3f4 <disk_write>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d004      	beq.n	800e576 <f_write+0x150>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2201      	movs	r2, #1
 800e570:	755a      	strb	r2, [r3, #21]
 800e572:	2301      	movs	r3, #1
 800e574:	e0c8      	b.n	800e708 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	7d1b      	ldrb	r3, [r3, #20]
 800e57a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e584:	693a      	ldr	r2, [r7, #16]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	69db      	ldr	r3, [r3, #28]
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f7fe fabb 	bl	800cb08 <clust2sect>
 800e592:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d104      	bne.n	800e5a4 <f_write+0x17e>
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2202      	movs	r2, #2
 800e59e:	755a      	strb	r2, [r3, #21]
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	e0b1      	b.n	800e708 <f_write+0x2e2>
			sect += csect;
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	0a5b      	lsrs	r3, r3, #9
 800e5b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e5b2:	6a3b      	ldr	r3, [r7, #32]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d03c      	beq.n	800e632 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e5b8:	69ba      	ldr	r2, [r7, #24]
 800e5ba:	6a3b      	ldr	r3, [r7, #32]
 800e5bc:	4413      	add	r3, r2
 800e5be:	693a      	ldr	r2, [r7, #16]
 800e5c0:	8952      	ldrh	r2, [r2, #10]
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d905      	bls.n	800e5d2 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	895b      	ldrh	r3, [r3, #10]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	7858      	ldrb	r0, [r3, #1]
 800e5d6:	6a3b      	ldr	r3, [r7, #32]
 800e5d8:	697a      	ldr	r2, [r7, #20]
 800e5da:	69f9      	ldr	r1, [r7, #28]
 800e5dc:	f7fd ff0a 	bl	800c3f4 <disk_write>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d004      	beq.n	800e5f0 <f_write+0x1ca>
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	755a      	strb	r2, [r3, #21]
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e08b      	b.n	800e708 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	6a1a      	ldr	r2, [r3, #32]
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	6a3a      	ldr	r2, [r7, #32]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d915      	bls.n	800e62a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	6a1a      	ldr	r2, [r3, #32]
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	025b      	lsls	r3, r3, #9
 800e60e:	69fa      	ldr	r2, [r7, #28]
 800e610:	4413      	add	r3, r2
 800e612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e616:	4619      	mov	r1, r3
 800e618:	f7fd ffac 	bl	800c574 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	7d1b      	ldrb	r3, [r3, #20]
 800e620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e624:	b2da      	uxtb	r2, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	025b      	lsls	r3, r3, #9
 800e62e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e630:	e03f      	b.n	800e6b2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6a1b      	ldr	r3, [r3, #32]
 800e636:	697a      	ldr	r2, [r7, #20]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d016      	beq.n	800e66a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	699a      	ldr	r2, [r3, #24]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e644:	429a      	cmp	r2, r3
 800e646:	d210      	bcs.n	800e66a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	7858      	ldrb	r0, [r3, #1]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e652:	2301      	movs	r3, #1
 800e654:	697a      	ldr	r2, [r7, #20]
 800e656:	f7fd fead 	bl	800c3b4 <disk_read>
 800e65a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d004      	beq.n	800e66a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2201      	movs	r2, #1
 800e664:	755a      	strb	r2, [r3, #21]
 800e666:	2301      	movs	r3, #1
 800e668:	e04e      	b.n	800e708 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	697a      	ldr	r2, [r7, #20]
 800e66e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	699b      	ldr	r3, [r3, #24]
 800e674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e678:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e67c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e67e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	429a      	cmp	r2, r3
 800e684:	d901      	bls.n	800e68a <f_write+0x264>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e698:	4413      	add	r3, r2
 800e69a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e69c:	69f9      	ldr	r1, [r7, #28]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fd ff68 	bl	800c574 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	7d1b      	ldrb	r3, [r3, #20]
 800e6a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e6ac:	b2da      	uxtb	r2, r3
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e6b2:	69fa      	ldr	r2, [r7, #28]
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b6:	4413      	add	r3, r2
 800e6b8:	61fb      	str	r3, [r7, #28]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	699a      	ldr	r2, [r3, #24]
 800e6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c0:	441a      	add	r2, r3
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	619a      	str	r2, [r3, #24]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	68da      	ldr	r2, [r3, #12]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	bf38      	it	cc
 800e6d2:	461a      	movcc	r2, r3
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	60da      	str	r2, [r3, #12]
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6de:	441a      	add	r2, r3
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	601a      	str	r2, [r3, #0]
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f47f aed4 	bne.w	800e49c <f_write+0x76>
 800e6f4:	e000      	b.n	800e6f8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e6f6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	7d1b      	ldrb	r3, [r3, #20]
 800e6fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e700:	b2da      	uxtb	r2, r3
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3730      	adds	r7, #48	@ 0x30
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f107 0208 	add.w	r2, r7, #8
 800e71e:	4611      	mov	r1, r2
 800e720:	4618      	mov	r0, r3
 800e722:	f7ff fb0b 	bl	800dd3c <validate>
 800e726:	4603      	mov	r3, r0
 800e728:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e72a:	7dfb      	ldrb	r3, [r7, #23]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d168      	bne.n	800e802 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	7d1b      	ldrb	r3, [r3, #20]
 800e734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d062      	beq.n	800e802 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	7d1b      	ldrb	r3, [r3, #20]
 800e740:	b25b      	sxtb	r3, r3
 800e742:	2b00      	cmp	r3, #0
 800e744:	da15      	bge.n	800e772 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	7858      	ldrb	r0, [r3, #1]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6a1a      	ldr	r2, [r3, #32]
 800e754:	2301      	movs	r3, #1
 800e756:	f7fd fe4d 	bl	800c3f4 <disk_write>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d001      	beq.n	800e764 <f_sync+0x54>
 800e760:	2301      	movs	r3, #1
 800e762:	e04f      	b.n	800e804 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	7d1b      	ldrb	r3, [r3, #20]
 800e768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e772:	f7fd fb9d 	bl	800beb0 <get_fattime>
 800e776:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e77e:	4619      	mov	r1, r3
 800e780:	4610      	mov	r0, r2
 800e782:	f7fe f925 	bl	800c9d0 <move_window>
 800e786:	4603      	mov	r3, r0
 800e788:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e78a:	7dfb      	ldrb	r3, [r7, #23]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d138      	bne.n	800e802 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e794:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	330b      	adds	r3, #11
 800e79a:	781a      	ldrb	r2, [r3, #0]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	330b      	adds	r3, #11
 800e7a0:	f042 0220 	orr.w	r2, r2, #32
 800e7a4:	b2d2      	uxtb	r2, r2
 800e7a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6818      	ldr	r0, [r3, #0]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	68f9      	ldr	r1, [r7, #12]
 800e7b4:	f7fe fe2f 	bl	800d416 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f103 021c 	add.w	r2, r3, #28
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	f7fd fea9 	bl	800c51c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	3316      	adds	r3, #22
 800e7ce:	6939      	ldr	r1, [r7, #16]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fd fea3 	bl	800c51c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	3312      	adds	r3, #18
 800e7da:	2100      	movs	r1, #0
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fd fe82 	bl	800c4e6 <st_word>
					fs->wflag = 1;
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fe f91e 	bl	800ca2c <sync_fs>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	7d1b      	ldrb	r3, [r3, #20]
 800e7f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e802:	7dfb      	ldrb	r3, [r7, #23]
}
 800e804:	4618      	mov	r0, r3
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f7ff ff7b 	bl	800e710 <f_sync>
 800e81a:	4603      	mov	r3, r0
 800e81c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d118      	bne.n	800e856 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f107 0208 	add.w	r2, r7, #8
 800e82a:	4611      	mov	r1, r2
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7ff fa85 	bl	800dd3c <validate>
 800e832:	4603      	mov	r3, r0
 800e834:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e836:	7bfb      	ldrb	r3, [r7, #15]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10c      	bne.n	800e856 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	4618      	mov	r0, r3
 800e842:	f7fe f821 	bl	800c888 <dec_lock>
 800e846:	4603      	mov	r3, r0
 800e848:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e84a:	7bfb      	ldrb	r3, [r7, #15]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d102      	bne.n	800e856 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e856:	7bfb      	ldrb	r3, [r7, #15]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3710      	adds	r7, #16
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b090      	sub	sp, #64	@ 0x40
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f107 0208 	add.w	r2, r7, #8
 800e870:	4611      	mov	r1, r2
 800e872:	4618      	mov	r0, r3
 800e874:	f7ff fa62 	bl	800dd3c <validate>
 800e878:	4603      	mov	r3, r0
 800e87a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e87e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e882:	2b00      	cmp	r3, #0
 800e884:	d103      	bne.n	800e88e <f_lseek+0x2e>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	7d5b      	ldrb	r3, [r3, #21]
 800e88a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e88e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e892:	2b00      	cmp	r3, #0
 800e894:	d002      	beq.n	800e89c <f_lseek+0x3c>
 800e896:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e89a:	e1e6      	b.n	800ec6a <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f000 80d1 	beq.w	800ea48 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ac:	d15a      	bne.n	800e964 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b2:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b6:	1d1a      	adds	r2, r3, #4
 800e8b8:	627a      	str	r2, [r7, #36]	@ 0x24
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	617b      	str	r3, [r7, #20]
 800e8be:	2302      	movs	r3, #2
 800e8c0:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d03a      	beq.n	800e944 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d0:	613b      	str	r3, [r7, #16]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d8:	3302      	adds	r3, #2
 800e8da:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8de:	60fb      	str	r3, [r7, #12]
 800e8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe f92b 	bl	800cb46 <get_fat>
 800e8f0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d804      	bhi.n	800e902 <f_lseek+0xa2>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2202      	movs	r2, #2
 800e8fc:	755a      	strb	r2, [r3, #21]
 800e8fe:	2302      	movs	r3, #2
 800e900:	e1b3      	b.n	800ec6a <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e908:	d104      	bne.n	800e914 <f_lseek+0xb4>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2201      	movs	r2, #1
 800e90e:	755a      	strb	r2, [r3, #21]
 800e910:	2301      	movs	r3, #1
 800e912:	e1aa      	b.n	800ec6a <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3301      	adds	r3, #1
 800e918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d0de      	beq.n	800e8dc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e91e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	429a      	cmp	r2, r3
 800e924:	d809      	bhi.n	800e93a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e928:	1d1a      	adds	r2, r3, #4
 800e92a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e92c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e92e:	601a      	str	r2, [r3, #0]
 800e930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e932:	1d1a      	adds	r2, r3, #4
 800e934:	627a      	str	r2, [r7, #36]	@ 0x24
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	695b      	ldr	r3, [r3, #20]
 800e93e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e940:	429a      	cmp	r2, r3
 800e942:	d3c4      	bcc.n	800e8ce <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e94a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e94c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	429a      	cmp	r2, r3
 800e952:	d803      	bhi.n	800e95c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e956:	2200      	movs	r2, #0
 800e958:	601a      	str	r2, [r3, #0]
 800e95a:	e184      	b.n	800ec66 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e95c:	2311      	movs	r3, #17
 800e95e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e962:	e180      	b.n	800ec66 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d902      	bls.n	800e974 <f_lseek+0x114>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	683a      	ldr	r2, [r7, #0]
 800e978:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 8172 	beq.w	800ec66 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	3b01      	subs	r3, #1
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f7fe fb6a 	bl	800d062 <clmt_clust>
 800e98e:	4602      	mov	r2, r0
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	4619      	mov	r1, r3
 800e99c:	4610      	mov	r0, r2
 800e99e:	f7fe f8b3 	bl	800cb08 <clust2sect>
 800e9a2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d104      	bne.n	800e9b4 <f_lseek+0x154>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2202      	movs	r2, #2
 800e9ae:	755a      	strb	r2, [r3, #21]
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	e15a      	b.n	800ec6a <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	0a5b      	lsrs	r3, r3, #9
 800e9ba:	68ba      	ldr	r2, [r7, #8]
 800e9bc:	8952      	ldrh	r2, [r2, #10]
 800e9be:	3a01      	subs	r2, #1
 800e9c0:	4013      	ands	r3, r2
 800e9c2:	69ba      	ldr	r2, [r7, #24]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f000 8148 	beq.w	800ec66 <f_lseek+0x406>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a1b      	ldr	r3, [r3, #32]
 800e9da:	69ba      	ldr	r2, [r7, #24]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	f000 8142 	beq.w	800ec66 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	7d1b      	ldrb	r3, [r3, #20]
 800e9e6:	b25b      	sxtb	r3, r3
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	da18      	bge.n	800ea1e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	7858      	ldrb	r0, [r3, #1]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a1a      	ldr	r2, [r3, #32]
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	f7fd fcfa 	bl	800c3f4 <disk_write>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d004      	beq.n	800ea10 <f_lseek+0x1b0>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	755a      	strb	r2, [r3, #21]
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	e12c      	b.n	800ec6a <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	7d1b      	ldrb	r3, [r3, #20]
 800ea14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea18:	b2da      	uxtb	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	7858      	ldrb	r0, [r3, #1]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea28:	2301      	movs	r3, #1
 800ea2a:	69ba      	ldr	r2, [r7, #24]
 800ea2c:	f7fd fcc2 	bl	800c3b4 <disk_read>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d004      	beq.n	800ea40 <f_lseek+0x1e0>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	755a      	strb	r2, [r3, #21]
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	e114      	b.n	800ec6a <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	69ba      	ldr	r2, [r7, #24]
 800ea44:	621a      	str	r2, [r3, #32]
 800ea46:	e10e      	b.n	800ec66 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	683a      	ldr	r2, [r7, #0]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d908      	bls.n	800ea64 <f_lseek+0x204>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	7d1b      	ldrb	r3, [r3, #20]
 800ea56:	f003 0302 	and.w	r3, r3, #2
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d102      	bne.n	800ea64 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	699b      	ldr	r3, [r3, #24]
 800ea68:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea72:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	f000 80a7 	beq.w	800ebca <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	895b      	ldrh	r3, [r3, #10]
 800ea80:	025b      	lsls	r3, r3, #9
 800ea82:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d01b      	beq.n	800eac2 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	1e5a      	subs	r2, r3, #1
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	fbb2 f2f3 	udiv	r2, r2, r3
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	1e59      	subs	r1, r3, #1
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d30f      	bcc.n	800eac2 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800eaa2:	6a3b      	ldr	r3, [r7, #32]
 800eaa4:	1e5a      	subs	r2, r3, #1
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	425b      	negs	r3, r3
 800eaaa:	401a      	ands	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	699b      	ldr	r3, [r3, #24]
 800eab4:	683a      	ldr	r2, [r7, #0]
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	69db      	ldr	r3, [r3, #28]
 800eabe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eac0:	e022      	b.n	800eb08 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800eac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d119      	bne.n	800eb02 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2100      	movs	r1, #0
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fe fa2d 	bl	800cf32 <create_chain>
 800ead8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d104      	bne.n	800eaea <f_lseek+0x28a>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2202      	movs	r2, #2
 800eae4:	755a      	strb	r2, [r3, #21]
 800eae6:	2302      	movs	r3, #2
 800eae8:	e0bf      	b.n	800ec6a <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eaea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf0:	d104      	bne.n	800eafc <f_lseek+0x29c>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	755a      	strb	r2, [r3, #21]
 800eaf8:	2301      	movs	r3, #1
 800eafa:	e0b6      	b.n	800ec6a <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb00:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb06:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800eb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d05d      	beq.n	800ebca <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800eb0e:	e03a      	b.n	800eb86 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800eb10:	683a      	ldr	r2, [r7, #0]
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	699a      	ldr	r2, [r3, #24]
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	441a      	add	r2, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	7d1b      	ldrb	r3, [r3, #20]
 800eb28:	f003 0302 	and.w	r3, r3, #2
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00b      	beq.n	800eb48 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fe f9fc 	bl	800cf32 <create_chain>
 800eb3a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d108      	bne.n	800eb54 <f_lseek+0x2f4>
							ofs = 0; break;
 800eb42:	2300      	movs	r3, #0
 800eb44:	603b      	str	r3, [r7, #0]
 800eb46:	e022      	b.n	800eb8e <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fd fffa 	bl	800cb46 <get_fat>
 800eb52:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5a:	d104      	bne.n	800eb66 <f_lseek+0x306>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	755a      	strb	r2, [r3, #21]
 800eb62:	2301      	movs	r3, #1
 800eb64:	e081      	b.n	800ec6a <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800eb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d904      	bls.n	800eb76 <f_lseek+0x316>
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	695b      	ldr	r3, [r3, #20]
 800eb70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d304      	bcc.n	800eb80 <f_lseek+0x320>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2202      	movs	r2, #2
 800eb7a:	755a      	strb	r2, [r3, #21]
 800eb7c:	2302      	movs	r3, #2
 800eb7e:	e074      	b.n	800ec6a <f_lseek+0x40a>
					fp->clust = clst;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb84:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800eb86:	683a      	ldr	r2, [r7, #0]
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d8c0      	bhi.n	800eb10 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	699a      	ldr	r2, [r3, #24]
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	441a      	add	r2, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d012      	beq.n	800ebca <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fd ffad 	bl	800cb08 <clust2sect>
 800ebae:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ebb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d104      	bne.n	800ebc0 <f_lseek+0x360>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2202      	movs	r2, #2
 800ebba:	755a      	strb	r2, [r3, #21]
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	e054      	b.n	800ec6a <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	0a5b      	lsrs	r3, r3, #9
 800ebc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebc6:	4413      	add	r3, r2
 800ebc8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	699a      	ldr	r2, [r3, #24]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d90a      	bls.n	800ebec <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	699a      	ldr	r2, [r3, #24]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7d1b      	ldrb	r3, [r3, #20]
 800ebe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	699b      	ldr	r3, [r3, #24]
 800ebf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d036      	beq.n	800ec66 <f_lseek+0x406>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a1b      	ldr	r3, [r3, #32]
 800ebfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d031      	beq.n	800ec66 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	7d1b      	ldrb	r3, [r3, #20]
 800ec06:	b25b      	sxtb	r3, r3
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	da18      	bge.n	800ec3e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	7858      	ldrb	r0, [r3, #1]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6a1a      	ldr	r2, [r3, #32]
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	f7fd fbea 	bl	800c3f4 <disk_write>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d004      	beq.n	800ec30 <f_lseek+0x3d0>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2201      	movs	r2, #1
 800ec2a:	755a      	strb	r2, [r3, #21]
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e01c      	b.n	800ec6a <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	7d1b      	ldrb	r3, [r3, #20]
 800ec34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	7858      	ldrb	r0, [r3, #1]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec48:	2301      	movs	r3, #1
 800ec4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec4c:	f7fd fbb2 	bl	800c3b4 <disk_read>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d004      	beq.n	800ec60 <f_lseek+0x400>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	755a      	strb	r2, [r3, #21]
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e004      	b.n	800ec6a <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec64:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ec66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3740      	adds	r7, #64	@ 0x40
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
	...

0800ec74 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800ec74:	b590      	push	{r4, r7, lr}
 800ec76:	b09d      	sub	sp, #116	@ 0x74
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	607a      	str	r2, [r7, #4]
 800ec7e:	603b      	str	r3, [r7, #0]
 800ec80:	460b      	mov	r3, r1
 800ec82:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800ec84:	2301      	movs	r3, #1
 800ec86:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800ec88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec8c:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800ec8e:	f107 030c 	add.w	r3, r7, #12
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe fd6b 	bl	800d76e <get_ldnumber>
 800ec98:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	da02      	bge.n	800eca6 <f_mkfs+0x32>
 800eca0:	230b      	movs	r3, #11
 800eca2:	f000 bc0d 	b.w	800f4c0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800eca6:	4a94      	ldr	r2, [pc, #592]	@ (800eef8 <f_mkfs+0x284>)
 800eca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d005      	beq.n	800ecbe <f_mkfs+0x4a>
 800ecb2:	4a91      	ldr	r2, [pc, #580]	@ (800eef8 <f_mkfs+0x284>)
 800ecb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800ecbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecc0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800ecca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fd fb4a 	bl	800c368 <disk_initialize>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800ecda:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ecde:	f003 0301 	and.w	r3, r3, #1
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d001      	beq.n	800ecea <f_mkfs+0x76>
 800ece6:	2303      	movs	r3, #3
 800ece8:	e3ea      	b.n	800f4c0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800ecea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ecee:	f003 0304 	and.w	r3, r3, #4
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d001      	beq.n	800ecfa <f_mkfs+0x86>
 800ecf6:	230a      	movs	r3, #10
 800ecf8:	e3e2      	b.n	800f4c0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800ecfa:	f107 0214 	add.w	r2, r7, #20
 800ecfe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ed02:	2103      	movs	r1, #3
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fd fb95 	bl	800c434 <disk_ioctl>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10c      	bne.n	800ed2a <f_mkfs+0xb6>
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d009      	beq.n	800ed2a <f_mkfs+0xb6>
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed1c:	d805      	bhi.n	800ed2a <f_mkfs+0xb6>
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	1e5a      	subs	r2, r3, #1
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	4013      	ands	r3, r2
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <f_mkfs+0xba>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800ed2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed32:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d003      	beq.n	800ed42 <f_mkfs+0xce>
 800ed3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d309      	bcc.n	800ed56 <f_mkfs+0xe2>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed48:	d805      	bhi.n	800ed56 <f_mkfs+0xe2>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	1e5a      	subs	r2, r3, #1
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4013      	ands	r3, r2
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <f_mkfs+0xe6>
 800ed56:	2313      	movs	r3, #19
 800ed58:	e3b2      	b.n	800f4c0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800ed5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed62:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800ed68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ed6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ed6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed72:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800ed74:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ed76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed78:	fb02 f303 	mul.w	r3, r2, r3
 800ed7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800ed7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <f_mkfs+0x114>
 800ed84:	230e      	movs	r3, #14
 800ed86:	e39b      	b.n	800f4c0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800ed88:	f107 0210 	add.w	r2, r7, #16
 800ed8c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ed90:	2101      	movs	r1, #1
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fd fb4e 	bl	800c434 <disk_ioctl>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <f_mkfs+0x12e>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e38e      	b.n	800f4c0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800eda2:	7afb      	ldrb	r3, [r7, #11]
 800eda4:	f003 0308 	and.w	r3, r3, #8
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d001      	beq.n	800edb0 <f_mkfs+0x13c>
 800edac:	2300      	movs	r3, #0
 800edae:	e000      	b.n	800edb2 <f_mkfs+0x13e>
 800edb0:	233f      	movs	r3, #63	@ 0x3f
 800edb2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edb8:	429a      	cmp	r2, r3
 800edba:	d901      	bls.n	800edc0 <f_mkfs+0x14c>
 800edbc:	230e      	movs	r3, #14
 800edbe:	e37f      	b.n	800f4c0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800edc0:	693a      	ldr	r2, [r7, #16]
 800edc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	2b7f      	cmp	r3, #127	@ 0x7f
 800edcc:	d801      	bhi.n	800edd2 <f_mkfs+0x15e>
 800edce:	230e      	movs	r3, #14
 800edd0:	e376      	b.n	800f4c0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b80      	cmp	r3, #128	@ 0x80
 800edd6:	d901      	bls.n	800eddc <f_mkfs+0x168>
 800edd8:	2313      	movs	r3, #19
 800edda:	e371      	b.n	800f4c0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800eddc:	7afb      	ldrb	r3, [r7, #11]
 800edde:	f003 0302 	and.w	r3, r3, #2
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00d      	beq.n	800ee02 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800ede6:	7afb      	ldrb	r3, [r7, #11]
 800ede8:	f003 0307 	and.w	r3, r3, #7
 800edec:	2b02      	cmp	r3, #2
 800edee:	d004      	beq.n	800edfa <f_mkfs+0x186>
 800edf0:	7afb      	ldrb	r3, [r7, #11]
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d103      	bne.n	800ee02 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800edfa:	2303      	movs	r3, #3
 800edfc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ee00:	e009      	b.n	800ee16 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800ee02:	7afb      	ldrb	r3, [r7, #11]
 800ee04:	f003 0301 	and.w	r3, r3, #1
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d101      	bne.n	800ee10 <f_mkfs+0x19c>
 800ee0c:	2313      	movs	r3, #19
 800ee0e:	e357      	b.n	800f4c0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800ee10:	2302      	movs	r3, #2
 800ee12:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800ee1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ee1e:	2b03      	cmp	r3, #3
 800ee20:	d13c      	bne.n	800ee9c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800ee22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d11b      	bne.n	800ee60 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	0c5b      	lsrs	r3, r3, #17
 800ee2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800ee2e:	2300      	movs	r3, #0
 800ee30:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee32:	2301      	movs	r3, #1
 800ee34:	653b      	str	r3, [r7, #80]	@ 0x50
 800ee36:	e005      	b.n	800ee44 <f_mkfs+0x1d0>
 800ee38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee40:	005b      	lsls	r3, r3, #1
 800ee42:	653b      	str	r3, [r7, #80]	@ 0x50
 800ee44:	4a2d      	ldr	r2, [pc, #180]	@ (800eefc <f_mkfs+0x288>)
 800ee46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d007      	beq.n	800ee60 <f_mkfs+0x1ec>
 800ee50:	4a2a      	ldr	r2, [pc, #168]	@ (800eefc <f_mkfs+0x288>)
 800ee52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee58:	461a      	mov	r2, r3
 800ee5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d2eb      	bcs.n	800ee38 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800ee60:	693a      	ldr	r2, [r7, #16]
 800ee62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee68:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800ee6a:	6a3b      	ldr	r3, [r7, #32]
 800ee6c:	3302      	adds	r3, #2
 800ee6e:	009a      	lsls	r2, r3, #2
 800ee70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ee72:	4413      	add	r3, r2
 800ee74:	1e5a      	subs	r2, r3, #1
 800ee76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ee78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee7c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800ee7e:	2320      	movs	r3, #32
 800ee80:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800ee82:	2300      	movs	r3, #0
 800ee84:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800ee86:	6a3b      	ldr	r3, [r7, #32]
 800ee88:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d903      	bls.n	800ee98 <f_mkfs+0x224>
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	4a1b      	ldr	r2, [pc, #108]	@ (800ef00 <f_mkfs+0x28c>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d952      	bls.n	800ef3e <f_mkfs+0x2ca>
 800ee98:	230e      	movs	r3, #14
 800ee9a:	e311      	b.n	800f4c0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800ee9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d11b      	bne.n	800eeda <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	0b1b      	lsrs	r3, r3, #12
 800eea6:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800eea8:	2300      	movs	r3, #0
 800eeaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eeac:	2301      	movs	r3, #1
 800eeae:	653b      	str	r3, [r7, #80]	@ 0x50
 800eeb0:	e005      	b.n	800eebe <f_mkfs+0x24a>
 800eeb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eeb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eeba:	005b      	lsls	r3, r3, #1
 800eebc:	653b      	str	r3, [r7, #80]	@ 0x50
 800eebe:	4a11      	ldr	r2, [pc, #68]	@ (800ef04 <f_mkfs+0x290>)
 800eec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d007      	beq.n	800eeda <f_mkfs+0x266>
 800eeca:	4a0e      	ldr	r2, [pc, #56]	@ (800ef04 <f_mkfs+0x290>)
 800eecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eed2:	461a      	mov	r2, r3
 800eed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d2eb      	bcs.n	800eeb2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800eeda:	693a      	ldr	r2, [r7, #16]
 800eedc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eede:	fbb2 f3f3 	udiv	r3, r2, r3
 800eee2:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d90c      	bls.n	800ef08 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	3302      	adds	r3, #2
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eef6:	e012      	b.n	800ef1e <f_mkfs+0x2aa>
 800eef8:	20035d38 	.word	0x20035d38
 800eefc:	0801805c 	.word	0x0801805c
 800ef00:	0ffffff5 	.word	0x0ffffff5
 800ef04:	0801806c 	.word	0x0801806c
				} else {
					fmt = FS_FAT12;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800ef0e:	6a3a      	ldr	r2, [r7, #32]
 800ef10:	4613      	mov	r3, r2
 800ef12:	005b      	lsls	r3, r3, #1
 800ef14:	4413      	add	r3, r2
 800ef16:	3301      	adds	r3, #1
 800ef18:	085b      	lsrs	r3, r3, #1
 800ef1a:	3303      	adds	r3, #3
 800ef1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ef1e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ef20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef22:	4413      	add	r3, r2
 800ef24:	1e5a      	subs	r2, r3, #1
 800ef26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ef28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef2c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800ef2e:	2301      	movs	r3, #1
 800ef30:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ef32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef34:	015a      	lsls	r2, r3, #5
 800ef36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ef38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ef3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef42:	4413      	add	r3, r2
 800ef44:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ef46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef4a:	fb03 f202 	mul.w	r2, r3, r2
 800ef4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef50:	4413      	add	r3, r2
 800ef52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef54:	4413      	add	r3, r2
 800ef56:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ef58:	697a      	ldr	r2, [r7, #20]
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	1e5a      	subs	r2, r3, #1
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	425b      	negs	r3, r3
 800ef64:	401a      	ands	r2, r3
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800ef6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ef70:	2b03      	cmp	r3, #3
 800ef72:	d108      	bne.n	800ef86 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ef74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ef76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef78:	4413      	add	r3, r2
 800ef7a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ef7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ef7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef80:	4413      	add	r3, r2
 800ef82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef84:	e006      	b.n	800ef94 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ef86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ef88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ef90:	4413      	add	r3, r2
 800ef92:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800ef94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef96:	011a      	lsls	r2, r3, #4
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	441a      	add	r2, r3
 800ef9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef9e:	1ad2      	subs	r2, r2, r3
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d901      	bls.n	800efaa <f_mkfs+0x336>
 800efa6:	230e      	movs	r3, #14
 800efa8:	e28a      	b.n	800f4c0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800efaa:	693a      	ldr	r2, [r7, #16]
 800efac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efae:	1ad2      	subs	r2, r2, r3
 800efb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800efb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800efb4:	fb01 f303 	mul.w	r3, r1, r3
 800efb8:	1ad2      	subs	r2, r2, r3
 800efba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efbc:	1ad2      	subs	r2, r2, r3
 800efbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800efc4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800efc6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800efca:	2b03      	cmp	r3, #3
 800efcc:	d10f      	bne.n	800efee <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800efce:	6a3b      	ldr	r3, [r7, #32]
 800efd0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d80a      	bhi.n	800efee <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d105      	bne.n	800efea <f_mkfs+0x376>
 800efde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efe0:	085b      	lsrs	r3, r3, #1
 800efe2:	607b      	str	r3, [r7, #4]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d144      	bne.n	800f074 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800efea:	230e      	movs	r3, #14
 800efec:	e268      	b.n	800f4c0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800efee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800eff2:	2b02      	cmp	r3, #2
 800eff4:	d133      	bne.n	800f05e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800effc:	4293      	cmp	r3, r2
 800effe:	d91e      	bls.n	800f03e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d107      	bne.n	800f016 <f_mkfs+0x3a2>
 800f006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f008:	005b      	lsls	r3, r3, #1
 800f00a:	2b40      	cmp	r3, #64	@ 0x40
 800f00c:	d803      	bhi.n	800f016 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f00e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f010:	005b      	lsls	r3, r3, #1
 800f012:	607b      	str	r3, [r7, #4]
 800f014:	e033      	b.n	800f07e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f016:	7afb      	ldrb	r3, [r7, #11]
 800f018:	f003 0302 	and.w	r3, r3, #2
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d003      	beq.n	800f028 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f020:	2303      	movs	r3, #3
 800f022:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f026:	e02a      	b.n	800f07e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d105      	bne.n	800f03a <f_mkfs+0x3c6>
 800f02e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f030:	005b      	lsls	r3, r3, #1
 800f032:	607b      	str	r3, [r7, #4]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b80      	cmp	r3, #128	@ 0x80
 800f038:	d91e      	bls.n	800f078 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f03a:	230e      	movs	r3, #14
 800f03c:	e240      	b.n	800f4c0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f03e:	6a3b      	ldr	r3, [r7, #32]
 800f040:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f044:	4293      	cmp	r3, r2
 800f046:	d80a      	bhi.n	800f05e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d105      	bne.n	800f05a <f_mkfs+0x3e6>
 800f04e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f050:	005b      	lsls	r3, r3, #1
 800f052:	607b      	str	r3, [r7, #4]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2b80      	cmp	r3, #128	@ 0x80
 800f058:	d910      	bls.n	800f07c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f05a:	230e      	movs	r3, #14
 800f05c:	e230      	b.n	800f4c0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f05e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f062:	2b01      	cmp	r3, #1
 800f064:	d10c      	bne.n	800f080 <f_mkfs+0x40c>
 800f066:	6a3b      	ldr	r3, [r7, #32]
 800f068:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d907      	bls.n	800f080 <f_mkfs+0x40c>
 800f070:	230e      	movs	r3, #14
 800f072:	e225      	b.n	800f4c0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f074:	bf00      	nop
 800f076:	e6ce      	b.n	800ee16 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f078:	bf00      	nop
 800f07a:	e6cc      	b.n	800ee16 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f07c:	bf00      	nop
			pau = au;
 800f07e:	e6ca      	b.n	800ee16 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f080:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f082:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f084:	461a      	mov	r2, r3
 800f086:	2100      	movs	r1, #0
 800f088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f08a:	f7fd fa94 	bl	800c5b6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f08e:	220b      	movs	r2, #11
 800f090:	49b2      	ldr	r1, [pc, #712]	@ (800f35c <f_mkfs+0x6e8>)
 800f092:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f094:	f7fd fa6e 	bl	800c574 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f09a:	330b      	adds	r3, #11
 800f09c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f09e:	4611      	mov	r1, r2
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fd fa20 	bl	800c4e6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a8:	330d      	adds	r3, #13
 800f0aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f0ac:	b2d2      	uxtb	r2, r2
 800f0ae:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b2:	330e      	adds	r3, #14
 800f0b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f0b6:	b292      	uxth	r2, r2
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fd fa13 	bl	800c4e6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c2:	3310      	adds	r3, #16
 800f0c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0c6:	b2d2      	uxtb	r2, r2
 800f0c8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0cc:	f103 0211 	add.w	r2, r3, #17
 800f0d0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f0d4:	2b03      	cmp	r3, #3
 800f0d6:	d002      	beq.n	800f0de <f_mkfs+0x46a>
 800f0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	e000      	b.n	800f0e0 <f_mkfs+0x46c>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	4610      	mov	r0, r2
 800f0e4:	f7fd f9ff 	bl	800c4e6 <st_word>
		if (sz_vol < 0x10000) {
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0ee:	d208      	bcs.n	800f102 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f2:	3313      	adds	r3, #19
 800f0f4:	693a      	ldr	r2, [r7, #16]
 800f0f6:	b292      	uxth	r2, r2
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fd f9f3 	bl	800c4e6 <st_word>
 800f100:	e006      	b.n	800f110 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f104:	3320      	adds	r3, #32
 800f106:	693a      	ldr	r2, [r7, #16]
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fd fa06 	bl	800c51c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f112:	3315      	adds	r3, #21
 800f114:	22f8      	movs	r2, #248	@ 0xf8
 800f116:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f11a:	3318      	adds	r3, #24
 800f11c:	213f      	movs	r1, #63	@ 0x3f
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fd f9e1 	bl	800c4e6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f126:	331a      	adds	r3, #26
 800f128:	21ff      	movs	r1, #255	@ 0xff
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fd f9db 	bl	800c4e6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f132:	331c      	adds	r3, #28
 800f134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f136:	4618      	mov	r0, r3
 800f138:	f7fd f9f0 	bl	800c51c <st_dword>
		if (fmt == FS_FAT32) {
 800f13c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f140:	2b03      	cmp	r3, #3
 800f142:	d131      	bne.n	800f1a8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f146:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800f14a:	f7fc feb1 	bl	800beb0 <get_fattime>
 800f14e:	4603      	mov	r3, r0
 800f150:	4619      	mov	r1, r3
 800f152:	4620      	mov	r0, r4
 800f154:	f7fd f9e2 	bl	800c51c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15a:	3324      	adds	r3, #36	@ 0x24
 800f15c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fd f9dc 	bl	800c51c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f166:	332c      	adds	r3, #44	@ 0x2c
 800f168:	2102      	movs	r1, #2
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fd f9d6 	bl	800c51c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f172:	3330      	adds	r3, #48	@ 0x30
 800f174:	2101      	movs	r1, #1
 800f176:	4618      	mov	r0, r3
 800f178:	f7fd f9b5 	bl	800c4e6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f17e:	3332      	adds	r3, #50	@ 0x32
 800f180:	2106      	movs	r1, #6
 800f182:	4618      	mov	r0, r3
 800f184:	f7fd f9af 	bl	800c4e6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f18a:	3340      	adds	r3, #64	@ 0x40
 800f18c:	2280      	movs	r2, #128	@ 0x80
 800f18e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f192:	3342      	adds	r3, #66	@ 0x42
 800f194:	2229      	movs	r2, #41	@ 0x29
 800f196:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19a:	3347      	adds	r3, #71	@ 0x47
 800f19c:	2213      	movs	r2, #19
 800f19e:	4970      	ldr	r1, [pc, #448]	@ (800f360 <f_mkfs+0x6ec>)
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fd f9e7 	bl	800c574 <mem_cpy>
 800f1a6:	e020      	b.n	800f1ea <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1aa:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800f1ae:	f7fc fe7f 	bl	800beb0 <get_fattime>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f7fd f9b0 	bl	800c51c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1be:	3316      	adds	r3, #22
 800f1c0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f1c2:	b292      	uxth	r2, r2
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fd f98d 	bl	800c4e6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ce:	3324      	adds	r3, #36	@ 0x24
 800f1d0:	2280      	movs	r2, #128	@ 0x80
 800f1d2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d6:	3326      	adds	r3, #38	@ 0x26
 800f1d8:	2229      	movs	r2, #41	@ 0x29
 800f1da:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1de:	332b      	adds	r3, #43	@ 0x2b
 800f1e0:	2213      	movs	r2, #19
 800f1e2:	4960      	ldr	r1, [pc, #384]	@ (800f364 <f_mkfs+0x6f0>)
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7fd f9c5 	bl	800c574 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f1f0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fd f976 	bl	800c4e6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f1fa:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f1fe:	2301      	movs	r3, #1
 800f200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f202:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f204:	f7fd f8f6 	bl	800c3f4 <disk_write>
 800f208:	4603      	mov	r3, r0
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d001      	beq.n	800f212 <f_mkfs+0x59e>
 800f20e:	2301      	movs	r3, #1
 800f210:	e156      	b.n	800f4c0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f212:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f216:	2b03      	cmp	r3, #3
 800f218:	d140      	bne.n	800f29c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21c:	1d9a      	adds	r2, r3, #6
 800f21e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f222:	2301      	movs	r3, #1
 800f224:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f226:	f7fd f8e5 	bl	800c3f4 <disk_write>
			mem_set(buf, 0, ss);
 800f22a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f22c:	461a      	mov	r2, r3
 800f22e:	2100      	movs	r1, #0
 800f230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f232:	f7fd f9c0 	bl	800c5b6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f236:	494c      	ldr	r1, [pc, #304]	@ (800f368 <f_mkfs+0x6f4>)
 800f238:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f23a:	f7fd f96f 	bl	800c51c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f240:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f244:	4949      	ldr	r1, [pc, #292]	@ (800f36c <f_mkfs+0x6f8>)
 800f246:	4618      	mov	r0, r3
 800f248:	f7fd f968 	bl	800c51c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	3b01      	subs	r3, #1
 800f256:	4619      	mov	r1, r3
 800f258:	4610      	mov	r0, r2
 800f25a:	f7fd f95f 	bl	800c51c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f260:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f264:	2102      	movs	r1, #2
 800f266:	4618      	mov	r0, r3
 800f268:	f7fd f958 	bl	800c51c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f26e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f272:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f276:	4618      	mov	r0, r3
 800f278:	f7fd f935 	bl	800c4e6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f27e:	1dda      	adds	r2, r3, #7
 800f280:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f284:	2301      	movs	r3, #1
 800f286:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f288:	f7fd f8b4 	bl	800c3f4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f28e:	1c5a      	adds	r2, r3, #1
 800f290:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f294:	2301      	movs	r3, #1
 800f296:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f298:	f7fd f8ac 	bl	800c3f4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f29c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f29e:	2100      	movs	r1, #0
 800f2a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2a2:	f7fd f988 	bl	800c5b6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f2a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f2a8:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f2ae:	e04b      	b.n	800f348 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f2b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f2b4:	2b03      	cmp	r3, #3
 800f2b6:	d113      	bne.n	800f2e0 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f2b8:	f06f 0107 	mvn.w	r1, #7
 800f2bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2be:	f7fd f92d 	bl	800c51c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2c4:	3304      	adds	r3, #4
 800f2c6:	f04f 31ff 	mov.w	r1, #4294967295
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fd f926 	bl	800c51c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2d2:	3308      	adds	r3, #8
 800f2d4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7fd f91f 	bl	800c51c <st_dword>
 800f2de:	e00b      	b.n	800f2f8 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f2e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d101      	bne.n	800f2ec <f_mkfs+0x678>
 800f2e8:	4b21      	ldr	r3, [pc, #132]	@ (800f370 <f_mkfs+0x6fc>)
 800f2ea:	e001      	b.n	800f2f0 <f_mkfs+0x67c>
 800f2ec:	f06f 0307 	mvn.w	r3, #7
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2f4:	f7fd f912 	bl	800c51c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f2f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f2fa:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f2fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f300:	4293      	cmp	r3, r2
 800f302:	bf28      	it	cs
 800f304:	4613      	movcs	r3, r2
 800f306:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f308:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f30c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f30e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f312:	f7fd f86f 	bl	800c3f4 <disk_write>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d001      	beq.n	800f320 <f_mkfs+0x6ac>
 800f31c:	2301      	movs	r3, #1
 800f31e:	e0cf      	b.n	800f4c0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f320:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f322:	461a      	mov	r2, r3
 800f324:	2100      	movs	r1, #0
 800f326:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f328:	f7fd f945 	bl	800c5b6 <mem_set>
				sect += n; nsect -= n;
 800f32c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f32e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f330:	4413      	add	r3, r2
 800f332:	667b      	str	r3, [r7, #100]	@ 0x64
 800f334:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800f33c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d1dc      	bne.n	800f2fc <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f344:	3301      	adds	r3, #1
 800f346:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f348:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f34a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d3af      	bcc.n	800f2b0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f350:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f354:	2b03      	cmp	r3, #3
 800f356:	d10d      	bne.n	800f374 <f_mkfs+0x700>
 800f358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f35a:	e00c      	b.n	800f376 <f_mkfs+0x702>
 800f35c:	08017f44 	.word	0x08017f44
 800f360:	08017f50 	.word	0x08017f50
 800f364:	08017f64 	.word	0x08017f64
 800f368:	41615252 	.word	0x41615252
 800f36c:	61417272 	.word	0x61417272
 800f370:	00fffff8 	.word	0x00fffff8
 800f374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f376:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f378:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f37c:	4293      	cmp	r3, r2
 800f37e:	bf28      	it	cs
 800f380:	4613      	movcs	r3, r2
 800f382:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f384:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f388:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f38a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f38c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f38e:	f7fd f831 	bl	800c3f4 <disk_write>
 800f392:	4603      	mov	r3, r0
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <f_mkfs+0x728>
 800f398:	2301      	movs	r3, #1
 800f39a:	e091      	b.n	800f4c0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800f39c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f39e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f3a0:	4413      	add	r3, r2
 800f3a2:	667b      	str	r3, [r7, #100]	@ 0x64
 800f3a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f3a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800f3ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1e2      	bne.n	800f378 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f3b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f3b6:	2b03      	cmp	r3, #3
 800f3b8:	d103      	bne.n	800f3c2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f3ba:	230c      	movs	r3, #12
 800f3bc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800f3c0:	e010      	b.n	800f3e4 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f3c8:	d303      	bcc.n	800f3d2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f3ca:	2306      	movs	r3, #6
 800f3cc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800f3d0:	e008      	b.n	800f3e4 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f3d2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f3d6:	2b02      	cmp	r3, #2
 800f3d8:	d101      	bne.n	800f3de <f_mkfs+0x76a>
 800f3da:	2304      	movs	r3, #4
 800f3dc:	e000      	b.n	800f3e0 <f_mkfs+0x76c>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f3e4:	7afb      	ldrb	r3, [r7, #11]
 800f3e6:	f003 0308 	and.w	r3, r3, #8
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d15b      	bne.n	800f4a6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f3ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	2100      	movs	r1, #0
 800f3f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f3f6:	f7fd f8de 	bl	800c5b6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f400:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f404:	4618      	mov	r0, r3
 800f406:	f7fd f86e 	bl	800c4e6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f40c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f410:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	2200      	movs	r2, #0
 800f416:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	3301      	adds	r3, #1
 800f41c:	2201      	movs	r2, #1
 800f41e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	3302      	adds	r3, #2
 800f424:	2201      	movs	r2, #1
 800f426:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	3303      	adds	r3, #3
 800f42c:	2200      	movs	r2, #0
 800f42e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	3304      	adds	r3, #4
 800f434:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800f438:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f43a:	693a      	ldr	r2, [r7, #16]
 800f43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43e:	441a      	add	r2, r3
 800f440:	4b21      	ldr	r3, [pc, #132]	@ (800f4c8 <f_mkfs+0x854>)
 800f442:	fba3 1302 	umull	r1, r3, r3, r2
 800f446:	1ad2      	subs	r2, r2, r3
 800f448:	0852      	lsrs	r2, r2, #1
 800f44a:	4413      	add	r3, r2
 800f44c:	0b5b      	lsrs	r3, r3, #13
 800f44e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800f450:	69bb      	ldr	r3, [r7, #24]
 800f452:	3305      	adds	r3, #5
 800f454:	22fe      	movs	r2, #254	@ 0xfe
 800f456:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f45a:	089b      	lsrs	r3, r3, #2
 800f45c:	b2da      	uxtb	r2, r3
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	3306      	adds	r3, #6
 800f462:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800f466:	b2d2      	uxtb	r2, r2
 800f468:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	3307      	adds	r3, #7
 800f46e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f470:	b2d2      	uxtb	r2, r2
 800f472:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	3308      	adds	r3, #8
 800f478:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fd f84e 	bl	800c51c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	330c      	adds	r3, #12
 800f484:	693a      	ldr	r2, [r7, #16]
 800f486:	4611      	mov	r1, r2
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fd f847 	bl	800c51c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f48e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800f492:	2301      	movs	r3, #1
 800f494:	2200      	movs	r2, #0
 800f496:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f498:	f7fc ffac 	bl	800c3f4 <disk_write>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d001      	beq.n	800f4a6 <f_mkfs+0x832>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e00c      	b.n	800f4c0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800f4a6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fc ffc0 	bl	800c434 <disk_ioctl>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <f_mkfs+0x84a>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e000      	b.n	800f4c0 <f_mkfs+0x84c>

	return FR_OK;
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3774      	adds	r7, #116	@ 0x74
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd90      	pop	{r4, r7, pc}
 800f4c8:	0515565b 	.word	0x0515565b

0800f4cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b087      	sub	sp, #28
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	4613      	mov	r3, r2
 800f4d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f4e2:	4b1f      	ldr	r3, [pc, #124]	@ (800f560 <FATFS_LinkDriverEx+0x94>)
 800f4e4:	7a5b      	ldrb	r3, [r3, #9]
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d131      	bne.n	800f550 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f4ec:	4b1c      	ldr	r3, [pc, #112]	@ (800f560 <FATFS_LinkDriverEx+0x94>)
 800f4ee:	7a5b      	ldrb	r3, [r3, #9]
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	4b1a      	ldr	r3, [pc, #104]	@ (800f560 <FATFS_LinkDriverEx+0x94>)
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f4fa:	4b19      	ldr	r3, [pc, #100]	@ (800f560 <FATFS_LinkDriverEx+0x94>)
 800f4fc:	7a5b      	ldrb	r3, [r3, #9]
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	4a17      	ldr	r2, [pc, #92]	@ (800f560 <FATFS_LinkDriverEx+0x94>)
 800f502:	009b      	lsls	r3, r3, #2
 800f504:	4413      	add	r3, r2
 800f506:	68fa      	ldr	r2, [r7, #12]
 800f508:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f50a:	4b15      	ldr	r3, [pc, #84]	@ (800f560 <FATFS_LinkDriverEx+0x94>)
 800f50c:	7a5b      	ldrb	r3, [r3, #9]
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	461a      	mov	r2, r3
 800f512:	4b13      	ldr	r3, [pc, #76]	@ (800f560 <FATFS_LinkDriverEx+0x94>)
 800f514:	4413      	add	r3, r2
 800f516:	79fa      	ldrb	r2, [r7, #7]
 800f518:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f51a:	4b11      	ldr	r3, [pc, #68]	@ (800f560 <FATFS_LinkDriverEx+0x94>)
 800f51c:	7a5b      	ldrb	r3, [r3, #9]
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	1c5a      	adds	r2, r3, #1
 800f522:	b2d1      	uxtb	r1, r2
 800f524:	4a0e      	ldr	r2, [pc, #56]	@ (800f560 <FATFS_LinkDriverEx+0x94>)
 800f526:	7251      	strb	r1, [r2, #9]
 800f528:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f52a:	7dbb      	ldrb	r3, [r7, #22]
 800f52c:	3330      	adds	r3, #48	@ 0x30
 800f52e:	b2da      	uxtb	r2, r3
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	3301      	adds	r3, #1
 800f538:	223a      	movs	r2, #58	@ 0x3a
 800f53a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	3302      	adds	r3, #2
 800f540:	222f      	movs	r2, #47	@ 0x2f
 800f542:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	3303      	adds	r3, #3
 800f548:	2200      	movs	r2, #0
 800f54a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f54c:	2300      	movs	r3, #0
 800f54e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f550:	7dfb      	ldrb	r3, [r7, #23]
}
 800f552:	4618      	mov	r0, r3
 800f554:	371c      	adds	r7, #28
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	20035d60 	.word	0x20035d60

0800f564 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f56e:	2200      	movs	r2, #0
 800f570:	6839      	ldr	r1, [r7, #0]
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7ff ffaa 	bl	800f4cc <FATFS_LinkDriverEx>
 800f578:	4603      	mov	r3, r0
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
	...

0800f584 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	2101      	movs	r1, #1
 800f592:	4831      	ldr	r0, [pc, #196]	@ (800f658 <network_configure_activations+0xd4>)
 800f594:	f001 fbe8 	bl	8010d68 <ai_platform_get_activations_map>
 800f598:	4603      	mov	r3, r0
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d051      	beq.n	800f642 <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f59e:	4b2e      	ldr	r3, [pc, #184]	@ (800f658 <network_configure_activations+0xd4>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4a2e      	ldr	r2, [pc, #184]	@ (800f65c <network_configure_activations+0xd8>)
 800f5a4:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f5a6:	4b2c      	ldr	r3, [pc, #176]	@ (800f658 <network_configure_activations+0xd4>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a2c      	ldr	r2, [pc, #176]	@ (800f65c <network_configure_activations+0xd8>)
 800f5ac:	60d3      	str	r3, [r2, #12]
    resize_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 800f5ae:	4b2a      	ldr	r3, [pc, #168]	@ (800f658 <network_configure_activations+0xd4>)
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800f5b6:	4413      	add	r3, r2
 800f5b8:	4a29      	ldr	r2, [pc, #164]	@ (800f660 <network_configure_activations+0xdc>)
 800f5ba:	6093      	str	r3, [r2, #8]
    resize_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 800f5bc:	4b26      	ldr	r3, [pc, #152]	@ (800f658 <network_configure_activations+0xd4>)
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800f5c4:	4413      	add	r3, r2
 800f5c6:	4a26      	ldr	r2, [pc, #152]	@ (800f660 <network_configure_activations+0xdc>)
 800f5c8:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f5ca:	4b23      	ldr	r3, [pc, #140]	@ (800f658 <network_configure_activations+0xd4>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4a25      	ldr	r2, [pc, #148]	@ (800f664 <network_configure_activations+0xe0>)
 800f5d0:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f5d2:	4b21      	ldr	r3, [pc, #132]	@ (800f658 <network_configure_activations+0xd4>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4a23      	ldr	r2, [pc, #140]	@ (800f664 <network_configure_activations+0xe0>)
 800f5d8:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 800f5da:	4b1f      	ldr	r3, [pc, #124]	@ (800f658 <network_configure_activations+0xd4>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	3324      	adds	r3, #36	@ 0x24
 800f5e0:	4a21      	ldr	r2, [pc, #132]	@ (800f668 <network_configure_activations+0xe4>)
 800f5e2:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 800f5e4:	4b1c      	ldr	r3, [pc, #112]	@ (800f658 <network_configure_activations+0xd4>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3324      	adds	r3, #36	@ 0x24
 800f5ea:	4a1f      	ldr	r2, [pc, #124]	@ (800f668 <network_configure_activations+0xe4>)
 800f5ec:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 800f5ee:	4b1a      	ldr	r3, [pc, #104]	@ (800f658 <network_configure_activations+0xd4>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800f5f6:	4a1d      	ldr	r2, [pc, #116]	@ (800f66c <network_configure_activations+0xe8>)
 800f5f8:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 800f5fa:	4b17      	ldr	r3, [pc, #92]	@ (800f658 <network_configure_activations+0xd4>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800f602:	4a1a      	ldr	r2, [pc, #104]	@ (800f66c <network_configure_activations+0xe8>)
 800f604:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f606:	4b14      	ldr	r3, [pc, #80]	@ (800f658 <network_configure_activations+0xd4>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a19      	ldr	r2, [pc, #100]	@ (800f670 <network_configure_activations+0xec>)
 800f60c:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f60e:	4b12      	ldr	r3, [pc, #72]	@ (800f658 <network_configure_activations+0xd4>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	4a17      	ldr	r2, [pc, #92]	@ (800f670 <network_configure_activations+0xec>)
 800f614:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800f616:	4b10      	ldr	r3, [pc, #64]	@ (800f658 <network_configure_activations+0xd4>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f61e:	4a15      	ldr	r2, [pc, #84]	@ (800f674 <network_configure_activations+0xf0>)
 800f620:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800f622:	4b0d      	ldr	r3, [pc, #52]	@ (800f658 <network_configure_activations+0xd4>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f62a:	4a12      	ldr	r2, [pc, #72]	@ (800f674 <network_configure_activations+0xf0>)
 800f62c:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800f62e:	4b0a      	ldr	r3, [pc, #40]	@ (800f658 <network_configure_activations+0xd4>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	4a11      	ldr	r2, [pc, #68]	@ (800f678 <network_configure_activations+0xf4>)
 800f634:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800f636:	4b08      	ldr	r3, [pc, #32]	@ (800f658 <network_configure_activations+0xd4>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a0f      	ldr	r2, [pc, #60]	@ (800f678 <network_configure_activations+0xf4>)
 800f63c:	60d3      	str	r3, [r2, #12]
    return true;
 800f63e:	2301      	movs	r3, #1
 800f640:	e005      	b.n	800f64e <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800f642:	2213      	movs	r2, #19
 800f644:	2130      	movs	r1, #48	@ 0x30
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f001 fc0c 	bl	8010e64 <ai_platform_network_set_error>
  return false;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	20035d6c 	.word	0x20035d6c
 800f65c:	20000064 	.word	0x20000064
 800f660:	20000074 	.word	0x20000074
 800f664:	20000124 	.word	0x20000124
 800f668:	20000134 	.word	0x20000134
 800f66c:	20000084 	.word	0x20000084
 800f670:	20000094 	.word	0x20000094
 800f674:	200000a4 	.word	0x200000a4
 800f678:	200000b4 	.word	0x200000b4

0800f67c <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	2101      	movs	r1, #1
 800f68a:	483d      	ldr	r0, [pc, #244]	@ (800f780 <network_configure_weights+0x104>)
 800f68c:	f001 fb14 	bl	8010cb8 <ai_platform_get_weights_map>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d069      	beq.n	800f76a <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800f696:	4b3b      	ldr	r3, [pc, #236]	@ (800f784 <network_configure_weights+0x108>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f69e:	4a39      	ldr	r2, [pc, #228]	@ (800f784 <network_configure_weights+0x108>)
 800f6a0:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800f6a2:	4b37      	ldr	r3, [pc, #220]	@ (800f780 <network_configure_weights+0x104>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4a37      	ldr	r2, [pc, #220]	@ (800f784 <network_configure_weights+0x108>)
 800f6a8:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800f6aa:	4b35      	ldr	r3, [pc, #212]	@ (800f780 <network_configure_weights+0x104>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a35      	ldr	r2, [pc, #212]	@ (800f784 <network_configure_weights+0x108>)
 800f6b0:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800f6b2:	4b35      	ldr	r3, [pc, #212]	@ (800f788 <network_configure_weights+0x10c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f6ba:	4a33      	ldr	r2, [pc, #204]	@ (800f788 <network_configure_weights+0x10c>)
 800f6bc:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800f6be:	4b30      	ldr	r3, [pc, #192]	@ (800f780 <network_configure_weights+0x104>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800f6c6:	4a30      	ldr	r2, [pc, #192]	@ (800f788 <network_configure_weights+0x10c>)
 800f6c8:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800f6ca:	4b2d      	ldr	r3, [pc, #180]	@ (800f780 <network_configure_weights+0x104>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800f6d2:	4a2d      	ldr	r2, [pc, #180]	@ (800f788 <network_configure_weights+0x10c>)
 800f6d4:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800f6d6:	4b2d      	ldr	r3, [pc, #180]	@ (800f78c <network_configure_weights+0x110>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f6de:	4a2b      	ldr	r2, [pc, #172]	@ (800f78c <network_configure_weights+0x110>)
 800f6e0:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800f6e2:	4b27      	ldr	r3, [pc, #156]	@ (800f780 <network_configure_weights+0x104>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800f6ea:	4a28      	ldr	r2, [pc, #160]	@ (800f78c <network_configure_weights+0x110>)
 800f6ec:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800f6ee:	4b24      	ldr	r3, [pc, #144]	@ (800f780 <network_configure_weights+0x104>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800f6f6:	4a25      	ldr	r2, [pc, #148]	@ (800f78c <network_configure_weights+0x110>)
 800f6f8:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800f6fa:	4b25      	ldr	r3, [pc, #148]	@ (800f790 <network_configure_weights+0x114>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f702:	4a23      	ldr	r2, [pc, #140]	@ (800f790 <network_configure_weights+0x114>)
 800f704:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 800f706:	4b1e      	ldr	r3, [pc, #120]	@ (800f780 <network_configure_weights+0x104>)
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	4b22      	ldr	r3, [pc, #136]	@ (800f794 <network_configure_weights+0x118>)
 800f70c:	4413      	add	r3, r2
 800f70e:	4a20      	ldr	r2, [pc, #128]	@ (800f790 <network_configure_weights+0x114>)
 800f710:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 800f712:	4b1b      	ldr	r3, [pc, #108]	@ (800f780 <network_configure_weights+0x104>)
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	4b1f      	ldr	r3, [pc, #124]	@ (800f794 <network_configure_weights+0x118>)
 800f718:	4413      	add	r3, r2
 800f71a:	4a1d      	ldr	r2, [pc, #116]	@ (800f790 <network_configure_weights+0x114>)
 800f71c:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800f71e:	4b1e      	ldr	r3, [pc, #120]	@ (800f798 <network_configure_weights+0x11c>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f726:	4a1c      	ldr	r2, [pc, #112]	@ (800f798 <network_configure_weights+0x11c>)
 800f728:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 800f72a:	4b15      	ldr	r3, [pc, #84]	@ (800f780 <network_configure_weights+0x104>)
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	4b1b      	ldr	r3, [pc, #108]	@ (800f79c <network_configure_weights+0x120>)
 800f730:	4413      	add	r3, r2
 800f732:	4a19      	ldr	r2, [pc, #100]	@ (800f798 <network_configure_weights+0x11c>)
 800f734:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 800f736:	4b12      	ldr	r3, [pc, #72]	@ (800f780 <network_configure_weights+0x104>)
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	4b18      	ldr	r3, [pc, #96]	@ (800f79c <network_configure_weights+0x120>)
 800f73c:	4413      	add	r3, r2
 800f73e:	4a16      	ldr	r2, [pc, #88]	@ (800f798 <network_configure_weights+0x11c>)
 800f740:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800f742:	4b17      	ldr	r3, [pc, #92]	@ (800f7a0 <network_configure_weights+0x124>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f74a:	4a15      	ldr	r2, [pc, #84]	@ (800f7a0 <network_configure_weights+0x124>)
 800f74c:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 800f74e:	4b0c      	ldr	r3, [pc, #48]	@ (800f780 <network_configure_weights+0x104>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	4b14      	ldr	r3, [pc, #80]	@ (800f7a4 <network_configure_weights+0x128>)
 800f754:	4413      	add	r3, r2
 800f756:	4a12      	ldr	r2, [pc, #72]	@ (800f7a0 <network_configure_weights+0x124>)
 800f758:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 800f75a:	4b09      	ldr	r3, [pc, #36]	@ (800f780 <network_configure_weights+0x104>)
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	4b11      	ldr	r3, [pc, #68]	@ (800f7a4 <network_configure_weights+0x128>)
 800f760:	4413      	add	r3, r2
 800f762:	4a0f      	ldr	r2, [pc, #60]	@ (800f7a0 <network_configure_weights+0x124>)
 800f764:	60d3      	str	r3, [r2, #12]
    return true;
 800f766:	2301      	movs	r3, #1
 800f768:	e005      	b.n	800f776 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800f76a:	2212      	movs	r2, #18
 800f76c:	2130      	movs	r1, #48	@ 0x30
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f001 fb78 	bl	8010e64 <ai_platform_network_set_error>
  return false;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	20035d70 	.word	0x20035d70
 800f784:	200000c4 	.word	0x200000c4
 800f788:	200000d4 	.word	0x200000d4
 800f78c:	200000e4 	.word	0x200000e4
 800f790:	200000f4 	.word	0x200000f4
 800f794:	000a9280 	.word	0x000a9280
 800f798:	20000104 	.word	0x20000104
 800f79c:	000a9380 	.word	0x000a9380
 800f7a0:	20000114 	.word	0x20000114
 800f7a4:	000a9980 	.word	0x000a9980

0800f7a8 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f001 fb4b 	bl	8010e4c <ai_platform_network_get_error>
 800f7b6:	4603      	mov	r3, r0
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af02      	add	r7, sp, #8
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	9301      	str	r3, [sp, #4]
 800f7ce:	2305      	movs	r3, #5
 800f7d0:	9300      	str	r3, [sp, #0]
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	4a04      	ldr	r2, [pc, #16]	@ (800f7e8 <ai_network_create+0x28>)
 800f7d6:	6839      	ldr	r1, [r7, #0]
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f001 fc37 	bl	801104c <ai_platform_network_create>
 800f7de:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	20000774 	.word	0x20000774

0800f7ec <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b094      	sub	sp, #80	@ 0x50
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	f7ff ffe0 	bl	800f7c0 <ai_network_create>
 800f800:	4603      	mov	r3, r0
 800f802:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800f804:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d001      	beq.n	800f810 <ai_network_create_and_init+0x24>
    return err;
 800f80c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f80e:	e067      	b.n	800f8e0 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800f810:	f107 0310 	add.w	r3, r7, #16
 800f814:	4618      	mov	r0, r3
 800f816:	f000 f8e7 	bl	800f9e8 <ai_network_data_params_get>
 800f81a:	4603      	mov	r3, r0
 800f81c:	f083 0301 	eor.w	r3, r3, #1
 800f820:	b2db      	uxtb	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	d008      	beq.n	800f838 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7ff ffbc 	bl	800f7a8 <ai_network_get_error>
 800f830:	4603      	mov	r3, r0
 800f832:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800f834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f836:	e053      	b.n	800f8e0 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800f838:	2300      	movs	r3, #0
 800f83a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800f83e:	e012      	b.n	800f866 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800f840:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800f844:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	68ba      	ldr	r2, [r7, #8]
 800f84c:	4413      	add	r3, r2
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	f107 0310 	add.w	r3, r7, #16
 800f854:	330c      	adds	r3, #12
 800f856:	4618      	mov	r0, r3
 800f858:	f001 fa1e 	bl	8010c98 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800f85c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f860:	3301      	adds	r3, #1
 800f862:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d004      	beq.n	800f876 <ai_network_create_and_init+0x8a>
 800f86c:	8bfb      	ldrh	r3, [r7, #30]
 800f86e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f872:	429a      	cmp	r2, r3
 800f874:	d3e4      	bcc.n	800f840 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800f876:	2300      	movs	r3, #0
 800f878:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800f87c:	e012      	b.n	800f8a4 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800f87e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800f882:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	4413      	add	r3, r2
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	f107 0310 	add.w	r3, r7, #16
 800f892:	3304      	adds	r3, #4
 800f894:	4618      	mov	r0, r3
 800f896:	f001 f9ff 	bl	8010c98 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800f89a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800f89e:	3301      	adds	r3, #1
 800f8a0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d004      	beq.n	800f8b4 <ai_network_create_and_init+0xc8>
 800f8aa:	8afb      	ldrh	r3, [r7, #22]
 800f8ac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d3e4      	bcc.n	800f87e <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f107 0210 	add.w	r2, r7, #16
 800f8bc:	4611      	mov	r1, r2
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 f846 	bl	800f950 <ai_network_init>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	f083 0301 	eor.w	r3, r3, #1
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d006      	beq.n	800f8de <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff ff67 	bl	800f7a8 <ai_network_get_error>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800f8de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3750      	adds	r7, #80	@ 0x50
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d104      	bne.n	800f902 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f8f8:	4b06      	ldr	r3, [pc, #24]	@ (800f914 <ai_network_inputs_get+0x2c>)
 800f8fa:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4a06      	ldr	r2, [pc, #24]	@ (800f918 <ai_network_inputs_get+0x30>)
 800f900:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800f902:	6839      	ldr	r1, [r7, #0]
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f001 fab3 	bl	8010e70 <ai_platform_inputs_get>
 800f90a:	4603      	mov	r3, r0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	20000774 	.word	0x20000774
 800f918:	a1c00100 	.word	0xa1c00100

0800f91c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d104      	bne.n	800f936 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f92c:	4b06      	ldr	r3, [pc, #24]	@ (800f948 <ai_network_outputs_get+0x2c>)
 800f92e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4a06      	ldr	r2, [pc, #24]	@ (800f94c <ai_network_outputs_get+0x30>)
 800f934:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800f936:	6839      	ldr	r1, [r7, #0]
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f001 fb11 	bl	8010f60 <ai_platform_outputs_get>
 800f93e:	4603      	mov	r3, r0
}
 800f940:	4618      	mov	r0, r3
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	20000774 	.word	0x20000774
 800f94c:	a1c00100 	.word	0xa1c00100

0800f950 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800f95a:	6839      	ldr	r1, [r7, #0]
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f001 fbb7 	bl	80110d0 <ai_platform_network_init>
 800f962:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800f964:	2301      	movs	r3, #1
 800f966:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d101      	bne.n	800f972 <ai_network_init+0x22>
 800f96e:	2300      	movs	r3, #0
 800f970:	e026      	b.n	800f9c0 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800f972:	6839      	ldr	r1, [r7, #0]
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f7ff fe81 	bl	800f67c <network_configure_weights>
 800f97a:	4603      	mov	r3, r0
 800f97c:	461a      	mov	r2, r3
 800f97e:	7afb      	ldrb	r3, [r7, #11]
 800f980:	4013      	ands	r3, r2
 800f982:	2b00      	cmp	r3, #0
 800f984:	bf14      	ite	ne
 800f986:	2301      	movne	r3, #1
 800f988:	2300      	moveq	r3, #0
 800f98a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800f98c:	6839      	ldr	r1, [r7, #0]
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f7ff fdf8 	bl	800f584 <network_configure_activations>
 800f994:	4603      	mov	r3, r0
 800f996:	461a      	mov	r2, r3
 800f998:	7afb      	ldrb	r3, [r7, #11]
 800f99a:	4013      	ands	r3, r2
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	bf14      	ite	ne
 800f9a0:	2301      	movne	r3, #1
 800f9a2:	2300      	moveq	r3, #0
 800f9a4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f001 fc52 	bl	8011250 <ai_platform_network_post_init>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	7afb      	ldrb	r3, [r7, #11]
 800f9b2:	4013      	ands	r3, r2
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	bf14      	ite	ne
 800f9b8:	2301      	movne	r3, #1
 800f9ba:	2300      	moveq	r3, #0
 800f9bc:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f9be:	7afb      	ldrb	r3, [r7, #11]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3710      	adds	r7, #16
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	68b9      	ldr	r1, [r7, #8]
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	f001 fc69 	bl	80112b0 <ai_platform_network_process>
 800f9de:	4603      	mov	r3, r0
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b086      	sub	sp, #24
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d101      	bne.n	800f9fa <ai_network_data_params_get+0x12>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	e016      	b.n	800fa28 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800f9fa:	4a0d      	ldr	r2, [pc, #52]	@ (800fa30 <ai_network_data_params_get+0x48>)
 800f9fc:	f107 0310 	add.w	r3, r7, #16
 800fa00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa04:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800fa08:	4a0a      	ldr	r2, [pc, #40]	@ (800fa34 <ai_network_data_params_get+0x4c>)
 800fa0a:	f107 0308 	add.w	r3, r7, #8
 800fa0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa12:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800fa16:	f107 0210 	add.w	r2, r7, #16
 800fa1a:	f107 0308 	add.w	r3, r7, #8
 800fa1e:	4619      	mov	r1, r3
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f001 f9f9 	bl	8010e18 <ai_platform_bind_network_params>
 800fa26:	4603      	mov	r3, r0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3718      	adds	r7, #24
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	08017f98 	.word	0x08017f98
 800fa34:	08017fa0 	.word	0x08017fa0

0800fa38 <arm_rfft_fast_init_f32>:
 800fa38:	084b      	lsrs	r3, r1, #1
 800fa3a:	2b80      	cmp	r3, #128	@ 0x80
 800fa3c:	b430      	push	{r4, r5}
 800fa3e:	8201      	strh	r1, [r0, #16]
 800fa40:	8003      	strh	r3, [r0, #0]
 800fa42:	d070      	beq.n	800fb26 <arm_rfft_fast_init_f32+0xee>
 800fa44:	d916      	bls.n	800fa74 <arm_rfft_fast_init_f32+0x3c>
 800fa46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa4a:	d05f      	beq.n	800fb0c <arm_rfft_fast_init_f32+0xd4>
 800fa4c:	d936      	bls.n	800fabc <arm_rfft_fast_init_f32+0x84>
 800fa4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa52:	d026      	beq.n	800faa2 <arm_rfft_fast_init_f32+0x6a>
 800fa54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fa58:	d112      	bne.n	800fa80 <arm_rfft_fast_init_f32+0x48>
 800fa5a:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800fa5e:	4c38      	ldr	r4, [pc, #224]	@ (800fb40 <arm_rfft_fast_init_f32+0x108>)
 800fa60:	4938      	ldr	r1, [pc, #224]	@ (800fb44 <arm_rfft_fast_init_f32+0x10c>)
 800fa62:	2300      	movs	r3, #0
 800fa64:	4a38      	ldr	r2, [pc, #224]	@ (800fb48 <arm_rfft_fast_init_f32+0x110>)
 800fa66:	8185      	strh	r5, [r0, #12]
 800fa68:	6084      	str	r4, [r0, #8]
 800fa6a:	6041      	str	r1, [r0, #4]
 800fa6c:	6142      	str	r2, [r0, #20]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	bc30      	pop	{r4, r5}
 800fa72:	4770      	bx	lr
 800fa74:	2b20      	cmp	r3, #32
 800fa76:	d031      	beq.n	800fadc <arm_rfft_fast_init_f32+0xa4>
 800fa78:	2b40      	cmp	r3, #64	@ 0x40
 800fa7a:	d006      	beq.n	800fa8a <arm_rfft_fast_init_f32+0x52>
 800fa7c:	2b10      	cmp	r3, #16
 800fa7e:	d039      	beq.n	800faf4 <arm_rfft_fast_init_f32+0xbc>
 800fa80:	f04f 33ff 	mov.w	r3, #4294967295
 800fa84:	bc30      	pop	{r4, r5}
 800fa86:	4618      	mov	r0, r3
 800fa88:	4770      	bx	lr
 800fa8a:	2538      	movs	r5, #56	@ 0x38
 800fa8c:	4c2f      	ldr	r4, [pc, #188]	@ (800fb4c <arm_rfft_fast_init_f32+0x114>)
 800fa8e:	4930      	ldr	r1, [pc, #192]	@ (800fb50 <arm_rfft_fast_init_f32+0x118>)
 800fa90:	2300      	movs	r3, #0
 800fa92:	4a30      	ldr	r2, [pc, #192]	@ (800fb54 <arm_rfft_fast_init_f32+0x11c>)
 800fa94:	8185      	strh	r5, [r0, #12]
 800fa96:	6084      	str	r4, [r0, #8]
 800fa98:	6041      	str	r1, [r0, #4]
 800fa9a:	6142      	str	r2, [r0, #20]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	bc30      	pop	{r4, r5}
 800faa0:	4770      	bx	lr
 800faa2:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800faa6:	4c2c      	ldr	r4, [pc, #176]	@ (800fb58 <arm_rfft_fast_init_f32+0x120>)
 800faa8:	492c      	ldr	r1, [pc, #176]	@ (800fb5c <arm_rfft_fast_init_f32+0x124>)
 800faaa:	2300      	movs	r3, #0
 800faac:	4a2c      	ldr	r2, [pc, #176]	@ (800fb60 <arm_rfft_fast_init_f32+0x128>)
 800faae:	8185      	strh	r5, [r0, #12]
 800fab0:	6084      	str	r4, [r0, #8]
 800fab2:	6041      	str	r1, [r0, #4]
 800fab4:	6142      	str	r2, [r0, #20]
 800fab6:	4618      	mov	r0, r3
 800fab8:	bc30      	pop	{r4, r5}
 800faba:	4770      	bx	lr
 800fabc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fac0:	d1de      	bne.n	800fa80 <arm_rfft_fast_init_f32+0x48>
 800fac2:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800fac6:	4c27      	ldr	r4, [pc, #156]	@ (800fb64 <arm_rfft_fast_init_f32+0x12c>)
 800fac8:	4927      	ldr	r1, [pc, #156]	@ (800fb68 <arm_rfft_fast_init_f32+0x130>)
 800faca:	2300      	movs	r3, #0
 800facc:	4a27      	ldr	r2, [pc, #156]	@ (800fb6c <arm_rfft_fast_init_f32+0x134>)
 800face:	8185      	strh	r5, [r0, #12]
 800fad0:	6084      	str	r4, [r0, #8]
 800fad2:	6041      	str	r1, [r0, #4]
 800fad4:	6142      	str	r2, [r0, #20]
 800fad6:	4618      	mov	r0, r3
 800fad8:	bc30      	pop	{r4, r5}
 800fada:	4770      	bx	lr
 800fadc:	2530      	movs	r5, #48	@ 0x30
 800fade:	4c24      	ldr	r4, [pc, #144]	@ (800fb70 <arm_rfft_fast_init_f32+0x138>)
 800fae0:	4924      	ldr	r1, [pc, #144]	@ (800fb74 <arm_rfft_fast_init_f32+0x13c>)
 800fae2:	2300      	movs	r3, #0
 800fae4:	4a24      	ldr	r2, [pc, #144]	@ (800fb78 <arm_rfft_fast_init_f32+0x140>)
 800fae6:	8185      	strh	r5, [r0, #12]
 800fae8:	6084      	str	r4, [r0, #8]
 800faea:	6041      	str	r1, [r0, #4]
 800faec:	6142      	str	r2, [r0, #20]
 800faee:	4618      	mov	r0, r3
 800faf0:	bc30      	pop	{r4, r5}
 800faf2:	4770      	bx	lr
 800faf4:	2514      	movs	r5, #20
 800faf6:	4c21      	ldr	r4, [pc, #132]	@ (800fb7c <arm_rfft_fast_init_f32+0x144>)
 800faf8:	4921      	ldr	r1, [pc, #132]	@ (800fb80 <arm_rfft_fast_init_f32+0x148>)
 800fafa:	2300      	movs	r3, #0
 800fafc:	4a21      	ldr	r2, [pc, #132]	@ (800fb84 <arm_rfft_fast_init_f32+0x14c>)
 800fafe:	8185      	strh	r5, [r0, #12]
 800fb00:	6084      	str	r4, [r0, #8]
 800fb02:	6041      	str	r1, [r0, #4]
 800fb04:	6142      	str	r2, [r0, #20]
 800fb06:	4618      	mov	r0, r3
 800fb08:	bc30      	pop	{r4, r5}
 800fb0a:	4770      	bx	lr
 800fb0c:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800fb10:	4c1d      	ldr	r4, [pc, #116]	@ (800fb88 <arm_rfft_fast_init_f32+0x150>)
 800fb12:	491e      	ldr	r1, [pc, #120]	@ (800fb8c <arm_rfft_fast_init_f32+0x154>)
 800fb14:	2300      	movs	r3, #0
 800fb16:	4a1e      	ldr	r2, [pc, #120]	@ (800fb90 <arm_rfft_fast_init_f32+0x158>)
 800fb18:	8185      	strh	r5, [r0, #12]
 800fb1a:	6084      	str	r4, [r0, #8]
 800fb1c:	6041      	str	r1, [r0, #4]
 800fb1e:	6142      	str	r2, [r0, #20]
 800fb20:	4618      	mov	r0, r3
 800fb22:	bc30      	pop	{r4, r5}
 800fb24:	4770      	bx	lr
 800fb26:	25d0      	movs	r5, #208	@ 0xd0
 800fb28:	4c1a      	ldr	r4, [pc, #104]	@ (800fb94 <arm_rfft_fast_init_f32+0x15c>)
 800fb2a:	491b      	ldr	r1, [pc, #108]	@ (800fb98 <arm_rfft_fast_init_f32+0x160>)
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	4a1b      	ldr	r2, [pc, #108]	@ (800fb9c <arm_rfft_fast_init_f32+0x164>)
 800fb30:	8185      	strh	r5, [r0, #12]
 800fb32:	6084      	str	r4, [r0, #8]
 800fb34:	6041      	str	r1, [r0, #4]
 800fb36:	6142      	str	r2, [r0, #20]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	bc30      	pop	{r4, r5}
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	080d0880 	.word	0x080d0880
 800fb44:	080c1a78 	.word	0x080c1a78
 800fb48:	080c7be8 	.word	0x080c7be8
 800fb4c:	080c5b78 	.word	0x080c5b78
 800fb50:	080d2640 	.word	0x080d2640
 800fb54:	080d4b30 	.word	0x080d4b30
 800fb58:	080ce568 	.word	0x080ce568
 800fb5c:	080cc468 	.word	0x080cc468
 800fb60:	080c5be8 	.word	0x080c5be8
 800fb64:	080d47c0 	.word	0x080d47c0
 800fb68:	080cbbe8 	.word	0x080cbbe8
 800fb6c:	080d2840 	.word	0x080d2840
 800fb70:	080cf420 	.word	0x080cf420
 800fb74:	080ce468 	.word	0x080ce468
 800fb78:	080c5a78 	.word	0x080c5a78
 800fb7c:	080cf378 	.word	0x080cf378
 800fb80:	080cc3e8 	.word	0x080cc3e8
 800fb84:	080cf3a0 	.word	0x080cf3a0
 800fb88:	080d3040 	.word	0x080d3040
 800fb8c:	080cf880 	.word	0x080cf880
 800fb90:	080d33c0 	.word	0x080d33c0
 800fb94:	080d4d30 	.word	0x080d4d30
 800fb98:	080cf480 	.word	0x080cf480
 800fb9c:	080d43c0 	.word	0x080d43c0

0800fba0 <arm_rfft_fast_f32>:
 800fba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fba4:	8a05      	ldrh	r5, [r0, #16]
 800fba6:	4606      	mov	r6, r0
 800fba8:	4617      	mov	r7, r2
 800fbaa:	460c      	mov	r4, r1
 800fbac:	086d      	lsrs	r5, r5, #1
 800fbae:	8005      	strh	r5, [r0, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d15e      	bne.n	800fc72 <arm_rfft_fast_f32+0xd2>
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	f000 fbde 	bl	8010378 <arm_cfft_f32>
 800fbbc:	edd4 7a00 	vldr	s15, [r4]
 800fbc0:	ed94 7a01 	vldr	s14, [r4, #4]
 800fbc4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fbc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fbcc:	8832      	ldrh	r2, [r6, #0]
 800fbce:	ee37 7a07 	vadd.f32	s14, s14, s14
 800fbd2:	6975      	ldr	r5, [r6, #20]
 800fbd4:	3a01      	subs	r2, #1
 800fbd6:	eeb0 3a46 	vmov.f32	s6, s12
 800fbda:	3510      	adds	r5, #16
 800fbdc:	f107 0610 	add.w	r6, r7, #16
 800fbe0:	ee77 6a87 	vadd.f32	s13, s15, s14
 800fbe4:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800fbe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbec:	f104 0310 	add.w	r3, r4, #16
 800fbf0:	3808      	subs	r0, #8
 800fbf2:	ee26 7a86 	vmul.f32	s14, s13, s12
 800fbf6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fbfa:	ed87 7a00 	vstr	s14, [r7]
 800fbfe:	edc7 7a01 	vstr	s15, [r7, #4]
 800fc02:	ed90 7a02 	vldr	s14, [r0, #8]
 800fc06:	3a01      	subs	r2, #1
 800fc08:	ed53 6a02 	vldr	s13, [r3, #-8]
 800fc0c:	f1a0 0008 	sub.w	r0, r0, #8
 800fc10:	ed15 6a02 	vldr	s12, [r5, #-8]
 800fc14:	f103 0308 	add.w	r3, r3, #8
 800fc18:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fc1c:	edd0 3a05 	vldr	s7, [r0, #20]
 800fc20:	ed13 5a03 	vldr	s10, [r3, #-12]
 800fc24:	ee77 4a26 	vadd.f32	s9, s14, s13
 800fc28:	ed55 5a01 	vldr	s11, [r5, #-4]
 800fc2c:	f106 0608 	add.w	r6, r6, #8
 800fc30:	ee66 6a27 	vmul.f32	s13, s12, s15
 800fc34:	f105 0508 	add.w	r5, r5, #8
 800fc38:	ee33 4a85 	vadd.f32	s8, s7, s10
 800fc3c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800fc40:	ee35 5a63 	vsub.f32	s10, s10, s7
 800fc44:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800fc48:	ee26 6a04 	vmul.f32	s12, s12, s8
 800fc4c:	ee77 7a05 	vadd.f32	s15, s14, s10
 800fc50:	ee65 5a84 	vmul.f32	s11, s11, s8
 800fc54:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fc58:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800fc5c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800fc60:	ee27 7a03 	vmul.f32	s14, s14, s6
 800fc64:	ed46 7a03 	vstr	s15, [r6, #-12]
 800fc68:	ed06 7a04 	vstr	s14, [r6, #-16]
 800fc6c:	d1c9      	bne.n	800fc02 <arm_rfft_fast_f32+0x62>
 800fc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc72:	edd1 7a00 	vldr	s15, [r1]
 800fc76:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800fc7a:	edd1 6a01 	vldr	s13, [r1, #4]
 800fc7e:	1e68      	subs	r0, r5, #1
 800fc80:	6975      	ldr	r5, [r6, #20]
 800fc82:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fc86:	00c1      	lsls	r1, r0, #3
 800fc88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc8c:	ee27 7a23 	vmul.f32	s14, s14, s7
 800fc90:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800fc94:	ed82 7a00 	vstr	s14, [r2]
 800fc98:	edc2 7a01 	vstr	s15, [r2, #4]
 800fc9c:	b3e0      	cbz	r0, 800fd18 <arm_rfft_fast_f32+0x178>
 800fc9e:	3908      	subs	r1, #8
 800fca0:	f104 0210 	add.w	r2, r4, #16
 800fca4:	3510      	adds	r5, #16
 800fca6:	440c      	add	r4, r1
 800fca8:	f107 0110 	add.w	r1, r7, #16
 800fcac:	ed94 7a02 	vldr	s14, [r4, #8]
 800fcb0:	3801      	subs	r0, #1
 800fcb2:	ed52 6a02 	vldr	s13, [r2, #-8]
 800fcb6:	f1a4 0408 	sub.w	r4, r4, #8
 800fcba:	ed15 6a02 	vldr	s12, [r5, #-8]
 800fcbe:	f102 0208 	add.w	r2, r2, #8
 800fcc2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800fcc6:	ed94 4a05 	vldr	s8, [r4, #20]
 800fcca:	ed12 5a03 	vldr	s10, [r2, #-12]
 800fcce:	ee77 6a26 	vadd.f32	s13, s14, s13
 800fcd2:	ed55 5a01 	vldr	s11, [r5, #-4]
 800fcd6:	f101 0108 	add.w	r1, r1, #8
 800fcda:	ee26 3a27 	vmul.f32	s6, s12, s15
 800fcde:	f105 0508 	add.w	r5, r5, #8
 800fce2:	ee74 4a05 	vadd.f32	s9, s8, s10
 800fce6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800fcea:	ee35 5a44 	vsub.f32	s10, s10, s8
 800fcee:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800fcf2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fcf6:	ee77 7a05 	vadd.f32	s15, s14, s10
 800fcfa:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800fcfe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fd02:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800fd06:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800fd0a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800fd0e:	ed41 7a03 	vstr	s15, [r1, #-12]
 800fd12:	ed01 7a04 	vstr	s14, [r1, #-16]
 800fd16:	d1c9      	bne.n	800fcac <arm_rfft_fast_f32+0x10c>
 800fd18:	461a      	mov	r2, r3
 800fd1a:	4639      	mov	r1, r7
 800fd1c:	4630      	mov	r0, r6
 800fd1e:	2301      	movs	r3, #1
 800fd20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd24:	f000 bb28 	b.w	8010378 <arm_cfft_f32>

0800fd28 <arm_cfft_radix8by2_f32>:
 800fd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2c:	4607      	mov	r7, r0
 800fd2e:	4608      	mov	r0, r1
 800fd30:	ed2d 8b06 	vpush	{d8-d10}
 800fd34:	f8b7 e000 	ldrh.w	lr, [r7]
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800fd3e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800fd42:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800fd46:	f000 80b0 	beq.w	800feaa <arm_cfft_radix8by2_f32+0x182>
 800fd4a:	008b      	lsls	r3, r1, #2
 800fd4c:	3210      	adds	r2, #16
 800fd4e:	f100 0610 	add.w	r6, r0, #16
 800fd52:	f108 0510 	add.w	r5, r8, #16
 800fd56:	3310      	adds	r3, #16
 800fd58:	18c4      	adds	r4, r0, r3
 800fd5a:	4443      	add	r3, r8
 800fd5c:	ed55 6a04 	vldr	s13, [r5, #-16]
 800fd60:	f1be 0e01 	subs.w	lr, lr, #1
 800fd64:	ed56 4a04 	vldr	s9, [r6, #-16]
 800fd68:	f104 0410 	add.w	r4, r4, #16
 800fd6c:	ed15 7a03 	vldr	s14, [r5, #-12]
 800fd70:	f106 0610 	add.w	r6, r6, #16
 800fd74:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800fd78:	ed55 7a02 	vldr	s15, [r5, #-8]
 800fd7c:	ed55 2a01 	vldr	s5, [r5, #-4]
 800fd80:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800fd84:	ed53 0a04 	vldr	s1, [r3, #-16]
 800fd88:	f102 0210 	add.w	r2, r2, #16
 800fd8c:	ed13 5a03 	vldr	s10, [r3, #-12]
 800fd90:	f105 0510 	add.w	r5, r5, #16
 800fd94:	ed13 3a02 	vldr	s6, [r3, #-8]
 800fd98:	f103 0310 	add.w	r3, r3, #16
 800fd9c:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800fda0:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800fda4:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800fda8:	ee33 8a83 	vadd.f32	s16, s7, s6
 800fdac:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800fdb0:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800fdb4:	ee34 0a06 	vadd.f32	s0, s8, s12
 800fdb8:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800fdbc:	ee76 aa87 	vadd.f32	s21, s13, s14
 800fdc0:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800fdc4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fdc8:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800fdcc:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800fdd0:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800fdd4:	ee71 8a05 	vadd.f32	s17, s2, s10
 800fdd8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800fddc:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800fde0:	ee72 9a22 	vadd.f32	s19, s4, s5
 800fde4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800fde8:	ee35 5a41 	vsub.f32	s10, s10, s2
 800fdec:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800fdf0:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800fdf4:	ee36 6a44 	vsub.f32	s12, s12, s8
 800fdf8:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800fdfc:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800fe00:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800fe04:	ee72 7a62 	vsub.f32	s15, s4, s5
 800fe08:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800fe0c:	ee73 2a63 	vsub.f32	s5, s6, s7
 800fe10:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800fe14:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800fe18:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800fe1c:	ee24 3a84 	vmul.f32	s6, s9, s8
 800fe20:	ee27 2a26 	vmul.f32	s4, s14, s13
 800fe24:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800fe28:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800fe2c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fe30:	ee65 5a84 	vmul.f32	s11, s11, s8
 800fe34:	ee65 6a26 	vmul.f32	s13, s10, s13
 800fe38:	ee25 5a04 	vmul.f32	s10, s10, s8
 800fe3c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800fe40:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800fe44:	ee33 4a02 	vadd.f32	s8, s6, s4
 800fe48:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800fe4c:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800fe50:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800fe54:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800fe58:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800fe5c:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800fe60:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800fe64:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800fe68:	ee27 4a87 	vmul.f32	s8, s15, s14
 800fe6c:	ee61 5a87 	vmul.f32	s11, s3, s14
 800fe70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fe74:	ee22 5a87 	vmul.f32	s10, s5, s14
 800fe78:	ee26 7a07 	vmul.f32	s14, s12, s14
 800fe7c:	ee26 6a26 	vmul.f32	s12, s12, s13
 800fe80:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800fe84:	ee74 4a84 	vadd.f32	s9, s9, s8
 800fe88:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fe8c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800fe90:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fe94:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800fe98:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800fe9c:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800fea0:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800fea4:	f47f af5a 	bne.w	800fd5c <arm_cfft_radix8by2_f32+0x34>
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	b28c      	uxth	r4, r1
 800feac:	2302      	movs	r3, #2
 800feae:	4621      	mov	r1, r4
 800feb0:	f000 fbc2 	bl	8010638 <arm_radix8_butterfly_f32>
 800feb4:	4621      	mov	r1, r4
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	4640      	mov	r0, r8
 800feba:	2302      	movs	r3, #2
 800febc:	ecbd 8b06 	vpop	{d8-d10}
 800fec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fec4:	f000 bbb8 	b.w	8010638 <arm_radix8_butterfly_f32>

0800fec8 <arm_cfft_radix8by4_f32>:
 800fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fecc:	ed2d 8b06 	vpush	{d8-d10}
 800fed0:	8804      	ldrh	r4, [r0, #0]
 800fed2:	b08f      	sub	sp, #60	@ 0x3c
 800fed4:	ed91 6a00 	vldr	s12, [r1]
 800fed8:	460a      	mov	r2, r1
 800feda:	0864      	lsrs	r4, r4, #1
 800fedc:	ed91 7a01 	vldr	s14, [r1, #4]
 800fee0:	9101      	str	r1, [sp, #4]
 800fee2:	00a3      	lsls	r3, r4, #2
 800fee4:	6841      	ldr	r1, [r0, #4]
 800fee6:	0864      	lsrs	r4, r4, #1
 800fee8:	900c      	str	r0, [sp, #48]	@ 0x30
 800feea:	9205      	str	r2, [sp, #20]
 800feec:	f101 0610 	add.w	r6, r1, #16
 800fef0:	4625      	mov	r5, r4
 800fef2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fef4:	f101 0408 	add.w	r4, r1, #8
 800fef8:	9602      	str	r6, [sp, #8]
 800fefa:	9407      	str	r4, [sp, #28]
 800fefc:	18d4      	adds	r4, r2, r3
 800fefe:	1eaa      	subs	r2, r5, #2
 800ff00:	f101 0518 	add.w	r5, r1, #24
 800ff04:	18e0      	adds	r0, r4, r3
 800ff06:	edd4 4a00 	vldr	s9, [r4]
 800ff0a:	ed94 4a01 	vldr	s8, [r4, #4]
 800ff0e:	46a6      	mov	lr, r4
 800ff10:	edd0 6a00 	vldr	s13, [r0]
 800ff14:	18c7      	adds	r7, r0, r3
 800ff16:	edd0 7a01 	vldr	s15, [r0, #4]
 800ff1a:	46a0      	mov	r8, r4
 800ff1c:	ee76 5a26 	vadd.f32	s11, s12, s13
 800ff20:	ed97 5a00 	vldr	s10, [r7]
 800ff24:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ff28:	4604      	mov	r4, r0
 800ff2a:	9506      	str	r5, [sp, #24]
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800ff32:	900a      	str	r0, [sp, #40]	@ 0x28
 800ff34:	9801      	ldr	r0, [sp, #4]
 800ff36:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ff3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff3e:	ed97 3a01 	vldr	s6, [r7, #4]
 800ff42:	ee72 2a85 	vadd.f32	s5, s5, s10
 800ff46:	46bc      	mov	ip, r7
 800ff48:	ee76 3a84 	vadd.f32	s7, s13, s8
 800ff4c:	9704      	str	r7, [sp, #16]
 800ff4e:	ee36 7a44 	vsub.f32	s14, s12, s8
 800ff52:	f8cd e00c 	str.w	lr, [sp, #12]
 800ff56:	ee12 9a90 	vmov	r9, s5
 800ff5a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800ff5e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800ff62:	1f3e      	subs	r6, r7, #4
 800ff64:	f840 9b08 	str.w	r9, [r0], #8
 800ff68:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800ff6c:	edde 2a01 	vldr	s5, [lr, #4]
 800ff70:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800ff74:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800ff78:	eddc 4a01 	vldr	s9, [ip, #4]
 800ff7c:	ee36 6a22 	vadd.f32	s12, s12, s5
 800ff80:	9001      	str	r0, [sp, #4]
 800ff82:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800ff86:	9805      	ldr	r0, [sp, #20]
 800ff88:	ee13 9a90 	vmov	r9, s7
 800ff8c:	ee37 7a43 	vsub.f32	s14, s14, s6
 800ff90:	ee36 6a24 	vadd.f32	s12, s12, s9
 800ff94:	f1ae 0704 	sub.w	r7, lr, #4
 800ff98:	ee74 4a05 	vadd.f32	s9, s8, s10
 800ff9c:	ee76 6a83 	vadd.f32	s13, s13, s6
 800ffa0:	ed80 6a01 	vstr	s12, [r0, #4]
 800ffa4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ffa8:	f848 9b08 	str.w	r9, [r8], #8
 800ffac:	edce 4a01 	vstr	s9, [lr, #4]
 800ffb0:	ee15 ea90 	vmov	lr, s11
 800ffb4:	f844 eb08 	str.w	lr, [r4], #8
 800ffb8:	ee16 ea90 	vmov	lr, s13
 800ffbc:	9408      	str	r4, [sp, #32]
 800ffbe:	462c      	mov	r4, r5
 800ffc0:	ed85 7a01 	vstr	s14, [r5, #4]
 800ffc4:	9d04      	ldr	r5, [sp, #16]
 800ffc6:	f84c eb08 	str.w	lr, [ip], #8
 800ffca:	edc5 7a01 	vstr	s15, [r5, #4]
 800ffce:	0855      	lsrs	r5, r2, #1
 800ffd0:	9509      	str	r5, [sp, #36]	@ 0x24
 800ffd2:	f000 8130 	beq.w	8010236 <arm_cfft_radix8by4_f32+0x36e>
 800ffd6:	9805      	ldr	r0, [sp, #20]
 800ffd8:	3b08      	subs	r3, #8
 800ffda:	46ab      	mov	fp, r5
 800ffdc:	f1a4 020c 	sub.w	r2, r4, #12
 800ffe0:	f100 0510 	add.w	r5, r0, #16
 800ffe4:	f101 0920 	add.w	r9, r1, #32
 800ffe8:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800ffec:	f8dd a008 	ldr.w	sl, [sp, #8]
 800fff0:	4433      	add	r3, r6
 800fff2:	3410      	adds	r4, #16
 800fff4:	4660      	mov	r0, ip
 800fff6:	4641      	mov	r1, r8
 800fff8:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800fffc:	ed54 6a02 	vldr	s13, [r4, #-8]
 8010000:	f1bb 0b01 	subs.w	fp, fp, #1
 8010004:	ed55 5a02 	vldr	s11, [r5, #-8]
 8010008:	f10a 0a08 	add.w	sl, sl, #8
 801000c:	edd1 7a00 	vldr	s15, [r1]
 8010010:	f105 0508 	add.w	r5, r5, #8
 8010014:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8010018:	edd0 2a00 	vldr	s5, [r0]
 801001c:	ed14 7a01 	vldr	s14, [r4, #-4]
 8010020:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8010024:	ed55 6a03 	vldr	s13, [r5, #-12]
 8010028:	f1a2 0208 	sub.w	r2, r2, #8
 801002c:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8010030:	ed90 2a01 	vldr	s4, [r0, #4]
 8010034:	ee36 5a87 	vadd.f32	s10, s13, s14
 8010038:	ed91 6a01 	vldr	s12, [r1, #4]
 801003c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010040:	f109 0910 	add.w	r9, r9, #16
 8010044:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8010048:	f104 0408 	add.w	r4, r4, #8
 801004c:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8010050:	f10e 0e18 	add.w	lr, lr, #24
 8010054:	ee37 3a67 	vsub.f32	s6, s14, s15
 8010058:	f1a3 0308 	sub.w	r3, r3, #8
 801005c:	ed45 6a04 	vstr	s13, [r5, #-16]
 8010060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010064:	edd1 6a01 	vldr	s13, [r1, #4]
 8010068:	ee75 1a86 	vadd.f32	s3, s11, s12
 801006c:	edd0 4a01 	vldr	s9, [r0, #4]
 8010070:	ee33 3a22 	vadd.f32	s6, s6, s5
 8010074:	ee75 6a26 	vadd.f32	s13, s10, s13
 8010078:	ee35 5a46 	vsub.f32	s10, s10, s12
 801007c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010080:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010084:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8010088:	ee35 5a42 	vsub.f32	s10, s10, s4
 801008c:	ed45 6a03 	vstr	s13, [r5, #-12]
 8010090:	ee36 2a02 	vadd.f32	s4, s12, s4
 8010094:	edd6 7a00 	vldr	s15, [r6]
 8010098:	ee73 3ae2 	vsub.f32	s7, s7, s5
 801009c:	ed97 1a00 	vldr	s2, [r7]
 80100a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80100a4:	ed92 8a04 	vldr	s16, [r2, #16]
 80100a8:	ee71 8a27 	vadd.f32	s17, s2, s15
 80100ac:	ed93 aa04 	vldr	s20, [r3, #16]
 80100b0:	ed16 7a01 	vldr	s14, [r6, #-4]
 80100b4:	ee71 7a67 	vsub.f32	s15, s2, s15
 80100b8:	ed57 0a01 	vldr	s1, [r7, #-4]
 80100bc:	ee38 1a4a 	vsub.f32	s2, s16, s20
 80100c0:	ee38 6a88 	vadd.f32	s12, s17, s16
 80100c4:	edd3 9a03 	vldr	s19, [r3, #12]
 80100c8:	ee30 0a87 	vadd.f32	s0, s1, s14
 80100cc:	ed92 9a03 	vldr	s18, [r2, #12]
 80100d0:	ee78 5ac8 	vsub.f32	s11, s17, s16
 80100d4:	ee36 6a0a 	vadd.f32	s12, s12, s20
 80100d8:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80100dc:	ee37 4ac9 	vsub.f32	s8, s15, s18
 80100e0:	ee16 ca10 	vmov	ip, s12
 80100e4:	ee30 6a49 	vsub.f32	s12, s0, s18
 80100e8:	ee77 4a01 	vadd.f32	s9, s14, s2
 80100ec:	f847 c908 	str.w	ip, [r7], #-8
 80100f0:	ee34 4a29 	vadd.f32	s8, s8, s19
 80100f4:	edd2 8a03 	vldr	s17, [r2, #12]
 80100f8:	ee39 9ac9 	vsub.f32	s18, s19, s18
 80100fc:	ed93 8a03 	vldr	s16, [r3, #12]
 8010100:	ee71 0a47 	vsub.f32	s1, s2, s14
 8010104:	ee30 0a28 	vadd.f32	s0, s0, s17
 8010108:	ee39 1a67 	vsub.f32	s2, s18, s15
 801010c:	ee36 6a69 	vsub.f32	s12, s12, s19
 8010110:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010114:	ee75 5aca 	vsub.f32	s11, s11, s20
 8010118:	ed87 0a01 	vstr	s0, [r7, #4]
 801011c:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8010120:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8010124:	ee21 8a80 	vmul.f32	s16, s3, s0
 8010128:	ee23 7a26 	vmul.f32	s14, s6, s13
 801012c:	ee64 7a26 	vmul.f32	s15, s8, s13
 8010130:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8010134:	ee24 4a00 	vmul.f32	s8, s8, s0
 8010138:	ee23 3a00 	vmul.f32	s6, s6, s0
 801013c:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8010140:	ee24 0a80 	vmul.f32	s0, s9, s0
 8010144:	ee38 7a07 	vadd.f32	s14, s16, s14
 8010148:	ee76 6a84 	vadd.f32	s13, s13, s8
 801014c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010150:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010154:	ee17 ca10 	vmov	ip, s14
 8010158:	f841 cb08 	str.w	ip, [r1], #8
 801015c:	ed01 3a01 	vstr	s6, [r1, #-4]
 8010160:	ed82 0a04 	vstr	s0, [r2, #16]
 8010164:	edc2 6a03 	vstr	s13, [r2, #12]
 8010168:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 801016c:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 8010170:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8010174:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8010178:	ee65 4a27 	vmul.f32	s9, s10, s15
 801017c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8010180:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8010184:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010188:	ee25 5a26 	vmul.f32	s10, s10, s13
 801018c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010194:	ee34 6a24 	vadd.f32	s12, s8, s9
 8010198:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801019c:	ee35 5a63 	vsub.f32	s10, s10, s7
 80101a0:	ee17 ca90 	vmov	ip, s15
 80101a4:	ed04 6a04 	vstr	s12, [r4, #-16]
 80101a8:	ed04 5a03 	vstr	s10, [r4, #-12]
 80101ac:	f846 c908 	str.w	ip, [r6], #-8
 80101b0:	edc6 6a01 	vstr	s13, [r6, #4]
 80101b4:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 80101b8:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 80101bc:	ee62 5a27 	vmul.f32	s11, s4, s15
 80101c0:	ee22 6a87 	vmul.f32	s12, s5, s14
 80101c4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80101c8:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80101cc:	ee61 6a07 	vmul.f32	s13, s2, s14
 80101d0:	ee20 7a87 	vmul.f32	s14, s1, s14
 80101d4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80101d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80101dc:	ee35 6a86 	vadd.f32	s12, s11, s12
 80101e0:	ee72 2ac2 	vsub.f32	s5, s5, s4
 80101e4:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80101e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101ec:	ee16 ca10 	vmov	ip, s12
 80101f0:	f840 cb08 	str.w	ip, [r0], #8
 80101f4:	ed40 2a01 	vstr	s5, [r0, #-4]
 80101f8:	edc3 0a04 	vstr	s1, [r3, #16]
 80101fc:	edc3 7a03 	vstr	s15, [r3, #12]
 8010200:	f47f aefc 	bne.w	800fffc <arm_cfft_radix8by4_f32+0x134>
 8010204:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010206:	9802      	ldr	r0, [sp, #8]
 8010208:	00cb      	lsls	r3, r1, #3
 801020a:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 801020e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010212:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8010216:	4498      	add	r8, r3
 8010218:	449c      	add	ip, r3
 801021a:	9102      	str	r1, [sp, #8]
 801021c:	9901      	ldr	r1, [sp, #4]
 801021e:	4419      	add	r1, r3
 8010220:	9101      	str	r1, [sp, #4]
 8010222:	9907      	ldr	r1, [sp, #28]
 8010224:	4419      	add	r1, r3
 8010226:	9107      	str	r1, [sp, #28]
 8010228:	9908      	ldr	r1, [sp, #32]
 801022a:	4419      	add	r1, r3
 801022c:	9b06      	ldr	r3, [sp, #24]
 801022e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010232:	9108      	str	r1, [sp, #32]
 8010234:	9306      	str	r3, [sp, #24]
 8010236:	9a01      	ldr	r2, [sp, #4]
 8010238:	2304      	movs	r3, #4
 801023a:	9e08      	ldr	r6, [sp, #32]
 801023c:	edd2 7a00 	vldr	s15, [r2]
 8010240:	ed96 7a00 	vldr	s14, [r6]
 8010244:	edd8 2a00 	vldr	s5, [r8]
 8010248:	ee77 5a87 	vadd.f32	s11, s15, s14
 801024c:	ed9c 3a00 	vldr	s6, [ip]
 8010250:	ed92 6a01 	vldr	s12, [r2, #4]
 8010254:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010258:	edd6 6a01 	vldr	s13, [r6, #4]
 801025c:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8010260:	ed9c 2a01 	vldr	s4, [ip, #4]
 8010264:	ee36 5a26 	vadd.f32	s10, s12, s13
 8010268:	edd8 7a01 	vldr	s15, [r8, #4]
 801026c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010270:	9d02      	ldr	r5, [sp, #8]
 8010272:	ee34 6a83 	vadd.f32	s12, s9, s6
 8010276:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801027a:	ee37 4a27 	vadd.f32	s8, s14, s15
 801027e:	9805      	ldr	r0, [sp, #20]
 8010280:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8010284:	4621      	mov	r1, r4
 8010286:	ed82 6a00 	vstr	s12, [r2]
 801028a:	ee35 6ae2 	vsub.f32	s12, s11, s5
 801028e:	edd8 3a01 	vldr	s7, [r8, #4]
 8010292:	ee75 5a67 	vsub.f32	s11, s10, s15
 8010296:	eddc 1a01 	vldr	s3, [ip, #4]
 801029a:	ee34 4a42 	vsub.f32	s8, s8, s4
 801029e:	ee75 3a23 	vadd.f32	s7, s10, s7
 80102a2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80102a6:	ee76 6aa2 	vadd.f32	s13, s13, s5
 80102aa:	ee33 5aa1 	vadd.f32	s10, s7, s3
 80102ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80102b2:	ee36 6a43 	vsub.f32	s12, s12, s6
 80102b6:	ed82 5a01 	vstr	s10, [r2, #4]
 80102ba:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80102be:	9a07      	ldr	r2, [sp, #28]
 80102c0:	ee77 7a02 	vadd.f32	s15, s14, s4
 80102c4:	ee36 7ac3 	vsub.f32	s14, s13, s6
 80102c8:	edd2 2a00 	vldr	s5, [r2]
 80102cc:	ed92 5a01 	vldr	s10, [r2, #4]
 80102d0:	ee64 3a22 	vmul.f32	s7, s8, s5
 80102d4:	ee24 4a05 	vmul.f32	s8, s8, s10
 80102d8:	ee24 5a85 	vmul.f32	s10, s9, s10
 80102dc:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80102e0:	ee33 5a85 	vadd.f32	s10, s7, s10
 80102e4:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80102e8:	ed88 5a00 	vstr	s10, [r8]
 80102ec:	edc8 4a01 	vstr	s9, [r8, #4]
 80102f0:	edd5 4a01 	vldr	s9, [r5, #4]
 80102f4:	edd5 6a00 	vldr	s13, [r5]
 80102f8:	9d06      	ldr	r5, [sp, #24]
 80102fa:	ee26 5a26 	vmul.f32	s10, s12, s13
 80102fe:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010302:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8010306:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801030a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801030e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010312:	ed86 6a01 	vstr	s12, [r6, #4]
 8010316:	edc6 5a00 	vstr	s11, [r6]
 801031a:	edd5 5a01 	vldr	s11, [r5, #4]
 801031e:	edd5 6a00 	vldr	s13, [r5]
 8010322:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010324:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8010328:	ee67 6a26 	vmul.f32	s13, s14, s13
 801032c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010330:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010334:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010338:	ee36 7a07 	vadd.f32	s14, s12, s14
 801033c:	edcc 7a01 	vstr	s15, [ip, #4]
 8010340:	ed8c 7a00 	vstr	s14, [ip]
 8010344:	6872      	ldr	r2, [r6, #4]
 8010346:	f000 f977 	bl	8010638 <arm_radix8_butterfly_f32>
 801034a:	9803      	ldr	r0, [sp, #12]
 801034c:	4621      	mov	r1, r4
 801034e:	6872      	ldr	r2, [r6, #4]
 8010350:	2304      	movs	r3, #4
 8010352:	f000 f971 	bl	8010638 <arm_radix8_butterfly_f32>
 8010356:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010358:	4621      	mov	r1, r4
 801035a:	6872      	ldr	r2, [r6, #4]
 801035c:	2304      	movs	r3, #4
 801035e:	f000 f96b 	bl	8010638 <arm_radix8_butterfly_f32>
 8010362:	4621      	mov	r1, r4
 8010364:	6872      	ldr	r2, [r6, #4]
 8010366:	2304      	movs	r3, #4
 8010368:	9804      	ldr	r0, [sp, #16]
 801036a:	b00f      	add	sp, #60	@ 0x3c
 801036c:	ecbd 8b06 	vpop	{d8-d10}
 8010370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010374:	f000 b960 	b.w	8010638 <arm_radix8_butterfly_f32>

08010378 <arm_cfft_f32>:
 8010378:	2a01      	cmp	r2, #1
 801037a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037e:	4606      	mov	r6, r0
 8010380:	4617      	mov	r7, r2
 8010382:	460c      	mov	r4, r1
 8010384:	4698      	mov	r8, r3
 8010386:	8805      	ldrh	r5, [r0, #0]
 8010388:	d053      	beq.n	8010432 <arm_cfft_f32+0xba>
 801038a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 801038e:	d04b      	beq.n	8010428 <arm_cfft_f32+0xb0>
 8010390:	d916      	bls.n	80103c0 <arm_cfft_f32+0x48>
 8010392:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8010396:	d01a      	beq.n	80103ce <arm_cfft_f32+0x56>
 8010398:	d95a      	bls.n	8010450 <arm_cfft_f32+0xd8>
 801039a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 801039e:	d043      	beq.n	8010428 <arm_cfft_f32+0xb0>
 80103a0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80103a4:	d105      	bne.n	80103b2 <arm_cfft_f32+0x3a>
 80103a6:	2301      	movs	r3, #1
 80103a8:	6872      	ldr	r2, [r6, #4]
 80103aa:	4629      	mov	r1, r5
 80103ac:	4620      	mov	r0, r4
 80103ae:	f000 f943 	bl	8010638 <arm_radix8_butterfly_f32>
 80103b2:	f1b8 0f00 	cmp.w	r8, #0
 80103b6:	d111      	bne.n	80103dc <arm_cfft_f32+0x64>
 80103b8:	2f01      	cmp	r7, #1
 80103ba:	d016      	beq.n	80103ea <arm_cfft_f32+0x72>
 80103bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c0:	2d20      	cmp	r5, #32
 80103c2:	d031      	beq.n	8010428 <arm_cfft_f32+0xb0>
 80103c4:	d948      	bls.n	8010458 <arm_cfft_f32+0xe0>
 80103c6:	2d40      	cmp	r5, #64	@ 0x40
 80103c8:	d0ed      	beq.n	80103a6 <arm_cfft_f32+0x2e>
 80103ca:	2d80      	cmp	r5, #128	@ 0x80
 80103cc:	d1f1      	bne.n	80103b2 <arm_cfft_f32+0x3a>
 80103ce:	4621      	mov	r1, r4
 80103d0:	4630      	mov	r0, r6
 80103d2:	f7ff fca9 	bl	800fd28 <arm_cfft_radix8by2_f32>
 80103d6:	f1b8 0f00 	cmp.w	r8, #0
 80103da:	d0ed      	beq.n	80103b8 <arm_cfft_f32+0x40>
 80103dc:	68b2      	ldr	r2, [r6, #8]
 80103de:	4620      	mov	r0, r4
 80103e0:	89b1      	ldrh	r1, [r6, #12]
 80103e2:	f7ef ff15 	bl	8000210 <arm_bitreversal_32>
 80103e6:	2f01      	cmp	r7, #1
 80103e8:	d1e8      	bne.n	80103bc <arm_cfft_f32+0x44>
 80103ea:	ee07 5a90 	vmov	s15, r5
 80103ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80103f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80103fa:	2d00      	cmp	r5, #0
 80103fc:	d0de      	beq.n	80103bc <arm_cfft_f32+0x44>
 80103fe:	f104 0108 	add.w	r1, r4, #8
 8010402:	2300      	movs	r3, #0
 8010404:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010408:	3301      	adds	r3, #1
 801040a:	ed51 7a01 	vldr	s15, [r1, #-4]
 801040e:	3108      	adds	r1, #8
 8010410:	429d      	cmp	r5, r3
 8010412:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010416:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801041a:	ed01 7a04 	vstr	s14, [r1, #-16]
 801041e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010422:	d1ef      	bne.n	8010404 <arm_cfft_f32+0x8c>
 8010424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010428:	4621      	mov	r1, r4
 801042a:	4630      	mov	r0, r6
 801042c:	f7ff fd4c 	bl	800fec8 <arm_cfft_radix8by4_f32>
 8010430:	e7bf      	b.n	80103b2 <arm_cfft_f32+0x3a>
 8010432:	b1a5      	cbz	r5, 801045e <arm_cfft_f32+0xe6>
 8010434:	f101 030c 	add.w	r3, r1, #12
 8010438:	2200      	movs	r2, #0
 801043a:	ed53 7a02 	vldr	s15, [r3, #-8]
 801043e:	3201      	adds	r2, #1
 8010440:	3308      	adds	r3, #8
 8010442:	eef1 7a67 	vneg.f32	s15, s15
 8010446:	4295      	cmp	r5, r2
 8010448:	ed43 7a04 	vstr	s15, [r3, #-16]
 801044c:	d1f5      	bne.n	801043a <arm_cfft_f32+0xc2>
 801044e:	e79c      	b.n	801038a <arm_cfft_f32+0x12>
 8010450:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8010454:	d0a7      	beq.n	80103a6 <arm_cfft_f32+0x2e>
 8010456:	e7ac      	b.n	80103b2 <arm_cfft_f32+0x3a>
 8010458:	2d10      	cmp	r5, #16
 801045a:	d0b8      	beq.n	80103ce <arm_cfft_f32+0x56>
 801045c:	e7a9      	b.n	80103b2 <arm_cfft_f32+0x3a>
 801045e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8010462:	d896      	bhi.n	8010392 <arm_cfft_f32+0x1a>
 8010464:	e7ac      	b.n	80103c0 <arm_cfft_f32+0x48>
 8010466:	bf00      	nop

08010468 <arm_cmplx_mag_f32>:
 8010468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801046c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8010470:	b084      	sub	sp, #16
 8010472:	d07f      	beq.n	8010574 <arm_cmplx_mag_f32+0x10c>
 8010474:	f100 0420 	add.w	r4, r0, #32
 8010478:	f101 0510 	add.w	r5, r1, #16
 801047c:	4646      	mov	r6, r8
 801047e:	2700      	movs	r7, #0
 8010480:	e05a      	b.n	8010538 <arm_cmplx_mag_f32+0xd0>
 8010482:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8010486:	eeb4 0a40 	vcmp.f32	s0, s0
 801048a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801048e:	f040 80a4 	bne.w	80105da <arm_cmplx_mag_f32+0x172>
 8010492:	ed05 0a04 	vstr	s0, [r5, #-16]
 8010496:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 801049a:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 801049e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80104a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80104a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80104aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80104ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b2:	f2c0 808f 	blt.w	80105d4 <arm_cmplx_mag_f32+0x16c>
 80104b6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80104ba:	eeb4 0a40 	vcmp.f32	s0, s0
 80104be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c2:	f040 80af 	bne.w	8010624 <arm_cmplx_mag_f32+0x1bc>
 80104c6:	ed05 0a03 	vstr	s0, [r5, #-12]
 80104ca:	ed54 7a04 	vldr	s15, [r4, #-16]
 80104ce:	ed14 0a03 	vldr	s0, [r4, #-12]
 80104d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80104d6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80104da:	ee77 7a80 	vadd.f32	s15, s15, s0
 80104de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80104e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e6:	db72      	blt.n	80105ce <arm_cmplx_mag_f32+0x166>
 80104e8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80104ec:	eeb4 0a40 	vcmp.f32	s0, s0
 80104f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104f4:	f040 808c 	bne.w	8010610 <arm_cmplx_mag_f32+0x1a8>
 80104f8:	ed05 0a02 	vstr	s0, [r5, #-8]
 80104fc:	ed54 7a02 	vldr	s15, [r4, #-8]
 8010500:	ed14 0a01 	vldr	s0, [r4, #-4]
 8010504:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010508:	ee20 0a00 	vmul.f32	s0, s0, s0
 801050c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010518:	db20      	blt.n	801055c <arm_cmplx_mag_f32+0xf4>
 801051a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801051e:	eeb4 0a40 	vcmp.f32	s0, s0
 8010522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010526:	d169      	bne.n	80105fc <arm_cmplx_mag_f32+0x194>
 8010528:	3e01      	subs	r6, #1
 801052a:	ed05 0a01 	vstr	s0, [r5, #-4]
 801052e:	f104 0420 	add.w	r4, r4, #32
 8010532:	f105 0510 	add.w	r5, r5, #16
 8010536:	d019      	beq.n	801056c <arm_cmplx_mag_f32+0x104>
 8010538:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 801053c:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8010540:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010544:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010548:	ee77 7a80 	vadd.f32	s15, s15, s0
 801054c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010554:	da95      	bge.n	8010482 <arm_cmplx_mag_f32+0x1a>
 8010556:	f845 7c10 	str.w	r7, [r5, #-16]
 801055a:	e79c      	b.n	8010496 <arm_cmplx_mag_f32+0x2e>
 801055c:	3e01      	subs	r6, #1
 801055e:	f845 7c04 	str.w	r7, [r5, #-4]
 8010562:	f104 0420 	add.w	r4, r4, #32
 8010566:	f105 0510 	add.w	r5, r5, #16
 801056a:	d1e5      	bne.n	8010538 <arm_cmplx_mag_f32+0xd0>
 801056c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8010570:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8010574:	f012 0503 	ands.w	r5, r2, #3
 8010578:	d026      	beq.n	80105c8 <arm_cmplx_mag_f32+0x160>
 801057a:	f100 0408 	add.w	r4, r0, #8
 801057e:	2600      	movs	r6, #0
 8010580:	e00c      	b.n	801059c <arm_cmplx_mag_f32+0x134>
 8010582:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8010586:	eeb4 0a40 	vcmp.f32	s0, s0
 801058a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058e:	d12e      	bne.n	80105ee <arm_cmplx_mag_f32+0x186>
 8010590:	3d01      	subs	r5, #1
 8010592:	ed01 0a01 	vstr	s0, [r1, #-4]
 8010596:	f104 0408 	add.w	r4, r4, #8
 801059a:	d015      	beq.n	80105c8 <arm_cmplx_mag_f32+0x160>
 801059c:	ed54 7a02 	vldr	s15, [r4, #-8]
 80105a0:	3104      	adds	r1, #4
 80105a2:	ed14 0a01 	vldr	s0, [r4, #-4]
 80105a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80105aa:	ee20 0a00 	vmul.f32	s0, s0, s0
 80105ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80105b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80105b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ba:	dae2      	bge.n	8010582 <arm_cmplx_mag_f32+0x11a>
 80105bc:	3d01      	subs	r5, #1
 80105be:	f841 6c04 	str.w	r6, [r1, #-4]
 80105c2:	f104 0408 	add.w	r4, r4, #8
 80105c6:	d1e9      	bne.n	801059c <arm_cmplx_mag_f32+0x134>
 80105c8:	b004      	add	sp, #16
 80105ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ce:	f845 7c08 	str.w	r7, [r5, #-8]
 80105d2:	e793      	b.n	80104fc <arm_cmplx_mag_f32+0x94>
 80105d4:	f845 7c0c 	str.w	r7, [r5, #-12]
 80105d8:	e777      	b.n	80104ca <arm_cmplx_mag_f32+0x62>
 80105da:	eeb0 0a67 	vmov.f32	s0, s15
 80105de:	9203      	str	r2, [sp, #12]
 80105e0:	9102      	str	r1, [sp, #8]
 80105e2:	9001      	str	r0, [sp, #4]
 80105e4:	f006 fc08 	bl	8016df8 <sqrtf>
 80105e8:	a801      	add	r0, sp, #4
 80105ea:	c807      	ldmia	r0, {r0, r1, r2}
 80105ec:	e751      	b.n	8010492 <arm_cmplx_mag_f32+0x2a>
 80105ee:	eeb0 0a67 	vmov.f32	s0, s15
 80105f2:	9101      	str	r1, [sp, #4]
 80105f4:	f006 fc00 	bl	8016df8 <sqrtf>
 80105f8:	9901      	ldr	r1, [sp, #4]
 80105fa:	e7c9      	b.n	8010590 <arm_cmplx_mag_f32+0x128>
 80105fc:	eeb0 0a67 	vmov.f32	s0, s15
 8010600:	9203      	str	r2, [sp, #12]
 8010602:	9102      	str	r1, [sp, #8]
 8010604:	9001      	str	r0, [sp, #4]
 8010606:	f006 fbf7 	bl	8016df8 <sqrtf>
 801060a:	a801      	add	r0, sp, #4
 801060c:	c807      	ldmia	r0, {r0, r1, r2}
 801060e:	e78b      	b.n	8010528 <arm_cmplx_mag_f32+0xc0>
 8010610:	eeb0 0a67 	vmov.f32	s0, s15
 8010614:	9203      	str	r2, [sp, #12]
 8010616:	9102      	str	r1, [sp, #8]
 8010618:	9001      	str	r0, [sp, #4]
 801061a:	f006 fbed 	bl	8016df8 <sqrtf>
 801061e:	a801      	add	r0, sp, #4
 8010620:	c807      	ldmia	r0, {r0, r1, r2}
 8010622:	e769      	b.n	80104f8 <arm_cmplx_mag_f32+0x90>
 8010624:	eeb0 0a67 	vmov.f32	s0, s15
 8010628:	9203      	str	r2, [sp, #12]
 801062a:	9102      	str	r1, [sp, #8]
 801062c:	9001      	str	r0, [sp, #4]
 801062e:	f006 fbe3 	bl	8016df8 <sqrtf>
 8010632:	a801      	add	r0, sp, #4
 8010634:	c807      	ldmia	r0, {r0, r1, r2}
 8010636:	e746      	b.n	80104c6 <arm_cmplx_mag_f32+0x5e>

08010638 <arm_radix8_butterfly_f32>:
 8010638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801063c:	469e      	mov	lr, r3
 801063e:	4603      	mov	r3, r0
 8010640:	468a      	mov	sl, r1
 8010642:	468b      	mov	fp, r1
 8010644:	3304      	adds	r3, #4
 8010646:	ed2d 8b10 	vpush	{d8-d15}
 801064a:	469c      	mov	ip, r3
 801064c:	b09d      	sub	sp, #116	@ 0x74
 801064e:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 801095c <arm_radix8_butterfly_f32+0x324>
 8010652:	9019      	str	r0, [sp, #100]	@ 0x64
 8010654:	921a      	str	r2, [sp, #104]	@ 0x68
 8010656:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010658:	ea4f 03db 	mov.w	r3, fp, lsr #3
 801065c:	f04f 0800 	mov.w	r8, #0
 8010660:	461a      	mov	r2, r3
 8010662:	9311      	str	r3, [sp, #68]	@ 0x44
 8010664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010668:	4611      	mov	r1, r2
 801066a:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801066e:	9300      	str	r3, [sp, #0]
 8010670:	0053      	lsls	r3, r2, #1
 8010672:	18d5      	adds	r5, r2, r3
 8010674:	9301      	str	r3, [sp, #4]
 8010676:	0113      	lsls	r3, r2, #4
 8010678:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801067a:	194c      	adds	r4, r1, r5
 801067c:	eb02 0609 	add.w	r6, r2, r9
 8010680:	9302      	str	r3, [sp, #8]
 8010682:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8010686:	4613      	mov	r3, r2
 8010688:	190a      	adds	r2, r1, r4
 801068a:	eb06 0709 	add.w	r7, r6, r9
 801068e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010692:	1888      	adds	r0, r1, r2
 8010694:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010698:	4401      	add	r1, r0
 801069a:	3204      	adds	r2, #4
 801069c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80106a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80106a4:	9b00      	ldr	r3, [sp, #0]
 80106a6:	3104      	adds	r1, #4
 80106a8:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80106ac:	44d8      	add	r8, fp
 80106ae:	ed90 7a00 	vldr	s14, [r0]
 80106b2:	ed94 5a00 	vldr	s10, [r4]
 80106b6:	45c2      	cmp	sl, r8
 80106b8:	edd7 3a00 	vldr	s7, [r7]
 80106bc:	ed96 6a00 	vldr	s12, [r6]
 80106c0:	ee37 1a85 	vadd.f32	s2, s15, s10
 80106c4:	ed52 6a01 	vldr	s13, [r2, #-4]
 80106c8:	ee73 4a87 	vadd.f32	s9, s7, s14
 80106cc:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80106d0:	edd5 7a00 	vldr	s15, [r5]
 80106d4:	ee73 3ac7 	vsub.f32	s7, s7, s14
 80106d8:	ed11 7a01 	vldr	s14, [r1, #-4]
 80106dc:	ee36 2a26 	vadd.f32	s4, s12, s13
 80106e0:	ee37 4a87 	vadd.f32	s8, s15, s14
 80106e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80106e8:	ee71 5a24 	vadd.f32	s11, s2, s9
 80106ec:	ee32 6a04 	vadd.f32	s12, s4, s8
 80106f0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80106f4:	ee31 1a64 	vsub.f32	s2, s2, s9
 80106f8:	ee75 4a86 	vadd.f32	s9, s11, s12
 80106fc:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8010700:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8010704:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8010708:	ee32 2a44 	vsub.f32	s4, s4, s8
 801070c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8010710:	ed94 0a01 	vldr	s0, [r4, #4]
 8010714:	edc4 5a00 	vstr	s11, [r4]
 8010718:	ee36 7a87 	vadd.f32	s14, s13, s14
 801071c:	edd6 5a01 	vldr	s11, [r6, #4]
 8010720:	edd5 2a01 	vldr	s5, [r5, #4]
 8010724:	ee75 1a27 	vadd.f32	s3, s10, s15
 8010728:	ed92 4a00 	vldr	s8, [r2]
 801072c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8010730:	edd1 4a00 	vldr	s9, [r1]
 8010734:	ee27 7a09 	vmul.f32	s14, s14, s18
 8010738:	ee35 3ac4 	vsub.f32	s6, s11, s8
 801073c:	ed9c 6a00 	vldr	s12, [ip]
 8010740:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8010744:	edd0 0a01 	vldr	s1, [r0, #4]
 8010748:	ed97 5a01 	vldr	s10, [r7, #4]
 801074c:	ee35 4a84 	vadd.f32	s8, s11, s8
 8010750:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8010754:	ee73 5a26 	vadd.f32	s11, s6, s13
 8010758:	ee76 2a00 	vadd.f32	s5, s12, s0
 801075c:	ee73 6a66 	vsub.f32	s13, s6, s13
 8010760:	ee36 6a40 	vsub.f32	s12, s12, s0
 8010764:	ee35 0a20 	vadd.f32	s0, s10, s1
 8010768:	ee65 5a89 	vmul.f32	s11, s11, s18
 801076c:	ee35 5a60 	vsub.f32	s10, s10, s1
 8010770:	ee32 3a80 	vadd.f32	s6, s5, s0
 8010774:	ee74 0a24 	vadd.f32	s1, s8, s9
 8010778:	ee66 6a89 	vmul.f32	s13, s13, s18
 801077c:	ee74 4a64 	vsub.f32	s9, s8, s9
 8010780:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8010784:	ee75 2a25 	vadd.f32	s5, s10, s11
 8010788:	ee33 0a20 	vadd.f32	s0, s6, s1
 801078c:	ee75 5a65 	vsub.f32	s11, s10, s11
 8010790:	ee33 3a60 	vsub.f32	s6, s6, s1
 8010794:	ee36 5a26 	vadd.f32	s10, s12, s13
 8010798:	ed8c 0a00 	vstr	s0, [ip]
 801079c:	ee76 6a66 	vsub.f32	s13, s12, s13
 80107a0:	449c      	add	ip, r3
 80107a2:	ee33 6a87 	vadd.f32	s12, s7, s14
 80107a6:	ed84 3a01 	vstr	s6, [r4, #4]
 80107aa:	ee33 7ac7 	vsub.f32	s14, s7, s14
 80107ae:	441c      	add	r4, r3
 80107b0:	ee71 3a24 	vadd.f32	s7, s2, s9
 80107b4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80107b8:	ee31 3aa2 	vadd.f32	s6, s3, s5
 80107bc:	edc7 3a00 	vstr	s7, [r7]
 80107c0:	ee34 1a42 	vsub.f32	s2, s8, s4
 80107c4:	edc0 4a00 	vstr	s9, [r0]
 80107c8:	ee77 3aa5 	vadd.f32	s7, s15, s11
 80107cc:	ee75 4a46 	vsub.f32	s9, s10, s12
 80107d0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80107d4:	ed87 1a01 	vstr	s2, [r7, #4]
 80107d8:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80107dc:	441f      	add	r7, r3
 80107de:	ee32 4a04 	vadd.f32	s8, s4, s8
 80107e2:	ee71 1ae2 	vsub.f32	s3, s3, s5
 80107e6:	ee36 6a05 	vadd.f32	s12, s12, s10
 80107ea:	ee37 7a26 	vadd.f32	s14, s14, s13
 80107ee:	ed80 4a01 	vstr	s8, [r0, #4]
 80107f2:	ed86 3a00 	vstr	s6, [r6]
 80107f6:	4418      	add	r0, r3
 80107f8:	ed41 1a01 	vstr	s3, [r1, #-4]
 80107fc:	ed42 3a01 	vstr	s7, [r2, #-4]
 8010800:	edc5 7a00 	vstr	s15, [r5]
 8010804:	edc6 4a01 	vstr	s9, [r6, #4]
 8010808:	441e      	add	r6, r3
 801080a:	ed81 6a00 	vstr	s12, [r1]
 801080e:	4419      	add	r1, r3
 8010810:	edc2 5a00 	vstr	s11, [r2]
 8010814:	441a      	add	r2, r3
 8010816:	ed85 7a01 	vstr	s14, [r5, #4]
 801081a:	441d      	add	r5, r3
 801081c:	f63f af44 	bhi.w	80106a8 <arm_radix8_butterfly_f32+0x70>
 8010820:	9300      	str	r3, [sp, #0]
 8010822:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010824:	2b07      	cmp	r3, #7
 8010826:	f240 81f4 	bls.w	8010c12 <arm_radix8_butterfly_f32+0x5da>
 801082a:	9901      	ldr	r1, [sp, #4]
 801082c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8010830:	9d02      	ldr	r5, [sp, #8]
 8010832:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8010836:	3101      	adds	r1, #1
 8010838:	eb04 000e 	add.w	r0, r4, lr
 801083c:	00e4      	lsls	r4, r4, #3
 801083e:	3508      	adds	r5, #8
 8010840:	4419      	add	r1, r3
 8010842:	eb00 0c0e 	add.w	ip, r0, lr
 8010846:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010848:	00c0      	lsls	r0, r0, #3
 801084a:	185e      	adds	r6, r3, r1
 801084c:	4617      	mov	r7, r2
 801084e:	9218      	str	r2, [sp, #96]	@ 0x60
 8010850:	f109 0908 	add.w	r9, r9, #8
 8010854:	199c      	adds	r4, r3, r6
 8010856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010858:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801085a:	9012      	str	r0, [sp, #72]	@ 0x48
 801085c:	195d      	adds	r5, r3, r5
 801085e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010860:	443a      	add	r2, r7
 8010862:	950c      	str	r5, [sp, #48]	@ 0x30
 8010864:	4698      	mov	r8, r3
 8010866:	4420      	add	r0, r4
 8010868:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801086a:	19d7      	adds	r7, r2, r7
 801086c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010870:	4405      	add	r5, r0
 8010872:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8010876:	9710      	str	r7, [sp, #64]	@ 0x40
 8010878:	eb0c 070e 	add.w	r7, ip, lr
 801087c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8010880:	3404      	adds	r4, #4
 8010882:	3004      	adds	r0, #4
 8010884:	44c8      	add	r8, r9
 8010886:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 801088a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801088c:	940a      	str	r4, [sp, #40]	@ 0x28
 801088e:	9009      	str	r0, [sp, #36]	@ 0x24
 8010890:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010894:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8010896:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801089a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801089c:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 80108a0:	eb07 080e 	add.w	r8, r7, lr
 80108a4:	eb04 0900 	add.w	r9, r4, r0
 80108a8:	00f8      	lsls	r0, r7, #3
 80108aa:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 80108ae:	3504      	adds	r5, #4
 80108b0:	4607      	mov	r7, r0
 80108b2:	9017      	str	r0, [sp, #92]	@ 0x5c
 80108b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80108b6:	4618      	mov	r0, r3
 80108b8:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 80108bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80108be:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 80108c2:	18e3      	adds	r3, r4, r3
 80108c4:	9508      	str	r5, [sp, #32]
 80108c6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80108c8:	910e      	str	r1, [sp, #56]	@ 0x38
 80108ca:	4621      	mov	r1, r4
 80108cc:	eb04 0805 	add.w	r8, r4, r5
 80108d0:	9304      	str	r3, [sp, #16]
 80108d2:	19e5      	adds	r5, r4, r7
 80108d4:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80108d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80108da:	9316      	str	r3, [sp, #88]	@ 0x58
 80108dc:	190b      	adds	r3, r1, r4
 80108de:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80108e0:	9505      	str	r5, [sp, #20]
 80108e2:	9303      	str	r3, [sp, #12]
 80108e4:	f100 0308 	add.w	r3, r0, #8
 80108e8:	9707      	str	r7, [sp, #28]
 80108ea:	4638      	mov	r0, r7
 80108ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80108ee:	2301      	movs	r3, #1
 80108f0:	9306      	str	r3, [sp, #24]
 80108f2:	9b00      	ldr	r3, [sp, #0]
 80108f4:	ed90 fa00 	vldr	s30, [r0]
 80108f8:	edd0 ba01 	vldr	s23, [r0, #4]
 80108fc:	9803      	ldr	r0, [sp, #12]
 80108fe:	9903      	ldr	r1, [sp, #12]
 8010900:	ed90 ba01 	vldr	s22, [r0, #4]
 8010904:	9804      	ldr	r0, [sp, #16]
 8010906:	edd1 ea00 	vldr	s29, [r1]
 801090a:	edd0 aa01 	vldr	s21, [r0, #4]
 801090e:	9805      	ldr	r0, [sp, #20]
 8010910:	9905      	ldr	r1, [sp, #20]
 8010912:	edd0 7a01 	vldr	s15, [r0, #4]
 8010916:	ed91 da00 	vldr	s26, [r1]
 801091a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801091c:	9c04      	ldr	r4, [sp, #16]
 801091e:	edcd 7a01 	vstr	s15, [sp, #4]
 8010922:	edd8 7a01 	vldr	s15, [r8, #4]
 8010926:	9100      	str	r1, [sp, #0]
 8010928:	edd2 fa00 	vldr	s31, [r2]
 801092c:	ed94 ea00 	vldr	s28, [r4]
 8010930:	ed92 ca01 	vldr	s24, [r2, #4]
 8010934:	f8dd e020 	ldr.w	lr, [sp, #32]
 8010938:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801093a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801093c:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801093e:	edd9 da00 	vldr	s27, [r9]
 8010942:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8010944:	edd8 ca00 	vldr	s25, [r8]
 8010948:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801094a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801094c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8010950:	ed99 aa01 	vldr	s20, [r9, #4]
 8010954:	edcd 7a02 	vstr	s15, [sp, #8]
 8010958:	9800      	ldr	r0, [sp, #0]
 801095a:	e001      	b.n	8010960 <arm_radix8_butterfly_f32+0x328>
 801095c:	3f3504f3 	.word	0x3f3504f3
 8010960:	edd5 3a00 	vldr	s7, [r5]
 8010964:	44dc      	add	ip, fp
 8010966:	ed91 7a00 	vldr	s14, [r1]
 801096a:	edd4 8a00 	vldr	s17, [r4]
 801096e:	45e2      	cmp	sl, ip
 8010970:	ed57 7a01 	vldr	s15, [r7, #-4]
 8010974:	ed90 5a00 	vldr	s10, [r0]
 8010978:	ed56 5a01 	vldr	s11, [r6, #-4]
 801097c:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8010980:	ed92 1a00 	vldr	s2, [r2]
 8010984:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8010988:	ed1e 4a01 	vldr	s8, [lr, #-4]
 801098c:	ee75 9a25 	vadd.f32	s19, s10, s11
 8010990:	ee31 3a07 	vadd.f32	s6, s2, s14
 8010994:	ed92 8a01 	vldr	s16, [r2, #4]
 8010998:	ee73 6a84 	vadd.f32	s13, s7, s8
 801099c:	ee75 5a65 	vsub.f32	s11, s10, s11
 80109a0:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80109a4:	ee73 1a06 	vadd.f32	s3, s6, s12
 80109a8:	ee39 5aa6 	vadd.f32	s10, s19, s13
 80109ac:	ee75 7a84 	vadd.f32	s15, s11, s8
 80109b0:	ee31 1a47 	vsub.f32	s2, s2, s14
 80109b4:	ee31 7a85 	vadd.f32	s14, s3, s10
 80109b8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80109bc:	ee33 3a46 	vsub.f32	s6, s6, s12
 80109c0:	ed82 7a00 	vstr	s14, [r2]
 80109c4:	ee79 9ae6 	vsub.f32	s19, s19, s13
 80109c8:	ed96 6a00 	vldr	s12, [r6]
 80109cc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80109d0:	edd5 3a01 	vldr	s7, [r5, #4]
 80109d4:	ee74 8ae7 	vsub.f32	s17, s9, s15
 80109d8:	ed90 7a01 	vldr	s14, [r0, #4]
 80109dc:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80109e0:	edde 4a00 	vldr	s9, [lr]
 80109e4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80109e8:	ee77 2a46 	vsub.f32	s5, s14, s12
 80109ec:	edd1 6a01 	vldr	s13, [r1, #4]
 80109f0:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80109f4:	edd7 0a00 	vldr	s1, [r7]
 80109f8:	ee77 5a06 	vadd.f32	s11, s14, s12
 80109fc:	ed94 7a01 	vldr	s14, [r4, #4]
 8010a00:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8010a04:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8010a08:	ee78 4a66 	vsub.f32	s9, s16, s13
 8010a0c:	ee78 3a26 	vadd.f32	s7, s16, s13
 8010a10:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8010a14:	ee77 6a20 	vadd.f32	s13, s14, s1
 8010a18:	ee24 4a09 	vmul.f32	s8, s8, s18
 8010a1c:	ee37 7a60 	vsub.f32	s14, s14, s1
 8010a20:	ee20 8a09 	vmul.f32	s16, s0, s18
 8010a24:	ee75 0a86 	vadd.f32	s1, s11, s12
 8010a28:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8010a2c:	ee62 2a89 	vmul.f32	s5, s5, s18
 8010a30:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010a34:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8010a38:	ee77 7a62 	vsub.f32	s15, s14, s5
 8010a3c:	ee74 5a88 	vadd.f32	s11, s9, s16
 8010a40:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8010a44:	ee77 4a22 	vadd.f32	s9, s14, s5
 8010a48:	ee71 2a04 	vadd.f32	s5, s2, s8
 8010a4c:	ee31 7a44 	vsub.f32	s14, s2, s8
 8010a50:	ee30 1a60 	vsub.f32	s2, s0, s1
 8010a54:	ee73 1a06 	vadd.f32	s3, s6, s12
 8010a58:	ee33 6a46 	vsub.f32	s12, s6, s12
 8010a5c:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8010a60:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8010a64:	ee38 4a68 	vsub.f32	s8, s16, s17
 8010a68:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8010a6c:	ee72 5a25 	vadd.f32	s11, s4, s11
 8010a70:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8010a74:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8010a78:	ee77 2a27 	vadd.f32	s5, s14, s15
 8010a7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a80:	ee78 7a88 	vadd.f32	s15, s17, s16
 8010a84:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8010a88:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8010a8c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8010a90:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8010a94:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8010a98:	ee70 0a20 	vadd.f32	s1, s0, s1
 8010a9c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8010aa0:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8010aa4:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8010aa8:	edc2 0a01 	vstr	s1, [r2, #4]
 8010aac:	ee38 8a88 	vadd.f32	s16, s17, s16
 8010ab0:	441a      	add	r2, r3
 8010ab2:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8010ab6:	ee31 5a45 	vsub.f32	s10, s2, s10
 8010aba:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8010abe:	ed81 8a00 	vstr	s16, [r1]
 8010ac2:	ee39 0a80 	vadd.f32	s0, s19, s0
 8010ac6:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010aca:	ed81 5a01 	vstr	s10, [r1, #4]
 8010ace:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8010ad2:	edcd 3a00 	vstr	s7, [sp]
 8010ad6:	ed9d 5a02 	vldr	s10, [sp, #8]
 8010ada:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8010ade:	eddd 3a01 	vldr	s7, [sp, #4]
 8010ae2:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8010ae6:	ed84 0a00 	vstr	s0, [r4]
 8010aea:	ee65 4a24 	vmul.f32	s9, s10, s9
 8010aee:	ed84 3a01 	vstr	s6, [r4, #4]
 8010af2:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8010af6:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010afa:	eddd 3a00 	vldr	s7, [sp]
 8010afe:	ee25 5a25 	vmul.f32	s10, s10, s11
 8010b02:	4419      	add	r1, r3
 8010b04:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8010b08:	441c      	add	r4, r3
 8010b0a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8010b0e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8010b12:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8010b16:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8010b1a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8010b1e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8010b22:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8010b26:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8010b2a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8010b2e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8010b32:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8010b36:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8010b3a:	ee38 8a01 	vadd.f32	s16, s16, s2
 8010b3e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8010b42:	ee39 5a85 	vadd.f32	s10, s19, s10
 8010b46:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8010b4a:	ed07 8a01 	vstr	s16, [r7, #-4]
 8010b4e:	ee30 0a21 	vadd.f32	s0, s0, s3
 8010b52:	ed87 6a00 	vstr	s12, [r7]
 8010b56:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010b5a:	edc0 0a00 	vstr	s1, [r0]
 8010b5e:	ee33 3a28 	vadd.f32	s6, s6, s17
 8010b62:	edc0 3a01 	vstr	s7, [r0, #4]
 8010b66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010b6a:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8010b6e:	edce 4a00 	vstr	s9, [lr]
 8010b72:	4418      	add	r0, r3
 8010b74:	ed06 0a01 	vstr	s0, [r6, #-4]
 8010b78:	441f      	add	r7, r3
 8010b7a:	edc6 2a00 	vstr	s5, [r6]
 8010b7e:	449e      	add	lr, r3
 8010b80:	ed85 3a00 	vstr	s6, [r5]
 8010b84:	441e      	add	r6, r3
 8010b86:	ed85 7a01 	vstr	s14, [r5, #4]
 8010b8a:	441d      	add	r5, r3
 8010b8c:	f63f aee8 	bhi.w	8010960 <arm_radix8_butterfly_f32+0x328>
 8010b90:	9a06      	ldr	r2, [sp, #24]
 8010b92:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010b94:	3201      	adds	r2, #1
 8010b96:	4611      	mov	r1, r2
 8010b98:	9206      	str	r2, [sp, #24]
 8010b9a:	9a07      	ldr	r2, [sp, #28]
 8010b9c:	4402      	add	r2, r0
 8010b9e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010ba0:	9207      	str	r2, [sp, #28]
 8010ba2:	9a03      	ldr	r2, [sp, #12]
 8010ba4:	4402      	add	r2, r0
 8010ba6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010ba8:	9203      	str	r2, [sp, #12]
 8010baa:	9a04      	ldr	r2, [sp, #16]
 8010bac:	4402      	add	r2, r0
 8010bae:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8010bb0:	9204      	str	r2, [sp, #16]
 8010bb2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010bb4:	4491      	add	r9, r2
 8010bb6:	9a05      	ldr	r2, [sp, #20]
 8010bb8:	4402      	add	r2, r0
 8010bba:	9205      	str	r2, [sp, #20]
 8010bbc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010bbe:	4490      	add	r8, r2
 8010bc0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010bc2:	3208      	adds	r2, #8
 8010bc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010bc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bc8:	3208      	adds	r2, #8
 8010bca:	920e      	str	r2, [sp, #56]	@ 0x38
 8010bcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010bce:	3208      	adds	r2, #8
 8010bd0:	920d      	str	r2, [sp, #52]	@ 0x34
 8010bd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010bd4:	3208      	adds	r2, #8
 8010bd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8010bd8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010bda:	3208      	adds	r2, #8
 8010bdc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010bde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010be0:	3208      	adds	r2, #8
 8010be2:	920a      	str	r2, [sp, #40]	@ 0x28
 8010be4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010be6:	3208      	adds	r2, #8
 8010be8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bea:	9a08      	ldr	r2, [sp, #32]
 8010bec:	3208      	adds	r2, #8
 8010bee:	9208      	str	r2, [sp, #32]
 8010bf0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8010bf2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010bf4:	4622      	mov	r2, r4
 8010bf6:	4288      	cmp	r0, r1
 8010bf8:	d005      	beq.n	8010c06 <arm_radix8_butterfly_f32+0x5ce>
 8010bfa:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8010bfc:	4621      	mov	r1, r4
 8010bfe:	4401      	add	r1, r0
 8010c00:	9807      	ldr	r0, [sp, #28]
 8010c02:	9110      	str	r1, [sp, #64]	@ 0x40
 8010c04:	e676      	b.n	80108f4 <arm_radix8_butterfly_f32+0x2bc>
 8010c06:	4683      	mov	fp, r0
 8010c08:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 8010c0c:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 8010c10:	e522      	b.n	8010658 <arm_radix8_butterfly_f32+0x20>
 8010c12:	b01d      	add	sp, #116	@ 0x74
 8010c14:	ecbd 8b10 	vpop	{d8-d15}
 8010c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c1c <ai_buffer_get_size>:
 8010c1c:	b368      	cbz	r0, 8010c7a <ai_buffer_get_size+0x5e>
 8010c1e:	4b17      	ldr	r3, [pc, #92]	@ (8010c7c <ai_buffer_get_size+0x60>)
 8010c20:	4a17      	ldr	r2, [pc, #92]	@ (8010c80 <ai_buffer_get_size+0x64>)
 8010c22:	b410      	push	{r4}
 8010c24:	6804      	ldr	r4, [r0, #0]
 8010c26:	4023      	ands	r3, r4
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d123      	bne.n	8010c74 <ai_buffer_get_size+0x58>
 8010c2c:	b311      	cbz	r1, 8010c74 <ai_buffer_get_size+0x58>
 8010c2e:	6984      	ldr	r4, [r0, #24]
 8010c30:	6862      	ldr	r2, [r4, #4]
 8010c32:	321f      	adds	r2, #31
 8010c34:	f022 021f 	bic.w	r2, r2, #31
 8010c38:	7d03      	ldrb	r3, [r0, #20]
 8010c3a:	6941      	ldr	r1, [r0, #20]
 8010c3c:	f1a3 0301 	sub.w	r3, r3, #1
 8010c40:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8010c44:	fab3 f383 	clz	r3, r3
 8010c48:	095b      	lsrs	r3, r3, #5
 8010c4a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8010c4e:	da0c      	bge.n	8010c6a <ai_buffer_get_size+0x4e>
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d103      	bne.n	8010c5c <ai_buffer_get_size+0x40>
 8010c54:	2802      	cmp	r0, #2
 8010c56:	f04f 0302 	mov.w	r3, #2
 8010c5a:	d006      	beq.n	8010c6a <ai_buffer_get_size+0x4e>
 8010c5c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8010c60:	3301      	adds	r3, #1
 8010c62:	4298      	cmp	r0, r3
 8010c64:	fb01 f202 	mul.w	r2, r1, r2
 8010c68:	d1f2      	bne.n	8010c50 <ai_buffer_get_size+0x34>
 8010c6a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8010c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c72:	4770      	bx	lr
 8010c74:	6984      	ldr	r4, [r0, #24]
 8010c76:	6862      	ldr	r2, [r4, #4]
 8010c78:	e7de      	b.n	8010c38 <ai_buffer_get_size+0x1c>
 8010c7a:	4770      	bx	lr
 8010c7c:	017fffff 	.word	0x017fffff
 8010c80:	000400c0 	.word	0x000400c0

08010c84 <ai_buffer_array_sane>:
 8010c84:	b138      	cbz	r0, 8010c96 <ai_buffer_array_sane+0x12>
 8010c86:	6843      	ldr	r3, [r0, #4]
 8010c88:	b123      	cbz	r3, 8010c94 <ai_buffer_array_sane+0x10>
 8010c8a:	8840      	ldrh	r0, [r0, #2]
 8010c8c:	3800      	subs	r0, #0
 8010c8e:	bf18      	it	ne
 8010c90:	2001      	movne	r0, #1
 8010c92:	4770      	bx	lr
 8010c94:	4618      	mov	r0, r3
 8010c96:	4770      	bx	lr

08010c98 <ai_buffer_array_item_set_address>:
 8010c98:	b150      	cbz	r0, 8010cb0 <ai_buffer_array_item_set_address+0x18>
 8010c9a:	6843      	ldr	r3, [r0, #4]
 8010c9c:	b14b      	cbz	r3, 8010cb2 <ai_buffer_array_item_set_address+0x1a>
 8010c9e:	8840      	ldrh	r0, [r0, #2]
 8010ca0:	b900      	cbnz	r0, 8010ca4 <ai_buffer_array_item_set_address+0xc>
 8010ca2:	4770      	bx	lr
 8010ca4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010ca8:	2001      	movs	r0, #1
 8010caa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010cae:	605a      	str	r2, [r3, #4]
 8010cb0:	4770      	bx	lr
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <ai_platform_get_weights_map>:
 8010cb8:	2900      	cmp	r1, #0
 8010cba:	bf18      	it	ne
 8010cbc:	2800      	cmpne	r0, #0
 8010cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cc0:	bf0c      	ite	eq
 8010cc2:	2401      	moveq	r4, #1
 8010cc4:	2400      	movne	r4, #0
 8010cc6:	2a00      	cmp	r2, #0
 8010cc8:	bf08      	it	eq
 8010cca:	f044 0401 	orreq.w	r4, r4, #1
 8010cce:	b114      	cbz	r4, 8010cd6 <ai_platform_get_weights_map+0x1e>
 8010cd0:	2400      	movs	r4, #0
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cd6:	4616      	mov	r6, r2
 8010cd8:	4b22      	ldr	r3, [pc, #136]	@ (8010d64 <ai_platform_get_weights_map+0xac>)
 8010cda:	6812      	ldr	r2, [r2, #0]
 8010cdc:	4605      	mov	r5, r0
 8010cde:	460f      	mov	r7, r1
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d022      	beq.n	8010d2a <ai_platform_get_weights_map+0x72>
 8010ce4:	6870      	ldr	r0, [r6, #4]
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	d0f2      	beq.n	8010cd0 <ai_platform_get_weights_map+0x18>
 8010cea:	6806      	ldr	r6, [r0, #0]
 8010cec:	429e      	cmp	r6, r3
 8010cee:	d006      	beq.n	8010cfe <ai_platform_get_weights_map+0x46>
 8010cf0:	f1a1 0401 	sub.w	r4, r1, #1
 8010cf4:	6028      	str	r0, [r5, #0]
 8010cf6:	fab4 f484 	clz	r4, r4
 8010cfa:	0964      	lsrs	r4, r4, #5
 8010cfc:	e7e9      	b.n	8010cd2 <ai_platform_get_weights_map+0x1a>
 8010cfe:	3d04      	subs	r5, #4
 8010d00:	4602      	mov	r2, r0
 8010d02:	4621      	mov	r1, r4
 8010d04:	e000      	b.n	8010d08 <ai_platform_get_weights_map+0x50>
 8010d06:	4619      	mov	r1, r3
 8010d08:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010d0c:	42b3      	cmp	r3, r6
 8010d0e:	d025      	beq.n	8010d5c <ai_platform_get_weights_map+0xa4>
 8010d10:	f845 3f04 	str.w	r3, [r5, #4]!
 8010d14:	1c4b      	adds	r3, r1, #1
 8010d16:	429f      	cmp	r7, r3
 8010d18:	d8f5      	bhi.n	8010d06 <ai_platform_get_weights_map+0x4e>
 8010d1a:	d1da      	bne.n	8010cd2 <ai_platform_get_weights_map+0x1a>
 8010d1c:	3102      	adds	r1, #2
 8010d1e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8010d22:	42b3      	cmp	r3, r6
 8010d24:	d1d5      	bne.n	8010cd2 <ai_platform_get_weights_map+0x1a>
 8010d26:	2401      	movs	r4, #1
 8010d28:	e7d3      	b.n	8010cd2 <ai_platform_get_weights_map+0x1a>
 8010d2a:	1d30      	adds	r0, r6, #4
 8010d2c:	f7ff ffaa 	bl	8010c84 <ai_buffer_array_sane>
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d0cd      	beq.n	8010cd0 <ai_platform_get_weights_map+0x18>
 8010d34:	88f3      	ldrh	r3, [r6, #6]
 8010d36:	429f      	cmp	r7, r3
 8010d38:	d1ca      	bne.n	8010cd0 <ai_platform_get_weights_map+0x18>
 8010d3a:	3d04      	subs	r5, #4
 8010d3c:	4622      	mov	r2, r4
 8010d3e:	68b3      	ldr	r3, [r6, #8]
 8010d40:	4423      	add	r3, r4
 8010d42:	341c      	adds	r4, #28
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	b123      	cbz	r3, 8010d52 <ai_platform_get_weights_map+0x9a>
 8010d48:	3201      	adds	r2, #1
 8010d4a:	f845 3f04 	str.w	r3, [r5, #4]!
 8010d4e:	4297      	cmp	r7, r2
 8010d50:	d8f5      	bhi.n	8010d3e <ai_platform_get_weights_map+0x86>
 8010d52:	1abc      	subs	r4, r7, r2
 8010d54:	fab4 f484 	clz	r4, r4
 8010d58:	0964      	lsrs	r4, r4, #5
 8010d5a:	e7ba      	b.n	8010cd2 <ai_platform_get_weights_map+0x1a>
 8010d5c:	428f      	cmp	r7, r1
 8010d5e:	d1b8      	bne.n	8010cd2 <ai_platform_get_weights_map+0x1a>
 8010d60:	e7e1      	b.n	8010d26 <ai_platform_get_weights_map+0x6e>
 8010d62:	bf00      	nop
 8010d64:	a1facade 	.word	0xa1facade

08010d68 <ai_platform_get_activations_map>:
 8010d68:	2900      	cmp	r1, #0
 8010d6a:	bf18      	it	ne
 8010d6c:	2800      	cmpne	r0, #0
 8010d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d70:	bf0c      	ite	eq
 8010d72:	2401      	moveq	r4, #1
 8010d74:	2400      	movne	r4, #0
 8010d76:	2a00      	cmp	r2, #0
 8010d78:	bf08      	it	eq
 8010d7a:	f044 0401 	orreq.w	r4, r4, #1
 8010d7e:	b114      	cbz	r4, 8010d86 <ai_platform_get_activations_map+0x1e>
 8010d80:	2400      	movs	r4, #0
 8010d82:	4620      	mov	r0, r4
 8010d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d86:	4616      	mov	r6, r2
 8010d88:	4b22      	ldr	r3, [pc, #136]	@ (8010e14 <ai_platform_get_activations_map+0xac>)
 8010d8a:	6812      	ldr	r2, [r2, #0]
 8010d8c:	4605      	mov	r5, r0
 8010d8e:	460f      	mov	r7, r1
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d022      	beq.n	8010dda <ai_platform_get_activations_map+0x72>
 8010d94:	6a30      	ldr	r0, [r6, #32]
 8010d96:	2800      	cmp	r0, #0
 8010d98:	d0f2      	beq.n	8010d80 <ai_platform_get_activations_map+0x18>
 8010d9a:	6806      	ldr	r6, [r0, #0]
 8010d9c:	429e      	cmp	r6, r3
 8010d9e:	d006      	beq.n	8010dae <ai_platform_get_activations_map+0x46>
 8010da0:	f1a1 0401 	sub.w	r4, r1, #1
 8010da4:	6028      	str	r0, [r5, #0]
 8010da6:	fab4 f484 	clz	r4, r4
 8010daa:	0964      	lsrs	r4, r4, #5
 8010dac:	e7e9      	b.n	8010d82 <ai_platform_get_activations_map+0x1a>
 8010dae:	3d04      	subs	r5, #4
 8010db0:	4602      	mov	r2, r0
 8010db2:	4621      	mov	r1, r4
 8010db4:	e000      	b.n	8010db8 <ai_platform_get_activations_map+0x50>
 8010db6:	4619      	mov	r1, r3
 8010db8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010dbc:	42b3      	cmp	r3, r6
 8010dbe:	d026      	beq.n	8010e0e <ai_platform_get_activations_map+0xa6>
 8010dc0:	f845 3f04 	str.w	r3, [r5, #4]!
 8010dc4:	1c4b      	adds	r3, r1, #1
 8010dc6:	429f      	cmp	r7, r3
 8010dc8:	d8f5      	bhi.n	8010db6 <ai_platform_get_activations_map+0x4e>
 8010dca:	d1da      	bne.n	8010d82 <ai_platform_get_activations_map+0x1a>
 8010dcc:	3102      	adds	r1, #2
 8010dce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8010dd2:	42b3      	cmp	r3, r6
 8010dd4:	d1d5      	bne.n	8010d82 <ai_platform_get_activations_map+0x1a>
 8010dd6:	2401      	movs	r4, #1
 8010dd8:	e7d3      	b.n	8010d82 <ai_platform_get_activations_map+0x1a>
 8010dda:	f106 000c 	add.w	r0, r6, #12
 8010dde:	f7ff ff51 	bl	8010c84 <ai_buffer_array_sane>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	d0cc      	beq.n	8010d80 <ai_platform_get_activations_map+0x18>
 8010de6:	89f3      	ldrh	r3, [r6, #14]
 8010de8:	429f      	cmp	r7, r3
 8010dea:	d1c9      	bne.n	8010d80 <ai_platform_get_activations_map+0x18>
 8010dec:	3d04      	subs	r5, #4
 8010dee:	4622      	mov	r2, r4
 8010df0:	6933      	ldr	r3, [r6, #16]
 8010df2:	4423      	add	r3, r4
 8010df4:	341c      	adds	r4, #28
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	b123      	cbz	r3, 8010e04 <ai_platform_get_activations_map+0x9c>
 8010dfa:	3201      	adds	r2, #1
 8010dfc:	f845 3f04 	str.w	r3, [r5, #4]!
 8010e00:	4297      	cmp	r7, r2
 8010e02:	d8f5      	bhi.n	8010df0 <ai_platform_get_activations_map+0x88>
 8010e04:	1abc      	subs	r4, r7, r2
 8010e06:	fab4 f484 	clz	r4, r4
 8010e0a:	0964      	lsrs	r4, r4, #5
 8010e0c:	e7b9      	b.n	8010d82 <ai_platform_get_activations_map+0x1a>
 8010e0e:	428f      	cmp	r7, r1
 8010e10:	d1b7      	bne.n	8010d82 <ai_platform_get_activations_map+0x1a>
 8010e12:	e7e0      	b.n	8010dd6 <ai_platform_get_activations_map+0x6e>
 8010e14:	a1facade 	.word	0xa1facade

08010e18 <ai_platform_bind_network_params>:
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	bf18      	it	ne
 8010e1c:	2900      	cmpne	r1, #0
 8010e1e:	d010      	beq.n	8010e42 <ai_platform_bind_network_params+0x2a>
 8010e20:	b178      	cbz	r0, 8010e42 <ai_platform_bind_network_params+0x2a>
 8010e22:	4603      	mov	r3, r0
 8010e24:	4808      	ldr	r0, [pc, #32]	@ (8010e48 <ai_platform_bind_network_params+0x30>)
 8010e26:	f103 0c0c 	add.w	ip, r3, #12
 8010e2a:	f843 0b04 	str.w	r0, [r3], #4
 8010e2e:	c903      	ldmia	r1, {r0, r1}
 8010e30:	e883 0003 	stmia.w	r3, {r0, r1}
 8010e34:	2301      	movs	r3, #1
 8010e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e3a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	4770      	bx	lr
 8010e42:	2300      	movs	r3, #0
 8010e44:	4618      	mov	r0, r3
 8010e46:	4770      	bx	lr
 8010e48:	a1facade 	.word	0xa1facade

08010e4c <ai_platform_network_get_error>:
 8010e4c:	4b04      	ldr	r3, [pc, #16]	@ (8010e60 <ai_platform_network_get_error+0x14>)
 8010e4e:	6802      	ldr	r2, [r0, #0]
 8010e50:	4393      	bics	r3, r2
 8010e52:	d102      	bne.n	8010e5a <ai_platform_network_get_error+0xe>
 8010e54:	300c      	adds	r0, #12
 8010e56:	f000 bc73 	b.w	8011740 <core_get_error>
 8010e5a:	f241 0010 	movw	r0, #4112	@ 0x1010
 8010e5e:	4770      	bx	lr
 8010e60:	a1c00100 	.word	0xa1c00100

08010e64 <ai_platform_network_set_error>:
 8010e64:	b110      	cbz	r0, 8010e6c <ai_platform_network_set_error+0x8>
 8010e66:	300c      	adds	r0, #12
 8010e68:	f000 bc70 	b.w	801174c <core_set_error>
 8010e6c:	4770      	bx	lr
 8010e6e:	bf00      	nop

08010e70 <ai_platform_inputs_get>:
 8010e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e74:	4b39      	ldr	r3, [pc, #228]	@ (8010f5c <ai_platform_inputs_get+0xec>)
 8010e76:	b085      	sub	sp, #20
 8010e78:	6802      	ldr	r2, [r0, #0]
 8010e7a:	4393      	bics	r3, r2
 8010e7c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8010e80:	d162      	bne.n	8010f48 <ai_platform_inputs_get+0xd8>
 8010e82:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d051      	beq.n	8010f2c <ai_platform_inputs_get+0xbc>
 8010e88:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8010e8c:	f1ba 0f00 	cmp.w	sl, #0
 8010e90:	d04c      	beq.n	8010f2c <ai_platform_inputs_get+0xbc>
 8010e92:	f04f 0900 	mov.w	r9, #0
 8010e96:	464d      	mov	r5, r9
 8010e98:	e016      	b.n	8010ec8 <ai_platform_inputs_get+0x58>
 8010e9a:	9901      	ldr	r1, [sp, #4]
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	f848 3001 	str.w	r3, [r8, r1]
 8010ea2:	69b1      	ldr	r1, [r6, #24]
 8010ea4:	f04f 0301 	mov.w	r3, #1
 8010ea8:	684e      	ldr	r6, [r1, #4]
 8010eaa:	3501      	adds	r5, #1
 8010eac:	f109 091c 	add.w	r9, r9, #28
 8010eb0:	7523      	strb	r3, [r4, #20]
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	6961      	ldr	r1, [r4, #20]
 8010eb6:	6020      	str	r0, [r4, #0]
 8010eb8:	f36b 211f 	bfi	r1, fp, #8, #24
 8010ebc:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8010ec0:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8010ec4:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8010ec8:	f8ba 3000 	ldrh.w	r3, [sl]
 8010ecc:	b2ac      	uxth	r4, r5
 8010ece:	42ab      	cmp	r3, r5
 8010ed0:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8010ed4:	9301      	str	r3, [sp, #4]
 8010ed6:	d93b      	bls.n	8010f50 <ai_platform_inputs_get+0xe0>
 8010ed8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d037      	beq.n	8010f50 <ai_platform_inputs_get+0xe0>
 8010ee0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8010ee4:	2e00      	cmp	r6, #0
 8010ee6:	d033      	beq.n	8010f50 <ai_platform_inputs_get+0xe0>
 8010ee8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010eec:	69b2      	ldr	r2, [r6, #24]
 8010eee:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8010ef2:	6810      	ldr	r0, [r2, #0]
 8010ef4:	68b3      	ldr	r3, [r6, #8]
 8010ef6:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8010efa:	68f2      	ldr	r2, [r6, #12]
 8010efc:	444c      	add	r4, r9
 8010efe:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8010f02:	9200      	str	r2, [sp, #0]
 8010f04:	f003 f814 	bl	8013f30 <ai_array_to_buffer_fmt>
 8010f08:	69b1      	ldr	r1, [r6, #24]
 8010f0a:	9a00      	ldr	r2, [sp, #0]
 8010f0c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8010f10:	2f00      	cmp	r7, #0
 8010f12:	d0c7      	beq.n	8010ea4 <ai_platform_inputs_get+0x34>
 8010f14:	2100      	movs	r1, #0
 8010f16:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8010f1a:	6831      	ldr	r1, [r6, #0]
 8010f1c:	6079      	str	r1, [r7, #4]
 8010f1e:	b111      	cbz	r1, 8010f26 <ai_platform_inputs_get+0xb6>
 8010f20:	8849      	ldrh	r1, [r1, #2]
 8010f22:	2900      	cmp	r1, #0
 8010f24:	d1b9      	bne.n	8010e9a <ai_platform_inputs_get+0x2a>
 8010f26:	69b1      	ldr	r1, [r6, #24]
 8010f28:	2700      	movs	r7, #0
 8010f2a:	e7bb      	b.n	8010ea4 <ai_platform_inputs_get+0x34>
 8010f2c:	9803      	ldr	r0, [sp, #12]
 8010f2e:	2400      	movs	r4, #0
 8010f30:	2218      	movs	r2, #24
 8010f32:	2111      	movs	r1, #17
 8010f34:	300c      	adds	r0, #12
 8010f36:	f000 fc09 	bl	801174c <core_set_error>
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	9b02      	ldr	r3, [sp, #8]
 8010f3e:	b103      	cbz	r3, 8010f42 <ai_platform_inputs_get+0xd2>
 8010f40:	801c      	strh	r4, [r3, #0]
 8010f42:	b005      	add	sp, #20
 8010f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f48:	2000      	movs	r0, #0
 8010f4a:	b005      	add	sp, #20
 8010f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f50:	2c00      	cmp	r4, #0
 8010f52:	d0eb      	beq.n	8010f2c <ai_platform_inputs_get+0xbc>
 8010f54:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010f58:	6858      	ldr	r0, [r3, #4]
 8010f5a:	e7ef      	b.n	8010f3c <ai_platform_inputs_get+0xcc>
 8010f5c:	a1c00100 	.word	0xa1c00100

08010f60 <ai_platform_outputs_get>:
 8010f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	4b38      	ldr	r3, [pc, #224]	@ (8011048 <ai_platform_outputs_get+0xe8>)
 8010f66:	b085      	sub	sp, #20
 8010f68:	6802      	ldr	r2, [r0, #0]
 8010f6a:	4393      	bics	r3, r2
 8010f6c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8010f70:	d15f      	bne.n	8011032 <ai_platform_outputs_get+0xd2>
 8010f72:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d94e      	bls.n	8011016 <ai_platform_outputs_get+0xb6>
 8010f78:	f04f 0900 	mov.w	r9, #0
 8010f7c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8010f80:	464d      	mov	r5, r9
 8010f82:	e016      	b.n	8010fb2 <ai_platform_outputs_get+0x52>
 8010f84:	9901      	ldr	r1, [sp, #4]
 8010f86:	2301      	movs	r3, #1
 8010f88:	f848 3001 	str.w	r3, [r8, r1]
 8010f8c:	69b1      	ldr	r1, [r6, #24]
 8010f8e:	f04f 0301 	mov.w	r3, #1
 8010f92:	684e      	ldr	r6, [r1, #4]
 8010f94:	3501      	adds	r5, #1
 8010f96:	f109 091c 	add.w	r9, r9, #28
 8010f9a:	7523      	strb	r3, [r4, #20]
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	6961      	ldr	r1, [r4, #20]
 8010fa0:	6020      	str	r0, [r4, #0]
 8010fa2:	f36b 211f 	bfi	r1, fp, #8, #24
 8010fa6:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8010faa:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8010fae:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8010fb2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010fb6:	b2ac      	uxth	r4, r5
 8010fb8:	42ab      	cmp	r3, r5
 8010fba:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8010fbe:	9301      	str	r3, [sp, #4]
 8010fc0:	d93b      	bls.n	801103a <ai_platform_outputs_get+0xda>
 8010fc2:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d037      	beq.n	801103a <ai_platform_outputs_get+0xda>
 8010fca:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8010fce:	2e00      	cmp	r6, #0
 8010fd0:	d033      	beq.n	801103a <ai_platform_outputs_get+0xda>
 8010fd2:	f8da 3014 	ldr.w	r3, [sl, #20]
 8010fd6:	69b2      	ldr	r2, [r6, #24]
 8010fd8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8010fdc:	6810      	ldr	r0, [r2, #0]
 8010fde:	68b3      	ldr	r3, [r6, #8]
 8010fe0:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8010fe4:	68f2      	ldr	r2, [r6, #12]
 8010fe6:	444c      	add	r4, r9
 8010fe8:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8010fec:	9200      	str	r2, [sp, #0]
 8010fee:	f002 ff9f 	bl	8013f30 <ai_array_to_buffer_fmt>
 8010ff2:	69b1      	ldr	r1, [r6, #24]
 8010ff4:	9a00      	ldr	r2, [sp, #0]
 8010ff6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8010ffa:	2f00      	cmp	r7, #0
 8010ffc:	d0c7      	beq.n	8010f8e <ai_platform_outputs_get+0x2e>
 8010ffe:	2100      	movs	r1, #0
 8011000:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8011004:	6831      	ldr	r1, [r6, #0]
 8011006:	6079      	str	r1, [r7, #4]
 8011008:	b111      	cbz	r1, 8011010 <ai_platform_outputs_get+0xb0>
 801100a:	8849      	ldrh	r1, [r1, #2]
 801100c:	2900      	cmp	r1, #0
 801100e:	d1b9      	bne.n	8010f84 <ai_platform_outputs_get+0x24>
 8011010:	69b1      	ldr	r1, [r6, #24]
 8011012:	2700      	movs	r7, #0
 8011014:	e7bb      	b.n	8010f8e <ai_platform_outputs_get+0x2e>
 8011016:	9803      	ldr	r0, [sp, #12]
 8011018:	2400      	movs	r4, #0
 801101a:	2218      	movs	r2, #24
 801101c:	2111      	movs	r1, #17
 801101e:	300c      	adds	r0, #12
 8011020:	f000 fb94 	bl	801174c <core_set_error>
 8011024:	4620      	mov	r0, r4
 8011026:	9b02      	ldr	r3, [sp, #8]
 8011028:	b103      	cbz	r3, 801102c <ai_platform_outputs_get+0xcc>
 801102a:	801c      	strh	r4, [r3, #0]
 801102c:	b005      	add	sp, #20
 801102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011032:	2000      	movs	r0, #0
 8011034:	b005      	add	sp, #20
 8011036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801103a:	2c00      	cmp	r4, #0
 801103c:	d0eb      	beq.n	8011016 <ai_platform_outputs_get+0xb6>
 801103e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8011042:	6858      	ldr	r0, [r3, #4]
 8011044:	e7ef      	b.n	8011026 <ai_platform_outputs_get+0xc6>
 8011046:	bf00      	nop
 8011048:	a1c00100 	.word	0xa1c00100

0801104c <ai_platform_network_create>:
 801104c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011050:	b083      	sub	sp, #12
 8011052:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8011056:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801105a:	b320      	cbz	r0, 80110a6 <ai_platform_network_create+0x5a>
 801105c:	6002      	str	r2, [r0, #0]
 801105e:	4616      	mov	r6, r2
 8011060:	461f      	mov	r7, r3
 8011062:	4604      	mov	r4, r0
 8011064:	f000 fb6a 	bl	801173c <core_init>
 8011068:	b970      	cbnz	r0, 8011088 <ai_platform_network_create+0x3c>
 801106a:	2530      	movs	r5, #48	@ 0x30
 801106c:	2300      	movs	r3, #0
 801106e:	6023      	str	r3, [r4, #0]
 8011070:	2410      	movs	r4, #16
 8011072:	464a      	mov	r2, r9
 8011074:	4641      	mov	r1, r8
 8011076:	4638      	mov	r0, r7
 8011078:	f003 f804 	bl	8014084 <ai_version_get>
 801107c:	60b0      	str	r0, [r6, #8]
 801107e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8011082:	b003      	add	sp, #12
 8011084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011088:	2200      	movs	r2, #0
 801108a:	4641      	mov	r1, r8
 801108c:	4638      	mov	r0, r7
 801108e:	f002 fff9 	bl	8014084 <ai_version_get>
 8011092:	4605      	mov	r5, r0
 8011094:	2200      	movs	r2, #0
 8011096:	2105      	movs	r1, #5
 8011098:	2001      	movs	r0, #1
 801109a:	f002 fff3 	bl	8014084 <ai_version_get>
 801109e:	4285      	cmp	r5, r0
 80110a0:	d008      	beq.n	80110b4 <ai_platform_network_create+0x68>
 80110a2:	2501      	movs	r5, #1
 80110a4:	e7e2      	b.n	801106c <ai_platform_network_create+0x20>
 80110a6:	2510      	movs	r5, #16
 80110a8:	462c      	mov	r4, r5
 80110aa:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80110ae:	b003      	add	sp, #12
 80110b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110b4:	4b05      	ldr	r3, [pc, #20]	@ (80110cc <ai_platform_network_create+0x80>)
 80110b6:	a801      	add	r0, sp, #4
 80110b8:	9301      	str	r3, [sp, #4]
 80110ba:	f000 fb53 	bl	8011764 <ai_check_custom_types>
 80110be:	b110      	cbz	r0, 80110c6 <ai_platform_network_create+0x7a>
 80110c0:	2400      	movs	r4, #0
 80110c2:	4625      	mov	r5, r4
 80110c4:	e7d5      	b.n	8011072 <ai_platform_network_create+0x26>
 80110c6:	2502      	movs	r5, #2
 80110c8:	e7d0      	b.n	801106c <ai_platform_network_create+0x20>
 80110ca:	bf00      	nop
 80110cc:	84048403 	.word	0x84048403

080110d0 <ai_platform_network_init>:
 80110d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	4a5c      	ldr	r2, [pc, #368]	@ (8011248 <ai_platform_network_init+0x178>)
 80110d6:	460c      	mov	r4, r1
 80110d8:	6801      	ldr	r1, [r0, #0]
 80110da:	438a      	bics	r2, r1
 80110dc:	d133      	bne.n	8011146 <ai_platform_network_init+0x76>
 80110de:	4605      	mov	r5, r0
 80110e0:	2c00      	cmp	r4, #0
 80110e2:	f000 8093 	beq.w	801120c <ai_platform_network_init+0x13c>
 80110e6:	f8d4 b000 	ldr.w	fp, [r4]
 80110ea:	4a58      	ldr	r2, [pc, #352]	@ (801124c <ai_platform_network_init+0x17c>)
 80110ec:	4593      	cmp	fp, r2
 80110ee:	d10f      	bne.n	8011110 <ai_platform_network_init+0x40>
 80110f0:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 80110f4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80110f8:	4b53      	ldr	r3, [pc, #332]	@ (8011248 <ai_platform_network_init+0x178>)
 80110fa:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 80110fe:	0c32      	lsrs	r2, r6, #16
 8011100:	4299      	cmp	r1, r3
 8011102:	d02c      	beq.n	801115e <ai_platform_network_init+0x8e>
 8011104:	2303      	movs	r3, #3
 8011106:	462c      	mov	r4, r5
 8011108:	612b      	str	r3, [r5, #16]
 801110a:	4620      	mov	r0, r4
 801110c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011110:	4627      	mov	r7, r4
 8011112:	2101      	movs	r1, #1
 8011114:	6864      	ldr	r4, [r4, #4]
 8011116:	4638      	mov	r0, r7
 8011118:	f107 081c 	add.w	r8, r7, #28
 801111c:	f7ff fd7e 	bl	8010c1c <ai_buffer_get_size>
 8011120:	4606      	mov	r6, r0
 8011122:	2101      	movs	r1, #1
 8011124:	4640      	mov	r0, r8
 8011126:	f8d7 9020 	ldr.w	r9, [r7, #32]
 801112a:	f7ff fd77 	bl	8010c1c <ai_buffer_get_size>
 801112e:	b976      	cbnz	r6, 801114e <ai_platform_network_init+0x7e>
 8011130:	2800      	cmp	r0, #0
 8011132:	d150      	bne.n	80111d6 <ai_platform_network_init+0x106>
 8011134:	4680      	mov	r8, r0
 8011136:	4686      	mov	lr, r0
 8011138:	4606      	mov	r6, r0
 801113a:	4607      	mov	r7, r0
 801113c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8011140:	6829      	ldr	r1, [r5, #0]
 8011142:	0436      	lsls	r6, r6, #16
 8011144:	e7d8      	b.n	80110f8 <ai_platform_network_init+0x28>
 8011146:	2400      	movs	r4, #0
 8011148:	4620      	mov	r0, r4
 801114a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801114e:	2800      	cmp	r0, #0
 8011150:	d13b      	bne.n	80111ca <ai_platform_network_init+0xfa>
 8011152:	4680      	mov	r8, r0
 8011154:	4686      	mov	lr, r0
 8011156:	2c00      	cmp	r4, #0
 8011158:	d05e      	beq.n	8011218 <ai_platform_network_init+0x148>
 801115a:	2601      	movs	r6, #1
 801115c:	e7ee      	b.n	801113c <ai_platform_network_init+0x6c>
 801115e:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8011160:	4293      	cmp	r3, r2
 8011162:	4b3a      	ldr	r3, [pc, #232]	@ (801124c <ai_platform_network_init+0x17c>)
 8011164:	d33e      	bcc.n	80111e4 <ai_platform_network_init+0x114>
 8011166:	459b      	cmp	fp, r3
 8011168:	d03e      	beq.n	80111e8 <ai_platform_network_init+0x118>
 801116a:	b1a2      	cbz	r2, 8011196 <ai_platform_network_init+0xc6>
 801116c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8011170:	f04f 0c00 	mov.w	ip, #0
 8011174:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8011178:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801117a:	eb07 0b0c 	add.w	fp, r7, ip
 801117e:	4464      	add	r4, ip
 8011180:	f10c 0c1c 	add.w	ip, ip, #28
 8011184:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8011188:	45cc      	cmp	ip, r9
 801118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801118c:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8011190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011194:	d1f0      	bne.n	8011178 <ai_platform_network_init+0xa8>
 8011196:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8011198:	622e      	str	r6, [r5, #32]
 801119a:	4553      	cmp	r3, sl
 801119c:	d34b      	bcc.n	8011236 <ai_platform_network_init+0x166>
 801119e:	f1ba 0f00 	cmp.w	sl, #0
 80111a2:	d025      	beq.n	80111f0 <ai_platform_network_init+0x120>
 80111a4:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80111a8:	2700      	movs	r7, #0
 80111aa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80111ae:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 80111b0:	eb08 0607 	add.w	r6, r8, r7
 80111b4:	443c      	add	r4, r7
 80111b6:	371c      	adds	r7, #28
 80111b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80111ba:	4557      	cmp	r7, sl
 80111bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80111be:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80111c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80111c6:	d1f2      	bne.n	80111ae <ai_platform_network_init+0xde>
 80111c8:	e012      	b.n	80111f0 <ai_platform_network_init+0x120>
 80111ca:	f1b9 0f00 	cmp.w	r9, #0
 80111ce:	d015      	beq.n	80111fc <ai_platform_network_init+0x12c>
 80111d0:	f04f 0e01 	mov.w	lr, #1
 80111d4:	e7bf      	b.n	8011156 <ai_platform_network_init+0x86>
 80111d6:	f1b9 0f00 	cmp.w	r9, #0
 80111da:	d00f      	beq.n	80111fc <ai_platform_network_init+0x12c>
 80111dc:	f04f 0e01 	mov.w	lr, #1
 80111e0:	4637      	mov	r7, r6
 80111e2:	e7ab      	b.n	801113c <ai_platform_network_init+0x6c>
 80111e4:	459b      	cmp	fp, r3
 80111e6:	d11e      	bne.n	8011226 <ai_platform_network_init+0x156>
 80111e8:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 80111ec:	e9c5 6708 	strd	r6, r7, [r5, #32]
 80111f0:	4628      	mov	r0, r5
 80111f2:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 80111f6:	f000 fadd 	bl	80117b4 <ai_layers_init_all>
 80111fa:	e783      	b.n	8011104 <ai_platform_network_init+0x34>
 80111fc:	2213      	movs	r2, #19
 80111fe:	2110      	movs	r1, #16
 8011200:	f105 000c 	add.w	r0, r5, #12
 8011204:	2400      	movs	r4, #0
 8011206:	f000 faa1 	bl	801174c <core_set_error>
 801120a:	e77e      	b.n	801110a <ai_platform_network_init+0x3a>
 801120c:	2211      	movs	r2, #17
 801120e:	2110      	movs	r1, #16
 8011210:	300c      	adds	r0, #12
 8011212:	f000 fa9b 	bl	801174c <core_set_error>
 8011216:	e778      	b.n	801110a <ai_platform_network_init+0x3a>
 8011218:	2212      	movs	r2, #18
 801121a:	2110      	movs	r1, #16
 801121c:	f105 000c 	add.w	r0, r5, #12
 8011220:	f000 fa94 	bl	801174c <core_set_error>
 8011224:	e771      	b.n	801110a <ai_platform_network_init+0x3a>
 8011226:	2212      	movs	r2, #18
 8011228:	2116      	movs	r1, #22
 801122a:	f105 000c 	add.w	r0, r5, #12
 801122e:	2400      	movs	r4, #0
 8011230:	f000 fa8c 	bl	801174c <core_set_error>
 8011234:	e769      	b.n	801110a <ai_platform_network_init+0x3a>
 8011236:	2213      	movs	r2, #19
 8011238:	2116      	movs	r1, #22
 801123a:	f105 000c 	add.w	r0, r5, #12
 801123e:	2400      	movs	r4, #0
 8011240:	f000 fa84 	bl	801174c <core_set_error>
 8011244:	e761      	b.n	801110a <ai_platform_network_init+0x3a>
 8011246:	bf00      	nop
 8011248:	a1c00100 	.word	0xa1c00100
 801124c:	a1facade 	.word	0xa1facade

08011250 <ai_platform_network_post_init>:
 8011250:	b538      	push	{r3, r4, r5, lr}
 8011252:	4b16      	ldr	r3, [pc, #88]	@ (80112ac <ai_platform_network_post_init+0x5c>)
 8011254:	6802      	ldr	r2, [r0, #0]
 8011256:	ea02 0103 	and.w	r1, r2, r3
 801125a:	4393      	bics	r3, r2
 801125c:	d108      	bne.n	8011270 <ai_platform_network_post_init+0x20>
 801125e:	6903      	ldr	r3, [r0, #16]
 8011260:	4604      	mov	r4, r0
 8011262:	f013 0502 	ands.w	r5, r3, #2
 8011266:	d005      	beq.n	8011274 <ai_platform_network_post_init+0x24>
 8011268:	428a      	cmp	r2, r1
 801126a:	d00a      	beq.n	8011282 <ai_platform_network_post_init+0x32>
 801126c:	2001      	movs	r0, #1
 801126e:	bd38      	pop	{r3, r4, r5, pc}
 8011270:	2000      	movs	r0, #0
 8011272:	bd38      	pop	{r3, r4, r5, pc}
 8011274:	2210      	movs	r2, #16
 8011276:	2111      	movs	r1, #17
 8011278:	300c      	adds	r0, #12
 801127a:	f000 fa67 	bl	801174c <core_set_error>
 801127e:	4628      	mov	r0, r5
 8011280:	bd38      	pop	{r3, r4, r5, pc}
 8011282:	f000 faa5 	bl	80117d0 <ai_layers_post_init_all>
 8011286:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011288:	2b00      	cmp	r3, #0
 801128a:	d0ef      	beq.n	801126c <ai_platform_network_post_init+0x1c>
 801128c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801128e:	e008      	b.n	80112a2 <ai_platform_network_post_init+0x52>
 8011290:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8011294:	4798      	blx	r3
 8011296:	692b      	ldr	r3, [r5, #16]
 8011298:	42ab      	cmp	r3, r5
 801129a:	461d      	mov	r5, r3
 801129c:	d0e6      	beq.n	801126c <ai_platform_network_post_init+0x1c>
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d0e4      	beq.n	801126c <ai_platform_network_post_init+0x1c>
 80112a2:	4629      	mov	r1, r5
 80112a4:	2000      	movs	r0, #0
 80112a6:	2d00      	cmp	r5, #0
 80112a8:	d1f2      	bne.n	8011290 <ai_platform_network_post_init+0x40>
 80112aa:	e7df      	b.n	801126c <ai_platform_network_post_init+0x1c>
 80112ac:	a1c00100 	.word	0xa1c00100

080112b0 <ai_platform_network_process>:
 80112b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b4:	b085      	sub	sp, #20
 80112b6:	4bb7      	ldr	r3, [pc, #732]	@ (8011594 <ai_platform_network_process+0x2e4>)
 80112b8:	9202      	str	r2, [sp, #8]
 80112ba:	6802      	ldr	r2, [r0, #0]
 80112bc:	4393      	bics	r3, r2
 80112be:	f040 8142 	bne.w	8011546 <ai_platform_network_process+0x296>
 80112c2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80112c4:	4605      	mov	r5, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	f000 8126 	beq.w	8011518 <ai_platform_network_process+0x268>
 80112cc:	6903      	ldr	r3, [r0, #16]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 80112d4:	f003 0303 	and.w	r3, r3, #3
 80112d8:	6182      	str	r2, [r0, #24]
 80112da:	2b03      	cmp	r3, #3
 80112dc:	f040 8122 	bne.w	8011524 <ai_platform_network_process+0x274>
 80112e0:	2900      	cmp	r1, #0
 80112e2:	f000 8136 	beq.w	8011552 <ai_platform_network_process+0x2a2>
 80112e6:	fab8 f788 	clz	r7, r8
 80112ea:	097f      	lsrs	r7, r7, #5
 80112ec:	f1b8 0f00 	cmp.w	r8, #0
 80112f0:	f000 812f 	beq.w	8011552 <ai_platform_network_process+0x2a2>
 80112f4:	f8b8 3000 	ldrh.w	r3, [r8]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f000 812a 	beq.w	8011552 <ai_platform_network_process+0x2a2>
 80112fe:	698b      	ldr	r3, [r1, #24]
 8011300:	460e      	mov	r6, r1
 8011302:	9003      	str	r0, [sp, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	9301      	str	r3, [sp, #4]
 8011308:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d072      	beq.n	80113f6 <ai_platform_network_process+0x146>
 8011310:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8011314:	2c00      	cmp	r4, #0
 8011316:	d06e      	beq.n	80113f6 <ai_platform_network_process+0x146>
 8011318:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801131c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8011320:	f8d3 a000 	ldr.w	sl, [r3]
 8011324:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8011328:	f000 8112 	beq.w	8011550 <ai_platform_network_process+0x2a0>
 801132c:	69a3      	ldr	r3, [r4, #24]
 801132e:	2101      	movs	r1, #1
 8011330:	4630      	mov	r0, r6
 8011332:	685d      	ldr	r5, [r3, #4]
 8011334:	f7ff fc72 	bl	8010c1c <ai_buffer_get_size>
 8011338:	4285      	cmp	r5, r0
 801133a:	f0c0 8115 	bcc.w	8011568 <ai_platform_network_process+0x2b8>
 801133e:	68e0      	ldr	r0, [r4, #12]
 8011340:	69b1      	ldr	r1, [r6, #24]
 8011342:	68c2      	ldr	r2, [r0, #12]
 8011344:	68cb      	ldr	r3, [r1, #12]
 8011346:	429a      	cmp	r2, r3
 8011348:	f040 810e 	bne.w	8011568 <ai_platform_network_process+0x2b8>
 801134c:	6882      	ldr	r2, [r0, #8]
 801134e:	688b      	ldr	r3, [r1, #8]
 8011350:	429a      	cmp	r2, r3
 8011352:	f040 8109 	bne.w	8011568 <ai_platform_network_process+0x2b8>
 8011356:	6842      	ldr	r2, [r0, #4]
 8011358:	684b      	ldr	r3, [r1, #4]
 801135a:	429a      	cmp	r2, r3
 801135c:	f040 8104 	bne.w	8011568 <ai_platform_network_process+0x2b8>
 8011360:	69a3      	ldr	r3, [r4, #24]
 8011362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011366:	f002 fe7b 	bl	8014060 <ai_array_get_data_byte_size>
 801136a:	4605      	mov	r5, r0
 801136c:	4620      	mov	r0, r4
 801136e:	f002 fe8f 	bl	8014090 <get_tensor_byte_size>
 8011372:	4285      	cmp	r5, r0
 8011374:	f0c0 80f8 	bcc.w	8011568 <ai_platform_network_process+0x2b8>
 8011378:	69a3      	ldr	r3, [r4, #24]
 801137a:	6818      	ldr	r0, [r3, #0]
 801137c:	f002 fdd8 	bl	8013f30 <ai_array_to_buffer_fmt>
 8011380:	6833      	ldr	r3, [r6, #0]
 8011382:	4058      	eors	r0, r3
 8011384:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8011388:	f040 81a4 	bne.w	80116d4 <ai_platform_network_process+0x424>
 801138c:	6873      	ldr	r3, [r6, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	f000 80de 	beq.w	8011550 <ai_platform_network_process+0x2a0>
 8011394:	69b3      	ldr	r3, [r6, #24]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 81a4 	beq.w	80116e6 <ai_platform_network_process+0x436>
 801139e:	9a01      	ldr	r2, [sp, #4]
 80113a0:	4620      	mov	r0, r4
 80113a2:	3701      	adds	r7, #1
 80113a4:	361c      	adds	r6, #28
 80113a6:	429a      	cmp	r2, r3
 80113a8:	bf38      	it	cc
 80113aa:	461a      	movcc	r2, r3
 80113ac:	9201      	str	r2, [sp, #4]
 80113ae:	f002 fe6f 	bl	8014090 <get_tensor_byte_size>
 80113b2:	f8c9 0008 	str.w	r0, [r9, #8]
 80113b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	fb00 f303 	mul.w	r3, r0, r3
 80113c0:	f8c9 300c 	str.w	r3, [r9, #12]
 80113c4:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80113c8:	440b      	add	r3, r1
 80113ca:	f8c9 1004 	str.w	r1, [r9, #4]
 80113ce:	f84a 300b 	str.w	r3, [sl, fp]
 80113d2:	69a0      	ldr	r0, [r4, #24]
 80113d4:	6803      	ldr	r3, [r0, #0]
 80113d6:	009a      	lsls	r2, r3, #2
 80113d8:	f100 80af 	bmi.w	801153a <ai_platform_network_process+0x28a>
 80113dc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80113e0:	1a9b      	subs	r3, r3, r2
 80113e2:	4419      	add	r1, r3
 80113e4:	6081      	str	r1, [r0, #8]
 80113e6:	69a3      	ldr	r3, [r4, #24]
 80113e8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80113ec:	60da      	str	r2, [r3, #12]
 80113ee:	f8b8 3000 	ldrh.w	r3, [r8]
 80113f2:	42bb      	cmp	r3, r7
 80113f4:	d888      	bhi.n	8011308 <ai_platform_network_process+0x58>
 80113f6:	9d03      	ldr	r5, [sp, #12]
 80113f8:	9b02      	ldr	r3, [sp, #8]
 80113fa:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	f000 817b 	beq.w	80116f8 <ai_platform_network_process+0x448>
 8011402:	2a01      	cmp	r2, #1
 8011404:	f240 80bd 	bls.w	8011582 <ai_platform_network_process+0x2d2>
 8011408:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 801140c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80b6 	beq.w	8011582 <ai_platform_network_process+0x2d2>
 8011416:	2700      	movs	r7, #0
 8011418:	f8dd b008 	ldr.w	fp, [sp, #8]
 801141c:	9502      	str	r5, [sp, #8]
 801141e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011422:	2b00      	cmp	r3, #0
 8011424:	f000 80bd 	beq.w	80115a2 <ai_platform_network_process+0x2f2>
 8011428:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 801142c:	2e00      	cmp	r6, #0
 801142e:	f000 80b8 	beq.w	80115a2 <ai_platform_network_process+0x2f2>
 8011432:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011436:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801143a:	681c      	ldr	r4, [r3, #0]
 801143c:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8011440:	f000 8170 	beq.w	8011724 <ai_platform_network_process+0x474>
 8011444:	69b3      	ldr	r3, [r6, #24]
 8011446:	2101      	movs	r1, #1
 8011448:	4658      	mov	r0, fp
 801144a:	685d      	ldr	r5, [r3, #4]
 801144c:	f7ff fbe6 	bl	8010c1c <ai_buffer_get_size>
 8011450:	4285      	cmp	r5, r0
 8011452:	f0c0 8095 	bcc.w	8011580 <ai_platform_network_process+0x2d0>
 8011456:	68f0      	ldr	r0, [r6, #12]
 8011458:	f8db 1018 	ldr.w	r1, [fp, #24]
 801145c:	68c2      	ldr	r2, [r0, #12]
 801145e:	68cb      	ldr	r3, [r1, #12]
 8011460:	429a      	cmp	r2, r3
 8011462:	f040 808d 	bne.w	8011580 <ai_platform_network_process+0x2d0>
 8011466:	6882      	ldr	r2, [r0, #8]
 8011468:	688b      	ldr	r3, [r1, #8]
 801146a:	429a      	cmp	r2, r3
 801146c:	f040 8088 	bne.w	8011580 <ai_platform_network_process+0x2d0>
 8011470:	6842      	ldr	r2, [r0, #4]
 8011472:	684b      	ldr	r3, [r1, #4]
 8011474:	429a      	cmp	r2, r3
 8011476:	f040 8083 	bne.w	8011580 <ai_platform_network_process+0x2d0>
 801147a:	69b3      	ldr	r3, [r6, #24]
 801147c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011480:	f002 fdee 	bl	8014060 <ai_array_get_data_byte_size>
 8011484:	9003      	str	r0, [sp, #12]
 8011486:	4630      	mov	r0, r6
 8011488:	f002 fe02 	bl	8014090 <get_tensor_byte_size>
 801148c:	9b03      	ldr	r3, [sp, #12]
 801148e:	4283      	cmp	r3, r0
 8011490:	d376      	bcc.n	8011580 <ai_platform_network_process+0x2d0>
 8011492:	69b3      	ldr	r3, [r6, #24]
 8011494:	6818      	ldr	r0, [r3, #0]
 8011496:	f002 fd4b 	bl	8013f30 <ai_array_to_buffer_fmt>
 801149a:	f8db 3000 	ldr.w	r3, [fp]
 801149e:	4058      	eors	r0, r3
 80114a0:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80114a4:	f040 812c 	bne.w	8011700 <ai_platform_network_process+0x450>
 80114a8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	f000 8139 	beq.w	8011724 <ai_platform_network_process+0x474>
 80114b2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	f000 812a 	beq.w	8011712 <ai_platform_network_process+0x462>
 80114be:	9a01      	ldr	r2, [sp, #4]
 80114c0:	4630      	mov	r0, r6
 80114c2:	3701      	adds	r7, #1
 80114c4:	f10b 0b1c 	add.w	fp, fp, #28
 80114c8:	429a      	cmp	r2, r3
 80114ca:	bf38      	it	cc
 80114cc:	461a      	movcc	r2, r3
 80114ce:	9201      	str	r2, [sp, #4]
 80114d0:	f002 fdde 	bl	8014090 <get_tensor_byte_size>
 80114d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80114d8:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	fb00 f303 	mul.w	r3, r0, r3
 80114e2:	f8c8 300c 	str.w	r3, [r8, #12]
 80114e6:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 80114ea:	440b      	add	r3, r1
 80114ec:	f8c8 1004 	str.w	r1, [r8, #4]
 80114f0:	f844 300a 	str.w	r3, [r4, sl]
 80114f4:	69b0      	ldr	r0, [r6, #24]
 80114f6:	6803      	ldr	r3, [r0, #0]
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	d44d      	bmi.n	8011598 <ai_platform_network_process+0x2e8>
 80114fc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8011500:	1a9b      	subs	r3, r3, r2
 8011502:	4419      	add	r1, r3
 8011504:	6081      	str	r1, [r0, #8]
 8011506:	69b3      	ldr	r3, [r6, #24]
 8011508:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801150c:	60da      	str	r2, [r3, #12]
 801150e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8011512:	42bb      	cmp	r3, r7
 8011514:	d883      	bhi.n	801141e <ai_platform_network_process+0x16e>
 8011516:	e044      	b.n	80115a2 <ai_platform_network_process+0x2f2>
 8011518:	6902      	ldr	r2, [r0, #16]
 801151a:	6183      	str	r3, [r0, #24]
 801151c:	f002 0203 	and.w	r2, r2, #3
 8011520:	2a03      	cmp	r2, #3
 8011522:	d016      	beq.n	8011552 <ai_platform_network_process+0x2a2>
 8011524:	2230      	movs	r2, #48	@ 0x30
 8011526:	2111      	movs	r1, #17
 8011528:	f105 000c 	add.w	r0, r5, #12
 801152c:	2400      	movs	r4, #0
 801152e:	f000 f90d 	bl	801174c <core_set_error>
 8011532:	4620      	mov	r0, r4
 8011534:	b005      	add	sp, #20
 8011536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153a:	f8b8 3000 	ldrh.w	r3, [r8]
 801153e:	429f      	cmp	r7, r3
 8011540:	f4ff aee2 	bcc.w	8011308 <ai_platform_network_process+0x58>
 8011544:	e757      	b.n	80113f6 <ai_platform_network_process+0x146>
 8011546:	2400      	movs	r4, #0
 8011548:	4620      	mov	r0, r4
 801154a:	b005      	add	sp, #20
 801154c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011550:	9d03      	ldr	r5, [sp, #12]
 8011552:	2400      	movs	r4, #0
 8011554:	2217      	movs	r2, #23
 8011556:	2112      	movs	r1, #18
 8011558:	f105 000c 	add.w	r0, r5, #12
 801155c:	f000 f8f6 	bl	801174c <core_set_error>
 8011560:	4620      	mov	r0, r4
 8011562:	b005      	add	sp, #20
 8011564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011568:	9d03      	ldr	r5, [sp, #12]
 801156a:	2400      	movs	r4, #0
 801156c:	2218      	movs	r2, #24
 801156e:	2112      	movs	r1, #18
 8011570:	f105 000c 	add.w	r0, r5, #12
 8011574:	f000 f8ea 	bl	801174c <core_set_error>
 8011578:	4620      	mov	r0, r4
 801157a:	b005      	add	sp, #20
 801157c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011580:	9d02      	ldr	r5, [sp, #8]
 8011582:	2218      	movs	r2, #24
 8011584:	2113      	movs	r1, #19
 8011586:	f105 000c 	add.w	r0, r5, #12
 801158a:	2400      	movs	r4, #0
 801158c:	f000 f8de 	bl	801174c <core_set_error>
 8011590:	e7cf      	b.n	8011532 <ai_platform_network_process+0x282>
 8011592:	bf00      	nop
 8011594:	a1c00100 	.word	0xa1c00100
 8011598:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801159c:	429f      	cmp	r7, r3
 801159e:	f4ff af3e 	bcc.w	801141e <ai_platform_network_process+0x16e>
 80115a2:	9d02      	ldr	r5, [sp, #8]
 80115a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80115a8:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80115aa:	832b      	strh	r3, [r5, #24]
 80115ac:	2a00      	cmp	r2, #0
 80115ae:	f040 808b 	bne.w	80116c8 <ai_platform_network_process+0x418>
 80115b2:	4616      	mov	r6, r2
 80115b4:	4617      	mov	r7, r2
 80115b6:	8b6c      	ldrh	r4, [r5, #26]
 80115b8:	429c      	cmp	r4, r3
 80115ba:	d2ba      	bcs.n	8011532 <ai_platform_network_process+0x282>
 80115bc:	46ab      	mov	fp, r5
 80115be:	2e00      	cmp	r6, #0
 80115c0:	d030      	beq.n	8011624 <ai_platform_network_process+0x374>
 80115c2:	f04f 0800 	mov.w	r8, #0
 80115c6:	e014      	b.n	80115f2 <ai_platform_network_process+0x342>
 80115c8:	6882      	ldr	r2, [r0, #8]
 80115ca:	68c5      	ldr	r5, [r0, #12]
 80115cc:	6863      	ldr	r3, [r4, #4]
 80115ce:	1b52      	subs	r2, r2, r5
 80115d0:	4413      	add	r3, r2
 80115d2:	6083      	str	r3, [r0, #8]
 80115d4:	698b      	ldr	r3, [r1, #24]
 80115d6:	6862      	ldr	r2, [r4, #4]
 80115d8:	60da      	str	r2, [r3, #12]
 80115da:	f859 200a 	ldr.w	r2, [r9, sl]
 80115de:	f108 0801 	add.w	r8, r8, #1
 80115e2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80115e6:	440b      	add	r3, r1
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d301      	bcc.n	80115f0 <ai_platform_network_process+0x340>
 80115ec:	68e3      	ldr	r3, [r4, #12]
 80115ee:	1ad3      	subs	r3, r2, r3
 80115f0:	6063      	str	r3, [r4, #4]
 80115f2:	8833      	ldrh	r3, [r6, #0]
 80115f4:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80115f8:	4543      	cmp	r3, r8
 80115fa:	d913      	bls.n	8011624 <ai_platform_network_process+0x374>
 80115fc:	6873      	ldr	r3, [r6, #4]
 80115fe:	b18b      	cbz	r3, 8011624 <ai_platform_network_process+0x374>
 8011600:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8011604:	b171      	cbz	r1, 8011624 <ai_platform_network_process+0x374>
 8011606:	6988      	ldr	r0, [r1, #24]
 8011608:	68b2      	ldr	r2, [r6, #8]
 801160a:	6803      	ldr	r3, [r0, #0]
 801160c:	f8d2 9000 	ldr.w	r9, [r2]
 8011610:	009d      	lsls	r5, r3, #2
 8011612:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8011616:	d5d7      	bpl.n	80115c8 <ai_platform_network_process+0x318>
 8011618:	6881      	ldr	r1, [r0, #8]
 801161a:	68a2      	ldr	r2, [r4, #8]
 801161c:	6860      	ldr	r0, [r4, #4]
 801161e:	f002 fbe5 	bl	8013dec <st_int8_copy>
 8011622:	e7da      	b.n	80115da <ai_platform_network_process+0x32a>
 8011624:	4658      	mov	r0, fp
 8011626:	f000 f8e7 	bl	80117f8 <ai_layers_forward_all>
 801162a:	2f00      	cmp	r7, #0
 801162c:	d03d      	beq.n	80116aa <ai_platform_network_process+0x3fa>
 801162e:	2400      	movs	r4, #0
 8011630:	e016      	b.n	8011660 <ai_platform_network_process+0x3b0>
 8011632:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8011636:	f859 100a 	ldr.w	r1, [r9, sl]
 801163a:	4413      	add	r3, r2
 801163c:	428b      	cmp	r3, r1
 801163e:	d302      	bcc.n	8011646 <ai_platform_network_process+0x396>
 8011640:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011644:	1acb      	subs	r3, r1, r3
 8011646:	f8c8 3004 	str.w	r3, [r8, #4]
 801164a:	6981      	ldr	r1, [r0, #24]
 801164c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8011650:	1b52      	subs	r2, r2, r5
 8011652:	4413      	add	r3, r2
 8011654:	608b      	str	r3, [r1, #8]
 8011656:	6983      	ldr	r3, [r0, #24]
 8011658:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801165c:	60da      	str	r2, [r3, #12]
 801165e:	3401      	adds	r4, #1
 8011660:	883b      	ldrh	r3, [r7, #0]
 8011662:	42a3      	cmp	r3, r4
 8011664:	d921      	bls.n	80116aa <ai_platform_network_process+0x3fa>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	b1fb      	cbz	r3, 80116aa <ai_platform_network_process+0x3fa>
 801166a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801166e:	b1e0      	cbz	r0, 80116aa <ai_platform_network_process+0x3fa>
 8011670:	68ba      	ldr	r2, [r7, #8]
 8011672:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8011676:	6983      	ldr	r3, [r0, #24]
 8011678:	f8d2 9000 	ldr.w	r9, [r2]
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8011682:	0092      	lsls	r2, r2, #2
 8011684:	d5d5      	bpl.n	8011632 <ai_platform_network_process+0x382>
 8011686:	6898      	ldr	r0, [r3, #8]
 8011688:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 801168c:	f002 fbae 	bl	8013dec <st_int8_copy>
 8011690:	f859 200a 	ldr.w	r2, [r9, sl]
 8011694:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8011698:	440b      	add	r3, r1
 801169a:	4293      	cmp	r3, r2
 801169c:	d302      	bcc.n	80116a4 <ai_platform_network_process+0x3f4>
 801169e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	f8c8 3004 	str.w	r3, [r8, #4]
 80116a8:	e7d9      	b.n	801165e <ai_platform_network_process+0x3ae>
 80116aa:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80116ae:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80116b2:	3401      	adds	r4, #1
 80116b4:	b2a4      	uxth	r4, r4
 80116b6:	42a3      	cmp	r3, r4
 80116b8:	f8ab 401a 	strh.w	r4, [fp, #26]
 80116bc:	f63f af7f 	bhi.w	80115be <ai_platform_network_process+0x30e>
 80116c0:	4620      	mov	r0, r4
 80116c2:	b005      	add	sp, #20
 80116c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c8:	2a01      	cmp	r2, #1
 80116ca:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80116cc:	d033      	beq.n	8011736 <ai_platform_network_process+0x486>
 80116ce:	f106 070c 	add.w	r7, r6, #12
 80116d2:	e770      	b.n	80115b6 <ai_platform_network_process+0x306>
 80116d4:	9d03      	ldr	r5, [sp, #12]
 80116d6:	2219      	movs	r2, #25
 80116d8:	2112      	movs	r1, #18
 80116da:	2400      	movs	r4, #0
 80116dc:	f105 000c 	add.w	r0, r5, #12
 80116e0:	f000 f834 	bl	801174c <core_set_error>
 80116e4:	e725      	b.n	8011532 <ai_platform_network_process+0x282>
 80116e6:	9d03      	ldr	r5, [sp, #12]
 80116e8:	4604      	mov	r4, r0
 80116ea:	2221      	movs	r2, #33	@ 0x21
 80116ec:	2112      	movs	r1, #18
 80116ee:	f105 000c 	add.w	r0, r5, #12
 80116f2:	f000 f82b 	bl	801174c <core_set_error>
 80116f6:	e71c      	b.n	8011532 <ai_platform_network_process+0x282>
 80116f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80116fc:	832b      	strh	r3, [r5, #24]
 80116fe:	e755      	b.n	80115ac <ai_platform_network_process+0x2fc>
 8011700:	9d02      	ldr	r5, [sp, #8]
 8011702:	2219      	movs	r2, #25
 8011704:	2113      	movs	r1, #19
 8011706:	2400      	movs	r4, #0
 8011708:	f105 000c 	add.w	r0, r5, #12
 801170c:	f000 f81e 	bl	801174c <core_set_error>
 8011710:	e70f      	b.n	8011532 <ai_platform_network_process+0x282>
 8011712:	9d02      	ldr	r5, [sp, #8]
 8011714:	4604      	mov	r4, r0
 8011716:	2221      	movs	r2, #33	@ 0x21
 8011718:	2113      	movs	r1, #19
 801171a:	f105 000c 	add.w	r0, r5, #12
 801171e:	f000 f815 	bl	801174c <core_set_error>
 8011722:	e706      	b.n	8011532 <ai_platform_network_process+0x282>
 8011724:	9d02      	ldr	r5, [sp, #8]
 8011726:	2217      	movs	r2, #23
 8011728:	2113      	movs	r1, #19
 801172a:	2400      	movs	r4, #0
 801172c:	f105 000c 	add.w	r0, r5, #12
 8011730:	f000 f80c 	bl	801174c <core_set_error>
 8011734:	e6fd      	b.n	8011532 <ai_platform_network_process+0x282>
 8011736:	2700      	movs	r7, #0
 8011738:	e73d      	b.n	80115b6 <ai_platform_network_process+0x306>
 801173a:	bf00      	nop

0801173c <core_init>:
 801173c:	2001      	movs	r0, #1
 801173e:	4770      	bx	lr

08011740 <core_get_error>:
 8011740:	4603      	mov	r3, r0
 8011742:	2200      	movs	r2, #0
 8011744:	6800      	ldr	r0, [r0, #0]
 8011746:	601a      	str	r2, [r3, #0]
 8011748:	4770      	bx	lr
 801174a:	bf00      	nop

0801174c <core_set_error>:
 801174c:	4603      	mov	r3, r0
 801174e:	7800      	ldrb	r0, [r0, #0]
 8011750:	b108      	cbz	r0, 8011756 <core_set_error+0xa>
 8011752:	2000      	movs	r0, #0
 8011754:	4770      	bx	lr
 8011756:	7019      	strb	r1, [r3, #0]
 8011758:	2001      	movs	r0, #1
 801175a:	6819      	ldr	r1, [r3, #0]
 801175c:	f362 211f 	bfi	r1, r2, #8, #24
 8011760:	6019      	str	r1, [r3, #0]
 8011762:	4770      	bx	lr

08011764 <ai_check_custom_types>:
 8011764:	b082      	sub	sp, #8
 8011766:	4b12      	ldr	r3, [pc, #72]	@ (80117b0 <ai_check_custom_types+0x4c>)
 8011768:	9301      	str	r3, [sp, #4]
 801176a:	b118      	cbz	r0, 8011774 <ai_check_custom_types+0x10>
 801176c:	7803      	ldrb	r3, [r0, #0]
 801176e:	2b03      	cmp	r3, #3
 8011770:	d002      	beq.n	8011778 <ai_check_custom_types+0x14>
 8011772:	2000      	movs	r0, #0
 8011774:	b002      	add	sp, #8
 8011776:	4770      	bx	lr
 8011778:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801177c:	4293      	cmp	r3, r2
 801177e:	d004      	beq.n	801178a <ai_check_custom_types+0x26>
 8011780:	2001      	movs	r0, #1
 8011782:	f080 0001 	eor.w	r0, r0, #1
 8011786:	b002      	add	sp, #8
 8011788:	4770      	bx	lr
 801178a:	7842      	ldrb	r2, [r0, #1]
 801178c:	3001      	adds	r0, #1
 801178e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011792:	429a      	cmp	r2, r3
 8011794:	d1f4      	bne.n	8011780 <ai_check_custom_types+0x1c>
 8011796:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801179a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801179e:	429a      	cmp	r2, r3
 80117a0:	d1ee      	bne.n	8011780 <ai_check_custom_types+0x1c>
 80117a2:	7842      	ldrb	r2, [r0, #1]
 80117a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d1e9      	bne.n	8011780 <ai_check_custom_types+0x1c>
 80117ac:	2000      	movs	r0, #0
 80117ae:	e7e8      	b.n	8011782 <ai_check_custom_types+0x1e>
 80117b0:	84048403 	.word	0x84048403

080117b4 <ai_layers_init_all>:
 80117b4:	2100      	movs	r1, #0
 80117b6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80117b8:	b13b      	cbz	r3, 80117ca <ai_layers_init_all+0x16>
 80117ba:	691a      	ldr	r2, [r3, #16]
 80117bc:	3101      	adds	r1, #1
 80117be:	60d8      	str	r0, [r3, #12]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	4613      	mov	r3, r2
 80117c4:	d001      	beq.n	80117ca <ai_layers_init_all+0x16>
 80117c6:	2a00      	cmp	r2, #0
 80117c8:	d1f6      	bne.n	80117b8 <ai_layers_init_all+0x4>
 80117ca:	4608      	mov	r0, r1
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop

080117d0 <ai_layers_post_init_all>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	2500      	movs	r5, #0
 80117d4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80117d6:	b16c      	cbz	r4, 80117f4 <ai_layers_post_init_all+0x24>
 80117d8:	6863      	ldr	r3, [r4, #4]
 80117da:	07db      	lsls	r3, r3, #31
 80117dc:	d504      	bpl.n	80117e8 <ai_layers_post_init_all+0x18>
 80117de:	6a23      	ldr	r3, [r4, #32]
 80117e0:	4620      	mov	r0, r4
 80117e2:	b10b      	cbz	r3, 80117e8 <ai_layers_post_init_all+0x18>
 80117e4:	3501      	adds	r5, #1
 80117e6:	4798      	blx	r3
 80117e8:	6923      	ldr	r3, [r4, #16]
 80117ea:	42a3      	cmp	r3, r4
 80117ec:	461c      	mov	r4, r3
 80117ee:	d001      	beq.n	80117f4 <ai_layers_post_init_all+0x24>
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d1f0      	bne.n	80117d6 <ai_layers_post_init_all+0x6>
 80117f4:	4628      	mov	r0, r5
 80117f6:	bd38      	pop	{r3, r4, r5, pc}

080117f8 <ai_layers_forward_all>:
 80117f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117fc:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8011800:	4604      	mov	r4, r0
 8011802:	f1b8 0f00 	cmp.w	r8, #0
 8011806:	d02a      	beq.n	801185e <ai_layers_forward_all+0x66>
 8011808:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801180a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 801180c:	b319      	cbz	r1, 8011856 <ai_layers_forward_all+0x5e>
 801180e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8011810:	2001      	movs	r0, #1
 8011812:	47c0      	blx	r8
 8011814:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8011816:	b1f6      	cbz	r6, 8011856 <ai_layers_forward_all+0x5e>
 8011818:	2700      	movs	r7, #0
 801181a:	4631      	mov	r1, r6
 801181c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801181e:	2002      	movs	r0, #2
 8011820:	47c0      	blx	r8
 8011822:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8011824:	4628      	mov	r0, r5
 8011826:	696b      	ldr	r3, [r5, #20]
 8011828:	4798      	blx	r3
 801182a:	692e      	ldr	r6, [r5, #16]
 801182c:	2003      	movs	r0, #3
 801182e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8011830:	42b5      	cmp	r5, r6
 8011832:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8011834:	d007      	beq.n	8011846 <ai_layers_forward_all+0x4e>
 8011836:	47c0      	blx	r8
 8011838:	3701      	adds	r7, #1
 801183a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801183c:	2e00      	cmp	r6, #0
 801183e:	d1ec      	bne.n	801181a <ai_layers_forward_all+0x22>
 8011840:	4638      	mov	r0, r7
 8011842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011846:	2003      	movs	r0, #3
 8011848:	3701      	adds	r7, #1
 801184a:	47c0      	blx	r8
 801184c:	2300      	movs	r3, #0
 801184e:	4638      	mov	r0, r7
 8011850:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8011852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011856:	2700      	movs	r7, #0
 8011858:	4638      	mov	r0, r7
 801185a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801185e:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8011860:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8011862:	2d00      	cmp	r5, #0
 8011864:	d0f7      	beq.n	8011856 <ai_layers_forward_all+0x5e>
 8011866:	4647      	mov	r7, r8
 8011868:	696b      	ldr	r3, [r5, #20]
 801186a:	4628      	mov	r0, r5
 801186c:	4798      	blx	r3
 801186e:	462b      	mov	r3, r5
 8011870:	692d      	ldr	r5, [r5, #16]
 8011872:	429d      	cmp	r5, r3
 8011874:	d004      	beq.n	8011880 <ai_layers_forward_all+0x88>
 8011876:	3701      	adds	r7, #1
 8011878:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801187a:	2d00      	cmp	r5, #0
 801187c:	d1f4      	bne.n	8011868 <ai_layers_forward_all+0x70>
 801187e:	e7df      	b.n	8011840 <ai_layers_forward_all+0x48>
 8011880:	2300      	movs	r3, #0
 8011882:	3701      	adds	r7, #1
 8011884:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8011886:	e7db      	b.n	8011840 <ai_layers_forward_all+0x48>

08011888 <forward_conv2d_if32of32wf32_nl_pool>:
 8011888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801188c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8011890:	b0c3      	sub	sp, #268	@ 0x10c
 8011892:	f8bc 3000 	ldrh.w	r3, [ip]
 8011896:	9321      	str	r3, [sp, #132]	@ 0x84
 8011898:	2b00      	cmp	r3, #0
 801189a:	f000 813c 	beq.w	8011b16 <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 801189e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80118a2:	4604      	mov	r4, r0
 80118a4:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80118a8:	f1bb 0f00 	cmp.w	fp, #0
 80118ac:	d001      	beq.n	80118b2 <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 80118ae:	f8db b000 	ldr.w	fp, [fp]
 80118b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80118b4:	2a01      	cmp	r2, #1
 80118b6:	f000 812d 	beq.w	8011b14 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 80118ba:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80118be:	f1ba 0f00 	cmp.w	sl, #0
 80118c2:	d001      	beq.n	80118c8 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 80118c4:	f8da a000 	ldr.w	sl, [sl]
 80118c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80118ca:	2a02      	cmp	r2, #2
 80118cc:	f000 8122 	beq.w	8011b14 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 80118d0:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80118d4:	8b1b      	ldrh	r3, [r3, #24]
 80118d6:	f1b8 0f00 	cmp.w	r8, #0
 80118da:	f000 812f 	beq.w	8011b3c <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 80118de:	2b01      	cmp	r3, #1
 80118e0:	f8d8 2000 	ldr.w	r2, [r8]
 80118e4:	f240 8130 	bls.w	8011b48 <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 80118e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80118ec:	9340      	str	r3, [sp, #256]	@ 0x100
 80118ee:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80118f2:	f8db 100c 	ldr.w	r1, [fp, #12]
 80118f6:	f8da 000c 	ldr.w	r0, [sl, #12]
 80118fa:	9122      	str	r1, [sp, #136]	@ 0x88
 80118fc:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8011900:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8011904:	9130      	str	r1, [sp, #192]	@ 0xc0
 8011906:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801190a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801190c:	9131      	str	r1, [sp, #196]	@ 0xc4
 801190e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8011912:	f8de 7004 	ldr.w	r7, [lr, #4]
 8011916:	9132      	str	r1, [sp, #200]	@ 0xc8
 8011918:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801191c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801191e:	9133      	str	r1, [sp, #204]	@ 0xcc
 8011920:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8011924:	681e      	ldr	r6, [r3, #0]
 8011926:	9123      	str	r1, [sp, #140]	@ 0x8c
 8011928:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801192c:	972a      	str	r7, [sp, #168]	@ 0xa8
 801192e:	9124      	str	r1, [sp, #144]	@ 0x90
 8011930:	f8de 7008 	ldr.w	r7, [lr, #8]
 8011934:	9628      	str	r6, [sp, #160]	@ 0xa0
 8011936:	972f      	str	r7, [sp, #188]	@ 0xbc
 8011938:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 801193c:	fa1f f189 	uxth.w	r1, r9
 8011940:	9527      	str	r5, [sp, #156]	@ 0x9c
 8011942:	685d      	ldr	r5, [r3, #4]
 8011944:	9134      	str	r1, [sp, #208]	@ 0xd0
 8011946:	9529      	str	r5, [sp, #164]	@ 0xa4
 8011948:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 801194c:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 8011950:	9135      	str	r1, [sp, #212]	@ 0xd4
 8011952:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 8011956:	9136      	str	r1, [sp, #216]	@ 0xd8
 8011958:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 801195c:	9137      	str	r1, [sp, #220]	@ 0xdc
 801195e:	6899      	ldr	r1, [r3, #8]
 8011960:	68db      	ldr	r3, [r3, #12]
 8011962:	912d      	str	r1, [sp, #180]	@ 0xb4
 8011964:	932e      	str	r3, [sp, #184]	@ 0xb8
 8011966:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 801196a:	9338      	str	r3, [sp, #224]	@ 0xe0
 801196c:	b2ab      	uxth	r3, r5
 801196e:	9339      	str	r3, [sp, #228]	@ 0xe4
 8011970:	b2b3      	uxth	r3, r6
 8011972:	933a      	str	r3, [sp, #232]	@ 0xe8
 8011974:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 8011978:	9325      	str	r3, [sp, #148]	@ 0x94
 801197a:	b23b      	sxth	r3, r7
 801197c:	9326      	str	r3, [sp, #152]	@ 0x98
 801197e:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8011982:	933b      	str	r3, [sp, #236]	@ 0xec
 8011984:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8011988:	933c      	str	r3, [sp, #240]	@ 0xf0
 801198a:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 801198e:	933d      	str	r3, [sp, #244]	@ 0xf4
 8011990:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011996:	933e      	str	r3, [sp, #248]	@ 0xf8
 8011998:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801199a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801199e:	933f      	str	r3, [sp, #252]	@ 0xfc
 80119a0:	6a23      	ldr	r3, [r4, #32]
 80119a2:	9322      	str	r3, [sp, #136]	@ 0x88
 80119a4:	f1b8 0f00 	cmp.w	r8, #0
 80119a8:	f000 80b7 	beq.w	8011b1a <forward_conv2d_if32of32wf32_nl_pool+0x292>
 80119ac:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f000 80ba 	beq.w	8011b2a <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 80119b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80119b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80119bc:	689b      	ldr	r3, [r3, #8]
 80119be:	9322      	str	r3, [sp, #136]	@ 0x88
 80119c0:	f002 fb26 	bl	8014010 <ai_array_get_byte_size>
 80119c4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80119c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80119ca:	902c      	str	r0, [sp, #176]	@ 0xb0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f000 80be 	beq.w	8011b4e <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 80119d2:	9241      	str	r2, [sp, #260]	@ 0x104
 80119d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80119d8:	f002 fb1a 	bl	8014010 <ai_array_get_byte_size>
 80119dc:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80119e0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80119e2:	f8bc 3000 	ldrh.w	r3, [ip]
 80119e6:	902b      	str	r0, [sp, #172]	@ 0xac
 80119e8:	9321      	str	r3, [sp, #132]	@ 0x84
 80119ea:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80119ec:	b2ad      	uxth	r5, r5
 80119ee:	b2b6      	uxth	r6, r6
 80119f0:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 80119f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80119f6:	3d01      	subs	r5, #1
 80119f8:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 80119fa:	3e01      	subs	r6, #1
 80119fc:	fa1f f989 	uxth.w	r9, r9
 8011a00:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 8011a04:	fb15 7508 	smlabb	r5, r5, r8, r7
 8011a08:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 8011a0a:	699b      	ldr	r3, [r3, #24]
 8011a0c:	fa0f f885 	sxth.w	r8, r5
 8011a10:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8011a12:	f8db 0018 	ldr.w	r0, [fp, #24]
 8011a16:	3d01      	subs	r5, #1
 8011a18:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8011a1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011a1e:	fb16 7605 	smlabb	r6, r6, r5, r7
 8011a22:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8011a24:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8011a26:	2b03      	cmp	r3, #3
 8011a28:	eba5 0508 	sub.w	r5, r5, r8
 8011a2c:	b236      	sxth	r6, r6
 8011a2e:	f8da 1018 	ldr.w	r1, [sl, #24]
 8011a32:	fa15 f587 	uxtah	r5, r5, r7
 8011a36:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8011a38:	6992      	ldr	r2, [r2, #24]
 8011a3a:	fa15 f587 	uxtah	r5, r5, r7
 8011a3e:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 8011a40:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 8011a44:	6880      	ldr	r0, [r0, #8]
 8011a46:	6889      	ldr	r1, [r1, #8]
 8011a48:	6892      	ldr	r2, [r2, #8]
 8011a4a:	fb95 f5f9 	sdiv	r5, r5, r9
 8011a4e:	eba7 0906 	sub.w	r9, r7, r6
 8011a52:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8011a54:	f105 0501 	add.w	r5, r5, #1
 8011a58:	fa19 f987 	uxtah	r9, r9, r7
 8011a5c:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 8011a5e:	b22d      	sxth	r5, r5
 8011a60:	fa19 f987 	uxtah	r9, r9, r7
 8011a64:	fb99 f9fe 	sdiv	r9, r9, lr
 8011a68:	f109 0e01 	add.w	lr, r9, #1
 8011a6c:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8011a70:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8011a74:	d94e      	bls.n	8011b14 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8011a76:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8011a7a:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8011a7e:	f1bc 0f00 	cmp.w	ip, #0
 8011a82:	d06f      	beq.n	8011b64 <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 8011a84:	f8dc 7000 	ldr.w	r7, [ip]
 8011a88:	b10f      	cbz	r7, 8011a8e <forward_conv2d_if32of32wf32_nl_pool+0x206>
 8011a8a:	69bf      	ldr	r7, [r7, #24]
 8011a8c:	68bf      	ldr	r7, [r7, #8]
 8011a8e:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8011a90:	9513      	str	r5, [sp, #76]	@ 0x4c
 8011a92:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011a94:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8011a96:	960e      	str	r6, [sp, #56]	@ 0x38
 8011a98:	931e      	str	r3, [sp, #120]	@ 0x78
 8011a9a:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8011a9c:	931d      	str	r3, [sp, #116]	@ 0x74
 8011a9e:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8011aa0:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8011aa4:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8011aa6:	fa0f f48e 	sxth.w	r4, lr
 8011aaa:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 8011aae:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8011ab0:	9318      	str	r3, [sp, #96]	@ 0x60
 8011ab2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8011ab4:	9317      	str	r3, [sp, #92]	@ 0x5c
 8011ab6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011ab8:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8011abc:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8011abe:	9312      	str	r3, [sp, #72]	@ 0x48
 8011ac0:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8011ac2:	9311      	str	r3, [sp, #68]	@ 0x44
 8011ac4:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011ac6:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 8011aca:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8011acc:	930d      	str	r3, [sp, #52]	@ 0x34
 8011ace:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8011ad0:	930c      	str	r3, [sp, #48]	@ 0x30
 8011ad2:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8011ad4:	9414      	str	r4, [sp, #80]	@ 0x50
 8011ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ad8:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8011ada:	930a      	str	r3, [sp, #40]	@ 0x28
 8011adc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ae0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8011ae2:	9308      	str	r3, [sp, #32]
 8011ae4:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8011ae6:	9307      	str	r3, [sp, #28]
 8011ae8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8011aea:	9306      	str	r3, [sp, #24]
 8011aec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011aee:	9305      	str	r3, [sp, #20]
 8011af0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8011af2:	9304      	str	r3, [sp, #16]
 8011af4:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8011af6:	9303      	str	r3, [sp, #12]
 8011af8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8011afa:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8011afe:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8011b02:	465b      	mov	r3, fp
 8011b04:	69a4      	ldr	r4, [r4, #24]
 8011b06:	68a4      	ldr	r4, [r4, #8]
 8011b08:	9400      	str	r4, [sp, #0]
 8011b0a:	f000 f9cf 	bl	8011eac <forward_lite_conv2d_if32of32wf32_pool>
 8011b0e:	b043      	add	sp, #268	@ 0x10c
 8011b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b14:	2300      	movs	r3, #0
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	deff      	udf	#255	@ 0xff
 8011b1a:	b10b      	cbz	r3, 8011b20 <forward_conv2d_if32of32wf32_nl_pool+0x298>
 8011b1c:	689b      	ldr	r3, [r3, #8]
 8011b1e:	9322      	str	r3, [sp, #136]	@ 0x88
 8011b20:	2301      	movs	r3, #1
 8011b22:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 8011b26:	932b      	str	r3, [sp, #172]	@ 0xac
 8011b28:	e75f      	b.n	80119ea <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8011b2a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011b2c:	b10b      	cbz	r3, 8011b32 <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 8011b2e:	689b      	ldr	r3, [r3, #8]
 8011b30:	9322      	str	r3, [sp, #136]	@ 0x88
 8011b32:	2301      	movs	r3, #1
 8011b34:	2100      	movs	r1, #0
 8011b36:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 8011b3a:	e756      	b.n	80119ea <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d90e      	bls.n	8011b5e <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 8011b40:	4642      	mov	r2, r8
 8011b42:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 8011b46:	e6d4      	b.n	80118f2 <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 8011b48:	2300      	movs	r3, #0
 8011b4a:	9340      	str	r3, [sp, #256]	@ 0x100
 8011b4c:	e6cf      	b.n	80118ee <forward_conv2d_if32of32wf32_nl_pool+0x66>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8011b54:	932b      	str	r3, [sp, #172]	@ 0xac
 8011b56:	f8bc 3000 	ldrh.w	r3, [ip]
 8011b5a:	9321      	str	r3, [sp, #132]	@ 0x84
 8011b5c:	e745      	b.n	80119ea <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8011b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011b62:	deff      	udf	#255	@ 0xff
 8011b64:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8011b68:	deff      	udf	#255	@ 0xff
 8011b6a:	bf00      	nop

08011b6c <forward_dense>:
 8011b6c:	6982      	ldr	r2, [r0, #24]
 8011b6e:	8813      	ldrh	r3, [r2, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d043      	beq.n	8011bfc <forward_dense+0x90>
 8011b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b78:	6855      	ldr	r5, [r2, #4]
 8011b7a:	b08e      	sub	sp, #56	@ 0x38
 8011b7c:	6869      	ldr	r1, [r5, #4]
 8011b7e:	b101      	cbz	r1, 8011b82 <forward_dense+0x16>
 8011b80:	6809      	ldr	r1, [r1, #0]
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d069      	beq.n	8011c5a <forward_dense+0xee>
 8011b86:	692a      	ldr	r2, [r5, #16]
 8011b88:	b102      	cbz	r2, 8011b8c <forward_dense+0x20>
 8011b8a:	6812      	ldr	r2, [r2, #0]
 8011b8c:	2b02      	cmp	r3, #2
 8011b8e:	d061      	beq.n	8011c54 <forward_dense+0xe8>
 8011b90:	69ec      	ldr	r4, [r5, #28]
 8011b92:	2c00      	cmp	r4, #0
 8011b94:	d057      	beq.n	8011c46 <forward_dense+0xda>
 8011b96:	8b2e      	ldrh	r6, [r5, #24]
 8011b98:	6820      	ldr	r0, [r4, #0]
 8011b9a:	2e01      	cmp	r6, #1
 8011b9c:	d955      	bls.n	8011c4a <forward_dense+0xde>
 8011b9e:	6864      	ldr	r4, [r4, #4]
 8011ba0:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8011ba4:	2b03      	cmp	r3, #3
 8011ba6:	68d0      	ldr	r0, [r2, #12]
 8011ba8:	68cf      	ldr	r7, [r1, #12]
 8011baa:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8011bae:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8011bb2:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8011bb6:	f8d9 0000 	ldr.w	r0, [r9]
 8011bba:	fb06 f807 	mul.w	r8, r6, r7
 8011bbe:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8011bc2:	d044      	beq.n	8011c4e <forward_dense+0xe2>
 8011bc4:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8011bc6:	b11d      	cbz	r5, 8011bd0 <forward_dense+0x64>
 8011bc8:	682d      	ldr	r5, [r5, #0]
 8011bca:	b10d      	cbz	r5, 8011bd0 <forward_dense+0x64>
 8011bcc:	69ab      	ldr	r3, [r5, #24]
 8011bce:	689d      	ldr	r5, [r3, #8]
 8011bd0:	6992      	ldr	r2, [r2, #24]
 8011bd2:	698b      	ldr	r3, [r1, #24]
 8011bd4:	6890      	ldr	r0, [r2, #8]
 8011bd6:	6899      	ldr	r1, [r3, #8]
 8011bd8:	b10c      	cbz	r4, 8011bde <forward_dense+0x72>
 8011bda:	69a3      	ldr	r3, [r4, #24]
 8011bdc:	689c      	ldr	r4, [r3, #8]
 8011bde:	4b20      	ldr	r3, [pc, #128]	@ (8011c60 <forward_dense+0xf4>)
 8011be0:	459c      	cmp	ip, r3
 8011be2:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8011be6:	d023      	beq.n	8011c30 <forward_dense+0xc4>
 8011be8:	4e1e      	ldr	r6, [pc, #120]	@ (8011c64 <forward_dense+0xf8>)
 8011bea:	45b4      	cmp	ip, r6
 8011bec:	d015      	beq.n	8011c1a <forward_dense+0xae>
 8011bee:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8011bf2:	459c      	cmp	ip, r3
 8011bf4:	d004      	beq.n	8011c00 <forward_dense+0x94>
 8011bf6:	b00e      	add	sp, #56	@ 0x38
 8011bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	deff      	udf	#255	@ 0xff
 8011c00:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8011c04:	a807      	add	r0, sp, #28
 8011c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c08:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8011c0c:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8011c10:	f001 fb98 	bl	8013344 <forward_lite_dense_if32of32wf32>
 8011c14:	b00e      	add	sp, #56	@ 0x38
 8011c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c1a:	464b      	mov	r3, r9
 8011c1c:	9500      	str	r5, [sp, #0]
 8011c1e:	e9cd e803 	strd	lr, r8, [sp, #12]
 8011c22:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8011c26:	f001 fceb 	bl	8013600 <forward_lite_dense_if32of32wf32_lut4>
 8011c2a:	b00e      	add	sp, #56	@ 0x38
 8011c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c30:	464b      	mov	r3, r9
 8011c32:	9500      	str	r5, [sp, #0]
 8011c34:	e9cd e803 	strd	lr, r8, [sp, #12]
 8011c38:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8011c3c:	f001 fe0a 	bl	8013854 <forward_lite_dense_if32of32wf32_lut8>
 8011c40:	b00e      	add	sp, #56	@ 0x38
 8011c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c46:	4620      	mov	r0, r4
 8011c48:	e7aa      	b.n	8011ba0 <forward_dense+0x34>
 8011c4a:	2400      	movs	r4, #0
 8011c4c:	e7a8      	b.n	8011ba0 <forward_dense+0x34>
 8011c4e:	2300      	movs	r3, #0
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	deff      	udf	#255	@ 0xff
 8011c54:	2300      	movs	r3, #0
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	deff      	udf	#255	@ 0xff
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	deff      	udf	#255	@ 0xff
 8011c60:	00d01040 	.word	0x00d01040
 8011c64:	00f01040 	.word	0x00f01040

08011c68 <forward_relu>:
 8011c68:	6982      	ldr	r2, [r0, #24]
 8011c6a:	8813      	ldrh	r3, [r2, #0]
 8011c6c:	b323      	cbz	r3, 8011cb8 <forward_relu+0x50>
 8011c6e:	6851      	ldr	r1, [r2, #4]
 8011c70:	684a      	ldr	r2, [r1, #4]
 8011c72:	b102      	cbz	r2, 8011c76 <forward_relu+0xe>
 8011c74:	6812      	ldr	r2, [r2, #0]
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	f000 8086 	beq.w	8011d88 <forward_relu+0x120>
 8011c7c:	b470      	push	{r4, r5, r6}
 8011c7e:	690b      	ldr	r3, [r1, #16]
 8011c80:	b103      	cbz	r3, 8011c84 <forward_relu+0x1c>
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	69c6      	ldr	r6, [r0, #28]
 8011c86:	b1ce      	cbz	r6, 8011cbc <forward_relu+0x54>
 8011c88:	6871      	ldr	r1, [r6, #4]
 8011c8a:	6998      	ldr	r0, [r3, #24]
 8011c8c:	2901      	cmp	r1, #1
 8011c8e:	d03f      	beq.n	8011d10 <forward_relu+0xa8>
 8011c90:	6893      	ldr	r3, [r2, #8]
 8011c92:	6991      	ldr	r1, [r2, #24]
 8011c94:	0a1b      	lsrs	r3, r3, #8
 8011c96:	6880      	ldr	r0, [r0, #8]
 8011c98:	6889      	ldr	r1, [r1, #8]
 8011c9a:	d06c      	beq.n	8011d76 <forward_relu+0x10e>
 8011c9c:	68d5      	ldr	r5, [r2, #12]
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011ca4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8011ca8:	429d      	cmp	r5, r3
 8011caa:	fb04 f202 	mul.w	r2, r4, r2
 8011cae:	d1f9      	bne.n	8011ca4 <forward_relu+0x3c>
 8011cb0:	68b3      	ldr	r3, [r6, #8]
 8011cb2:	bc70      	pop	{r4, r5, r6}
 8011cb4:	f000 bd04 	b.w	80126c0 <forward_lite_nl_relu_generic_if32of32_kernel>
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	deff      	udf	#255	@ 0xff
 8011cbc:	6999      	ldr	r1, [r3, #24]
 8011cbe:	6893      	ldr	r3, [r2, #8]
 8011cc0:	6990      	ldr	r0, [r2, #24]
 8011cc2:	0a1b      	lsrs	r3, r3, #8
 8011cc4:	6889      	ldr	r1, [r1, #8]
 8011cc6:	6884      	ldr	r4, [r0, #8]
 8011cc8:	d057      	beq.n	8011d7a <forward_relu+0x112>
 8011cca:	68d5      	ldr	r5, [r2, #12]
 8011ccc:	2201      	movs	r2, #1
 8011cce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011cd2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8011cd6:	429d      	cmp	r5, r3
 8011cd8:	fb00 f202 	mul.w	r2, r0, r2
 8011cdc:	d1f9      	bne.n	8011cd2 <forward_relu+0x6a>
 8011cde:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011ce2:	4413      	add	r3, r2
 8011ce4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011ce8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011cec:	4294      	cmp	r4, r2
 8011cee:	d80d      	bhi.n	8011d0c <forward_relu+0xa4>
 8011cf0:	3204      	adds	r2, #4
 8011cf2:	3104      	adds	r1, #4
 8011cf4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011d90 <forward_relu+0x128>
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	ed72 7a01 	vldmdb	r2!, {s15}
 8011cfe:	3b08      	subs	r3, #8
 8011d00:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011d04:	ed61 7a01 	vstmdb	r1!, {s15}
 8011d08:	429c      	cmp	r4, r3
 8011d0a:	d9f5      	bls.n	8011cf8 <forward_relu+0x90>
 8011d0c:	bc70      	pop	{r4, r5, r6}
 8011d0e:	4770      	bx	lr
 8011d10:	6993      	ldr	r3, [r2, #24]
 8011d12:	6880      	ldr	r0, [r0, #8]
 8011d14:	689c      	ldr	r4, [r3, #8]
 8011d16:	6893      	ldr	r3, [r2, #8]
 8011d18:	0a1b      	lsrs	r3, r3, #8
 8011d1a:	d030      	beq.n	8011d7e <forward_relu+0x116>
 8011d1c:	68d5      	ldr	r5, [r2, #12]
 8011d1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011d22:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011d26:	429d      	cmp	r5, r3
 8011d28:	fb02 f101 	mul.w	r1, r2, r1
 8011d2c:	d1f9      	bne.n	8011d22 <forward_relu+0xba>
 8011d2e:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8011d32:	68b3      	ldr	r3, [r6, #8]
 8011d34:	440a      	add	r2, r1
 8011d36:	ed93 7a00 	vldr	s14, [r3]
 8011d3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d3e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8011d42:	429c      	cmp	r4, r3
 8011d44:	d8e2      	bhi.n	8011d0c <forward_relu+0xa4>
 8011d46:	1d02      	adds	r2, r0, #4
 8011d48:	3304      	adds	r3, #4
 8011d4a:	2000      	movs	r0, #0
 8011d4c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011d50:	1f19      	subs	r1, r3, #4
 8011d52:	3b08      	subs	r3, #8
 8011d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d5c:	d405      	bmi.n	8011d6a <forward_relu+0x102>
 8011d5e:	429c      	cmp	r4, r3
 8011d60:	f842 0d04 	str.w	r0, [r2, #-4]!
 8011d64:	d8d2      	bhi.n	8011d0c <forward_relu+0xa4>
 8011d66:	460b      	mov	r3, r1
 8011d68:	e7f0      	b.n	8011d4c <forward_relu+0xe4>
 8011d6a:	429c      	cmp	r4, r3
 8011d6c:	ed62 7a01 	vstmdb	r2!, {s15}
 8011d70:	d8cc      	bhi.n	8011d0c <forward_relu+0xa4>
 8011d72:	460b      	mov	r3, r1
 8011d74:	e7ea      	b.n	8011d4c <forward_relu+0xe4>
 8011d76:	2201      	movs	r2, #1
 8011d78:	e79a      	b.n	8011cb0 <forward_relu+0x48>
 8011d7a:	4622      	mov	r2, r4
 8011d7c:	e7b8      	b.n	8011cf0 <forward_relu+0x88>
 8011d7e:	68b2      	ldr	r2, [r6, #8]
 8011d80:	4623      	mov	r3, r4
 8011d82:	ed92 7a00 	vldr	s14, [r2]
 8011d86:	e7de      	b.n	8011d46 <forward_relu+0xde>
 8011d88:	2300      	movs	r3, #0
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	deff      	udf	#255	@ 0xff
 8011d8e:	bf00      	nop
 8011d90:	00000000 	.word	0x00000000

08011d94 <forward_upsample_bilinear>:
 8011d94:	6983      	ldr	r3, [r0, #24]
 8011d96:	881a      	ldrh	r2, [r3, #0]
 8011d98:	2a00      	cmp	r2, #0
 8011d9a:	d04f      	beq.n	8011e3c <forward_upsample_bilinear+0xa8>
 8011d9c:	6859      	ldr	r1, [r3, #4]
 8011d9e:	4684      	mov	ip, r0
 8011da0:	684b      	ldr	r3, [r1, #4]
 8011da2:	b103      	cbz	r3, 8011da6 <forward_upsample_bilinear+0x12>
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2a01      	cmp	r2, #1
 8011da8:	d074      	beq.n	8011e94 <forward_upsample_bilinear+0x100>
 8011daa:	690a      	ldr	r2, [r1, #16]
 8011dac:	2a00      	cmp	r2, #0
 8011dae:	d074      	beq.n	8011e9a <forward_upsample_bilinear+0x106>
 8011db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db4:	699c      	ldr	r4, [r3, #24]
 8011db6:	b084      	sub	sp, #16
 8011db8:	68d8      	ldr	r0, [r3, #12]
 8011dba:	6821      	ldr	r1, [r4, #0]
 8011dbc:	6815      	ldr	r5, [r2, #0]
 8011dbe:	f8dc 3020 	ldr.w	r3, [ip, #32]
 8011dc2:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 8011dc6:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8011ea8 <forward_upsample_bilinear+0x114>
 8011dca:	689b      	ldr	r3, [r3, #8]
 8011dcc:	68ee      	ldr	r6, [r5, #12]
 8011dce:	4541      	cmp	r1, r8
 8011dd0:	edd3 0a00 	vldr	s1, [r3]
 8011dd4:	ed93 0a01 	vldr	s0, [r3, #4]
 8011dd8:	6882      	ldr	r2, [r0, #8]
 8011dda:	68c3      	ldr	r3, [r0, #12]
 8011ddc:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8011de0:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 8011de4:	d048      	beq.n	8011e78 <forward_upsample_bilinear+0xe4>
 8011de6:	dd14      	ble.n	8011e12 <forward_upsample_bilinear+0x7e>
 8011de8:	482d      	ldr	r0, [pc, #180]	@ (8011ea0 <forward_upsample_bilinear+0x10c>)
 8011dea:	4281      	cmp	r1, r0
 8011dec:	d036      	beq.n	8011e5c <forward_upsample_bilinear+0xc8>
 8011dee:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8011df2:	4281      	cmp	r1, r0
 8011df4:	d10a      	bne.n	8011e0c <forward_upsample_bilinear+0x78>
 8011df6:	69a9      	ldr	r1, [r5, #24]
 8011df8:	68a0      	ldr	r0, [r4, #8]
 8011dfa:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8011dfe:	6889      	ldr	r1, [r1, #8]
 8011e00:	e9cd e402 	strd	lr, r4, [sp, #8]
 8011e04:	e9cd 6700 	strd	r6, r7, [sp]
 8011e08:	f001 f91c 	bl	8013044 <forward_lite_upsample_bilinear_is16os16>
 8011e0c:	b004      	add	sp, #16
 8011e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e12:	4824      	ldr	r0, [pc, #144]	@ (8011ea4 <forward_upsample_bilinear+0x110>)
 8011e14:	4281      	cmp	r1, r0
 8011e16:	d013      	beq.n	8011e40 <forward_upsample_bilinear+0xac>
 8011e18:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8011e1c:	4281      	cmp	r1, r0
 8011e1e:	d1f5      	bne.n	8011e0c <forward_upsample_bilinear+0x78>
 8011e20:	69a9      	ldr	r1, [r5, #24]
 8011e22:	68a0      	ldr	r0, [r4, #8]
 8011e24:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8011e28:	6889      	ldr	r1, [r1, #8]
 8011e2a:	e9cd e402 	strd	lr, r4, [sp, #8]
 8011e2e:	e9cd 6700 	strd	r6, r7, [sp]
 8011e32:	f001 f9c7 	bl	80131c4 <forward_lite_upsample_bilinear_iu16ou16>
 8011e36:	b004      	add	sp, #16
 8011e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e3c:	6853      	ldr	r3, [r2, #4]
 8011e3e:	deff      	udf	#255	@ 0xff
 8011e40:	69a9      	ldr	r1, [r5, #24]
 8011e42:	68a0      	ldr	r0, [r4, #8]
 8011e44:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8011e48:	6889      	ldr	r1, [r1, #8]
 8011e4a:	e9cd e402 	strd	lr, r4, [sp, #8]
 8011e4e:	e9cd 6700 	strd	r6, r7, [sp]
 8011e52:	f001 f835 	bl	8012ec0 <forward_lite_upsample_bilinear_iu8ou8>
 8011e56:	b004      	add	sp, #16
 8011e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e5c:	69a9      	ldr	r1, [r5, #24]
 8011e5e:	68a0      	ldr	r0, [r4, #8]
 8011e60:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8011e64:	6889      	ldr	r1, [r1, #8]
 8011e66:	e9cd e402 	strd	lr, r4, [sp, #8]
 8011e6a:	e9cd 6700 	strd	r6, r7, [sp]
 8011e6e:	f000 ff65 	bl	8012d3c <forward_lite_upsample_bilinear_is8os8>
 8011e72:	b004      	add	sp, #16
 8011e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e78:	69a9      	ldr	r1, [r5, #24]
 8011e7a:	68a0      	ldr	r0, [r4, #8]
 8011e7c:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8011e80:	6889      	ldr	r1, [r1, #8]
 8011e82:	e9cd e402 	strd	lr, r4, [sp, #8]
 8011e86:	e9cd 6700 	strd	r6, r7, [sp]
 8011e8a:	f000 fe97 	bl	8012bbc <forward_lite_upsample_bilinear_if32of32>
 8011e8e:	b004      	add	sp, #16
 8011e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e94:	2300      	movs	r3, #0
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	deff      	udf	#255	@ 0xff
 8011e9a:	68d3      	ldr	r3, [r2, #12]
 8011e9c:	deff      	udf	#255	@ 0xff
 8011e9e:	bf00      	nop
 8011ea0:	00840440 	.word	0x00840440
 8011ea4:	00040440 	.word	0x00040440
 8011ea8:	00821040 	.word	0x00821040

08011eac <forward_lite_conv2d_if32of32wf32_pool>:
 8011eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb0:	ed2d 8b0e 	vpush	{d8-d14}
 8011eb4:	b0c9      	sub	sp, #292	@ 0x124
 8011eb6:	4696      	mov	lr, r2
 8011eb8:	4680      	mov	r8, r0
 8011eba:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 8011ebe:	9323      	str	r3, [sp, #140]	@ 0x8c
 8011ec0:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 8011ec4:	9138      	str	r1, [sp, #224]	@ 0xe0
 8011ec6:	9239      	str	r2, [sp, #228]	@ 0xe4
 8011ec8:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 8011ecc:	fb05 f203 	mul.w	r2, r5, r3
 8011ed0:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 8011ed4:	9129      	str	r1, [sp, #164]	@ 0xa4
 8011ed6:	460e      	mov	r6, r1
 8011ed8:	fb01 f202 	mul.w	r2, r1, r2
 8011edc:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 8011ee0:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 8011ee4:	9142      	str	r1, [sp, #264]	@ 0x108
 8011ee6:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 8011eea:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 8011eee:	932d      	str	r3, [sp, #180]	@ 0xb4
 8011ef0:	942a      	str	r4, [sp, #168]	@ 0xa8
 8011ef2:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 8011ef6:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 8011efa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011efc:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8011f00:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 8011f04:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 8011f08:	9041      	str	r0, [sp, #260]	@ 0x104
 8011f0a:	933a      	str	r3, [sp, #232]	@ 0xe8
 8011f0c:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 8011f10:	912b      	str	r1, [sp, #172]	@ 0xac
 8011f12:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 8011f16:	4243      	negs	r3, r0
 8011f18:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011f1a:	9418      	str	r4, [sp, #96]	@ 0x60
 8011f1c:	9714      	str	r7, [sp, #80]	@ 0x50
 8011f1e:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 8011f22:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 8011f26:	931e      	str	r3, [sp, #120]	@ 0x78
 8011f28:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 8011f2c:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 8011f30:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011f32:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 8011f36:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 8011f40:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 8011f44:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 8011f48:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 8011f4c:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 8011f50:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 8011f54:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 8011f58:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8011f5c:	f340 80a9 	ble.w	80120b2 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8011f60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011f62:	3901      	subs	r1, #1
 8011f64:	9020      	str	r0, [sp, #128]	@ 0x80
 8011f66:	fb03 f309 	mul.w	r3, r3, r9
 8011f6a:	fa1f fc81 	uxth.w	ip, r1
 8011f6e:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8011f70:	fb04 f303 	mul.w	r3, r4, r3
 8011f74:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 80120bc <forward_lite_conv2d_if32of32wf32_pool+0x210>
 8011f78:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 8011f7c:	0099      	lsls	r1, r3, #2
 8011f7e:	9124      	str	r1, [sp, #144]	@ 0x90
 8011f80:	4631      	mov	r1, r6
 8011f82:	b2b6      	uxth	r6, r6
 8011f84:	fb00 f301 	mul.w	r3, r0, r1
 8011f88:	9636      	str	r6, [sp, #216]	@ 0xd8
 8011f8a:	00a6      	lsls	r6, r4, #2
 8011f8c:	fb05 f303 	mul.w	r3, r5, r3
 8011f90:	fb05 f501 	mul.w	r5, r5, r1
 8011f94:	0098      	lsls	r0, r3, #2
 8011f96:	9616      	str	r6, [sp, #88]	@ 0x58
 8011f98:	953d      	str	r5, [sp, #244]	@ 0xf4
 8011f9a:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8011f9e:	903e      	str	r0, [sp, #248]	@ 0xf8
 8011fa0:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8011fa2:	953b      	str	r5, [sp, #236]	@ 0xec
 8011fa4:	1e43      	subs	r3, r0, #1
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	3301      	adds	r3, #1
 8011faa:	0098      	lsls	r0, r3, #2
 8011fac:	9035      	str	r0, [sp, #212]	@ 0xd4
 8011fae:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8011fb0:	fb00 f307 	mul.w	r3, r0, r7
 8011fb4:	fb04 f303 	mul.w	r3, r4, r3
 8011fb8:	0098      	lsls	r0, r3, #2
 8011fba:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8011fbc:	9034      	str	r0, [sp, #208]	@ 0xd0
 8011fbe:	0090      	lsls	r0, r2, #2
 8011fc0:	fb01 f303 	mul.w	r3, r1, r3
 8011fc4:	0089      	lsls	r1, r1, #2
 8011fc6:	9032      	str	r0, [sp, #200]	@ 0xc8
 8011fc8:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8011fca:	9112      	str	r1, [sp, #72]	@ 0x48
 8011fcc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011fd0:	0098      	lsls	r0, r3, #2
 8011fd2:	fb07 f306 	mul.w	r3, r7, r6
 8011fd6:	921f      	str	r2, [sp, #124]	@ 0x7c
 8011fd8:	903c      	str	r0, [sp, #240]	@ 0xf0
 8011fda:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8011fdc:	fb00 8703 	mla	r7, r0, r3, r8
 8011fe0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8011fe2:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8011fe4:	9722      	str	r7, [sp, #136]	@ 0x88
 8011fe6:	425f      	negs	r7, r3
 8011fe8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011fea:	4241      	negs	r1, r0
 8011fec:	9731      	str	r7, [sp, #196]	@ 0xc4
 8011fee:	fb03 f304 	mul.w	r3, r3, r4
 8011ff2:	9125      	str	r1, [sp, #148]	@ 0x94
 8011ff4:	009c      	lsls	r4, r3, #2
 8011ff6:	fb06 f107 	mul.w	r1, r6, r7
 8011ffa:	9417      	str	r4, [sp, #92]	@ 0x5c
 8011ffc:	2400      	movs	r4, #0
 8011ffe:	9137      	str	r1, [sp, #220]	@ 0xdc
 8012000:	9960      	ldr	r1, [sp, #384]	@ 0x180
 8012002:	9427      	str	r4, [sp, #156]	@ 0x9c
 8012004:	911b      	str	r1, [sp, #108]	@ 0x6c
 8012006:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012008:	9428      	str	r4, [sp, #160]	@ 0xa0
 801200a:	9333      	str	r3, [sp, #204]	@ 0xcc
 801200c:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 801200e:	932f      	str	r3, [sp, #188]	@ 0xbc
 8012010:	1e53      	subs	r3, r2, #1
 8012012:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012014:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012016:	3301      	adds	r3, #1
 8012018:	b21b      	sxth	r3, r3
 801201a:	2b00      	cmp	r3, #0
 801201c:	dc68      	bgt.n	80120f0 <forward_lite_conv2d_if32of32wf32_pool+0x244>
 801201e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012020:	041b      	lsls	r3, r3, #16
 8012022:	f100 81d5 	bmi.w	80123d0 <forward_lite_conv2d_if32of32wf32_pool+0x524>
 8012026:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8012028:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801202a:	42b2      	cmp	r2, r6
 801202c:	dc48      	bgt.n	80120c0 <forward_lite_conv2d_if32of32wf32_pool+0x214>
 801202e:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8012030:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012032:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8012034:	3301      	adds	r3, #1
 8012036:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8012038:	4420      	add	r0, r4
 801203a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801203c:	b21d      	sxth	r5, r3
 801203e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012040:	901e      	str	r0, [sp, #120]	@ 0x78
 8012042:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8012044:	1b1b      	subs	r3, r3, r4
 8012046:	9108      	str	r1, [sp, #32]
 8012048:	4401      	add	r1, r0
 801204a:	9320      	str	r3, [sp, #128]	@ 0x80
 801204c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801204e:	9138      	str	r1, [sp, #224]	@ 0xe0
 8012050:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012052:	9528      	str	r5, [sp, #160]	@ 0xa0
 8012054:	440b      	add	r3, r1
 8012056:	9322      	str	r3, [sp, #136]	@ 0x88
 8012058:	b293      	uxth	r3, r2
 801205a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801205c:	9301      	str	r3, [sp, #4]
 801205e:	1a9b      	subs	r3, r3, r2
 8012060:	b29a      	uxth	r2, r3
 8012062:	b2bb      	uxth	r3, r7
 8012064:	1af1      	subs	r1, r6, r3
 8012066:	9305      	str	r3, [sp, #20]
 8012068:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 801206a:	b20b      	sxth	r3, r1
 801206c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8012070:	931d      	str	r3, [sp, #116]	@ 0x74
 8012072:	b2b3      	uxth	r3, r6
 8012074:	9303      	str	r3, [sp, #12]
 8012076:	2301      	movs	r3, #1
 8012078:	9307      	str	r3, [sp, #28]
 801207a:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 801207e:	9306      	str	r3, [sp, #24]
 8012080:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 8012084:	9304      	str	r3, [sp, #16]
 8012086:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 801208a:	9302      	str	r3, [sp, #8]
 801208c:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 8012090:	9300      	str	r3, [sp, #0]
 8012092:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8012094:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8012096:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 8012098:	47a0      	blx	r4
 801209a:	1bf3      	subs	r3, r6, r7
 801209c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801209e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80120a2:	3a01      	subs	r2, #1
 80120a4:	b21b      	sxth	r3, r3
 80120a6:	b292      	uxth	r2, r2
 80120a8:	9333      	str	r3, [sp, #204]	@ 0xcc
 80120aa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80120ac:	9221      	str	r2, [sp, #132]	@ 0x84
 80120ae:	42ab      	cmp	r3, r5
 80120b0:	dcb0      	bgt.n	8012014 <forward_lite_conv2d_if32of32wf32_pool+0x168>
 80120b2:	b049      	add	sp, #292	@ 0x124
 80120b4:	ecbd 8b0e 	vpop	{d8-d14}
 80120b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120bc:	00000000 	.word	0x00000000
 80120c0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80120c2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80120c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80120c6:	440a      	add	r2, r1
 80120c8:	3b01      	subs	r3, #1
 80120ca:	921e      	str	r2, [sp, #120]	@ 0x78
 80120cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80120ce:	b29b      	uxth	r3, r3
 80120d0:	1a52      	subs	r2, r2, r1
 80120d2:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80120d4:	9321      	str	r3, [sp, #132]	@ 0x84
 80120d6:	9220      	str	r2, [sp, #128]	@ 0x80
 80120d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80120da:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80120dc:	440a      	add	r2, r1
 80120de:	9222      	str	r2, [sp, #136]	@ 0x88
 80120e0:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80120e2:	4293      	cmp	r3, r2
 80120e4:	dde5      	ble.n	80120b2 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 80120e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80120e8:	3301      	adds	r3, #1
 80120ea:	b21b      	sxth	r3, r3
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	dd96      	ble.n	801201e <forward_lite_conv2d_if32of32wf32_pool+0x172>
 80120f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	f2c0 82d1 	blt.w	801269a <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 80120f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80120fa:	931c      	str	r3, [sp, #112]	@ 0x70
 80120fc:	2300      	movs	r3, #0
 80120fe:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8012100:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8012102:	440a      	add	r2, r1
 8012104:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8012106:	428a      	cmp	r2, r1
 8012108:	bfd4      	ite	le
 801210a:	ebc3 0b02 	rsble	fp, r3, r2
 801210e:	ebc3 0b01 	rsbgt	fp, r3, r1
 8012112:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 8012114:	2a00      	cmp	r2, #0
 8012116:	f000 819d 	beq.w	8012454 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 801211a:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801211c:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8012120:	f0c0 8198 	bcc.w	8012454 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8012124:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8012126:	2a00      	cmp	r2, #0
 8012128:	f340 8115 	ble.w	8012356 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 801212c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801212e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8012130:	fb02 f303 	mul.w	r3, r2, r3
 8012134:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8012136:	9319      	str	r3, [sp, #100]	@ 0x64
 8012138:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801213a:	189a      	adds	r2, r3, r2
 801213c:	9326      	str	r3, [sp, #152]	@ 0x98
 801213e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012140:	923f      	str	r2, [sp, #252]	@ 0xfc
 8012142:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012144:	9330      	str	r3, [sp, #192]	@ 0xc0
 8012146:	440a      	add	r2, r1
 8012148:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801214a:	9240      	str	r2, [sp, #256]	@ 0x100
 801214c:	931a      	str	r3, [sp, #104]	@ 0x68
 801214e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8012150:	9961      	ldr	r1, [sp, #388]	@ 0x184
 8012152:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8012154:	f001 fe4a 	bl	8013dec <st_int8_copy>
 8012158:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801215a:	2b00      	cmp	r3, #0
 801215c:	f000 8135 	beq.w	80123ca <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8012160:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8012162:	ecf3 1a01 	vldmia	r3!, {s3}
 8012166:	9330      	str	r3, [sp, #192]	@ 0xc0
 8012168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801216a:	2b00      	cmp	r3, #0
 801216c:	f000 80e8 	beq.w	8012340 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 8012170:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8012172:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012174:	189a      	adds	r2, r3, r2
 8012176:	920c      	str	r2, [sp, #48]	@ 0x30
 8012178:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801217a:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 801217e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8012180:	9310      	str	r3, [sp, #64]	@ 0x40
 8012182:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8012184:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012186:	2300      	movs	r3, #0
 8012188:	9311      	str	r3, [sp, #68]	@ 0x44
 801218a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801218c:	2b00      	cmp	r3, #0
 801218e:	f2c0 8113 	blt.w	80123b8 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 8012192:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012194:	2600      	movs	r6, #0
 8012196:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012198:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801219a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801219c:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 801219e:	4298      	cmp	r0, r3
 80121a0:	bf94      	ite	ls
 80121a2:	ebc6 0600 	rsbls	r6, r6, r0
 80121a6:	ebc6 0603 	rsbhi	r6, r6, r3
 80121aa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80121ac:	f1bb 0f00 	cmp.w	fp, #0
 80121b0:	eba0 0906 	sub.w	r9, r0, r6
 80121b4:	fb02 4203 	mla	r2, r2, r3, r4
 80121b8:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80121ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80121bc:	eba4 0a06 	sub.w	sl, r4, r6
 80121c0:	fb00 f606 	mul.w	r6, r0, r6
 80121c4:	f340 80fe 	ble.w	80123c4 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 80121c8:	f026 070f 	bic.w	r7, r6, #15
 80121cc:	eeb0 7a61 	vmov.f32	s14, s3
 80121d0:	fb0a fa03 	mul.w	sl, sl, r3
 80121d4:	f04f 0c00 	mov.w	ip, #0
 80121d8:	f107 38ff 	add.w	r8, r7, #4294967295
 80121dc:	fb09 f903 	mul.w	r9, r9, r3
 80121e0:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80121e4:	f108 0801 	add.w	r8, r8, #1
 80121e8:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80121ec:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80121f0:	2f00      	cmp	r7, #0
 80121f2:	f340 80df 	ble.w	80123b4 <forward_lite_conv2d_if32of32wf32_pool+0x508>
 80121f6:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 80121fa:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80121fe:	2400      	movs	r4, #0
 8012200:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8012204:	3410      	adds	r4, #16
 8012206:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 801220a:	3340      	adds	r3, #64	@ 0x40
 801220c:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 8012210:	42bc      	cmp	r4, r7
 8012212:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012216:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 801221a:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 801221e:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8012222:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8012226:	eee4 7a85 	vfma.f32	s15, s9, s10
 801222a:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 801222e:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8012232:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 8012236:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 801223a:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 801223e:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 8012242:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012246:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 801224a:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 801224e:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 8012252:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 8012256:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 801225a:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 801225e:	eeee 7a26 	vfma.f32	s15, s28, s13
 8012262:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 8012266:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 801226a:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 801226e:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 8012272:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 8012276:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 801227a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 801227e:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8012282:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8012286:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 801228a:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 801228e:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8012292:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8012296:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801229a:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 801229e:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80122a2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80122a6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80122aa:	eee9 7a89 	vfma.f32	s15, s19, s18
 80122ae:	eee8 7a80 	vfma.f32	s15, s17, s0
 80122b2:	eee0 7a81 	vfma.f32	s15, s1, s2
 80122b6:	eee2 7a22 	vfma.f32	s15, s4, s5
 80122ba:	eee3 7a23 	vfma.f32	s15, s6, s7
 80122be:	eee4 7a24 	vfma.f32	s15, s8, s9
 80122c2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80122c6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80122ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80122ce:	db97      	blt.n	8012200 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 80122d0:	4471      	add	r1, lr
 80122d2:	4472      	add	r2, lr
 80122d4:	4645      	mov	r5, r8
 80122d6:	42ae      	cmp	r6, r5
 80122d8:	dd10      	ble.n	80122fc <forward_lite_conv2d_if32of32wf32_pool+0x450>
 80122da:	462b      	mov	r3, r5
 80122dc:	460c      	mov	r4, r1
 80122de:	4610      	mov	r0, r2
 80122e0:	3301      	adds	r3, #1
 80122e2:	ecf0 6a01 	vldmia	r0!, {s13}
 80122e6:	ecf4 7a01 	vldmia	r4!, {s15}
 80122ea:	429e      	cmp	r6, r3
 80122ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80122f0:	d1f6      	bne.n	80122e0 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 80122f2:	1b75      	subs	r5, r6, r5
 80122f4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80122f8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80122fc:	f10c 0c01 	add.w	ip, ip, #1
 8012300:	4451      	add	r1, sl
 8012302:	444a      	add	r2, r9
 8012304:	45e3      	cmp	fp, ip
 8012306:	f47f af73 	bne.w	80121f0 <forward_lite_conv2d_if32of32wf32_pool+0x344>
 801230a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801230c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801230e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012310:	4410      	add	r0, r2
 8012312:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012314:	ed81 7a00 	vstr	s14, [r1]
 8012318:	900b      	str	r0, [sp, #44]	@ 0x2c
 801231a:	3301      	adds	r3, #1
 801231c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801231e:	9311      	str	r3, [sp, #68]	@ 0x44
 8012320:	4401      	add	r1, r0
 8012322:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8012324:	9110      	str	r1, [sp, #64]	@ 0x40
 8012326:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012328:	1a89      	subs	r1, r1, r2
 801232a:	910e      	str	r1, [sp, #56]	@ 0x38
 801232c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801232e:	4401      	add	r1, r0
 8012330:	910d      	str	r1, [sp, #52]	@ 0x34
 8012332:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012334:	1a8a      	subs	r2, r1, r2
 8012336:	920c      	str	r2, [sp, #48]	@ 0x30
 8012338:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801233a:	429a      	cmp	r2, r3
 801233c:	f47f af25 	bne.w	801218a <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 8012340:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012342:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8012344:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8012346:	440a      	add	r2, r1
 8012348:	3304      	adds	r3, #4
 801234a:	921a      	str	r2, [sp, #104]	@ 0x68
 801234c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801234e:	9326      	str	r3, [sp, #152]	@ 0x98
 8012350:	4293      	cmp	r3, r2
 8012352:	f47f aefc 	bne.w	801214e <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 8012356:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012358:	2b00      	cmp	r3, #0
 801235a:	dd26      	ble.n	80123aa <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 801235c:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 801235e:	2b00      	cmp	r3, #0
 8012360:	f000 819f 	beq.w	80126a2 <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 8012364:	4699      	mov	r9, r3
 8012366:	2400      	movs	r4, #0
 8012368:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 801236a:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 801236e:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8012370:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 8012374:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 8012378:	462b      	mov	r3, r5
 801237a:	4455      	add	r5, sl
 801237c:	463a      	mov	r2, r7
 801237e:	4641      	mov	r1, r8
 8012380:	4640      	mov	r0, r8
 8012382:	3401      	adds	r4, #1
 8012384:	47c8      	blx	r9
 8012386:	1bab      	subs	r3, r5, r6
 8012388:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801238a:	b224      	sxth	r4, r4
 801238c:	455b      	cmp	r3, fp
 801238e:	bfa8      	it	ge
 8012390:	4635      	movge	r5, r6
 8012392:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012394:	4490      	add	r8, r2
 8012396:	4543      	cmp	r3, r8
 8012398:	d801      	bhi.n	801239e <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 801239a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801239c:	4498      	add	r8, r3
 801239e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123a0:	42a3      	cmp	r3, r4
 80123a2:	d1e9      	bne.n	8012378 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 80123a4:	952f      	str	r5, [sp, #188]	@ 0xbc
 80123a6:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 80123aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80123ac:	3301      	adds	r3, #1
 80123ae:	b21b      	sxth	r3, r3
 80123b0:	931d      	str	r3, [sp, #116]	@ 0x74
 80123b2:	e638      	b.n	8012026 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 80123b4:	2500      	movs	r5, #0
 80123b6:	e78e      	b.n	80122d6 <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 80123b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80123bc:	4616      	mov	r6, r2
 80123be:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80123c0:	189a      	adds	r2, r3, r2
 80123c2:	e6e9      	b.n	8012198 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 80123c4:	eeb0 7a61 	vmov.f32	s14, s3
 80123c8:	e79f      	b.n	801230a <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 80123ca:	eef0 1a48 	vmov.f32	s3, s16
 80123ce:	e6cb      	b.n	8012168 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 80123d0:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 80123d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80123d4:	fb02 f303 	mul.w	r3, r2, r3
 80123d8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80123da:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 80123de:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d901      	bls.n	80123e8 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 80123e4:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80123e6:	4413      	add	r3, r2
 80123e8:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d217      	bcs.n	801241e <forward_lite_conv2d_if32of32wf32_pool+0x572>
 80123ee:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80123f0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80123f2:	428a      	cmp	r2, r1
 80123f4:	d013      	beq.n	801241e <forward_lite_conv2d_if32of32wf32_pool+0x572>
 80123f6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d910      	bls.n	801241e <forward_lite_conv2d_if32of32wf32_pool+0x572>
 80123fc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80123fe:	461a      	mov	r2, r3
 8012400:	f852 0b04 	ldr.w	r0, [r2], #4
 8012404:	f841 0b04 	str.w	r0, [r1], #4
 8012408:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801240a:	4290      	cmp	r0, r2
 801240c:	d8f8      	bhi.n	8012400 <forward_lite_conv2d_if32of32wf32_pool+0x554>
 801240e:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8012410:	1ad3      	subs	r3, r2, r3
 8012412:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8012414:	f023 0303 	bic.w	r3, r3, #3
 8012418:	3304      	adds	r3, #4
 801241a:	441a      	add	r2, r3
 801241c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801241e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8012420:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8012422:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8012426:	440a      	add	r2, r1
 8012428:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 801242a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801242c:	1ad2      	subs	r2, r2, r3
 801242e:	4401      	add	r1, r0
 8012430:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8012432:	b212      	sxth	r2, r2
 8012434:	4403      	add	r3, r0
 8012436:	911b      	str	r1, [sp, #108]	@ 0x6c
 8012438:	9227      	str	r2, [sp, #156]	@ 0x9c
 801243a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801243c:	b21b      	sxth	r3, r3
 801243e:	428a      	cmp	r2, r1
 8012440:	931d      	str	r3, [sp, #116]	@ 0x74
 8012442:	460b      	mov	r3, r1
 8012444:	f63f adef 	bhi.w	8012026 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8012448:	9925      	ldr	r1, [sp, #148]	@ 0x94
 801244a:	440b      	add	r3, r1
 801244c:	429a      	cmp	r2, r3
 801244e:	d9fc      	bls.n	801244a <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 8012450:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012452:	e5e8      	b.n	8012026 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8012454:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8012456:	2a00      	cmp	r2, #0
 8012458:	f77f af7d 	ble.w	8012356 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 801245c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801245e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8012460:	fb02 f303 	mul.w	r3, r2, r3
 8012464:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8012466:	931a      	str	r3, [sp, #104]	@ 0x68
 8012468:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801246a:	189a      	adds	r2, r3, r2
 801246c:	9326      	str	r3, [sp, #152]	@ 0x98
 801246e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012470:	923f      	str	r2, [sp, #252]	@ 0xfc
 8012472:	9330      	str	r3, [sp, #192]	@ 0xc0
 8012474:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012476:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8012478:	440a      	add	r2, r1
 801247a:	9319      	str	r3, [sp, #100]	@ 0x64
 801247c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801247e:	9240      	str	r2, [sp, #256]	@ 0x100
 8012480:	2b00      	cmp	r3, #0
 8012482:	f000 80fc 	beq.w	801267e <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 8012486:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8012488:	ecf3 1a01 	vldmia	r3!, {s3}
 801248c:	9330      	str	r3, [sp, #192]	@ 0xc0
 801248e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012490:	2b00      	cmp	r3, #0
 8012492:	f000 80e5 	beq.w	8012660 <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 8012496:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8012498:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801249a:	189a      	adds	r2, r3, r2
 801249c:	920c      	str	r2, [sp, #48]	@ 0x30
 801249e:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 80124a0:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 80124a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80124a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80124a8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80124aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80124ac:	2300      	movs	r3, #0
 80124ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80124b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f2c0 80e8 	blt.w	8012688 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 80124b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80124ba:	2000      	movs	r0, #0
 80124bc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80124be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80124c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80124c2:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80124c4:	428c      	cmp	r4, r1
 80124c6:	bf94      	ite	ls
 80124c8:	ebc0 0004 	rsbls	r0, r0, r4
 80124cc:	ebc0 0001 	rsbhi	r0, r0, r1
 80124d0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80124d2:	f1bb 0f00 	cmp.w	fp, #0
 80124d6:	eba4 0900 	sub.w	r9, r4, r0
 80124da:	fb03 5301 	mla	r3, r3, r1, r5
 80124de:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80124e0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80124e2:	eba5 0a00 	sub.w	sl, r5, r0
 80124e6:	fb04 f000 	mul.w	r0, r4, r0
 80124ea:	f340 80d3 	ble.w	8012694 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 80124ee:	f020 080f 	bic.w	r8, r0, #15
 80124f2:	eeb0 7a61 	vmov.f32	s14, s3
 80124f6:	fb0a fa01 	mul.w	sl, sl, r1
 80124fa:	2400      	movs	r4, #0
 80124fc:	f108 37ff 	add.w	r7, r8, #4294967295
 8012500:	fb09 f901 	mul.w	r9, r9, r1
 8012504:	093f      	lsrs	r7, r7, #4
 8012506:	3701      	adds	r7, #1
 8012508:	01be      	lsls	r6, r7, #6
 801250a:	013f      	lsls	r7, r7, #4
 801250c:	f1b8 0f00 	cmp.w	r8, #0
 8012510:	f340 80b8 	ble.w	8012684 <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 8012514:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 8012518:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 801251c:	f04f 0c00 	mov.w	ip, #0
 8012520:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 8012524:	f10c 0c10 	add.w	ip, ip, #16
 8012528:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 801252c:	3140      	adds	r1, #64	@ 0x40
 801252e:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 8012532:	45c4      	cmp	ip, r8
 8012534:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012538:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 801253c:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 8012540:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8012544:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 8012548:	eee4 7a85 	vfma.f32	s15, s9, s10
 801254c:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 8012550:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 8012554:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 8012558:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 801255c:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 8012560:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 8012564:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012568:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 801256c:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 8012570:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 8012574:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 8012578:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 801257c:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 8012580:	eeee 7a26 	vfma.f32	s15, s28, s13
 8012584:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 8012588:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 801258c:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 8012590:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8012594:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 8012598:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 801259c:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80125a0:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 80125a4:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 80125a8:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 80125ac:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 80125b0:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 80125b4:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 80125b8:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80125bc:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 80125c0:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 80125c4:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80125c8:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80125cc:	eee9 7a89 	vfma.f32	s15, s19, s18
 80125d0:	eee8 7a80 	vfma.f32	s15, s17, s0
 80125d4:	eee0 7a81 	vfma.f32	s15, s1, s2
 80125d8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80125dc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80125e0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80125e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80125e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80125ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80125f0:	db96      	blt.n	8012520 <forward_lite_conv2d_if32of32wf32_pool+0x674>
 80125f2:	4432      	add	r2, r6
 80125f4:	4433      	add	r3, r6
 80125f6:	4639      	mov	r1, r7
 80125f8:	4288      	cmp	r0, r1
 80125fa:	dd10      	ble.n	801261e <forward_lite_conv2d_if32of32wf32_pool+0x772>
 80125fc:	460d      	mov	r5, r1
 80125fe:	4696      	mov	lr, r2
 8012600:	469c      	mov	ip, r3
 8012602:	3501      	adds	r5, #1
 8012604:	ecfc 6a01 	vldmia	ip!, {s13}
 8012608:	ecfe 7a01 	vldmia	lr!, {s15}
 801260c:	42a8      	cmp	r0, r5
 801260e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012612:	d1f6      	bne.n	8012602 <forward_lite_conv2d_if32of32wf32_pool+0x756>
 8012614:	1a41      	subs	r1, r0, r1
 8012616:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801261a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801261e:	3401      	adds	r4, #1
 8012620:	4452      	add	r2, sl
 8012622:	444b      	add	r3, r9
 8012624:	45a3      	cmp	fp, r4
 8012626:	f47f af71 	bne.w	801250c <forward_lite_conv2d_if32of32wf32_pool+0x660>
 801262a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801262c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801262e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012630:	4410      	add	r0, r2
 8012632:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012634:	ed81 7a00 	vstr	s14, [r1]
 8012638:	900b      	str	r0, [sp, #44]	@ 0x2c
 801263a:	3301      	adds	r3, #1
 801263c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801263e:	9311      	str	r3, [sp, #68]	@ 0x44
 8012640:	4401      	add	r1, r0
 8012642:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8012644:	9110      	str	r1, [sp, #64]	@ 0x40
 8012646:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012648:	1a89      	subs	r1, r1, r2
 801264a:	910e      	str	r1, [sp, #56]	@ 0x38
 801264c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801264e:	4401      	add	r1, r0
 8012650:	910d      	str	r1, [sp, #52]	@ 0x34
 8012652:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012654:	1a8a      	subs	r2, r1, r2
 8012656:	920c      	str	r2, [sp, #48]	@ 0x30
 8012658:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801265a:	429a      	cmp	r2, r3
 801265c:	f47f af28 	bne.w	80124b0 <forward_lite_conv2d_if32of32wf32_pool+0x604>
 8012660:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012662:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8012664:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8012666:	440a      	add	r2, r1
 8012668:	3304      	adds	r3, #4
 801266a:	9219      	str	r2, [sp, #100]	@ 0x64
 801266c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801266e:	9326      	str	r3, [sp, #152]	@ 0x98
 8012670:	4293      	cmp	r3, r2
 8012672:	f43f ae70 	beq.w	8012356 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8012676:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012678:	2b00      	cmp	r3, #0
 801267a:	f47f af04 	bne.w	8012486 <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 801267e:	eef0 1a48 	vmov.f32	s3, s16
 8012682:	e704      	b.n	801248e <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 8012684:	2100      	movs	r1, #0
 8012686:	e7b7      	b.n	80125f8 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 8012688:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801268a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801268c:	4610      	mov	r0, r2
 801268e:	4413      	add	r3, r2
 8012690:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012692:	e714      	b.n	80124be <forward_lite_conv2d_if32of32wf32_pool+0x612>
 8012694:	eeb0 7a61 	vmov.f32	s14, s3
 8012698:	e7c7      	b.n	801262a <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 801269a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801269c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801269e:	921c      	str	r2, [sp, #112]	@ 0x70
 80126a0:	e52d      	b.n	80120fe <forward_lite_conv2d_if32of32wf32_pool+0x252>
 80126a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80126a4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80126a6:	3301      	adds	r3, #1
 80126a8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80126aa:	440a      	add	r2, r1
 80126ac:	b219      	sxth	r1, r3
 80126ae:	4290      	cmp	r0, r2
 80126b0:	d801      	bhi.n	80126b6 <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 80126b2:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80126b4:	4402      	add	r2, r0
 80126b6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80126b8:	4281      	cmp	r1, r0
 80126ba:	dbf3      	blt.n	80126a4 <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 80126bc:	921b      	str	r2, [sp, #108]	@ 0x6c
 80126be:	e674      	b.n	80123aa <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

080126c0 <forward_lite_nl_relu_generic_if32of32_kernel>:
 80126c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80126c4:	ed93 7a00 	vldr	s14, [r3]
 80126c8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80126cc:	ed93 6a01 	vldr	s12, [r3, #4]
 80126d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d4:	d42b      	bmi.n	801272e <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80126d6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80126da:	4413      	add	r3, r2
 80126dc:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80126e0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80126e4:	4291      	cmp	r1, r2
 80126e6:	d821      	bhi.n	801272c <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80126e8:	f10c 0104 	add.w	r1, ip, #4
 80126ec:	1d13      	adds	r3, r2, #4
 80126ee:	eba2 020c 	sub.w	r2, r2, ip
 80126f2:	4408      	add	r0, r1
 80126f4:	e00c      	b.n	8012710 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80126f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126fa:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80126fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012702:	db01      	blt.n	8012708 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8012704:	ee65 7a86 	vmul.f32	s15, s11, s12
 8012708:	4293      	cmp	r3, r2
 801270a:	ed60 7a01 	vstmdb	r0!, {s15}
 801270e:	d00c      	beq.n	801272a <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8012710:	ed73 7a01 	vldmdb	r3!, {s15}
 8012714:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801271c:	daeb      	bge.n	80126f6 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 801271e:	eef0 7a66 	vmov.f32	s15, s13
 8012722:	4293      	cmp	r3, r2
 8012724:	ed60 7a01 	vstmdb	r0!, {s15}
 8012728:	d1f2      	bne.n	8012710 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 801272a:	4770      	bx	lr
 801272c:	4770      	bx	lr
 801272e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012732:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012736:	4413      	add	r3, r2
 8012738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801273c:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8012740:	b500      	push	{lr}
 8012742:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8012746:	d019      	beq.n	801277c <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8012748:	4561      	cmp	r1, ip
 801274a:	d815      	bhi.n	8012778 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 801274c:	f10e 0204 	add.w	r2, lr, #4
 8012750:	f10c 0304 	add.w	r3, ip, #4
 8012754:	ebac 010e 	sub.w	r1, ip, lr
 8012758:	4402      	add	r2, r0
 801275a:	ed73 7a01 	vldmdb	r3!, {s15}
 801275e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012762:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801276a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801276e:	d827      	bhi.n	80127c0 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8012770:	428b      	cmp	r3, r1
 8012772:	ed62 6a01 	vstmdb	r2!, {s13}
 8012776:	d1f0      	bne.n	801275a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8012778:	f85d fb04 	ldr.w	pc, [sp], #4
 801277c:	4561      	cmp	r1, ip
 801277e:	d8fb      	bhi.n	8012778 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8012780:	f10e 0204 	add.w	r2, lr, #4
 8012784:	f10c 0304 	add.w	r3, ip, #4
 8012788:	ebac 010e 	sub.w	r1, ip, lr
 801278c:	f04f 0c00 	mov.w	ip, #0
 8012790:	4402      	add	r2, r0
 8012792:	ed73 7a01 	vldmdb	r3!, {s15}
 8012796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801279e:	d40a      	bmi.n	80127b6 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 80127a0:	428b      	cmp	r3, r1
 80127a2:	f842 cd04 	str.w	ip, [r2, #-4]!
 80127a6:	d0e7      	beq.n	8012778 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80127a8:	ed73 7a01 	vldmdb	r3!, {s15}
 80127ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80127b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b4:	d5f4      	bpl.n	80127a0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80127b6:	428b      	cmp	r3, r1
 80127b8:	ed62 7a01 	vstmdb	r2!, {s15}
 80127bc:	d1e9      	bne.n	8012792 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 80127be:	e7db      	b.n	8012778 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80127c0:	428b      	cmp	r3, r1
 80127c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80127c6:	d1c8      	bne.n	801275a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80127c8:	e7d6      	b.n	8012778 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80127ca:	bf00      	nop

080127cc <pool_func_mp_array_f32>:
 80127cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d0:	b091      	sub	sp, #68	@ 0x44
 80127d2:	468b      	mov	fp, r1
 80127d4:	469c      	mov	ip, r3
 80127d6:	4690      	mov	r8, r2
 80127d8:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 80127dc:	4681      	mov	r9, r0
 80127de:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80127e2:	9101      	str	r1, [sp, #4]
 80127e4:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80127e8:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 80127ec:	9105      	str	r1, [sp, #20]
 80127ee:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80127f2:	9304      	str	r3, [sp, #16]
 80127f4:	9106      	str	r1, [sp, #24]
 80127f6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80127fa:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80127fe:	ea52 0403 	orrs.w	r4, r2, r3
 8012802:	9102      	str	r1, [sp, #8]
 8012804:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8012808:	9103      	str	r1, [sp, #12]
 801280a:	d173      	bne.n	80128f4 <pool_func_mp_array_f32+0x128>
 801280c:	9904      	ldr	r1, [sp, #16]
 801280e:	9d02      	ldr	r5, [sp, #8]
 8012810:	eba1 000b 	sub.w	r0, r1, fp
 8012814:	9e05      	ldr	r6, [sp, #20]
 8012816:	1e69      	subs	r1, r5, #1
 8012818:	3801      	subs	r0, #1
 801281a:	fb11 0106 	smlabb	r1, r1, r6, r0
 801281e:	0409      	lsls	r1, r1, #16
 8012820:	d568      	bpl.n	80128f4 <pool_func_mp_array_f32+0x128>
 8012822:	9901      	ldr	r1, [sp, #4]
 8012824:	9e03      	ldr	r6, [sp, #12]
 8012826:	eba1 0008 	sub.w	r0, r1, r8
 801282a:	9f06      	ldr	r7, [sp, #24]
 801282c:	1e71      	subs	r1, r6, #1
 801282e:	3801      	subs	r0, #1
 8012830:	fb11 0107 	smlabb	r1, r1, r7, r0
 8012834:	040f      	lsls	r7, r1, #16
 8012836:	d55d      	bpl.n	80128f4 <pool_func_mp_array_f32+0x128>
 8012838:	2e00      	cmp	r6, #0
 801283a:	d058      	beq.n	80128ee <pool_func_mp_array_f32+0x122>
 801283c:	2d00      	cmp	r5, #0
 801283e:	d056      	beq.n	80128ee <pool_func_mp_array_f32+0x122>
 8012840:	4663      	mov	r3, ip
 8012842:	2b00      	cmp	r3, #0
 8012844:	d053      	beq.n	80128ee <pool_func_mp_array_f32+0x122>
 8012846:	2b01      	cmp	r3, #1
 8012848:	f040 814a 	bne.w	8012ae0 <pool_func_mp_array_f32+0x314>
 801284c:	46a2      	mov	sl, r4
 801284e:	4623      	mov	r3, r4
 8012850:	9407      	str	r4, [sp, #28]
 8012852:	9a02      	ldr	r2, [sp, #8]
 8012854:	2700      	movs	r7, #0
 8012856:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801285a:	fb02 f303 	mul.w	r3, r2, r3
 801285e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012862:	46be      	mov	lr, r7
 8012864:	46bc      	mov	ip, r7
 8012866:	9308      	str	r3, [sp, #32]
 8012868:	fa0f f38a 	sxth.w	r3, sl
 801286c:	9309      	str	r3, [sp, #36]	@ 0x24
 801286e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012870:	b23d      	sxth	r5, r7
 8012872:	9b08      	ldr	r3, [sp, #32]
 8012874:	fa0f f088 	sxth.w	r0, r8
 8012878:	42b4      	cmp	r4, r6
 801287a:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8012adc <pool_func_mp_array_f32+0x310>
 801287e:	449c      	add	ip, r3
 8012880:	da12      	bge.n	80128a8 <pool_func_mp_array_f32+0xdc>
 8012882:	4285      	cmp	r5, r0
 8012884:	da0c      	bge.n	80128a0 <pool_func_mp_array_f32+0xd4>
 8012886:	fb04 520b 	mla	r2, r4, fp, r5
 801288a:	462b      	mov	r3, r5
 801288c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012890:	3301      	adds	r3, #1
 8012892:	ecb2 7a01 	vldmia	r2!, {s14}
 8012896:	b219      	sxth	r1, r3
 8012898:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801289c:	4281      	cmp	r1, r0
 801289e:	dbf7      	blt.n	8012890 <pool_func_mp_array_f32+0xc4>
 80128a0:	3401      	adds	r4, #1
 80128a2:	b224      	sxth	r4, r4
 80128a4:	42b4      	cmp	r4, r6
 80128a6:	dbec      	blt.n	8012882 <pool_func_mp_array_f32+0xb6>
 80128a8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80128aa:	f10e 0e01 	add.w	lr, lr, #1
 80128ae:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80128b2:	9b05      	ldr	r3, [sp, #20]
 80128b4:	fa0f fe8e 	sxth.w	lr, lr
 80128b8:	4498      	add	r8, r3
 80128ba:	441f      	add	r7, r3
 80128bc:	9b02      	ldr	r3, [sp, #8]
 80128be:	edcc 7a00 	vstr	s15, [ip]
 80128c2:	fa1f f888 	uxth.w	r8, r8
 80128c6:	4573      	cmp	r3, lr
 80128c8:	b2bf      	uxth	r7, r7
 80128ca:	46f4      	mov	ip, lr
 80128cc:	dccf      	bgt.n	801286e <pool_func_mp_array_f32+0xa2>
 80128ce:	9a07      	ldr	r2, [sp, #28]
 80128d0:	9906      	ldr	r1, [sp, #24]
 80128d2:	9b01      	ldr	r3, [sp, #4]
 80128d4:	3201      	adds	r2, #1
 80128d6:	448a      	add	sl, r1
 80128d8:	b212      	sxth	r2, r2
 80128da:	440b      	add	r3, r1
 80128dc:	9903      	ldr	r1, [sp, #12]
 80128de:	fa1f fa8a 	uxth.w	sl, sl
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	9207      	str	r2, [sp, #28]
 80128e6:	4291      	cmp	r1, r2
 80128e8:	9301      	str	r3, [sp, #4]
 80128ea:	4613      	mov	r3, r2
 80128ec:	dcb1      	bgt.n	8012852 <pool_func_mp_array_f32+0x86>
 80128ee:	b011      	add	sp, #68	@ 0x44
 80128f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f4:	9903      	ldr	r1, [sp, #12]
 80128f6:	2900      	cmp	r1, #0
 80128f8:	d0f9      	beq.n	80128ee <pool_func_mp_array_f32+0x122>
 80128fa:	9902      	ldr	r1, [sp, #8]
 80128fc:	2900      	cmp	r1, #0
 80128fe:	d0f6      	beq.n	80128ee <pool_func_mp_array_f32+0x122>
 8012900:	4661      	mov	r1, ip
 8012902:	2900      	cmp	r1, #0
 8012904:	d0f3      	beq.n	80128ee <pool_func_mp_array_f32+0x122>
 8012906:	2901      	cmp	r1, #1
 8012908:	9901      	ldr	r1, [sp, #4]
 801290a:	d163      	bne.n	80129d4 <pool_func_mp_array_f32+0x208>
 801290c:	1a8a      	subs	r2, r1, r2
 801290e:	9904      	ldr	r1, [sp, #16]
 8012910:	1ac9      	subs	r1, r1, r3
 8012912:	425b      	negs	r3, r3
 8012914:	b292      	uxth	r2, r2
 8012916:	b29b      	uxth	r3, r3
 8012918:	9204      	str	r2, [sp, #16]
 801291a:	b28a      	uxth	r2, r1
 801291c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801291e:	2300      	movs	r3, #0
 8012920:	920a      	str	r2, [sp, #40]	@ 0x28
 8012922:	9307      	str	r3, [sp, #28]
 8012924:	9a02      	ldr	r2, [sp, #8]
 8012926:	2700      	movs	r7, #0
 8012928:	fb02 f303 	mul.w	r3, r2, r3
 801292c:	9a04      	ldr	r2, [sp, #16]
 801292e:	46bc      	mov	ip, r7
 8012930:	9308      	str	r3, [sp, #32]
 8012932:	b216      	sxth	r6, r2
 8012934:	9b01      	ldr	r3, [sp, #4]
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 801293c:	b21b      	sxth	r3, r3
 801293e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012940:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012942:	fa0f f58e 	sxth.w	r5, lr
 8012946:	9b08      	ldr	r3, [sp, #32]
 8012948:	fa0f f48a 	sxth.w	r4, sl
 801294c:	428e      	cmp	r6, r1
 801294e:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8012adc <pool_func_mp_array_f32+0x310>
 8012952:	449c      	add	ip, r3
 8012954:	dd1c      	ble.n	8012990 <pool_func_mp_array_f32+0x1c4>
 8012956:	42a5      	cmp	r5, r4
 8012958:	da16      	bge.n	8012988 <pool_func_mp_array_f32+0x1bc>
 801295a:	4588      	cmp	r8, r1
 801295c:	fb01 f20b 	mul.w	r2, r1, fp
 8012960:	dd12      	ble.n	8012988 <pool_func_mp_array_f32+0x1bc>
 8012962:	442a      	add	r2, r5
 8012964:	462b      	mov	r3, r5
 8012966:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801296a:	ea41 0003 	orr.w	r0, r1, r3
 801296e:	0400      	lsls	r0, r0, #16
 8012970:	d405      	bmi.n	801297e <pool_func_mp_array_f32+0x1b2>
 8012972:	459b      	cmp	fp, r3
 8012974:	dd03      	ble.n	801297e <pool_func_mp_array_f32+0x1b2>
 8012976:	ed92 7a00 	vldr	s14, [r2]
 801297a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801297e:	3301      	adds	r3, #1
 8012980:	3204      	adds	r2, #4
 8012982:	b218      	sxth	r0, r3
 8012984:	42a0      	cmp	r0, r4
 8012986:	dbf0      	blt.n	801296a <pool_func_mp_array_f32+0x19e>
 8012988:	3101      	adds	r1, #1
 801298a:	b209      	sxth	r1, r1
 801298c:	42b1      	cmp	r1, r6
 801298e:	dbe2      	blt.n	8012956 <pool_func_mp_array_f32+0x18a>
 8012990:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012992:	3701      	adds	r7, #1
 8012994:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8012998:	9b05      	ldr	r3, [sp, #20]
 801299a:	b23f      	sxth	r7, r7
 801299c:	449a      	add	sl, r3
 801299e:	449e      	add	lr, r3
 80129a0:	9b02      	ldr	r3, [sp, #8]
 80129a2:	edcc 7a00 	vstr	s15, [ip]
 80129a6:	fa1f fa8a 	uxth.w	sl, sl
 80129aa:	42bb      	cmp	r3, r7
 80129ac:	fa1f fe8e 	uxth.w	lr, lr
 80129b0:	46bc      	mov	ip, r7
 80129b2:	dcc5      	bgt.n	8012940 <pool_func_mp_array_f32+0x174>
 80129b4:	9a07      	ldr	r2, [sp, #28]
 80129b6:	9b04      	ldr	r3, [sp, #16]
 80129b8:	9906      	ldr	r1, [sp, #24]
 80129ba:	3201      	adds	r2, #1
 80129bc:	440b      	add	r3, r1
 80129be:	b212      	sxth	r2, r2
 80129c0:	9903      	ldr	r1, [sp, #12]
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	9207      	str	r2, [sp, #28]
 80129c6:	4291      	cmp	r1, r2
 80129c8:	9304      	str	r3, [sp, #16]
 80129ca:	4613      	mov	r3, r2
 80129cc:	dcaa      	bgt.n	8012924 <pool_func_mp_array_f32+0x158>
 80129ce:	b011      	add	sp, #68	@ 0x44
 80129d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129d4:	1a88      	subs	r0, r1, r2
 80129d6:	9904      	ldr	r1, [sp, #16]
 80129d8:	4252      	negs	r2, r2
 80129da:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80129de:	1ac9      	subs	r1, r1, r3
 80129e0:	425b      	negs	r3, r3
 80129e2:	b292      	uxth	r2, r2
 80129e4:	46e6      	mov	lr, ip
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	b280      	uxth	r0, r0
 80129ea:	9208      	str	r2, [sp, #32]
 80129ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80129ee:	b28a      	uxth	r2, r1
 80129f0:	2300      	movs	r3, #0
 80129f2:	9007      	str	r0, [sp, #28]
 80129f4:	920e      	str	r2, [sp, #56]	@ 0x38
 80129f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129f8:	9a02      	ldr	r2, [sp, #8]
 80129fa:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 80129fe:	fb02 f303 	mul.w	r3, r2, r3
 8012a02:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012a06:	920a      	str	r2, [sp, #40]	@ 0x28
 8012a08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a0a:	930d      	str	r3, [sp, #52]	@ 0x34
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	9201      	str	r2, [sp, #4]
 8012a10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012a12:	930c      	str	r3, [sp, #48]	@ 0x30
 8012a14:	9204      	str	r2, [sp, #16]
 8012a16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012a18:	f04f 0c00 	mov.w	ip, #0
 8012a1c:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8012a20:	4413      	add	r3, r2
 8012a22:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8012a26:	4667      	mov	r7, ip
 8012a28:	fb0e f303 	mul.w	r3, lr, r3
 8012a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a30:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8012adc <pool_func_mp_array_f32+0x310>
 8012a34:	42b1      	cmp	r1, r6
 8012a36:	da1e      	bge.n	8012a76 <pool_func_mp_array_f32+0x2aa>
 8012a38:	42a5      	cmp	r5, r4
 8012a3a:	da18      	bge.n	8012a6e <pool_func_mp_array_f32+0x2a2>
 8012a3c:	4541      	cmp	r1, r8
 8012a3e:	fb01 f30b 	mul.w	r3, r1, fp
 8012a42:	da14      	bge.n	8012a6e <pool_func_mp_array_f32+0x2a2>
 8012a44:	195a      	adds	r2, r3, r5
 8012a46:	462b      	mov	r3, r5
 8012a48:	fb0e 7202 	mla	r2, lr, r2, r7
 8012a4c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012a50:	ea41 0003 	orr.w	r0, r1, r3
 8012a54:	0400      	lsls	r0, r0, #16
 8012a56:	d405      	bmi.n	8012a64 <pool_func_mp_array_f32+0x298>
 8012a58:	459b      	cmp	fp, r3
 8012a5a:	dd03      	ble.n	8012a64 <pool_func_mp_array_f32+0x298>
 8012a5c:	ed92 7a00 	vldr	s14, [r2]
 8012a60:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012a64:	3301      	adds	r3, #1
 8012a66:	4452      	add	r2, sl
 8012a68:	b218      	sxth	r0, r3
 8012a6a:	42a0      	cmp	r0, r4
 8012a6c:	dbf0      	blt.n	8012a50 <pool_func_mp_array_f32+0x284>
 8012a6e:	3101      	adds	r1, #1
 8012a70:	b209      	sxth	r1, r1
 8012a72:	42b1      	cmp	r1, r6
 8012a74:	dbe0      	blt.n	8012a38 <pool_func_mp_array_f32+0x26c>
 8012a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a78:	f10c 0c01 	add.w	ip, ip, #1
 8012a7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012a7e:	443b      	add	r3, r7
 8012a80:	fa0f fc8c 	sxth.w	ip, ip
 8012a84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a88:	45f4      	cmp	ip, lr
 8012a8a:	4667      	mov	r7, ip
 8012a8c:	edc3 7a00 	vstr	s15, [r3]
 8012a90:	dbcd      	blt.n	8012a2e <pool_func_mp_array_f32+0x262>
 8012a92:	9a01      	ldr	r2, [sp, #4]
 8012a94:	9805      	ldr	r0, [sp, #20]
 8012a96:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012a98:	4402      	add	r2, r0
 8012a9a:	9b04      	ldr	r3, [sp, #16]
 8012a9c:	3101      	adds	r1, #1
 8012a9e:	b292      	uxth	r2, r2
 8012aa0:	4403      	add	r3, r0
 8012aa2:	b209      	sxth	r1, r1
 8012aa4:	9201      	str	r2, [sp, #4]
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	9a02      	ldr	r2, [sp, #8]
 8012aaa:	9304      	str	r3, [sp, #16]
 8012aac:	460b      	mov	r3, r1
 8012aae:	428a      	cmp	r2, r1
 8012ab0:	910c      	str	r1, [sp, #48]	@ 0x30
 8012ab2:	dcb0      	bgt.n	8012a16 <pool_func_mp_array_f32+0x24a>
 8012ab4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012ab6:	9b08      	ldr	r3, [sp, #32]
 8012ab8:	3101      	adds	r1, #1
 8012aba:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 8012abe:	b209      	sxth	r1, r1
 8012ac0:	4402      	add	r2, r0
 8012ac2:	4403      	add	r3, r0
 8012ac4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012ac6:	b292      	uxth	r2, r2
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	9207      	str	r2, [sp, #28]
 8012acc:	9a03      	ldr	r2, [sp, #12]
 8012ace:	9308      	str	r3, [sp, #32]
 8012ad0:	460b      	mov	r3, r1
 8012ad2:	428a      	cmp	r2, r1
 8012ad4:	dc90      	bgt.n	80129f8 <pool_func_mp_array_f32+0x22c>
 8012ad6:	b011      	add	sp, #68	@ 0x44
 8012ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012adc:	cf000000 	.word	0xcf000000
 8012ae0:	4623      	mov	r3, r4
 8012ae2:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8012ae6:	46e0      	mov	r8, ip
 8012ae8:	9408      	str	r4, [sp, #32]
 8012aea:	9409      	str	r4, [sp, #36]	@ 0x24
 8012aec:	9a02      	ldr	r2, [sp, #8]
 8012aee:	f04f 0c00 	mov.w	ip, #0
 8012af2:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8012af6:	fb02 f303 	mul.w	r3, r2, r3
 8012afa:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8012afe:	930c      	str	r3, [sp, #48]	@ 0x30
 8012b00:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012b04:	930d      	str	r3, [sp, #52]	@ 0x34
 8012b06:	9b04      	ldr	r3, [sp, #16]
 8012b08:	9307      	str	r3, [sp, #28]
 8012b0a:	4663      	mov	r3, ip
 8012b0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012b0e:	f04f 0e00 	mov.w	lr, #0
 8012b12:	fa0f f58c 	sxth.w	r5, ip
 8012b16:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	4676      	mov	r6, lr
 8012b1e:	fb08 f303 	mul.w	r3, r8, r3
 8012b22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b24:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8012b26:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8012adc <pool_func_mp_array_f32+0x310>
 8012b2a:	42bc      	cmp	r4, r7
 8012b2c:	da15      	bge.n	8012b5a <pool_func_mp_array_f32+0x38e>
 8012b2e:	4285      	cmp	r5, r0
 8012b30:	da0f      	bge.n	8012b52 <pool_func_mp_array_f32+0x386>
 8012b32:	fb0b 5304 	mla	r3, fp, r4, r5
 8012b36:	462a      	mov	r2, r5
 8012b38:	fb08 6303 	mla	r3, r8, r3, r6
 8012b3c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8012b40:	3201      	adds	r2, #1
 8012b42:	ed93 7a00 	vldr	s14, [r3]
 8012b46:	4453      	add	r3, sl
 8012b48:	b211      	sxth	r1, r2
 8012b4a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012b4e:	4281      	cmp	r1, r0
 8012b50:	dbf6      	blt.n	8012b40 <pool_func_mp_array_f32+0x374>
 8012b52:	3401      	adds	r4, #1
 8012b54:	b224      	sxth	r4, r4
 8012b56:	42bc      	cmp	r4, r7
 8012b58:	dbe9      	blt.n	8012b2e <pool_func_mp_array_f32+0x362>
 8012b5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b5c:	f10e 0e01 	add.w	lr, lr, #1
 8012b60:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012b62:	4433      	add	r3, r6
 8012b64:	fa0f fe8e 	sxth.w	lr, lr
 8012b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b6c:	45c6      	cmp	lr, r8
 8012b6e:	4676      	mov	r6, lr
 8012b70:	edc3 7a00 	vstr	s15, [r3]
 8012b74:	dbd6      	blt.n	8012b24 <pool_func_mp_array_f32+0x358>
 8012b76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012b78:	9905      	ldr	r1, [sp, #20]
 8012b7a:	9b07      	ldr	r3, [sp, #28]
 8012b7c:	3201      	adds	r2, #1
 8012b7e:	448c      	add	ip, r1
 8012b80:	b212      	sxth	r2, r2
 8012b82:	440b      	add	r3, r1
 8012b84:	9902      	ldr	r1, [sp, #8]
 8012b86:	fa1f fc8c 	uxth.w	ip, ip
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	920a      	str	r2, [sp, #40]	@ 0x28
 8012b8e:	4291      	cmp	r1, r2
 8012b90:	9307      	str	r3, [sp, #28]
 8012b92:	4613      	mov	r3, r2
 8012b94:	dcba      	bgt.n	8012b0c <pool_func_mp_array_f32+0x340>
 8012b96:	9a01      	ldr	r2, [sp, #4]
 8012b98:	9806      	ldr	r0, [sp, #24]
 8012b9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b9c:	4402      	add	r2, r0
 8012b9e:	9b08      	ldr	r3, [sp, #32]
 8012ba0:	3101      	adds	r1, #1
 8012ba2:	b292      	uxth	r2, r2
 8012ba4:	4403      	add	r3, r0
 8012ba6:	b209      	sxth	r1, r1
 8012ba8:	9201      	str	r2, [sp, #4]
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	9a03      	ldr	r2, [sp, #12]
 8012bae:	9308      	str	r3, [sp, #32]
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	428a      	cmp	r2, r1
 8012bb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8012bb6:	dc99      	bgt.n	8012aec <pool_func_mp_array_f32+0x320>
 8012bb8:	e699      	b.n	80128ee <pool_func_mp_array_f32+0x122>
 8012bba:	bf00      	nop

08012bbc <forward_lite_upsample_bilinear_if32of32>:
 8012bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bc0:	ed2d 8b0a 	vpush	{d8-d12}
 8012bc4:	b08f      	sub	sp, #60	@ 0x3c
 8012bc6:	4683      	mov	fp, r0
 8012bc8:	9104      	str	r1, [sp, #16]
 8012bca:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8012bce:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8012bd2:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8012bd6:	9206      	str	r2, [sp, #24]
 8012bd8:	2900      	cmp	r1, #0
 8012bda:	f000 80a7 	beq.w	8012d2c <forward_lite_upsample_bilinear_if32of32+0x170>
 8012bde:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012be2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012be6:	ee70 aae7 	vsub.f32	s21, s1, s15
 8012bea:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012bee:	ee6a aa87 	vmul.f32	s21, s21, s14
 8012bf2:	ee27 9a87 	vmul.f32	s18, s15, s14
 8012bf6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012bfa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012bfc:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8012c00:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8012c04:	2a00      	cmp	r2, #0
 8012c06:	f000 808c 	beq.w	8012d22 <forward_lite_upsample_bilinear_if32of32+0x166>
 8012c0a:	3b01      	subs	r3, #1
 8012c0c:	ea4f 068a 	mov.w	r6, sl, lsl #2
 8012c10:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8012d38 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8012c14:	ee07 3a90 	vmov	s15, r3
 8012c18:	9b06      	ldr	r3, [sp, #24]
 8012c1a:	1e5a      	subs	r2, r3, #1
 8012c1c:	fb0a f303 	mul.w	r3, sl, r3
 8012c20:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012c24:	ee0c 2a90 	vmov	s25, r2
 8012c28:	9305      	str	r3, [sp, #20]
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012c30:	9303      	str	r3, [sp, #12]
 8012c32:	fb06 f308 	mul.w	r3, r6, r8
 8012c36:	9307      	str	r3, [sp, #28]
 8012c38:	eddd 7a03 	vldr	s15, [sp, #12]
 8012c3c:	9b05      	ldr	r3, [sp, #20]
 8012c3e:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8012c42:	ee7b baea 	vsub.f32	s23, s23, s21
 8012c46:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8012c4a:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8012c4e:	fecb baca 	vminnm.f32	s23, s23, s20
 8012c52:	eef4 ba4a 	vcmp.f32	s23, s20
 8012c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c5a:	bf14      	ite	ne
 8012c5c:	4699      	movne	r9, r3
 8012c5e:	f04f 0900 	moveq.w	r9, #0
 8012c62:	f1b8 0f00 	cmp.w	r8, #0
 8012c66:	d056      	beq.n	8012d16 <forward_lite_upsample_bilinear_if32of32+0x15a>
 8012c68:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8012c6c:	9b06      	ldr	r3, [sp, #24]
 8012c6e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8012c72:	9d04      	ldr	r5, [sp, #16]
 8012c74:	2400      	movs	r4, #0
 8012c76:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8012c7a:	ee17 7a10 	vmov	r7, s14
 8012c7e:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8012c82:	fb03 f707 	mul.w	r7, r3, r7
 8012c86:	ee7b bae7 	vsub.f32	s23, s23, s15
 8012c8a:	ee3c ca27 	vadd.f32	s24, s24, s15
 8012c8e:	ee07 4a90 	vmov	s15, r4
 8012c92:	ab0a      	add	r3, sp, #40	@ 0x28
 8012c94:	3401      	adds	r4, #1
 8012c96:	4629      	mov	r1, r5
 8012c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c9c:	9300      	str	r3, [sp, #0]
 8012c9e:	4652      	mov	r2, sl
 8012ca0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012ca4:	4435      	add	r5, r6
 8012ca6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012caa:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012cae:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8012cb2:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8012cb6:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8012cba:	eef4 7a6c 	vcmp.f32	s15, s25
 8012cbe:	ee38 7a67 	vsub.f32	s14, s16, s15
 8012cc2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8012cc6:	ee16 0a90 	vmov	r0, s13
 8012cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cce:	4438      	add	r0, r7
 8012cd0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012cd4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012cd8:	bf14      	ite	ne
 8012cda:	4653      	movne	r3, sl
 8012cdc:	2300      	moveq	r3, #0
 8012cde:	fb06 b000 	mla	r0, r6, r0, fp
 8012ce2:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8012ce6:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8012cea:	9308      	str	r3, [sp, #32]
 8012cec:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8012cf0:	ab08      	add	r3, sp, #32
 8012cf2:	ee67 7aab 	vmul.f32	s15, s15, s23
 8012cf6:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8012cfa:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8012cfe:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8012d02:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8012d06:	f001 f9d9 	bl	80140bc <lite_bilinear_if32of32_kernel>
 8012d0a:	45a0      	cmp	r8, r4
 8012d0c:	d1bf      	bne.n	8012c8e <forward_lite_upsample_bilinear_if32of32+0xd2>
 8012d0e:	9b04      	ldr	r3, [sp, #16]
 8012d10:	9a07      	ldr	r2, [sp, #28]
 8012d12:	4413      	add	r3, r2
 8012d14:	9304      	str	r3, [sp, #16]
 8012d16:	9b03      	ldr	r3, [sp, #12]
 8012d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	9303      	str	r3, [sp, #12]
 8012d20:	d18a      	bne.n	8012c38 <forward_lite_upsample_bilinear_if32of32+0x7c>
 8012d22:	b00f      	add	sp, #60	@ 0x3c
 8012d24:	ecbd 8b0a 	vpop	{d8-d12}
 8012d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2c:	eddf aa02 	vldr	s21, [pc, #8]	@ 8012d38 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8012d30:	eeb0 9a6a 	vmov.f32	s18, s21
 8012d34:	e75f      	b.n	8012bf6 <forward_lite_upsample_bilinear_if32of32+0x3a>
 8012d36:	bf00      	nop
 8012d38:	00000000 	.word	0x00000000

08012d3c <forward_lite_upsample_bilinear_is8os8>:
 8012d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d40:	ed2d 8b0a 	vpush	{d8-d12}
 8012d44:	b08f      	sub	sp, #60	@ 0x3c
 8012d46:	4682      	mov	sl, r0
 8012d48:	9104      	str	r1, [sp, #16]
 8012d4a:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8012d4e:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8012d50:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8012d54:	9206      	str	r2, [sp, #24]
 8012d56:	2900      	cmp	r1, #0
 8012d58:	f000 80aa 	beq.w	8012eb0 <forward_lite_upsample_bilinear_is8os8+0x174>
 8012d5c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012d60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012d64:	ee70 aae7 	vsub.f32	s21, s1, s15
 8012d68:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012d6c:	ee6a aa87 	vmul.f32	s21, s21, s14
 8012d70:	ee27 9a87 	vmul.f32	s18, s15, s14
 8012d74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012d7a:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8012d7e:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8012d82:	2a00      	cmp	r2, #0
 8012d84:	f000 808f 	beq.w	8012ea6 <forward_lite_upsample_bilinear_is8os8+0x16a>
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8012ebc <forward_lite_upsample_bilinear_is8os8+0x180>
 8012d8e:	ee07 3a90 	vmov	s15, r3
 8012d92:	9b06      	ldr	r3, [sp, #24]
 8012d94:	1e5a      	subs	r2, r3, #1
 8012d96:	fb0b f303 	mul.w	r3, fp, r3
 8012d9a:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012d9e:	ee0c 2a90 	vmov	s25, r2
 8012da2:	9305      	str	r3, [sp, #20]
 8012da4:	fb07 f30b 	mul.w	r3, r7, fp
 8012da8:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012dac:	9307      	str	r3, [sp, #28]
 8012dae:	2300      	movs	r3, #0
 8012db0:	9303      	str	r3, [sp, #12]
 8012db2:	eddd 7a03 	vldr	s15, [sp, #12]
 8012db6:	9b05      	ldr	r3, [sp, #20]
 8012db8:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8012dbc:	ee7b baea 	vsub.f32	s23, s23, s21
 8012dc0:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8012dc4:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8012dc8:	fecb baca 	vminnm.f32	s23, s23, s20
 8012dcc:	eef4 ba4a 	vcmp.f32	s23, s20
 8012dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd4:	bf14      	ite	ne
 8012dd6:	4698      	movne	r8, r3
 8012dd8:	f04f 0800 	moveq.w	r8, #0
 8012ddc:	2f00      	cmp	r7, #0
 8012dde:	d05c      	beq.n	8012e9a <forward_lite_upsample_bilinear_is8os8+0x15e>
 8012de0:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8012de4:	9b06      	ldr	r3, [sp, #24]
 8012de6:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8012dea:	9722      	str	r7, [sp, #136]	@ 0x88
 8012dec:	9d04      	ldr	r5, [sp, #16]
 8012dee:	4647      	mov	r7, r8
 8012df0:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8012df4:	ee17 6a10 	vmov	r6, s14
 8012df8:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8012dfc:	2400      	movs	r4, #0
 8012dfe:	fb03 f606 	mul.w	r6, r3, r6
 8012e02:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8012e06:	ee7b bae7 	vsub.f32	s23, s23, s15
 8012e0a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8012e0e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8012e12:	ee07 4a90 	vmov	s15, r4
 8012e16:	3401      	adds	r4, #1
 8012e18:	4629      	mov	r1, r5
 8012e1a:	465a      	mov	r2, fp
 8012e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e20:	f8cd 9000 	str.w	r9, [sp]
 8012e24:	9709      	str	r7, [sp, #36]	@ 0x24
 8012e26:	445d      	add	r5, fp
 8012e28:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012e2c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012e30:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8012e34:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8012e38:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8012e3c:	eef4 7a6c 	vcmp.f32	s15, s25
 8012e40:	ee38 7a67 	vsub.f32	s14, s16, s15
 8012e44:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8012e48:	ee16 0a90 	vmov	r0, s13
 8012e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e50:	4430      	add	r0, r6
 8012e52:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012e56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012e5a:	bf14      	ite	ne
 8012e5c:	465b      	movne	r3, fp
 8012e5e:	2300      	moveq	r3, #0
 8012e60:	fb0b a000 	mla	r0, fp, r0, sl
 8012e64:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8012e68:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8012e6c:	9308      	str	r3, [sp, #32]
 8012e6e:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8012e72:	ab08      	add	r3, sp, #32
 8012e74:	ee67 7aab 	vmul.f32	s15, s15, s23
 8012e78:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8012e7c:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8012e80:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8012e84:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8012e88:	f001 f948 	bl	801411c <lite_bilinear_is8os8_kernel>
 8012e8c:	45a0      	cmp	r8, r4
 8012e8e:	d1c0      	bne.n	8012e12 <forward_lite_upsample_bilinear_is8os8+0xd6>
 8012e90:	9b04      	ldr	r3, [sp, #16]
 8012e92:	4647      	mov	r7, r8
 8012e94:	9a07      	ldr	r2, [sp, #28]
 8012e96:	4413      	add	r3, r2
 8012e98:	9304      	str	r3, [sp, #16]
 8012e9a:	9b03      	ldr	r3, [sp, #12]
 8012e9c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	9303      	str	r3, [sp, #12]
 8012ea4:	d185      	bne.n	8012db2 <forward_lite_upsample_bilinear_is8os8+0x76>
 8012ea6:	b00f      	add	sp, #60	@ 0x3c
 8012ea8:	ecbd 8b0a 	vpop	{d8-d12}
 8012eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eb0:	eddf aa02 	vldr	s21, [pc, #8]	@ 8012ebc <forward_lite_upsample_bilinear_is8os8+0x180>
 8012eb4:	eeb0 9a6a 	vmov.f32	s18, s21
 8012eb8:	e75c      	b.n	8012d74 <forward_lite_upsample_bilinear_is8os8+0x38>
 8012eba:	bf00      	nop
 8012ebc:	00000000 	.word	0x00000000

08012ec0 <forward_lite_upsample_bilinear_iu8ou8>:
 8012ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec4:	ed2d 8b0a 	vpush	{d8-d12}
 8012ec8:	b08f      	sub	sp, #60	@ 0x3c
 8012eca:	4682      	mov	sl, r0
 8012ecc:	9104      	str	r1, [sp, #16]
 8012ece:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8012ed2:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8012ed4:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8012ed8:	9206      	str	r2, [sp, #24]
 8012eda:	2900      	cmp	r1, #0
 8012edc:	f000 80aa 	beq.w	8013034 <forward_lite_upsample_bilinear_iu8ou8+0x174>
 8012ee0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012ee4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012ee8:	ee70 aae7 	vsub.f32	s21, s1, s15
 8012eec:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012ef0:	ee6a aa87 	vmul.f32	s21, s21, s14
 8012ef4:	ee27 9a87 	vmul.f32	s18, s15, s14
 8012ef8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012efc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012efe:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8012f02:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8012f06:	2a00      	cmp	r2, #0
 8012f08:	f000 808f 	beq.w	801302a <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 8012f0c:	3b01      	subs	r3, #1
 8012f0e:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8013040 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8012f12:	ee07 3a90 	vmov	s15, r3
 8012f16:	9b06      	ldr	r3, [sp, #24]
 8012f18:	1e5a      	subs	r2, r3, #1
 8012f1a:	fb0b f303 	mul.w	r3, fp, r3
 8012f1e:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012f22:	ee0c 2a90 	vmov	s25, r2
 8012f26:	9305      	str	r3, [sp, #20]
 8012f28:	fb07 f30b 	mul.w	r3, r7, fp
 8012f2c:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012f30:	9307      	str	r3, [sp, #28]
 8012f32:	2300      	movs	r3, #0
 8012f34:	9303      	str	r3, [sp, #12]
 8012f36:	eddd 7a03 	vldr	s15, [sp, #12]
 8012f3a:	9b05      	ldr	r3, [sp, #20]
 8012f3c:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8012f40:	ee7b baea 	vsub.f32	s23, s23, s21
 8012f44:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8012f48:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8012f4c:	fecb baca 	vminnm.f32	s23, s23, s20
 8012f50:	eef4 ba4a 	vcmp.f32	s23, s20
 8012f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f58:	bf14      	ite	ne
 8012f5a:	4698      	movne	r8, r3
 8012f5c:	f04f 0800 	moveq.w	r8, #0
 8012f60:	2f00      	cmp	r7, #0
 8012f62:	d05c      	beq.n	801301e <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 8012f64:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8012f68:	9b06      	ldr	r3, [sp, #24]
 8012f6a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8012f6e:	9722      	str	r7, [sp, #136]	@ 0x88
 8012f70:	9d04      	ldr	r5, [sp, #16]
 8012f72:	4647      	mov	r7, r8
 8012f74:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8012f78:	ee17 6a10 	vmov	r6, s14
 8012f7c:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8012f80:	2400      	movs	r4, #0
 8012f82:	fb03 f606 	mul.w	r6, r3, r6
 8012f86:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8012f8a:	ee7b bae7 	vsub.f32	s23, s23, s15
 8012f8e:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8012f92:	ee3c ca27 	vadd.f32	s24, s24, s15
 8012f96:	ee07 4a90 	vmov	s15, r4
 8012f9a:	3401      	adds	r4, #1
 8012f9c:	4629      	mov	r1, r5
 8012f9e:	465a      	mov	r2, fp
 8012fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fa4:	f8cd 9000 	str.w	r9, [sp]
 8012fa8:	9709      	str	r7, [sp, #36]	@ 0x24
 8012faa:	445d      	add	r5, fp
 8012fac:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012fb0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012fb4:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8012fb8:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8012fbc:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8012fc0:	eef4 7a6c 	vcmp.f32	s15, s25
 8012fc4:	ee38 7a67 	vsub.f32	s14, s16, s15
 8012fc8:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8012fcc:	ee16 0a90 	vmov	r0, s13
 8012fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd4:	4430      	add	r0, r6
 8012fd6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012fda:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012fde:	bf14      	ite	ne
 8012fe0:	465b      	movne	r3, fp
 8012fe2:	2300      	moveq	r3, #0
 8012fe4:	fb0b a000 	mla	r0, fp, r0, sl
 8012fe8:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8012fec:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8012ff0:	9308      	str	r3, [sp, #32]
 8012ff2:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8012ff6:	ab08      	add	r3, sp, #32
 8012ff8:	ee67 7aab 	vmul.f32	s15, s15, s23
 8012ffc:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8013000:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8013004:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8013008:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801300c:	f001 f8e4 	bl	80141d8 <lite_bilinear_iu8ou8_kernel>
 8013010:	45a0      	cmp	r8, r4
 8013012:	d1c0      	bne.n	8012f96 <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 8013014:	9b04      	ldr	r3, [sp, #16]
 8013016:	4647      	mov	r7, r8
 8013018:	9a07      	ldr	r2, [sp, #28]
 801301a:	4413      	add	r3, r2
 801301c:	9304      	str	r3, [sp, #16]
 801301e:	9b03      	ldr	r3, [sp, #12]
 8013020:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013022:	3301      	adds	r3, #1
 8013024:	429a      	cmp	r2, r3
 8013026:	9303      	str	r3, [sp, #12]
 8013028:	d185      	bne.n	8012f36 <forward_lite_upsample_bilinear_iu8ou8+0x76>
 801302a:	b00f      	add	sp, #60	@ 0x3c
 801302c:	ecbd 8b0a 	vpop	{d8-d12}
 8013030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013034:	eddf aa02 	vldr	s21, [pc, #8]	@ 8013040 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8013038:	eeb0 9a6a 	vmov.f32	s18, s21
 801303c:	e75c      	b.n	8012ef8 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 801303e:	bf00      	nop
 8013040:	00000000 	.word	0x00000000

08013044 <forward_lite_upsample_bilinear_is16os16>:
 8013044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013048:	ed2d 8b0a 	vpush	{d8-d12}
 801304c:	b08f      	sub	sp, #60	@ 0x3c
 801304e:	4683      	mov	fp, r0
 8013050:	9104      	str	r1, [sp, #16]
 8013052:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8013056:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801305a:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 801305e:	9206      	str	r2, [sp, #24]
 8013060:	2900      	cmp	r1, #0
 8013062:	f000 80a7 	beq.w	80131b4 <forward_lite_upsample_bilinear_is16os16+0x170>
 8013066:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801306a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801306e:	ee70 aae7 	vsub.f32	s21, s1, s15
 8013072:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013076:	ee6a aa87 	vmul.f32	s21, s21, s14
 801307a:	ee27 9a87 	vmul.f32	s18, s15, s14
 801307e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013082:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013084:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8013088:	eec7 9a80 	vdiv.f32	s19, s15, s0
 801308c:	2a00      	cmp	r2, #0
 801308e:	f000 808c 	beq.w	80131aa <forward_lite_upsample_bilinear_is16os16+0x166>
 8013092:	3b01      	subs	r3, #1
 8013094:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8013098:	eddf 8a49 	vldr	s17, [pc, #292]	@ 80131c0 <forward_lite_upsample_bilinear_is16os16+0x17c>
 801309c:	ee07 3a90 	vmov	s15, r3
 80130a0:	9b06      	ldr	r3, [sp, #24]
 80130a2:	1e5a      	subs	r2, r3, #1
 80130a4:	fb0a f303 	mul.w	r3, sl, r3
 80130a8:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80130ac:	ee0c 2a90 	vmov	s25, r2
 80130b0:	9305      	str	r3, [sp, #20]
 80130b2:	2300      	movs	r3, #0
 80130b4:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80130b8:	9303      	str	r3, [sp, #12]
 80130ba:	fb06 f308 	mul.w	r3, r6, r8
 80130be:	9307      	str	r3, [sp, #28]
 80130c0:	eddd 7a03 	vldr	s15, [sp, #12]
 80130c4:	9b05      	ldr	r3, [sp, #20]
 80130c6:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80130ca:	ee7b baea 	vsub.f32	s23, s23, s21
 80130ce:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80130d2:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80130d6:	fecb baca 	vminnm.f32	s23, s23, s20
 80130da:	eef4 ba4a 	vcmp.f32	s23, s20
 80130de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e2:	bf14      	ite	ne
 80130e4:	4699      	movne	r9, r3
 80130e6:	f04f 0900 	moveq.w	r9, #0
 80130ea:	f1b8 0f00 	cmp.w	r8, #0
 80130ee:	d056      	beq.n	801319e <forward_lite_upsample_bilinear_is16os16+0x15a>
 80130f0:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80130f4:	9b06      	ldr	r3, [sp, #24]
 80130f6:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80130fa:	9d04      	ldr	r5, [sp, #16]
 80130fc:	2400      	movs	r4, #0
 80130fe:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8013102:	ee17 7a10 	vmov	r7, s14
 8013106:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801310a:	fb03 f707 	mul.w	r7, r3, r7
 801310e:	ee7b bae7 	vsub.f32	s23, s23, s15
 8013112:	ee3c ca27 	vadd.f32	s24, s24, s15
 8013116:	ee07 4a90 	vmov	s15, r4
 801311a:	ab0a      	add	r3, sp, #40	@ 0x28
 801311c:	3401      	adds	r4, #1
 801311e:	4629      	mov	r1, r5
 8013120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013124:	9300      	str	r3, [sp, #0]
 8013126:	4652      	mov	r2, sl
 8013128:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801312c:	4435      	add	r5, r6
 801312e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013132:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8013136:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 801313a:	fec7 7aec 	vminnm.f32	s15, s15, s25
 801313e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8013142:	eef4 7a6c 	vcmp.f32	s15, s25
 8013146:	ee38 7a67 	vsub.f32	s14, s16, s15
 801314a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 801314e:	ee16 0a90 	vmov	r0, s13
 8013152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013156:	4438      	add	r0, r7
 8013158:	ee37 7a06 	vadd.f32	s14, s14, s12
 801315c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013160:	bf14      	ite	ne
 8013162:	4653      	movne	r3, sl
 8013164:	2300      	moveq	r3, #0
 8013166:	fb06 b000 	mla	r0, r6, r0, fp
 801316a:	ee67 5a0c 	vmul.f32	s11, s14, s24
 801316e:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8013172:	9308      	str	r3, [sp, #32]
 8013174:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8013178:	ab08      	add	r3, sp, #32
 801317a:	ee67 7aab 	vmul.f32	s15, s15, s23
 801317e:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8013182:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8013186:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 801318a:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801318e:	f001 f86d 	bl	801426c <lite_bilinear_is16os16_kernel>
 8013192:	45a0      	cmp	r8, r4
 8013194:	d1bf      	bne.n	8013116 <forward_lite_upsample_bilinear_is16os16+0xd2>
 8013196:	9b04      	ldr	r3, [sp, #16]
 8013198:	9a07      	ldr	r2, [sp, #28]
 801319a:	4413      	add	r3, r2
 801319c:	9304      	str	r3, [sp, #16]
 801319e:	9b03      	ldr	r3, [sp, #12]
 80131a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80131a2:	3301      	adds	r3, #1
 80131a4:	429a      	cmp	r2, r3
 80131a6:	9303      	str	r3, [sp, #12]
 80131a8:	d18a      	bne.n	80130c0 <forward_lite_upsample_bilinear_is16os16+0x7c>
 80131aa:	b00f      	add	sp, #60	@ 0x3c
 80131ac:	ecbd 8b0a 	vpop	{d8-d12}
 80131b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131b4:	eddf aa02 	vldr	s21, [pc, #8]	@ 80131c0 <forward_lite_upsample_bilinear_is16os16+0x17c>
 80131b8:	eeb0 9a6a 	vmov.f32	s18, s21
 80131bc:	e75f      	b.n	801307e <forward_lite_upsample_bilinear_is16os16+0x3a>
 80131be:	bf00      	nop
 80131c0:	00000000 	.word	0x00000000

080131c4 <forward_lite_upsample_bilinear_iu16ou16>:
 80131c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c8:	ed2d 8b0a 	vpush	{d8-d12}
 80131cc:	b08f      	sub	sp, #60	@ 0x3c
 80131ce:	4683      	mov	fp, r0
 80131d0:	9104      	str	r1, [sp, #16]
 80131d2:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80131d6:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80131da:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 80131de:	9206      	str	r2, [sp, #24]
 80131e0:	2900      	cmp	r1, #0
 80131e2:	f000 80a7 	beq.w	8013334 <forward_lite_upsample_bilinear_iu16ou16+0x170>
 80131e6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80131ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80131ee:	ee70 aae7 	vsub.f32	s21, s1, s15
 80131f2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80131f6:	ee6a aa87 	vmul.f32	s21, s21, s14
 80131fa:	ee27 9a87 	vmul.f32	s18, s15, s14
 80131fe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013202:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013204:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8013208:	eec7 9a80 	vdiv.f32	s19, s15, s0
 801320c:	2a00      	cmp	r2, #0
 801320e:	f000 808c 	beq.w	801332a <forward_lite_upsample_bilinear_iu16ou16+0x166>
 8013212:	3b01      	subs	r3, #1
 8013214:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8013218:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8013340 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 801321c:	ee07 3a90 	vmov	s15, r3
 8013220:	9b06      	ldr	r3, [sp, #24]
 8013222:	1e5a      	subs	r2, r3, #1
 8013224:	fb0a f303 	mul.w	r3, sl, r3
 8013228:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801322c:	ee0c 2a90 	vmov	s25, r2
 8013230:	9305      	str	r3, [sp, #20]
 8013232:	2300      	movs	r3, #0
 8013234:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8013238:	9303      	str	r3, [sp, #12]
 801323a:	fb06 f308 	mul.w	r3, r6, r8
 801323e:	9307      	str	r3, [sp, #28]
 8013240:	eddd 7a03 	vldr	s15, [sp, #12]
 8013244:	9b05      	ldr	r3, [sp, #20]
 8013246:	eef8 ba67 	vcvt.f32.u32	s23, s15
 801324a:	ee7b baea 	vsub.f32	s23, s23, s21
 801324e:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8013252:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8013256:	fecb baca 	vminnm.f32	s23, s23, s20
 801325a:	eef4 ba4a 	vcmp.f32	s23, s20
 801325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013262:	bf14      	ite	ne
 8013264:	4699      	movne	r9, r3
 8013266:	f04f 0900 	moveq.w	r9, #0
 801326a:	f1b8 0f00 	cmp.w	r8, #0
 801326e:	d056      	beq.n	801331e <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 8013270:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8013274:	9b06      	ldr	r3, [sp, #24]
 8013276:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801327a:	9d04      	ldr	r5, [sp, #16]
 801327c:	2400      	movs	r4, #0
 801327e:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8013282:	ee17 7a10 	vmov	r7, s14
 8013286:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801328a:	fb03 f707 	mul.w	r7, r3, r7
 801328e:	ee7b bae7 	vsub.f32	s23, s23, s15
 8013292:	ee3c ca27 	vadd.f32	s24, s24, s15
 8013296:	ee07 4a90 	vmov	s15, r4
 801329a:	ab0a      	add	r3, sp, #40	@ 0x28
 801329c:	3401      	adds	r4, #1
 801329e:	4629      	mov	r1, r5
 80132a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132a4:	9300      	str	r3, [sp, #0]
 80132a6:	4652      	mov	r2, sl
 80132a8:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80132ac:	4435      	add	r5, r6
 80132ae:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80132b2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80132b6:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 80132ba:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80132be:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80132c2:	eef4 7a6c 	vcmp.f32	s15, s25
 80132c6:	ee38 7a67 	vsub.f32	s14, s16, s15
 80132ca:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80132ce:	ee16 0a90 	vmov	r0, s13
 80132d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d6:	4438      	add	r0, r7
 80132d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80132dc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80132e0:	bf14      	ite	ne
 80132e2:	4653      	movne	r3, sl
 80132e4:	2300      	moveq	r3, #0
 80132e6:	fb06 b000 	mla	r0, r6, r0, fp
 80132ea:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80132ee:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80132f2:	9308      	str	r3, [sp, #32]
 80132f4:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80132f8:	ab08      	add	r3, sp, #32
 80132fa:	ee67 7aab 	vmul.f32	s15, s15, s23
 80132fe:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8013302:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8013306:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 801330a:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801330e:	f001 f803 	bl	8014318 <lite_bilinear_iu16ou16_kernel>
 8013312:	45a0      	cmp	r8, r4
 8013314:	d1bf      	bne.n	8013296 <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 8013316:	9b04      	ldr	r3, [sp, #16]
 8013318:	9a07      	ldr	r2, [sp, #28]
 801331a:	4413      	add	r3, r2
 801331c:	9304      	str	r3, [sp, #16]
 801331e:	9b03      	ldr	r3, [sp, #12]
 8013320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013322:	3301      	adds	r3, #1
 8013324:	429a      	cmp	r2, r3
 8013326:	9303      	str	r3, [sp, #12]
 8013328:	d18a      	bne.n	8013240 <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 801332a:	b00f      	add	sp, #60	@ 0x3c
 801332c:	ecbd 8b0a 	vpop	{d8-d12}
 8013330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013334:	eddf aa02 	vldr	s21, [pc, #8]	@ 8013340 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8013338:	eeb0 9a6a 	vmov.f32	s18, s21
 801333c:	e75f      	b.n	80131fe <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 801333e:	bf00      	nop
 8013340:	00000000 	.word	0x00000000

08013344 <forward_lite_dense_if32of32wf32>:
 8013344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013348:	ed2d 8b0c 	vpush	{d8-d13}
 801334c:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8013350:	6801      	ldr	r1, [r0, #0]
 8013352:	b083      	sub	sp, #12
 8013354:	fb02 f303 	mul.w	r3, r2, r3
 8013358:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801335c:	9100      	str	r1, [sp, #0]
 801335e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013362:	4299      	cmp	r1, r3
 8013364:	9301      	str	r3, [sp, #4]
 8013366:	f080 811c 	bcs.w	80135a2 <forward_lite_dense_if32of32wf32+0x25e>
 801336a:	4607      	mov	r7, r0
 801336c:	6904      	ldr	r4, [r0, #16]
 801336e:	0096      	lsls	r6, r2, #2
 8013370:	9b00      	ldr	r3, [sp, #0]
 8013372:	68bd      	ldr	r5, [r7, #8]
 8013374:	eb03 0e06 	add.w	lr, r3, r6
 8013378:	461e      	mov	r6, r3
 801337a:	459e      	cmp	lr, r3
 801337c:	f240 8103 	bls.w	8013586 <forward_lite_dense_if32of32wf32+0x242>
 8013380:	f1a4 0c10 	sub.w	ip, r4, #16
 8013384:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8013388:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801338c:	f10c 0c01 	add.w	ip, ip, #1
 8013390:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8013394:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8013398:	2c0f      	cmp	r4, #15
 801339a:	f240 8107 	bls.w	80135ac <forward_lite_dense_if32of32wf32+0x268>
 801339e:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 80133a2:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80133a6:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80135fc <forward_lite_dense_if32of32wf32+0x2b8>
 80133aa:	4621      	mov	r1, r4
 80133ac:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 80133b0:	3910      	subs	r1, #16
 80133b2:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80133b6:	3340      	adds	r3, #64	@ 0x40
 80133b8:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 80133bc:	290f      	cmp	r1, #15
 80133be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80133c2:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 80133c6:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 80133ca:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80133ce:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 80133d2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80133d6:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 80133da:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 80133de:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 80133e2:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 80133e6:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 80133ea:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 80133ee:	eee5 7a86 	vfma.f32	s15, s11, s12
 80133f2:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 80133f6:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 80133fa:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 80133fe:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 8013402:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 8013406:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 801340a:	eeed 7a26 	vfma.f32	s15, s26, s13
 801340e:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 8013412:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8013416:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 801341a:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 801341e:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8013422:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8013426:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801342a:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 801342e:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8013432:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8013436:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 801343a:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 801343e:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8013442:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8013446:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 801344a:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 801344e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8013452:	eee9 7a89 	vfma.f32	s15, s19, s18
 8013456:	eee8 7a88 	vfma.f32	s15, s17, s16
 801345a:	eee0 7a20 	vfma.f32	s15, s0, s1
 801345e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8013462:	eee2 7a22 	vfma.f32	s15, s4, s5
 8013466:	eee3 7a23 	vfma.f32	s15, s6, s7
 801346a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801346e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013472:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013476:	ee37 7a27 	vadd.f32	s14, s14, s15
 801347a:	d897      	bhi.n	80133ac <forward_lite_dense_if32of32wf32+0x68>
 801347c:	eb05 020b 	add.w	r2, r5, fp
 8013480:	f004 010f 	and.w	r1, r4, #15
 8013484:	4663      	mov	r3, ip
 8013486:	2903      	cmp	r1, #3
 8013488:	d95f      	bls.n	801354a <forward_lite_dense_if32of32wf32+0x206>
 801348a:	edd2 6a01 	vldr	s13, [r2, #4]
 801348e:	1f08      	subs	r0, r1, #4
 8013490:	edd3 7a01 	vldr	s15, [r3, #4]
 8013494:	ed93 4a00 	vldr	s8, [r3]
 8013498:	2803      	cmp	r0, #3
 801349a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801349e:	edd2 4a00 	vldr	s9, [r2]
 80134a2:	ed93 5a02 	vldr	s10, [r3, #8]
 80134a6:	edd2 5a02 	vldr	s11, [r2, #8]
 80134aa:	eee4 7a24 	vfma.f32	s15, s8, s9
 80134ae:	ed93 6a03 	vldr	s12, [r3, #12]
 80134b2:	edd2 6a03 	vldr	s13, [r2, #12]
 80134b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134ba:	eee5 7a25 	vfma.f32	s15, s10, s11
 80134be:	eee6 7a26 	vfma.f32	s15, s12, s13
 80134c2:	eeb0 7a67 	vmov.f32	s14, s15
 80134c6:	d938      	bls.n	801353a <forward_lite_dense_if32of32wf32+0x1f6>
 80134c8:	edd2 6a05 	vldr	s13, [r2, #20]
 80134cc:	f1a1 0a08 	sub.w	sl, r1, #8
 80134d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80134d4:	ed93 4a04 	vldr	s8, [r3, #16]
 80134d8:	f1ba 0f03 	cmp.w	sl, #3
 80134dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80134e0:	edd2 4a04 	vldr	s9, [r2, #16]
 80134e4:	ed93 5a06 	vldr	s10, [r3, #24]
 80134e8:	edd2 5a06 	vldr	s11, [r2, #24]
 80134ec:	eee4 7a24 	vfma.f32	s15, s8, s9
 80134f0:	ed93 6a07 	vldr	s12, [r3, #28]
 80134f4:	edd2 6a07 	vldr	s13, [r2, #28]
 80134f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80134fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013504:	d919      	bls.n	801353a <forward_lite_dense_if32of32wf32+0x1f6>
 8013506:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801350a:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 801350e:	ed92 4a08 	vldr	s8, [r2, #32]
 8013512:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013516:	edd3 4a08 	vldr	s9, [r3, #32]
 801351a:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 801351e:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8013522:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013526:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 801352a:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801352e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013532:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013536:	ee37 7a27 	vadd.f32	s14, s14, s15
 801353a:	0880      	lsrs	r0, r0, #2
 801353c:	f001 0103 	and.w	r1, r1, #3
 8013540:	3001      	adds	r0, #1
 8013542:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8013546:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801354a:	b1a9      	cbz	r1, 8013578 <forward_lite_dense_if32of32wf32+0x234>
 801354c:	edd3 6a00 	vldr	s13, [r3]
 8013550:	3901      	subs	r1, #1
 8013552:	edd2 7a00 	vldr	s15, [r2]
 8013556:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801355a:	d00d      	beq.n	8013578 <forward_lite_dense_if32of32wf32+0x234>
 801355c:	edd3 6a01 	vldr	s13, [r3, #4]
 8013560:	2901      	cmp	r1, #1
 8013562:	edd2 7a01 	vldr	s15, [r2, #4]
 8013566:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801356a:	d005      	beq.n	8013578 <forward_lite_dense_if32of32wf32+0x234>
 801356c:	edd2 6a02 	vldr	s13, [r2, #8]
 8013570:	edd3 7a02 	vldr	s15, [r3, #8]
 8013574:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013578:	eca6 7a01 	vstmia	r6!, {s14}
 801357c:	45b6      	cmp	lr, r6
 801357e:	444d      	add	r5, r9
 8013580:	f63f af0a 	bhi.w	8013398 <forward_lite_dense_if32of32wf32+0x54>
 8013584:	697a      	ldr	r2, [r7, #20]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	b9b3      	cbnz	r3, 80135b8 <forward_lite_dense_if32of32wf32+0x274>
 801358a:	9b00      	ldr	r3, [sp, #0]
 801358c:	0096      	lsls	r6, r2, #2
 801358e:	9901      	ldr	r1, [sp, #4]
 8013590:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013594:	693c      	ldr	r4, [r7, #16]
 8013596:	4299      	cmp	r1, r3
 8013598:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 801359c:	9300      	str	r3, [sp, #0]
 801359e:	f63f aee7 	bhi.w	8013370 <forward_lite_dense_if32of32wf32+0x2c>
 80135a2:	b003      	add	sp, #12
 80135a4:	ecbd 8b0c 	vpop	{d8-d13}
 80135a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ac:	4621      	mov	r1, r4
 80135ae:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80135fc <forward_lite_dense_if32of32wf32+0x2b8>
 80135b2:	462a      	mov	r2, r5
 80135b4:	4643      	mov	r3, r8
 80135b6:	e766      	b.n	8013486 <forward_lite_dense_if32of32wf32+0x142>
 80135b8:	2a00      	cmp	r2, #0
 80135ba:	d0e6      	beq.n	801358a <forward_lite_dense_if32of32wf32+0x246>
 80135bc:	9a00      	ldr	r2, [sp, #0]
 80135be:	ed93 7a00 	vldr	s14, [r3]
 80135c2:	edd2 7a00 	vldr	s15, [r2]
 80135c6:	4613      	mov	r3, r2
 80135c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80135cc:	edc2 7a00 	vstr	s15, [r2]
 80135d0:	697a      	ldr	r2, [r7, #20]
 80135d2:	2a01      	cmp	r2, #1
 80135d4:	d9d9      	bls.n	801358a <forward_lite_dense_if32of32wf32+0x246>
 80135d6:	1d19      	adds	r1, r3, #4
 80135d8:	2301      	movs	r3, #1
 80135da:	68fa      	ldr	r2, [r7, #12]
 80135dc:	ed91 7a00 	vldr	s14, [r1]
 80135e0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80135e4:	3301      	adds	r3, #1
 80135e6:	edd2 7a00 	vldr	s15, [r2]
 80135ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80135ee:	ece1 7a01 	vstmia	r1!, {s15}
 80135f2:	697a      	ldr	r2, [r7, #20]
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d8f0      	bhi.n	80135da <forward_lite_dense_if32of32wf32+0x296>
 80135f8:	e7c7      	b.n	801358a <forward_lite_dense_if32of32wf32+0x246>
 80135fa:	bf00      	nop
 80135fc:	00000000 	.word	0x00000000

08013600 <forward_lite_dense_if32of32wf32_lut4>:
 8013600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013604:	b08d      	sub	sp, #52	@ 0x34
 8013606:	4605      	mov	r5, r0
 8013608:	460c      	mov	r4, r1
 801360a:	9005      	str	r0, [sp, #20]
 801360c:	4618      	mov	r0, r3
 801360e:	920a      	str	r2, [sp, #40]	@ 0x28
 8013610:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8013612:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8013616:	fb02 f303 	mul.w	r3, r2, r3
 801361a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801361e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8013620:	9308      	str	r3, [sp, #32]
 8013622:	b126      	cbz	r6, 801362e <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8013624:	2240      	movs	r2, #64	@ 0x40
 8013626:	4631      	mov	r1, r6
 8013628:	f000 fbe0 	bl	8013dec <st_int8_copy>
 801362c:	4630      	mov	r0, r6
 801362e:	9b05      	ldr	r3, [sp, #20]
 8013630:	9a08      	ldr	r2, [sp, #32]
 8013632:	4293      	cmp	r3, r2
 8013634:	f080 80f7 	bcs.w	8013826 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8013638:	08eb      	lsrs	r3, r5, #3
 801363a:	f005 0101 	and.w	r1, r5, #1
 801363e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013640:	f025 0801 	bic.w	r8, r5, #1
 8013644:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8013648:	9301      	str	r3, [sp, #4]
 801364a:	009b      	lsls	r3, r3, #2
 801364c:	9102      	str	r1, [sp, #8]
 801364e:	0092      	lsls	r2, r2, #2
 8013650:	f104 0b20 	add.w	fp, r4, #32
 8013654:	00a9      	lsls	r1, r5, #2
 8013656:	9304      	str	r3, [sp, #16]
 8013658:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 801365c:	9b05      	ldr	r3, [sp, #20]
 801365e:	9207      	str	r2, [sp, #28]
 8013660:	9109      	str	r1, [sp, #36]	@ 0x24
 8013662:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013664:	9a07      	ldr	r2, [sp, #28]
 8013666:	eb03 0902 	add.w	r9, r3, r2
 801366a:	f1ab 0220 	sub.w	r2, fp, #32
 801366e:	4599      	cmp	r9, r3
 8013670:	9206      	str	r2, [sp, #24]
 8013672:	f240 80db 	bls.w	801382c <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8013676:	469e      	mov	lr, r3
 8013678:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801367a:	f108 33ff 	add.w	r3, r8, #4294967295
 801367e:	9303      	str	r3, [sp, #12]
 8013680:	9b01      	ldr	r3, [sp, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	f000 80b4 	beq.w	80137f0 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8013688:	9b04      	ldr	r3, [sp, #16]
 801368a:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8013850 <forward_lite_dense_if32of32wf32_lut4+0x250>
 801368e:	18d4      	adds	r4, r2, r3
 8013690:	465b      	mov	r3, fp
 8013692:	7816      	ldrb	r6, [r2, #0]
 8013694:	3204      	adds	r2, #4
 8013696:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 801369a:	3320      	adds	r3, #32
 801369c:	f006 070f 	and.w	r7, r6, #15
 80136a0:	0936      	lsrs	r6, r6, #4
 80136a2:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 80136a6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80136aa:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 80136ae:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80136b2:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 80136b6:	edd7 7a00 	vldr	s15, [r7]
 80136ba:	ed96 3a00 	vldr	s6, [r6]
 80136be:	092e      	lsrs	r6, r5, #4
 80136c0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80136c4:	f005 050f 	and.w	r5, r5, #15
 80136c8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80136cc:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80136d0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80136d4:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 80136d8:	eee3 7a04 	vfma.f32	s15, s6, s8
 80136dc:	ed96 3a00 	vldr	s6, [r6]
 80136e0:	ed95 4a00 	vldr	s8, [r5]
 80136e4:	090d      	lsrs	r5, r1, #4
 80136e6:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 80136ea:	f001 010f 	and.w	r1, r1, #15
 80136ee:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80136f2:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 80136f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80136fa:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 80136fe:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 8013702:	eee3 7a23 	vfma.f32	s15, s6, s7
 8013706:	eee4 7a05 	vfma.f32	s15, s8, s10
 801370a:	ed95 4a00 	vldr	s8, [r5]
 801370e:	ed91 5a00 	vldr	s10, [r1]
 8013712:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013716:	42a2      	cmp	r2, r4
 8013718:	ea4f 1511 	mov.w	r5, r1, lsr #4
 801371c:	f001 010f 	and.w	r1, r1, #15
 8013720:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013724:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8013728:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801372c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8013730:	ed95 5a00 	vldr	s10, [r5]
 8013734:	ed91 6a00 	vldr	s12, [r1]
 8013738:	eee5 7a25 	vfma.f32	s15, s10, s11
 801373c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013744:	d1a5      	bne.n	8013692 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8013746:	4656      	mov	r6, sl
 8013748:	4546      	cmp	r6, r8
 801374a:	d257      	bcs.n	80137fc <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 801374c:	9b03      	ldr	r3, [sp, #12]
 801374e:	f106 0208 	add.w	r2, r6, #8
 8013752:	1e61      	subs	r1, r4, #1
 8013754:	1b9d      	subs	r5, r3, r6
 8013756:	08ef      	lsrs	r7, r5, #3
 8013758:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 801375c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013760:	3208      	adds	r2, #8
 8013762:	ed52 5a03 	vldr	s11, [r2, #-12]
 8013766:	f003 0c0f 	and.w	ip, r3, #15
 801376a:	091b      	lsrs	r3, r3, #4
 801376c:	ed52 6a04 	vldr	s13, [r2, #-16]
 8013770:	42a9      	cmp	r1, r5
 8013772:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8013776:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801377a:	eddc 7a00 	vldr	s15, [ip]
 801377e:	ed93 6a00 	vldr	s12, [r3]
 8013782:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013786:	eee6 7a26 	vfma.f32	s15, s12, s13
 801378a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801378e:	d1e5      	bne.n	801375c <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8013790:	3701      	adds	r7, #1
 8013792:	19e2      	adds	r2, r4, r7
 8013794:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8013798:	9b02      	ldr	r3, [sp, #8]
 801379a:	b30b      	cbz	r3, 80137e0 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 801379c:	f812 3b01 	ldrb.w	r3, [r2], #1
 80137a0:	edd6 7a00 	vldr	s15, [r6]
 80137a4:	091b      	lsrs	r3, r3, #4
 80137a6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80137aa:	edd3 6a00 	vldr	s13, [r3]
 80137ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80137b2:	ecae 7a01 	vstmia	lr!, {s14}
 80137b6:	45f1      	cmp	r9, lr
 80137b8:	f63f af62 	bhi.w	8013680 <forward_lite_dense_if32of32wf32_lut4+0x80>
 80137bc:	9b05      	ldr	r3, [sp, #20]
 80137be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80137c0:	1899      	adds	r1, r3, r2
 80137c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80137c4:	b9e3      	cbnz	r3, 8013800 <forward_lite_dense_if32of32wf32_lut4+0x200>
 80137c6:	9b08      	ldr	r3, [sp, #32]
 80137c8:	428b      	cmp	r3, r1
 80137ca:	d92c      	bls.n	8013826 <forward_lite_dense_if32of32wf32_lut4+0x226>
 80137cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137ce:	4498      	add	r8, r3
 80137d0:	449a      	add	sl, r3
 80137d2:	449b      	add	fp, r3
 80137d4:	9b05      	ldr	r3, [sp, #20]
 80137d6:	4599      	cmp	r9, r3
 80137d8:	d92a      	bls.n	8013830 <forward_lite_dense_if32of32wf32_lut4+0x230>
 80137da:	460b      	mov	r3, r1
 80137dc:	9105      	str	r1, [sp, #20]
 80137de:	e741      	b.n	8013664 <forward_lite_dense_if32of32wf32_lut4+0x64>
 80137e0:	ecae 7a01 	vstmia	lr!, {s14}
 80137e4:	45f1      	cmp	r9, lr
 80137e6:	d9e9      	bls.n	80137bc <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 80137e8:	9b01      	ldr	r3, [sp, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	f47f af4c 	bne.w	8013688 <forward_lite_dense_if32of32wf32_lut4+0x88>
 80137f0:	9e06      	ldr	r6, [sp, #24]
 80137f2:	4614      	mov	r4, r2
 80137f4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8013850 <forward_lite_dense_if32of32wf32_lut4+0x250>
 80137f8:	4546      	cmp	r6, r8
 80137fa:	d3a7      	bcc.n	801374c <forward_lite_dense_if32of32wf32_lut4+0x14c>
 80137fc:	4622      	mov	r2, r4
 80137fe:	e7cb      	b.n	8013798 <forward_lite_dense_if32of32wf32_lut4+0x198>
 8013800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013802:	2b00      	cmp	r3, #0
 8013804:	d0df      	beq.n	80137c6 <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 8013806:	9b07      	ldr	r3, [sp, #28]
 8013808:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801380a:	1acb      	subs	r3, r1, r3
 801380c:	edd3 7a00 	vldr	s15, [r3]
 8013810:	ecb2 7a01 	vldmia	r2!, {s14}
 8013814:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013818:	ece3 7a01 	vstmia	r3!, {s15}
 801381c:	428b      	cmp	r3, r1
 801381e:	d1f5      	bne.n	801380c <forward_lite_dense_if32of32wf32_lut4+0x20c>
 8013820:	9b08      	ldr	r3, [sp, #32]
 8013822:	428b      	cmp	r3, r1
 8013824:	d8d2      	bhi.n	80137cc <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 8013826:	b00d      	add	sp, #52	@ 0x34
 8013828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382c:	4619      	mov	r1, r3
 801382e:	e7c8      	b.n	80137c2 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8013830:	9b07      	ldr	r3, [sp, #28]
 8013832:	1acb      	subs	r3, r1, r3
 8013834:	461a      	mov	r2, r3
 8013836:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013838:	ed92 7a00 	vldr	s14, [r2]
 801383c:	ecf0 7a01 	vldmia	r0!, {s15}
 8013840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013844:	ece2 7a01 	vstmia	r2!, {s15}
 8013848:	428a      	cmp	r2, r1
 801384a:	d1f5      	bne.n	8013838 <forward_lite_dense_if32of32wf32_lut4+0x238>
 801384c:	e7f2      	b.n	8013834 <forward_lite_dense_if32of32wf32_lut4+0x234>
 801384e:	bf00      	nop
 8013850:	00000000 	.word	0x00000000

08013854 <forward_lite_dense_if32of32wf32_lut8>:
 8013854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013858:	b091      	sub	sp, #68	@ 0x44
 801385a:	4699      	mov	r9, r3
 801385c:	468b      	mov	fp, r1
 801385e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013860:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8013862:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8013866:	9003      	str	r0, [sp, #12]
 8013868:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 801386c:	fb02 f303 	mul.w	r3, r2, r3
 8013870:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013874:	930c      	str	r3, [sp, #48]	@ 0x30
 8013876:	b134      	cbz	r4, 8013886 <forward_lite_dense_if32of32wf32_lut8+0x32>
 8013878:	4648      	mov	r0, r9
 801387a:	46a1      	mov	r9, r4
 801387c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013880:	4621      	mov	r1, r4
 8013882:	f000 fab3 	bl	8013dec <st_int8_copy>
 8013886:	9b03      	ldr	r3, [sp, #12]
 8013888:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801388a:	4293      	cmp	r3, r2
 801388c:	f080 8084 	bcs.w	8013998 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8013890:	4bb7      	ldr	r3, [pc, #732]	@ (8013b70 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8013892:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013894:	4443      	add	r3, r8
 8013896:	9d03      	ldr	r5, [sp, #12]
 8013898:	0092      	lsls	r2, r2, #2
 801389a:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8013b74 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801389e:	009b      	lsls	r3, r3, #2
 80138a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80138a2:	f103 0120 	add.w	r1, r3, #32
 80138a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80138a8:	445b      	add	r3, fp
 80138aa:	920f      	str	r2, [sp, #60]	@ 0x3c
 80138ac:	9105      	str	r1, [sp, #20]
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	eb0b 0301 	add.w	r3, fp, r1
 80138b4:	469a      	mov	sl, r3
 80138b6:	469e      	mov	lr, r3
 80138b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80138ba:	eb05 0c03 	add.w	ip, r5, r3
 80138be:	45ac      	cmp	ip, r5
 80138c0:	d952      	bls.n	8013968 <forward_lite_dense_if32of32wf32_lut8+0x114>
 80138c2:	9800      	ldr	r0, [sp, #0]
 80138c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138c6:	f100 011f 	add.w	r1, r0, #31
 80138ca:	eba0 020b 	sub.w	r2, r0, fp
 80138ce:	445b      	add	r3, fp
 80138d0:	9101      	str	r1, [sp, #4]
 80138d2:	eba1 010b 	sub.w	r1, r1, fp
 80138d6:	0952      	lsrs	r2, r2, #5
 80138d8:	9306      	str	r3, [sp, #24]
 80138da:	0889      	lsrs	r1, r1, #2
 80138dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138de:	3101      	adds	r1, #1
 80138e0:	9102      	str	r1, [sp, #8]
 80138e2:	1c51      	adds	r1, r2, #1
 80138e4:	00d2      	lsls	r2, r2, #3
 80138e6:	3210      	adds	r2, #16
 80138e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80138ea:	00ca      	lsls	r2, r1, #3
 80138ec:	9208      	str	r2, [sp, #32]
 80138ee:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 80138f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80138f4:	1f02      	subs	r2, r0, #4
 80138f6:	9204      	str	r2, [sp, #16]
 80138f8:	f10b 0204 	add.w	r2, fp, #4
 80138fc:	9207      	str	r2, [sp, #28]
 80138fe:	f1b8 0f07 	cmp.w	r8, #7
 8013902:	d84c      	bhi.n	801399e <forward_lite_dense_if32of32wf32_lut8+0x14a>
 8013904:	45d3      	cmp	fp, sl
 8013906:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8013b74 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801390a:	d20f      	bcs.n	801392c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 801390c:	4659      	mov	r1, fp
 801390e:	4618      	mov	r0, r3
 8013910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013914:	ecf1 7a01 	vldmia	r1!, {s15}
 8013918:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801391c:	4551      	cmp	r1, sl
 801391e:	edd2 6a00 	vldr	s13, [r2]
 8013922:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013926:	d3f3      	bcc.n	8013910 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8013928:	9a02      	ldr	r2, [sp, #8]
 801392a:	4413      	add	r3, r2
 801392c:	eca5 7a01 	vstmia	r5!, {s14}
 8013930:	45ac      	cmp	ip, r5
 8013932:	d8e4      	bhi.n	80138fe <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8013934:	9b03      	ldr	r3, [sp, #12]
 8013936:	46f3      	mov	fp, lr
 8013938:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801393a:	1899      	adds	r1, r3, r2
 801393c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801393e:	b9c3      	cbnz	r3, 8013972 <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8013940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013942:	428b      	cmp	r3, r1
 8013944:	d928      	bls.n	8013998 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8013946:	9b00      	ldr	r3, [sp, #0]
 8013948:	9a05      	ldr	r2, [sp, #20]
 801394a:	4413      	add	r3, r2
 801394c:	4492      	add	sl, r2
 801394e:	9300      	str	r3, [sp, #0]
 8013950:	9b03      	ldr	r3, [sp, #12]
 8013952:	459c      	cmp	ip, r3
 8013954:	f240 821e 	bls.w	8013d94 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8013958:	460d      	mov	r5, r1
 801395a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801395c:	4496      	add	lr, r2
 801395e:	9103      	str	r1, [sp, #12]
 8013960:	eb05 0c03 	add.w	ip, r5, r3
 8013964:	45ac      	cmp	ip, r5
 8013966:	d8ac      	bhi.n	80138c2 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8013968:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801396a:	4629      	mov	r1, r5
 801396c:	46f3      	mov	fp, lr
 801396e:	2b00      	cmp	r3, #0
 8013970:	d0e6      	beq.n	8013940 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8013972:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013974:	2b00      	cmp	r3, #0
 8013976:	d0e3      	beq.n	8013940 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8013978:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801397a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801397c:	1acb      	subs	r3, r1, r3
 801397e:	edd3 7a00 	vldr	s15, [r3]
 8013982:	ecb2 7a01 	vldmia	r2!, {s14}
 8013986:	ee77 7a87 	vadd.f32	s15, s15, s14
 801398a:	ece3 7a01 	vstmia	r3!, {s15}
 801398e:	428b      	cmp	r3, r1
 8013990:	d1f5      	bne.n	801397e <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8013992:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013994:	428b      	cmp	r3, r1
 8013996:	d8d6      	bhi.n	8013946 <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8013998:	b011      	add	sp, #68	@ 0x44
 801399a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801399e:	f003 0203 	and.w	r2, r3, #3
 80139a2:	2a02      	cmp	r2, #2
 80139a4:	f000 81ee 	beq.w	8013d84 <forward_lite_dense_if32of32wf32_lut8+0x530>
 80139a8:	2a03      	cmp	r2, #3
 80139aa:	f000 80e5 	beq.w	8013b78 <forward_lite_dense_if32of32wf32_lut8+0x324>
 80139ae:	2a01      	cmp	r2, #1
 80139b0:	f000 81d2 	beq.w	8013d58 <forward_lite_dense_if32of32wf32_lut8+0x504>
 80139b4:	9a06      	ldr	r2, [sp, #24]
 80139b6:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8013b74 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80139ba:	4593      	cmp	fp, r2
 80139bc:	f200 81e8 	bhi.w	8013d90 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 80139c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80139c2:	f103 0208 	add.w	r2, r3, #8
 80139c6:	f10b 0120 	add.w	r1, fp, #32
 80139ca:	18c4      	adds	r4, r0, r3
 80139cc:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 80139d0:	3208      	adds	r2, #8
 80139d2:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 80139d6:	3120      	adds	r1, #32
 80139d8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80139dc:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 80139e0:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 80139e4:	edd0 7a00 	vldr	s15, [r0]
 80139e8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 80139ec:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80139f0:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 80139f4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80139f8:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 80139fc:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 8013a00:	edd0 2a00 	vldr	s5, [r0]
 8013a04:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8013a08:	eee2 7a83 	vfma.f32	s15, s5, s6
 8013a0c:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 8013a10:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013a14:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 8013a18:	ed90 3a00 	vldr	s6, [r0]
 8013a1c:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8013a20:	eee3 7a04 	vfma.f32	s15, s6, s8
 8013a24:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013a28:	ed90 4a00 	vldr	s8, [r0]
 8013a2c:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8013a30:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013a34:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013a38:	edd0 4a00 	vldr	s9, [r0]
 8013a3c:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8013a40:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013a44:	eee4 7a85 	vfma.f32	s15, s9, s10
 8013a48:	ed90 5a00 	vldr	s10, [r0]
 8013a4c:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8013a50:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013a54:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013a58:	edd0 5a00 	vldr	s11, [r0]
 8013a5c:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8013a60:	42a2      	cmp	r2, r4
 8013a62:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013a66:	eee5 7a86 	vfma.f32	s15, s11, s12
 8013a6a:	ed90 6a00 	vldr	s12, [r0]
 8013a6e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013a72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013a76:	d1a9      	bne.n	80139cc <forward_lite_dense_if32of32wf32_lut8+0x178>
 8013a78:	9a08      	ldr	r2, [sp, #32]
 8013a7a:	4413      	add	r3, r2
 8013a7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a7e:	4572      	cmp	r2, lr
 8013a80:	f4bf af54 	bcs.w	801392c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013a84:	7819      	ldrb	r1, [r3, #0]
 8013a86:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013a8a:	edd1 7a00 	vldr	s15, [r1]
 8013a8e:	4611      	mov	r1, r2
 8013a90:	ecf1 6a01 	vldmia	r1!, {s13}
 8013a94:	458a      	cmp	sl, r1
 8013a96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013a9a:	d963      	bls.n	8013b64 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013a9c:	7859      	ldrb	r1, [r3, #1]
 8013a9e:	edd2 6a01 	vldr	s13, [r2, #4]
 8013aa2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013aa6:	edd1 7a00 	vldr	s15, [r1]
 8013aaa:	f102 0108 	add.w	r1, r2, #8
 8013aae:	458a      	cmp	sl, r1
 8013ab0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013ab4:	d956      	bls.n	8013b64 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013ab6:	7899      	ldrb	r1, [r3, #2]
 8013ab8:	edd2 6a02 	vldr	s13, [r2, #8]
 8013abc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013ac0:	edd1 7a00 	vldr	s15, [r1]
 8013ac4:	f102 010c 	add.w	r1, r2, #12
 8013ac8:	458a      	cmp	sl, r1
 8013aca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013ace:	d949      	bls.n	8013b64 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013ad0:	78d9      	ldrb	r1, [r3, #3]
 8013ad2:	edd2 6a03 	vldr	s13, [r2, #12]
 8013ad6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013ada:	edd1 7a00 	vldr	s15, [r1]
 8013ade:	f102 0110 	add.w	r1, r2, #16
 8013ae2:	458a      	cmp	sl, r1
 8013ae4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013ae8:	d93c      	bls.n	8013b64 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013aea:	7919      	ldrb	r1, [r3, #4]
 8013aec:	edd2 6a04 	vldr	s13, [r2, #16]
 8013af0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013af4:	edd1 7a00 	vldr	s15, [r1]
 8013af8:	f102 0114 	add.w	r1, r2, #20
 8013afc:	458a      	cmp	sl, r1
 8013afe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b02:	d92f      	bls.n	8013b64 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013b04:	7959      	ldrb	r1, [r3, #5]
 8013b06:	edd2 6a05 	vldr	s13, [r2, #20]
 8013b0a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013b0e:	edd1 7a00 	vldr	s15, [r1]
 8013b12:	f102 0118 	add.w	r1, r2, #24
 8013b16:	458a      	cmp	sl, r1
 8013b18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b1c:	d922      	bls.n	8013b64 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013b1e:	7999      	ldrb	r1, [r3, #6]
 8013b20:	edd2 6a06 	vldr	s13, [r2, #24]
 8013b24:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013b28:	edd1 7a00 	vldr	s15, [r1]
 8013b2c:	f102 011c 	add.w	r1, r2, #28
 8013b30:	458a      	cmp	sl, r1
 8013b32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b36:	d915      	bls.n	8013b64 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013b38:	79d9      	ldrb	r1, [r3, #7]
 8013b3a:	edd2 6a07 	vldr	s13, [r2, #28]
 8013b3e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013b42:	edd1 7a00 	vldr	s15, [r1]
 8013b46:	f102 0120 	add.w	r1, r2, #32
 8013b4a:	458a      	cmp	sl, r1
 8013b4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b50:	d908      	bls.n	8013b64 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013b52:	7a19      	ldrb	r1, [r3, #8]
 8013b54:	edd2 7a08 	vldr	s15, [r2, #32]
 8013b58:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013b5c:	edd1 6a00 	vldr	s13, [r1]
 8013b60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b64:	9901      	ldr	r1, [sp, #4]
 8013b66:	1a8a      	subs	r2, r1, r2
 8013b68:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8013b6c:	1c53      	adds	r3, r2, #1
 8013b6e:	e6dd      	b.n	801392c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013b70:	3ffffff8 	.word	0x3ffffff8
 8013b74:	00000000 	.word	0x00000000
 8013b78:	eeb0 7a63 	vmov.f32	s14, s7
 8013b7c:	465a      	mov	r2, fp
 8013b7e:	461f      	mov	r7, r3
 8013b80:	4610      	mov	r0, r2
 8013b82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013b86:	ecf0 7a01 	vldmia	r0!, {s15}
 8013b8a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013b8e:	edd1 6a00 	vldr	s13, [r1]
 8013b92:	9900      	ldr	r1, [sp, #0]
 8013b94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b98:	4288      	cmp	r0, r1
 8013b9a:	f200 80f7 	bhi.w	8013d8c <forward_lite_dense_if32of32wf32_lut8+0x538>
 8013b9e:	9904      	ldr	r1, [sp, #16]
 8013ba0:	f103 0411 	add.w	r4, r3, #17
 8013ba4:	3309      	adds	r3, #9
 8013ba6:	1a8e      	subs	r6, r1, r2
 8013ba8:	3224      	adds	r2, #36	@ 0x24
 8013baa:	0976      	lsrs	r6, r6, #5
 8013bac:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013bb0:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8013bb4:	3308      	adds	r3, #8
 8013bb6:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 8013bba:	3220      	adds	r2, #32
 8013bbc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013bc0:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 8013bc4:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 8013bc8:	edd1 7a00 	vldr	s15, [r1]
 8013bcc:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8013bd0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8013bd4:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8013bd8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013bdc:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8013be0:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 8013be4:	edd1 2a00 	vldr	s5, [r1]
 8013be8:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8013bec:	eee2 7a83 	vfma.f32	s15, s5, s6
 8013bf0:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 8013bf4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013bf8:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 8013bfc:	ed91 3a00 	vldr	s6, [r1]
 8013c00:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8013c04:	eee3 7a04 	vfma.f32	s15, s6, s8
 8013c08:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013c0c:	ed91 4a00 	vldr	s8, [r1]
 8013c10:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8013c14:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013c18:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013c1c:	edd1 4a00 	vldr	s9, [r1]
 8013c20:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8013c24:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013c28:	eee4 7a85 	vfma.f32	s15, s9, s10
 8013c2c:	ed91 5a00 	vldr	s10, [r1]
 8013c30:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8013c34:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013c38:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013c3c:	edd1 5a00 	vldr	s11, [r1]
 8013c40:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8013c44:	42a3      	cmp	r3, r4
 8013c46:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013c4a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8013c4e:	ed91 6a00 	vldr	s12, [r1]
 8013c52:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013c5a:	d1a9      	bne.n	8013bb0 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8013c5c:	3601      	adds	r6, #1
 8013c5e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8013c62:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8013c66:	4550      	cmp	r0, sl
 8013c68:	f4bf ae60 	bcs.w	801392c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013c6c:	781a      	ldrb	r2, [r3, #0]
 8013c6e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013c72:	edd2 7a00 	vldr	s15, [r2]
 8013c76:	4602      	mov	r2, r0
 8013c78:	ecf2 6a01 	vldmia	r2!, {s13}
 8013c7c:	4592      	cmp	sl, r2
 8013c7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013c82:	d963      	bls.n	8013d4c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013c84:	785a      	ldrb	r2, [r3, #1]
 8013c86:	edd0 6a01 	vldr	s13, [r0, #4]
 8013c8a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013c8e:	edd2 7a00 	vldr	s15, [r2]
 8013c92:	f100 0208 	add.w	r2, r0, #8
 8013c96:	4592      	cmp	sl, r2
 8013c98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013c9c:	d956      	bls.n	8013d4c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013c9e:	789a      	ldrb	r2, [r3, #2]
 8013ca0:	edd0 6a02 	vldr	s13, [r0, #8]
 8013ca4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013ca8:	edd2 7a00 	vldr	s15, [r2]
 8013cac:	f100 020c 	add.w	r2, r0, #12
 8013cb0:	4592      	cmp	sl, r2
 8013cb2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013cb6:	d949      	bls.n	8013d4c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013cb8:	78da      	ldrb	r2, [r3, #3]
 8013cba:	edd0 6a03 	vldr	s13, [r0, #12]
 8013cbe:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013cc2:	edd2 7a00 	vldr	s15, [r2]
 8013cc6:	f100 0210 	add.w	r2, r0, #16
 8013cca:	4592      	cmp	sl, r2
 8013ccc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013cd0:	d93c      	bls.n	8013d4c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013cd2:	791a      	ldrb	r2, [r3, #4]
 8013cd4:	edd0 6a04 	vldr	s13, [r0, #16]
 8013cd8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013cdc:	edd2 7a00 	vldr	s15, [r2]
 8013ce0:	f100 0214 	add.w	r2, r0, #20
 8013ce4:	4592      	cmp	sl, r2
 8013ce6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013cea:	d92f      	bls.n	8013d4c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013cec:	795a      	ldrb	r2, [r3, #5]
 8013cee:	edd0 6a05 	vldr	s13, [r0, #20]
 8013cf2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013cf6:	edd2 7a00 	vldr	s15, [r2]
 8013cfa:	f100 0218 	add.w	r2, r0, #24
 8013cfe:	4596      	cmp	lr, r2
 8013d00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013d04:	d922      	bls.n	8013d4c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013d06:	799a      	ldrb	r2, [r3, #6]
 8013d08:	edd0 6a06 	vldr	s13, [r0, #24]
 8013d0c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013d10:	edd2 7a00 	vldr	s15, [r2]
 8013d14:	f100 021c 	add.w	r2, r0, #28
 8013d18:	4596      	cmp	lr, r2
 8013d1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013d1e:	d915      	bls.n	8013d4c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013d20:	79da      	ldrb	r2, [r3, #7]
 8013d22:	edd0 6a07 	vldr	s13, [r0, #28]
 8013d26:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013d2a:	edd2 7a00 	vldr	s15, [r2]
 8013d2e:	f100 0220 	add.w	r2, r0, #32
 8013d32:	4596      	cmp	lr, r2
 8013d34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013d38:	d908      	bls.n	8013d4c <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013d3a:	7a1a      	ldrb	r2, [r3, #8]
 8013d3c:	edd0 7a08 	vldr	s15, [r0, #32]
 8013d40:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013d44:	edd2 6a00 	vldr	s13, [r2]
 8013d48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013d4c:	9a01      	ldr	r2, [sp, #4]
 8013d4e:	1a10      	subs	r0, r2, r0
 8013d50:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8013d54:	1c43      	adds	r3, r0, #1
 8013d56:	e5e9      	b.n	801392c <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013d58:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013d5c:	eddb 7a00 	vldr	s15, [fp]
 8013d60:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013d64:	9a07      	ldr	r2, [sp, #28]
 8013d66:	ed91 7a00 	vldr	s14, [r1]
 8013d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d6e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013d72:	ecf2 7a01 	vldmia	r2!, {s15}
 8013d76:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013d7a:	edd1 6a00 	vldr	s13, [r1]
 8013d7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013d82:	e6fc      	b.n	8013b7e <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8013d84:	eeb0 7a63 	vmov.f32	s14, s7
 8013d88:	465a      	mov	r2, fp
 8013d8a:	e7f0      	b.n	8013d6e <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8013d8c:	463b      	mov	r3, r7
 8013d8e:	e76a      	b.n	8013c66 <forward_lite_dense_if32of32wf32_lut8+0x412>
 8013d90:	465a      	mov	r2, fp
 8013d92:	e674      	b.n	8013a7e <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8013d94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d96:	1acb      	subs	r3, r1, r3
 8013d98:	461a      	mov	r2, r3
 8013d9a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8013d9c:	ed92 7a00 	vldr	s14, [r2]
 8013da0:	ecf0 7a01 	vldmia	r0!, {s15}
 8013da4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013da8:	ece2 7a01 	vstmia	r2!, {s15}
 8013dac:	4291      	cmp	r1, r2
 8013dae:	d1f5      	bne.n	8013d9c <forward_lite_dense_if32of32wf32_lut8+0x548>
 8013db0:	e7f2      	b.n	8013d98 <forward_lite_dense_if32of32wf32_lut8+0x544>
 8013db2:	bf00      	nop

08013db4 <forward_lite_nl_relu_if32of32>:
 8013db4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013db8:	4413      	add	r3, r2
 8013dba:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8013dbe:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8013dc2:	4291      	cmp	r1, r2
 8013dc4:	d80f      	bhi.n	8013de6 <forward_lite_nl_relu_if32of32+0x32>
 8013dc6:	f10c 0104 	add.w	r1, ip, #4
 8013dca:	1d13      	adds	r3, r2, #4
 8013dcc:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8013de8 <forward_lite_nl_relu_if32of32+0x34>
 8013dd0:	eba2 020c 	sub.w	r2, r2, ip
 8013dd4:	4408      	add	r0, r1
 8013dd6:	ed73 7a01 	vldmdb	r3!, {s15}
 8013dda:	4293      	cmp	r3, r2
 8013ddc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8013de0:	ed60 7a01 	vstmdb	r0!, {s15}
 8013de4:	d1f7      	bne.n	8013dd6 <forward_lite_nl_relu_if32of32+0x22>
 8013de6:	4770      	bx	lr
 8013de8:	00000000 	.word	0x00000000

08013dec <st_int8_copy>:
 8013dec:	4288      	cmp	r0, r1
 8013dee:	d023      	beq.n	8013e38 <st_int8_copy+0x4c>
 8013df0:	b312      	cbz	r2, 8013e38 <st_int8_copy+0x4c>
 8013df2:	4288      	cmp	r0, r1
 8013df4:	eb00 0302 	add.w	r3, r0, r2
 8013df8:	d20b      	bcs.n	8013e12 <st_int8_copy+0x26>
 8013dfa:	4299      	cmp	r1, r3
 8013dfc:	d209      	bcs.n	8013e12 <st_int8_copy+0x26>
 8013dfe:	4298      	cmp	r0, r3
 8013e00:	440a      	add	r2, r1
 8013e02:	d219      	bcs.n	8013e38 <st_int8_copy+0x4c>
 8013e04:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8013e08:	4298      	cmp	r0, r3
 8013e0a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8013e0e:	d1f9      	bne.n	8013e04 <st_int8_copy+0x18>
 8013e10:	4770      	bx	lr
 8013e12:	2a03      	cmp	r2, #3
 8013e14:	d811      	bhi.n	8013e3a <st_int8_copy+0x4e>
 8013e16:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013e1a:	f801 3b01 	strb.w	r3, [r1], #1
 8013e1e:	2a01      	cmp	r2, #1
 8013e20:	d00a      	beq.n	8013e38 <st_int8_copy+0x4c>
 8013e22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013e26:	f801 3b01 	strb.w	r3, [r1], #1
 8013e2a:	2a02      	cmp	r2, #2
 8013e2c:	d004      	beq.n	8013e38 <st_int8_copy+0x4c>
 8013e2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013e32:	f801 3b01 	strb.w	r3, [r1], #1
 8013e36:	4770      	bx	lr
 8013e38:	4770      	bx	lr
 8013e3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e3e:	f001 0403 	and.w	r4, r1, #3
 8013e42:	f000 0e03 	and.w	lr, r0, #3
 8013e46:	f1c4 0304 	rsb	r3, r4, #4
 8013e4a:	eba2 0c03 	sub.w	ip, r2, r3
 8013e4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013e52:	f801 3b01 	strb.w	r3, [r1], #1
 8013e56:	2c03      	cmp	r4, #3
 8013e58:	f1c4 0202 	rsb	r2, r4, #2
 8013e5c:	d00e      	beq.n	8013e7c <st_int8_copy+0x90>
 8013e5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013e62:	f801 3b01 	strb.w	r3, [r1], #1
 8013e66:	2a00      	cmp	r2, #0
 8013e68:	dd08      	ble.n	8013e7c <st_int8_copy+0x90>
 8013e6a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013e6e:	f801 3b01 	strb.w	r3, [r1], #1
 8013e72:	b91c      	cbnz	r4, 8013e7c <st_int8_copy+0x90>
 8013e74:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013e78:	f801 3b01 	strb.w	r3, [r1], #1
 8013e7c:	4574      	cmp	r4, lr
 8013e7e:	d02b      	beq.n	8013ed8 <st_int8_copy+0xec>
 8013e80:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8013e84:	1e5a      	subs	r2, r3, #1
 8013e86:	b153      	cbz	r3, 8013e9e <st_int8_copy+0xb2>
 8013e88:	f850 3b04 	ldr.w	r3, [r0], #4
 8013e8c:	f850 4b04 	ldr.w	r4, [r0], #4
 8013e90:	f850 5b04 	ldr.w	r5, [r0], #4
 8013e94:	f850 6b04 	ldr.w	r6, [r0], #4
 8013e98:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8013e9a:	3a01      	subs	r2, #1
 8013e9c:	d2f4      	bcs.n	8013e88 <st_int8_copy+0x9c>
 8013e9e:	f01c 0f08 	tst.w	ip, #8
 8013ea2:	d004      	beq.n	8013eae <st_int8_copy+0xc2>
 8013ea4:	f850 3b04 	ldr.w	r3, [r0], #4
 8013ea8:	f850 4b04 	ldr.w	r4, [r0], #4
 8013eac:	c118      	stmia	r1!, {r3, r4}
 8013eae:	f01c 0f04 	tst.w	ip, #4
 8013eb2:	d003      	beq.n	8013ebc <st_int8_copy+0xd0>
 8013eb4:	f850 3b04 	ldr.w	r3, [r0], #4
 8013eb8:	f841 3b04 	str.w	r3, [r1], #4
 8013ebc:	f01c 0f02 	tst.w	ip, #2
 8013ec0:	d003      	beq.n	8013eca <st_int8_copy+0xde>
 8013ec2:	f830 3b02 	ldrh.w	r3, [r0], #2
 8013ec6:	f821 3b02 	strh.w	r3, [r1], #2
 8013eca:	f01c 0f01 	tst.w	ip, #1
 8013ece:	d001      	beq.n	8013ed4 <st_int8_copy+0xe8>
 8013ed0:	7803      	ldrb	r3, [r0, #0]
 8013ed2:	700b      	strb	r3, [r1, #0]
 8013ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ed8:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8013edc:	f103 39ff 	add.w	r9, r3, #4294967295
 8013ee0:	b183      	cbz	r3, 8013f04 <st_int8_copy+0x118>
 8013ee2:	4688      	mov	r8, r1
 8013ee4:	4686      	mov	lr, r0
 8013ee6:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8013eea:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8013eee:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8013ef2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8013ef6:	f109 39ff 	add.w	r9, r9, #4294967295
 8013efa:	4641      	mov	r1, r8
 8013efc:	4670      	mov	r0, lr
 8013efe:	f1b9 3fff 	cmp.w	r9, #4294967295
 8013f02:	d1ee      	bne.n	8013ee2 <st_int8_copy+0xf6>
 8013f04:	f01c 0f20 	tst.w	ip, #32
 8013f08:	d007      	beq.n	8013f1a <st_int8_copy+0x12e>
 8013f0a:	4688      	mov	r8, r1
 8013f0c:	4686      	mov	lr, r0
 8013f0e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8013f12:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8013f16:	4641      	mov	r1, r8
 8013f18:	4670      	mov	r0, lr
 8013f1a:	f01c 0f10 	tst.w	ip, #16
 8013f1e:	d001      	beq.n	8013f24 <st_int8_copy+0x138>
 8013f20:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8013f22:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8013f24:	f01c 0f08 	tst.w	ip, #8
 8013f28:	d0c1      	beq.n	8013eae <st_int8_copy+0xc2>
 8013f2a:	c818      	ldmia	r0!, {r3, r4}
 8013f2c:	c118      	stmia	r1!, {r3, r4}
 8013f2e:	e7be      	b.n	8013eae <st_int8_copy+0xc2>

08013f30 <ai_array_to_buffer_fmt>:
 8013f30:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8013f34:	2b02      	cmp	r3, #2
 8013f36:	d055      	beq.n	8013fe4 <ai_array_to_buffer_fmt+0xb4>
 8013f38:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8013f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8013ff0 <ai_array_to_buffer_fmt+0xc0>)
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	d010      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013f42:	dc21      	bgt.n	8013f88 <ai_array_to_buffer_fmt+0x58>
 8013f44:	4a2b      	ldr	r2, [pc, #172]	@ (8013ff4 <ai_array_to_buffer_fmt+0xc4>)
 8013f46:	4293      	cmp	r3, r2
 8013f48:	d00c      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013f4a:	dd0f      	ble.n	8013f6c <ai_array_to_buffer_fmt+0x3c>
 8013f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8013ff8 <ai_array_to_buffer_fmt+0xc8>)
 8013f4e:	4293      	cmp	r3, r2
 8013f50:	d008      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013f52:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8013f56:	4293      	cmp	r3, r2
 8013f58:	d004      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013f5a:	4a28      	ldr	r2, [pc, #160]	@ (8013ffc <ai_array_to_buffer_fmt+0xcc>)
 8013f5c:	4293      	cmp	r3, r2
 8013f5e:	bf0c      	ite	eq
 8013f60:	4613      	moveq	r3, r2
 8013f62:	2340      	movne	r3, #64	@ 0x40
 8013f64:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8013f68:	4318      	orrs	r0, r3
 8013f6a:	4770      	bx	lr
 8013f6c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8013f70:	4293      	cmp	r3, r2
 8013f72:	d0f7      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013f74:	dd2c      	ble.n	8013fd0 <ai_array_to_buffer_fmt+0xa0>
 8013f76:	4a22      	ldr	r2, [pc, #136]	@ (8014000 <ai_array_to_buffer_fmt+0xd0>)
 8013f78:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	bf0c      	ite	eq
 8013f80:	4613      	moveq	r3, r2
 8013f82:	2340      	movne	r3, #64	@ 0x40
 8013f84:	4318      	orrs	r0, r3
 8013f86:	4770      	bx	lr
 8013f88:	4a1e      	ldr	r2, [pc, #120]	@ (8014004 <ai_array_to_buffer_fmt+0xd4>)
 8013f8a:	4293      	cmp	r3, r2
 8013f8c:	d0ea      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013f8e:	dd10      	ble.n	8013fb2 <ai_array_to_buffer_fmt+0x82>
 8013f90:	4a1d      	ldr	r2, [pc, #116]	@ (8014008 <ai_array_to_buffer_fmt+0xd8>)
 8013f92:	4293      	cmp	r3, r2
 8013f94:	d0e6      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013f96:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	d0e2      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013f9e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8013fa2:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	bf0c      	ite	eq
 8013faa:	4613      	moveq	r3, r2
 8013fac:	2340      	movne	r3, #64	@ 0x40
 8013fae:	4318      	orrs	r0, r3
 8013fb0:	4770      	bx	lr
 8013fb2:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	d0d4      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013fba:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8013fbe:	4293      	cmp	r3, r2
 8013fc0:	d0d0      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013fc2:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	bf0c      	ite	eq
 8013fca:	4613      	moveq	r3, r2
 8013fcc:	2340      	movne	r3, #64	@ 0x40
 8013fce:	e7c9      	b.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013fd0:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d0c5      	beq.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013fd8:	3280      	adds	r2, #128	@ 0x80
 8013fda:	4293      	cmp	r3, r2
 8013fdc:	bf0c      	ite	eq
 8013fde:	4613      	moveq	r3, r2
 8013fe0:	2340      	movne	r3, #64	@ 0x40
 8013fe2:	e7bf      	b.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013fe4:	4b09      	ldr	r3, [pc, #36]	@ (801400c <ai_array_to_buffer_fmt+0xdc>)
 8013fe6:	4003      	ands	r3, r0
 8013fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013fec:	e7ba      	b.n	8013f64 <ai_array_to_buffer_fmt+0x34>
 8013fee:	bf00      	nop
 8013ff0:	00821040 	.word	0x00821040
 8013ff4:	00040840 	.word	0x00040840
 8013ff8:	00041040 	.word	0x00041040
 8013ffc:	0004084f 	.word	0x0004084f
 8014000:	00040447 	.word	0x00040447
 8014004:	00840447 	.word	0x00840447
 8014008:	0084084f 	.word	0x0084084f
 801400c:	00803fff 	.word	0x00803fff

08014010 <ai_array_get_byte_size>:
 8014010:	b321      	cbz	r1, 801405c <ai_array_get_byte_size+0x4c>
 8014012:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8014016:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 801401a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 801401e:	fb03 f101 	mul.w	r1, r3, r1
 8014022:	b500      	push	{lr}
 8014024:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 8014028:	3107      	adds	r1, #7
 801402a:	11c0      	asrs	r0, r0, #7
 801402c:	fa42 f20e 	asr.w	r2, r2, lr
 8014030:	f021 0107 	bic.w	r1, r1, #7
 8014034:	07d2      	lsls	r2, r2, #31
 8014036:	fa21 f10c 	lsr.w	r1, r1, ip
 801403a:	d505      	bpl.n	8014048 <ai_array_get_byte_size+0x38>
 801403c:	2300      	movs	r3, #0
 801403e:	3107      	adds	r1, #7
 8014040:	4419      	add	r1, r3
 8014042:	08c8      	lsrs	r0, r1, #3
 8014044:	f85d fb04 	ldr.w	pc, [sp], #4
 8014048:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801404c:	3107      	adds	r1, #7
 801404e:	fa40 f00c 	asr.w	r0, r0, ip
 8014052:	4083      	lsls	r3, r0
 8014054:	4419      	add	r1, r3
 8014056:	08c8      	lsrs	r0, r1, #3
 8014058:	f85d fb04 	ldr.w	pc, [sp], #4
 801405c:	4608      	mov	r0, r1
 801405e:	4770      	bx	lr

08014060 <ai_array_get_data_byte_size>:
 8014060:	b169      	cbz	r1, 801407e <ai_array_get_data_byte_size+0x1e>
 8014062:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8014066:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801406a:	fb03 f101 	mul.w	r1, r3, r1
 801406e:	1dcb      	adds	r3, r1, #7
 8014070:	f023 0307 	bic.w	r3, r3, #7
 8014074:	fa23 f000 	lsr.w	r0, r3, r0
 8014078:	3007      	adds	r0, #7
 801407a:	08c0      	lsrs	r0, r0, #3
 801407c:	4770      	bx	lr
 801407e:	4608      	mov	r0, r1
 8014080:	4770      	bx	lr
 8014082:	bf00      	nop

08014084 <ai_version_get>:
 8014084:	0212      	lsls	r2, r2, #8
 8014086:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801408a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801408e:	4770      	bx	lr

08014090 <get_tensor_byte_size>:
 8014090:	b430      	push	{r4, r5}
 8014092:	6985      	ldr	r5, [r0, #24]
 8014094:	68c4      	ldr	r4, [r0, #12]
 8014096:	6941      	ldr	r1, [r0, #20]
 8014098:	4b06      	ldr	r3, [pc, #24]	@ (80140b4 <get_tensor_byte_size+0x24>)
 801409a:	6828      	ldr	r0, [r5, #0]
 801409c:	4a06      	ldr	r2, [pc, #24]	@ (80140b8 <get_tensor_byte_size+0x28>)
 801409e:	4003      	ands	r3, r0
 80140a0:	68c9      	ldr	r1, [r1, #12]
 80140a2:	68e0      	ldr	r0, [r4, #12]
 80140a4:	4293      	cmp	r3, r2
 80140a6:	fb01 f000 	mul.w	r0, r1, r0
 80140aa:	d101      	bne.n	80140b0 <get_tensor_byte_size+0x20>
 80140ac:	3007      	adds	r0, #7
 80140ae:	08c0      	lsrs	r0, r0, #3
 80140b0:	bc30      	pop	{r4, r5}
 80140b2:	4770      	bx	lr
 80140b4:	017fffff 	.word	0x017fffff
 80140b8:	000400c0 	.word	0x000400c0

080140bc <lite_bilinear_if32of32_kernel>:
 80140bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140be:	9d05      	ldr	r5, [sp, #20]
 80140c0:	b352      	cbz	r2, 8014118 <lite_bilinear_if32of32_kernel+0x5c>
 80140c2:	f04f 0c00 	mov.w	ip, #0
 80140c6:	edd5 4a02 	vldr	s9, [r5, #8]
 80140ca:	f10c 0c01 	add.w	ip, ip, #1
 80140ce:	ed95 5a01 	vldr	s10, [r5, #4]
 80140d2:	ed90 6a00 	vldr	s12, [r0]
 80140d6:	4562      	cmp	r2, ip
 80140d8:	edd5 5a00 	vldr	s11, [r5]
 80140dc:	edd5 6a03 	vldr	s13, [r5, #12]
 80140e0:	e9d3 4600 	ldrd	r4, r6, [r3]
 80140e4:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 80140e8:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 80140ec:	4434      	add	r4, r6
 80140ee:	edd7 7a00 	vldr	s15, [r7]
 80140f2:	ed9e 7a00 	vldr	s14, [lr]
 80140f6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80140fa:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80140fe:	f100 0004 	add.w	r0, r0, #4
 8014102:	eee5 7a07 	vfma.f32	s15, s10, s14
 8014106:	ed94 7a00 	vldr	s14, [r4]
 801410a:	eee5 7a86 	vfma.f32	s15, s11, s12
 801410e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014112:	ece1 7a01 	vstmia	r1!, {s15}
 8014116:	d1d6      	bne.n	80140c6 <lite_bilinear_if32of32_kernel+0xa>
 8014118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801411a:	bf00      	nop

0801411c <lite_bilinear_is8os8_kernel>:
 801411c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014120:	9c07      	ldr	r4, [sp, #28]
 8014122:	2a00      	cmp	r2, #0
 8014124:	d04b      	beq.n	80141be <lite_bilinear_is8os8_kernel+0xa2>
 8014126:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801412a:	eb01 0e02 	add.w	lr, r1, r2
 801412e:	f100 3cff 	add.w	ip, r0, #4294967295
 8014132:	f1c0 0501 	rsb	r5, r0, #1
 8014136:	685f      	ldr	r7, [r3, #4]
 8014138:	eb05 060c 	add.w	r6, r5, ip
 801413c:	681a      	ldr	r2, [r3, #0]
 801413e:	eb00 0807 	add.w	r8, r0, r7
 8014142:	edd4 3a02 	vldr	s7, [r4, #8]
 8014146:	4402      	add	r2, r0
 8014148:	ed94 4a01 	vldr	s8, [r4, #4]
 801414c:	f918 8006 	ldrsb.w	r8, [r8, r6]
 8014150:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 8014154:	ee07 8a90 	vmov	s15, r8
 8014158:	f912 8006 	ldrsb.w	r8, [r2, r6]
 801415c:	ee06 9a90 	vmov	s13, r9
 8014160:	443a      	add	r2, r7
 8014162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014166:	ee06 8a10 	vmov	s12, r8
 801416a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801416e:	edd4 4a00 	vldr	s9, [r4]
 8014172:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014176:	5792      	ldrsb	r2, [r2, r6]
 8014178:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801417c:	ed94 5a03 	vldr	s10, [r4, #12]
 8014180:	ee07 2a10 	vmov	s14, r2
 8014184:	eee4 7a06 	vfma.f32	s15, s8, s12
 8014188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801418c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8014190:	eee5 7a07 	vfma.f32	s15, s10, s14
 8014194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014198:	ee37 7aa5 	vadd.f32	s14, s15, s11
 801419c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80141a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80141a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141ac:	dd09      	ble.n	80141c2 <lite_bilinear_is8os8_kernel+0xa6>
 80141ae:	ee17 2a10 	vmov	r2, s14
 80141b2:	f302 0207 	ssat	r2, #8, r2
 80141b6:	f801 2b01 	strb.w	r2, [r1], #1
 80141ba:	4571      	cmp	r1, lr
 80141bc:	d1bb      	bne.n	8014136 <lite_bilinear_is8os8_kernel+0x1a>
 80141be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141c2:	ee17 2a90 	vmov	r2, s15
 80141c6:	f302 0207 	ssat	r2, #8, r2
 80141ca:	f801 2b01 	strb.w	r2, [r1], #1
 80141ce:	4571      	cmp	r1, lr
 80141d0:	d1b1      	bne.n	8014136 <lite_bilinear_is8os8_kernel+0x1a>
 80141d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141d6:	bf00      	nop

080141d8 <lite_bilinear_iu8ou8_kernel>:
 80141d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141dc:	9c07      	ldr	r4, [sp, #28]
 80141de:	2a00      	cmp	r2, #0
 80141e0:	d042      	beq.n	8014268 <lite_bilinear_iu8ou8_kernel+0x90>
 80141e2:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80141e6:	eb01 0e02 	add.w	lr, r1, r2
 80141ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80141ee:	f1c0 0501 	rsb	r5, r0, #1
 80141f2:	eb05 060c 	add.w	r6, r5, ip
 80141f6:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 80141fa:	eef0 7a44 	vmov.f32	s15, s8
 80141fe:	edd4 6a00 	vldr	s13, [r4]
 8014202:	ee07 2a10 	vmov	s14, r2
 8014206:	681a      	ldr	r2, [r3, #0]
 8014208:	685f      	ldr	r7, [r3, #4]
 801420a:	4402      	add	r2, r0
 801420c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014210:	eb00 0807 	add.w	r8, r0, r7
 8014214:	edd4 4a01 	vldr	s9, [r4, #4]
 8014218:	f812 9006 	ldrb.w	r9, [r2, r6]
 801421c:	443a      	add	r2, r7
 801421e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014222:	f818 8006 	ldrb.w	r8, [r8, r6]
 8014226:	ee06 9a10 	vmov	s12, r9
 801422a:	ed94 5a02 	vldr	s10, [r4, #8]
 801422e:	ee06 8a90 	vmov	s13, r8
 8014232:	5d92      	ldrb	r2, [r2, r6]
 8014234:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014238:	edd4 5a03 	vldr	s11, [r4, #12]
 801423c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014240:	ee07 2a10 	vmov	s14, r2
 8014244:	eee4 7a86 	vfma.f32	s15, s9, s12
 8014248:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801424c:	eee5 7a26 	vfma.f32	s15, s10, s13
 8014250:	eee5 7a87 	vfma.f32	s15, s11, s14
 8014254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014258:	ee17 2a90 	vmov	r2, s15
 801425c:	f382 0208 	usat	r2, #8, r2
 8014260:	f801 2b01 	strb.w	r2, [r1], #1
 8014264:	4571      	cmp	r1, lr
 8014266:	d1c4      	bne.n	80141f2 <lite_bilinear_iu8ou8_kernel+0x1a>
 8014268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801426c <lite_bilinear_is16os16_kernel>:
 801426c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014270:	9d07      	ldr	r5, [sp, #28]
 8014272:	2a00      	cmp	r2, #0
 8014274:	d04e      	beq.n	8014314 <lite_bilinear_is16os16_kernel+0xa8>
 8014276:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801427a:	f1a0 0e02 	sub.w	lr, r0, #2
 801427e:	f04f 0c00 	mov.w	ip, #0
 8014282:	ed95 7a02 	vldr	s14, [r5, #8]
 8014286:	ed95 4a01 	vldr	s8, [r5, #4]
 801428a:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 801428e:	edd5 4a00 	vldr	s9, [r5]
 8014292:	ee06 9a90 	vmov	s13, r9
 8014296:	ed95 5a03 	vldr	s10, [r5, #12]
 801429a:	e9d3 4600 	ldrd	r4, r6, [r3]
 801429e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80142a2:	eb06 080c 	add.w	r8, r6, ip
 80142a6:	eb04 070c 	add.w	r7, r4, ip
 80142aa:	4434      	add	r4, r6
 80142ac:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 80142b0:	4464      	add	r4, ip
 80142b2:	ee07 6a90 	vmov	s15, r6
 80142b6:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 80142ba:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 80142be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142c2:	ee06 6a10 	vmov	s12, r6
 80142c6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80142ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80142ce:	ee07 4a10 	vmov	s14, r4
 80142d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142d6:	eee4 7a06 	vfma.f32	s15, s8, s12
 80142da:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80142de:	eee5 7a07 	vfma.f32	s15, s10, s14
 80142e2:	ee37 7aa5 	vadd.f32	s14, s15, s11
 80142e6:	ee77 6ae5 	vsub.f32	s13, s15, s11
 80142ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80142ee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80142f2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80142f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142fa:	bfcc      	ite	gt
 80142fc:	ee17 4a10 	vmovgt	r4, s14
 8014300:	ee16 4a90 	vmovle	r4, s13
 8014304:	f304 040f 	ssat	r4, #16, r4
 8014308:	f10c 0c01 	add.w	ip, ip, #1
 801430c:	f821 4b02 	strh.w	r4, [r1], #2
 8014310:	4562      	cmp	r2, ip
 8014312:	d1b6      	bne.n	8014282 <lite_bilinear_is16os16_kernel+0x16>
 8014314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014318 <lite_bilinear_iu16ou16_kernel>:
 8014318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801431c:	9d06      	ldr	r5, [sp, #24]
 801431e:	2a00      	cmp	r2, #0
 8014320:	d042      	beq.n	80143a8 <lite_bilinear_iu16ou16_kernel+0x90>
 8014322:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8014326:	1e86      	subs	r6, r0, #2
 8014328:	f04f 0e00 	mov.w	lr, #0
 801432c:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 8014330:	eef0 7a44 	vmov.f32	s15, s8
 8014334:	edd5 6a00 	vldr	s13, [r5]
 8014338:	ee07 4a10 	vmov	s14, r4
 801433c:	681c      	ldr	r4, [r3, #0]
 801433e:	685f      	ldr	r7, [r3, #4]
 8014340:	eb04 080e 	add.w	r8, r4, lr
 8014344:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014348:	eb07 0c0e 	add.w	ip, r7, lr
 801434c:	edd5 4a01 	vldr	s9, [r5, #4]
 8014350:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 8014354:	443c      	add	r4, r7
 8014356:	eee6 7a87 	vfma.f32	s15, s13, s14
 801435a:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 801435e:	ee06 8a10 	vmov	s12, r8
 8014362:	4474      	add	r4, lr
 8014364:	ee06 7a90 	vmov	s13, r7
 8014368:	ed95 5a02 	vldr	s10, [r5, #8]
 801436c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014370:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 8014374:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014378:	edd5 5a03 	vldr	s11, [r5, #12]
 801437c:	ee07 4a10 	vmov	s14, r4
 8014380:	eee4 7a86 	vfma.f32	s15, s9, s12
 8014384:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014388:	eee5 7a26 	vfma.f32	s15, s10, s13
 801438c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8014390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014394:	ee17 ca90 	vmov	ip, s15
 8014398:	f38c 0c10 	usat	ip, #16, ip
 801439c:	f10e 0e01 	add.w	lr, lr, #1
 80143a0:	f821 cb02 	strh.w	ip, [r1], #2
 80143a4:	4572      	cmp	r2, lr
 80143a6:	d1c1      	bne.n	801432c <lite_bilinear_iu16ou16_kernel+0x14>
 80143a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143ac <malloc>:
 80143ac:	4b02      	ldr	r3, [pc, #8]	@ (80143b8 <malloc+0xc>)
 80143ae:	4601      	mov	r1, r0
 80143b0:	6818      	ldr	r0, [r3, #0]
 80143b2:	f000 b825 	b.w	8014400 <_malloc_r>
 80143b6:	bf00      	nop
 80143b8:	20000824 	.word	0x20000824

080143bc <sbrk_aligned>:
 80143bc:	b570      	push	{r4, r5, r6, lr}
 80143be:	4e0f      	ldr	r6, [pc, #60]	@ (80143fc <sbrk_aligned+0x40>)
 80143c0:	460c      	mov	r4, r1
 80143c2:	6831      	ldr	r1, [r6, #0]
 80143c4:	4605      	mov	r5, r0
 80143c6:	b911      	cbnz	r1, 80143ce <sbrk_aligned+0x12>
 80143c8:	f000 ff48 	bl	801525c <_sbrk_r>
 80143cc:	6030      	str	r0, [r6, #0]
 80143ce:	4621      	mov	r1, r4
 80143d0:	4628      	mov	r0, r5
 80143d2:	f000 ff43 	bl	801525c <_sbrk_r>
 80143d6:	1c43      	adds	r3, r0, #1
 80143d8:	d103      	bne.n	80143e2 <sbrk_aligned+0x26>
 80143da:	f04f 34ff 	mov.w	r4, #4294967295
 80143de:	4620      	mov	r0, r4
 80143e0:	bd70      	pop	{r4, r5, r6, pc}
 80143e2:	1cc4      	adds	r4, r0, #3
 80143e4:	f024 0403 	bic.w	r4, r4, #3
 80143e8:	42a0      	cmp	r0, r4
 80143ea:	d0f8      	beq.n	80143de <sbrk_aligned+0x22>
 80143ec:	1a21      	subs	r1, r4, r0
 80143ee:	4628      	mov	r0, r5
 80143f0:	f000 ff34 	bl	801525c <_sbrk_r>
 80143f4:	3001      	adds	r0, #1
 80143f6:	d1f2      	bne.n	80143de <sbrk_aligned+0x22>
 80143f8:	e7ef      	b.n	80143da <sbrk_aligned+0x1e>
 80143fa:	bf00      	nop
 80143fc:	20035e14 	.word	0x20035e14

08014400 <_malloc_r>:
 8014400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014404:	1ccd      	adds	r5, r1, #3
 8014406:	f025 0503 	bic.w	r5, r5, #3
 801440a:	3508      	adds	r5, #8
 801440c:	2d0c      	cmp	r5, #12
 801440e:	bf38      	it	cc
 8014410:	250c      	movcc	r5, #12
 8014412:	2d00      	cmp	r5, #0
 8014414:	4606      	mov	r6, r0
 8014416:	db01      	blt.n	801441c <_malloc_r+0x1c>
 8014418:	42a9      	cmp	r1, r5
 801441a:	d904      	bls.n	8014426 <_malloc_r+0x26>
 801441c:	230c      	movs	r3, #12
 801441e:	6033      	str	r3, [r6, #0]
 8014420:	2000      	movs	r0, #0
 8014422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014426:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80144fc <_malloc_r+0xfc>
 801442a:	f000 f869 	bl	8014500 <__malloc_lock>
 801442e:	f8d8 3000 	ldr.w	r3, [r8]
 8014432:	461c      	mov	r4, r3
 8014434:	bb44      	cbnz	r4, 8014488 <_malloc_r+0x88>
 8014436:	4629      	mov	r1, r5
 8014438:	4630      	mov	r0, r6
 801443a:	f7ff ffbf 	bl	80143bc <sbrk_aligned>
 801443e:	1c43      	adds	r3, r0, #1
 8014440:	4604      	mov	r4, r0
 8014442:	d158      	bne.n	80144f6 <_malloc_r+0xf6>
 8014444:	f8d8 4000 	ldr.w	r4, [r8]
 8014448:	4627      	mov	r7, r4
 801444a:	2f00      	cmp	r7, #0
 801444c:	d143      	bne.n	80144d6 <_malloc_r+0xd6>
 801444e:	2c00      	cmp	r4, #0
 8014450:	d04b      	beq.n	80144ea <_malloc_r+0xea>
 8014452:	6823      	ldr	r3, [r4, #0]
 8014454:	4639      	mov	r1, r7
 8014456:	4630      	mov	r0, r6
 8014458:	eb04 0903 	add.w	r9, r4, r3
 801445c:	f000 fefe 	bl	801525c <_sbrk_r>
 8014460:	4581      	cmp	r9, r0
 8014462:	d142      	bne.n	80144ea <_malloc_r+0xea>
 8014464:	6821      	ldr	r1, [r4, #0]
 8014466:	1a6d      	subs	r5, r5, r1
 8014468:	4629      	mov	r1, r5
 801446a:	4630      	mov	r0, r6
 801446c:	f7ff ffa6 	bl	80143bc <sbrk_aligned>
 8014470:	3001      	adds	r0, #1
 8014472:	d03a      	beq.n	80144ea <_malloc_r+0xea>
 8014474:	6823      	ldr	r3, [r4, #0]
 8014476:	442b      	add	r3, r5
 8014478:	6023      	str	r3, [r4, #0]
 801447a:	f8d8 3000 	ldr.w	r3, [r8]
 801447e:	685a      	ldr	r2, [r3, #4]
 8014480:	bb62      	cbnz	r2, 80144dc <_malloc_r+0xdc>
 8014482:	f8c8 7000 	str.w	r7, [r8]
 8014486:	e00f      	b.n	80144a8 <_malloc_r+0xa8>
 8014488:	6822      	ldr	r2, [r4, #0]
 801448a:	1b52      	subs	r2, r2, r5
 801448c:	d420      	bmi.n	80144d0 <_malloc_r+0xd0>
 801448e:	2a0b      	cmp	r2, #11
 8014490:	d917      	bls.n	80144c2 <_malloc_r+0xc2>
 8014492:	1961      	adds	r1, r4, r5
 8014494:	42a3      	cmp	r3, r4
 8014496:	6025      	str	r5, [r4, #0]
 8014498:	bf18      	it	ne
 801449a:	6059      	strne	r1, [r3, #4]
 801449c:	6863      	ldr	r3, [r4, #4]
 801449e:	bf08      	it	eq
 80144a0:	f8c8 1000 	streq.w	r1, [r8]
 80144a4:	5162      	str	r2, [r4, r5]
 80144a6:	604b      	str	r3, [r1, #4]
 80144a8:	4630      	mov	r0, r6
 80144aa:	f000 f82f 	bl	801450c <__malloc_unlock>
 80144ae:	f104 000b 	add.w	r0, r4, #11
 80144b2:	1d23      	adds	r3, r4, #4
 80144b4:	f020 0007 	bic.w	r0, r0, #7
 80144b8:	1ac2      	subs	r2, r0, r3
 80144ba:	bf1c      	itt	ne
 80144bc:	1a1b      	subne	r3, r3, r0
 80144be:	50a3      	strne	r3, [r4, r2]
 80144c0:	e7af      	b.n	8014422 <_malloc_r+0x22>
 80144c2:	6862      	ldr	r2, [r4, #4]
 80144c4:	42a3      	cmp	r3, r4
 80144c6:	bf0c      	ite	eq
 80144c8:	f8c8 2000 	streq.w	r2, [r8]
 80144cc:	605a      	strne	r2, [r3, #4]
 80144ce:	e7eb      	b.n	80144a8 <_malloc_r+0xa8>
 80144d0:	4623      	mov	r3, r4
 80144d2:	6864      	ldr	r4, [r4, #4]
 80144d4:	e7ae      	b.n	8014434 <_malloc_r+0x34>
 80144d6:	463c      	mov	r4, r7
 80144d8:	687f      	ldr	r7, [r7, #4]
 80144da:	e7b6      	b.n	801444a <_malloc_r+0x4a>
 80144dc:	461a      	mov	r2, r3
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	42a3      	cmp	r3, r4
 80144e2:	d1fb      	bne.n	80144dc <_malloc_r+0xdc>
 80144e4:	2300      	movs	r3, #0
 80144e6:	6053      	str	r3, [r2, #4]
 80144e8:	e7de      	b.n	80144a8 <_malloc_r+0xa8>
 80144ea:	230c      	movs	r3, #12
 80144ec:	6033      	str	r3, [r6, #0]
 80144ee:	4630      	mov	r0, r6
 80144f0:	f000 f80c 	bl	801450c <__malloc_unlock>
 80144f4:	e794      	b.n	8014420 <_malloc_r+0x20>
 80144f6:	6005      	str	r5, [r0, #0]
 80144f8:	e7d6      	b.n	80144a8 <_malloc_r+0xa8>
 80144fa:	bf00      	nop
 80144fc:	20035e18 	.word	0x20035e18

08014500 <__malloc_lock>:
 8014500:	4801      	ldr	r0, [pc, #4]	@ (8014508 <__malloc_lock+0x8>)
 8014502:	f000 bef8 	b.w	80152f6 <__retarget_lock_acquire_recursive>
 8014506:	bf00      	nop
 8014508:	20035f5c 	.word	0x20035f5c

0801450c <__malloc_unlock>:
 801450c:	4801      	ldr	r0, [pc, #4]	@ (8014514 <__malloc_unlock+0x8>)
 801450e:	f000 bef3 	b.w	80152f8 <__retarget_lock_release_recursive>
 8014512:	bf00      	nop
 8014514:	20035f5c 	.word	0x20035f5c

08014518 <__cvt>:
 8014518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801451c:	ec57 6b10 	vmov	r6, r7, d0
 8014520:	2f00      	cmp	r7, #0
 8014522:	460c      	mov	r4, r1
 8014524:	4619      	mov	r1, r3
 8014526:	463b      	mov	r3, r7
 8014528:	bfbb      	ittet	lt
 801452a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801452e:	461f      	movlt	r7, r3
 8014530:	2300      	movge	r3, #0
 8014532:	232d      	movlt	r3, #45	@ 0x2d
 8014534:	700b      	strb	r3, [r1, #0]
 8014536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014538:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801453c:	4691      	mov	r9, r2
 801453e:	f023 0820 	bic.w	r8, r3, #32
 8014542:	bfbc      	itt	lt
 8014544:	4632      	movlt	r2, r6
 8014546:	4616      	movlt	r6, r2
 8014548:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801454c:	d005      	beq.n	801455a <__cvt+0x42>
 801454e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014552:	d100      	bne.n	8014556 <__cvt+0x3e>
 8014554:	3401      	adds	r4, #1
 8014556:	2102      	movs	r1, #2
 8014558:	e000      	b.n	801455c <__cvt+0x44>
 801455a:	2103      	movs	r1, #3
 801455c:	ab03      	add	r3, sp, #12
 801455e:	9301      	str	r3, [sp, #4]
 8014560:	ab02      	add	r3, sp, #8
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	ec47 6b10 	vmov	d0, r6, r7
 8014568:	4653      	mov	r3, sl
 801456a:	4622      	mov	r2, r4
 801456c:	f000 ff5c 	bl	8015428 <_dtoa_r>
 8014570:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014574:	4605      	mov	r5, r0
 8014576:	d119      	bne.n	80145ac <__cvt+0x94>
 8014578:	f019 0f01 	tst.w	r9, #1
 801457c:	d00e      	beq.n	801459c <__cvt+0x84>
 801457e:	eb00 0904 	add.w	r9, r0, r4
 8014582:	2200      	movs	r2, #0
 8014584:	2300      	movs	r3, #0
 8014586:	4630      	mov	r0, r6
 8014588:	4639      	mov	r1, r7
 801458a:	f7ec fb1d 	bl	8000bc8 <__aeabi_dcmpeq>
 801458e:	b108      	cbz	r0, 8014594 <__cvt+0x7c>
 8014590:	f8cd 900c 	str.w	r9, [sp, #12]
 8014594:	2230      	movs	r2, #48	@ 0x30
 8014596:	9b03      	ldr	r3, [sp, #12]
 8014598:	454b      	cmp	r3, r9
 801459a:	d31e      	bcc.n	80145da <__cvt+0xc2>
 801459c:	9b03      	ldr	r3, [sp, #12]
 801459e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80145a0:	1b5b      	subs	r3, r3, r5
 80145a2:	4628      	mov	r0, r5
 80145a4:	6013      	str	r3, [r2, #0]
 80145a6:	b004      	add	sp, #16
 80145a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80145b0:	eb00 0904 	add.w	r9, r0, r4
 80145b4:	d1e5      	bne.n	8014582 <__cvt+0x6a>
 80145b6:	7803      	ldrb	r3, [r0, #0]
 80145b8:	2b30      	cmp	r3, #48	@ 0x30
 80145ba:	d10a      	bne.n	80145d2 <__cvt+0xba>
 80145bc:	2200      	movs	r2, #0
 80145be:	2300      	movs	r3, #0
 80145c0:	4630      	mov	r0, r6
 80145c2:	4639      	mov	r1, r7
 80145c4:	f7ec fb00 	bl	8000bc8 <__aeabi_dcmpeq>
 80145c8:	b918      	cbnz	r0, 80145d2 <__cvt+0xba>
 80145ca:	f1c4 0401 	rsb	r4, r4, #1
 80145ce:	f8ca 4000 	str.w	r4, [sl]
 80145d2:	f8da 3000 	ldr.w	r3, [sl]
 80145d6:	4499      	add	r9, r3
 80145d8:	e7d3      	b.n	8014582 <__cvt+0x6a>
 80145da:	1c59      	adds	r1, r3, #1
 80145dc:	9103      	str	r1, [sp, #12]
 80145de:	701a      	strb	r2, [r3, #0]
 80145e0:	e7d9      	b.n	8014596 <__cvt+0x7e>

080145e2 <__exponent>:
 80145e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145e4:	2900      	cmp	r1, #0
 80145e6:	bfba      	itte	lt
 80145e8:	4249      	neglt	r1, r1
 80145ea:	232d      	movlt	r3, #45	@ 0x2d
 80145ec:	232b      	movge	r3, #43	@ 0x2b
 80145ee:	2909      	cmp	r1, #9
 80145f0:	7002      	strb	r2, [r0, #0]
 80145f2:	7043      	strb	r3, [r0, #1]
 80145f4:	dd29      	ble.n	801464a <__exponent+0x68>
 80145f6:	f10d 0307 	add.w	r3, sp, #7
 80145fa:	461d      	mov	r5, r3
 80145fc:	270a      	movs	r7, #10
 80145fe:	461a      	mov	r2, r3
 8014600:	fbb1 f6f7 	udiv	r6, r1, r7
 8014604:	fb07 1416 	mls	r4, r7, r6, r1
 8014608:	3430      	adds	r4, #48	@ 0x30
 801460a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801460e:	460c      	mov	r4, r1
 8014610:	2c63      	cmp	r4, #99	@ 0x63
 8014612:	f103 33ff 	add.w	r3, r3, #4294967295
 8014616:	4631      	mov	r1, r6
 8014618:	dcf1      	bgt.n	80145fe <__exponent+0x1c>
 801461a:	3130      	adds	r1, #48	@ 0x30
 801461c:	1e94      	subs	r4, r2, #2
 801461e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014622:	1c41      	adds	r1, r0, #1
 8014624:	4623      	mov	r3, r4
 8014626:	42ab      	cmp	r3, r5
 8014628:	d30a      	bcc.n	8014640 <__exponent+0x5e>
 801462a:	f10d 0309 	add.w	r3, sp, #9
 801462e:	1a9b      	subs	r3, r3, r2
 8014630:	42ac      	cmp	r4, r5
 8014632:	bf88      	it	hi
 8014634:	2300      	movhi	r3, #0
 8014636:	3302      	adds	r3, #2
 8014638:	4403      	add	r3, r0
 801463a:	1a18      	subs	r0, r3, r0
 801463c:	b003      	add	sp, #12
 801463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014640:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014644:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014648:	e7ed      	b.n	8014626 <__exponent+0x44>
 801464a:	2330      	movs	r3, #48	@ 0x30
 801464c:	3130      	adds	r1, #48	@ 0x30
 801464e:	7083      	strb	r3, [r0, #2]
 8014650:	70c1      	strb	r1, [r0, #3]
 8014652:	1d03      	adds	r3, r0, #4
 8014654:	e7f1      	b.n	801463a <__exponent+0x58>
	...

08014658 <_printf_float>:
 8014658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801465c:	b08d      	sub	sp, #52	@ 0x34
 801465e:	460c      	mov	r4, r1
 8014660:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014664:	4616      	mov	r6, r2
 8014666:	461f      	mov	r7, r3
 8014668:	4605      	mov	r5, r0
 801466a:	f000 fdbf 	bl	80151ec <_localeconv_r>
 801466e:	6803      	ldr	r3, [r0, #0]
 8014670:	9304      	str	r3, [sp, #16]
 8014672:	4618      	mov	r0, r3
 8014674:	f7eb fe7c 	bl	8000370 <strlen>
 8014678:	2300      	movs	r3, #0
 801467a:	930a      	str	r3, [sp, #40]	@ 0x28
 801467c:	f8d8 3000 	ldr.w	r3, [r8]
 8014680:	9005      	str	r0, [sp, #20]
 8014682:	3307      	adds	r3, #7
 8014684:	f023 0307 	bic.w	r3, r3, #7
 8014688:	f103 0208 	add.w	r2, r3, #8
 801468c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014690:	f8d4 b000 	ldr.w	fp, [r4]
 8014694:	f8c8 2000 	str.w	r2, [r8]
 8014698:	e9d3 8900 	ldrd	r8, r9, [r3]
 801469c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80146a0:	9307      	str	r3, [sp, #28]
 80146a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80146a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80146aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80146ae:	4b9c      	ldr	r3, [pc, #624]	@ (8014920 <_printf_float+0x2c8>)
 80146b0:	f04f 32ff 	mov.w	r2, #4294967295
 80146b4:	f7ec faba 	bl	8000c2c <__aeabi_dcmpun>
 80146b8:	bb70      	cbnz	r0, 8014718 <_printf_float+0xc0>
 80146ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80146be:	4b98      	ldr	r3, [pc, #608]	@ (8014920 <_printf_float+0x2c8>)
 80146c0:	f04f 32ff 	mov.w	r2, #4294967295
 80146c4:	f7ec fa94 	bl	8000bf0 <__aeabi_dcmple>
 80146c8:	bb30      	cbnz	r0, 8014718 <_printf_float+0xc0>
 80146ca:	2200      	movs	r2, #0
 80146cc:	2300      	movs	r3, #0
 80146ce:	4640      	mov	r0, r8
 80146d0:	4649      	mov	r1, r9
 80146d2:	f7ec fa83 	bl	8000bdc <__aeabi_dcmplt>
 80146d6:	b110      	cbz	r0, 80146de <_printf_float+0x86>
 80146d8:	232d      	movs	r3, #45	@ 0x2d
 80146da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146de:	4a91      	ldr	r2, [pc, #580]	@ (8014924 <_printf_float+0x2cc>)
 80146e0:	4b91      	ldr	r3, [pc, #580]	@ (8014928 <_printf_float+0x2d0>)
 80146e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80146e6:	bf94      	ite	ls
 80146e8:	4690      	movls	r8, r2
 80146ea:	4698      	movhi	r8, r3
 80146ec:	2303      	movs	r3, #3
 80146ee:	6123      	str	r3, [r4, #16]
 80146f0:	f02b 0304 	bic.w	r3, fp, #4
 80146f4:	6023      	str	r3, [r4, #0]
 80146f6:	f04f 0900 	mov.w	r9, #0
 80146fa:	9700      	str	r7, [sp, #0]
 80146fc:	4633      	mov	r3, r6
 80146fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014700:	4621      	mov	r1, r4
 8014702:	4628      	mov	r0, r5
 8014704:	f000 f9d2 	bl	8014aac <_printf_common>
 8014708:	3001      	adds	r0, #1
 801470a:	f040 808d 	bne.w	8014828 <_printf_float+0x1d0>
 801470e:	f04f 30ff 	mov.w	r0, #4294967295
 8014712:	b00d      	add	sp, #52	@ 0x34
 8014714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014718:	4642      	mov	r2, r8
 801471a:	464b      	mov	r3, r9
 801471c:	4640      	mov	r0, r8
 801471e:	4649      	mov	r1, r9
 8014720:	f7ec fa84 	bl	8000c2c <__aeabi_dcmpun>
 8014724:	b140      	cbz	r0, 8014738 <_printf_float+0xe0>
 8014726:	464b      	mov	r3, r9
 8014728:	2b00      	cmp	r3, #0
 801472a:	bfbc      	itt	lt
 801472c:	232d      	movlt	r3, #45	@ 0x2d
 801472e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014732:	4a7e      	ldr	r2, [pc, #504]	@ (801492c <_printf_float+0x2d4>)
 8014734:	4b7e      	ldr	r3, [pc, #504]	@ (8014930 <_printf_float+0x2d8>)
 8014736:	e7d4      	b.n	80146e2 <_printf_float+0x8a>
 8014738:	6863      	ldr	r3, [r4, #4]
 801473a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801473e:	9206      	str	r2, [sp, #24]
 8014740:	1c5a      	adds	r2, r3, #1
 8014742:	d13b      	bne.n	80147bc <_printf_float+0x164>
 8014744:	2306      	movs	r3, #6
 8014746:	6063      	str	r3, [r4, #4]
 8014748:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801474c:	2300      	movs	r3, #0
 801474e:	6022      	str	r2, [r4, #0]
 8014750:	9303      	str	r3, [sp, #12]
 8014752:	ab0a      	add	r3, sp, #40	@ 0x28
 8014754:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014758:	ab09      	add	r3, sp, #36	@ 0x24
 801475a:	9300      	str	r3, [sp, #0]
 801475c:	6861      	ldr	r1, [r4, #4]
 801475e:	ec49 8b10 	vmov	d0, r8, r9
 8014762:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014766:	4628      	mov	r0, r5
 8014768:	f7ff fed6 	bl	8014518 <__cvt>
 801476c:	9b06      	ldr	r3, [sp, #24]
 801476e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014770:	2b47      	cmp	r3, #71	@ 0x47
 8014772:	4680      	mov	r8, r0
 8014774:	d129      	bne.n	80147ca <_printf_float+0x172>
 8014776:	1cc8      	adds	r0, r1, #3
 8014778:	db02      	blt.n	8014780 <_printf_float+0x128>
 801477a:	6863      	ldr	r3, [r4, #4]
 801477c:	4299      	cmp	r1, r3
 801477e:	dd41      	ble.n	8014804 <_printf_float+0x1ac>
 8014780:	f1aa 0a02 	sub.w	sl, sl, #2
 8014784:	fa5f fa8a 	uxtb.w	sl, sl
 8014788:	3901      	subs	r1, #1
 801478a:	4652      	mov	r2, sl
 801478c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014790:	9109      	str	r1, [sp, #36]	@ 0x24
 8014792:	f7ff ff26 	bl	80145e2 <__exponent>
 8014796:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014798:	1813      	adds	r3, r2, r0
 801479a:	2a01      	cmp	r2, #1
 801479c:	4681      	mov	r9, r0
 801479e:	6123      	str	r3, [r4, #16]
 80147a0:	dc02      	bgt.n	80147a8 <_printf_float+0x150>
 80147a2:	6822      	ldr	r2, [r4, #0]
 80147a4:	07d2      	lsls	r2, r2, #31
 80147a6:	d501      	bpl.n	80147ac <_printf_float+0x154>
 80147a8:	3301      	adds	r3, #1
 80147aa:	6123      	str	r3, [r4, #16]
 80147ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d0a2      	beq.n	80146fa <_printf_float+0xa2>
 80147b4:	232d      	movs	r3, #45	@ 0x2d
 80147b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80147ba:	e79e      	b.n	80146fa <_printf_float+0xa2>
 80147bc:	9a06      	ldr	r2, [sp, #24]
 80147be:	2a47      	cmp	r2, #71	@ 0x47
 80147c0:	d1c2      	bne.n	8014748 <_printf_float+0xf0>
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d1c0      	bne.n	8014748 <_printf_float+0xf0>
 80147c6:	2301      	movs	r3, #1
 80147c8:	e7bd      	b.n	8014746 <_printf_float+0xee>
 80147ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80147ce:	d9db      	bls.n	8014788 <_printf_float+0x130>
 80147d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80147d4:	d118      	bne.n	8014808 <_printf_float+0x1b0>
 80147d6:	2900      	cmp	r1, #0
 80147d8:	6863      	ldr	r3, [r4, #4]
 80147da:	dd0b      	ble.n	80147f4 <_printf_float+0x19c>
 80147dc:	6121      	str	r1, [r4, #16]
 80147de:	b913      	cbnz	r3, 80147e6 <_printf_float+0x18e>
 80147e0:	6822      	ldr	r2, [r4, #0]
 80147e2:	07d0      	lsls	r0, r2, #31
 80147e4:	d502      	bpl.n	80147ec <_printf_float+0x194>
 80147e6:	3301      	adds	r3, #1
 80147e8:	440b      	add	r3, r1
 80147ea:	6123      	str	r3, [r4, #16]
 80147ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80147ee:	f04f 0900 	mov.w	r9, #0
 80147f2:	e7db      	b.n	80147ac <_printf_float+0x154>
 80147f4:	b913      	cbnz	r3, 80147fc <_printf_float+0x1a4>
 80147f6:	6822      	ldr	r2, [r4, #0]
 80147f8:	07d2      	lsls	r2, r2, #31
 80147fa:	d501      	bpl.n	8014800 <_printf_float+0x1a8>
 80147fc:	3302      	adds	r3, #2
 80147fe:	e7f4      	b.n	80147ea <_printf_float+0x192>
 8014800:	2301      	movs	r3, #1
 8014802:	e7f2      	b.n	80147ea <_printf_float+0x192>
 8014804:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801480a:	4299      	cmp	r1, r3
 801480c:	db05      	blt.n	801481a <_printf_float+0x1c2>
 801480e:	6823      	ldr	r3, [r4, #0]
 8014810:	6121      	str	r1, [r4, #16]
 8014812:	07d8      	lsls	r0, r3, #31
 8014814:	d5ea      	bpl.n	80147ec <_printf_float+0x194>
 8014816:	1c4b      	adds	r3, r1, #1
 8014818:	e7e7      	b.n	80147ea <_printf_float+0x192>
 801481a:	2900      	cmp	r1, #0
 801481c:	bfd4      	ite	le
 801481e:	f1c1 0202 	rsble	r2, r1, #2
 8014822:	2201      	movgt	r2, #1
 8014824:	4413      	add	r3, r2
 8014826:	e7e0      	b.n	80147ea <_printf_float+0x192>
 8014828:	6823      	ldr	r3, [r4, #0]
 801482a:	055a      	lsls	r2, r3, #21
 801482c:	d407      	bmi.n	801483e <_printf_float+0x1e6>
 801482e:	6923      	ldr	r3, [r4, #16]
 8014830:	4642      	mov	r2, r8
 8014832:	4631      	mov	r1, r6
 8014834:	4628      	mov	r0, r5
 8014836:	47b8      	blx	r7
 8014838:	3001      	adds	r0, #1
 801483a:	d12b      	bne.n	8014894 <_printf_float+0x23c>
 801483c:	e767      	b.n	801470e <_printf_float+0xb6>
 801483e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014842:	f240 80dd 	bls.w	8014a00 <_printf_float+0x3a8>
 8014846:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801484a:	2200      	movs	r2, #0
 801484c:	2300      	movs	r3, #0
 801484e:	f7ec f9bb 	bl	8000bc8 <__aeabi_dcmpeq>
 8014852:	2800      	cmp	r0, #0
 8014854:	d033      	beq.n	80148be <_printf_float+0x266>
 8014856:	4a37      	ldr	r2, [pc, #220]	@ (8014934 <_printf_float+0x2dc>)
 8014858:	2301      	movs	r3, #1
 801485a:	4631      	mov	r1, r6
 801485c:	4628      	mov	r0, r5
 801485e:	47b8      	blx	r7
 8014860:	3001      	adds	r0, #1
 8014862:	f43f af54 	beq.w	801470e <_printf_float+0xb6>
 8014866:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801486a:	4543      	cmp	r3, r8
 801486c:	db02      	blt.n	8014874 <_printf_float+0x21c>
 801486e:	6823      	ldr	r3, [r4, #0]
 8014870:	07d8      	lsls	r0, r3, #31
 8014872:	d50f      	bpl.n	8014894 <_printf_float+0x23c>
 8014874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014878:	4631      	mov	r1, r6
 801487a:	4628      	mov	r0, r5
 801487c:	47b8      	blx	r7
 801487e:	3001      	adds	r0, #1
 8014880:	f43f af45 	beq.w	801470e <_printf_float+0xb6>
 8014884:	f04f 0900 	mov.w	r9, #0
 8014888:	f108 38ff 	add.w	r8, r8, #4294967295
 801488c:	f104 0a1a 	add.w	sl, r4, #26
 8014890:	45c8      	cmp	r8, r9
 8014892:	dc09      	bgt.n	80148a8 <_printf_float+0x250>
 8014894:	6823      	ldr	r3, [r4, #0]
 8014896:	079b      	lsls	r3, r3, #30
 8014898:	f100 8103 	bmi.w	8014aa2 <_printf_float+0x44a>
 801489c:	68e0      	ldr	r0, [r4, #12]
 801489e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80148a0:	4298      	cmp	r0, r3
 80148a2:	bfb8      	it	lt
 80148a4:	4618      	movlt	r0, r3
 80148a6:	e734      	b.n	8014712 <_printf_float+0xba>
 80148a8:	2301      	movs	r3, #1
 80148aa:	4652      	mov	r2, sl
 80148ac:	4631      	mov	r1, r6
 80148ae:	4628      	mov	r0, r5
 80148b0:	47b8      	blx	r7
 80148b2:	3001      	adds	r0, #1
 80148b4:	f43f af2b 	beq.w	801470e <_printf_float+0xb6>
 80148b8:	f109 0901 	add.w	r9, r9, #1
 80148bc:	e7e8      	b.n	8014890 <_printf_float+0x238>
 80148be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	dc39      	bgt.n	8014938 <_printf_float+0x2e0>
 80148c4:	4a1b      	ldr	r2, [pc, #108]	@ (8014934 <_printf_float+0x2dc>)
 80148c6:	2301      	movs	r3, #1
 80148c8:	4631      	mov	r1, r6
 80148ca:	4628      	mov	r0, r5
 80148cc:	47b8      	blx	r7
 80148ce:	3001      	adds	r0, #1
 80148d0:	f43f af1d 	beq.w	801470e <_printf_float+0xb6>
 80148d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80148d8:	ea59 0303 	orrs.w	r3, r9, r3
 80148dc:	d102      	bne.n	80148e4 <_printf_float+0x28c>
 80148de:	6823      	ldr	r3, [r4, #0]
 80148e0:	07d9      	lsls	r1, r3, #31
 80148e2:	d5d7      	bpl.n	8014894 <_printf_float+0x23c>
 80148e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148e8:	4631      	mov	r1, r6
 80148ea:	4628      	mov	r0, r5
 80148ec:	47b8      	blx	r7
 80148ee:	3001      	adds	r0, #1
 80148f0:	f43f af0d 	beq.w	801470e <_printf_float+0xb6>
 80148f4:	f04f 0a00 	mov.w	sl, #0
 80148f8:	f104 0b1a 	add.w	fp, r4, #26
 80148fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148fe:	425b      	negs	r3, r3
 8014900:	4553      	cmp	r3, sl
 8014902:	dc01      	bgt.n	8014908 <_printf_float+0x2b0>
 8014904:	464b      	mov	r3, r9
 8014906:	e793      	b.n	8014830 <_printf_float+0x1d8>
 8014908:	2301      	movs	r3, #1
 801490a:	465a      	mov	r2, fp
 801490c:	4631      	mov	r1, r6
 801490e:	4628      	mov	r0, r5
 8014910:	47b8      	blx	r7
 8014912:	3001      	adds	r0, #1
 8014914:	f43f aefb 	beq.w	801470e <_printf_float+0xb6>
 8014918:	f10a 0a01 	add.w	sl, sl, #1
 801491c:	e7ee      	b.n	80148fc <_printf_float+0x2a4>
 801491e:	bf00      	nop
 8014920:	7fefffff 	.word	0x7fefffff
 8014924:	080d4ed0 	.word	0x080d4ed0
 8014928:	080d4ed4 	.word	0x080d4ed4
 801492c:	080d4ed8 	.word	0x080d4ed8
 8014930:	080d4edc 	.word	0x080d4edc
 8014934:	080d4ee0 	.word	0x080d4ee0
 8014938:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801493a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801493e:	4553      	cmp	r3, sl
 8014940:	bfa8      	it	ge
 8014942:	4653      	movge	r3, sl
 8014944:	2b00      	cmp	r3, #0
 8014946:	4699      	mov	r9, r3
 8014948:	dc36      	bgt.n	80149b8 <_printf_float+0x360>
 801494a:	f04f 0b00 	mov.w	fp, #0
 801494e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014952:	f104 021a 	add.w	r2, r4, #26
 8014956:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014958:	9306      	str	r3, [sp, #24]
 801495a:	eba3 0309 	sub.w	r3, r3, r9
 801495e:	455b      	cmp	r3, fp
 8014960:	dc31      	bgt.n	80149c6 <_printf_float+0x36e>
 8014962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014964:	459a      	cmp	sl, r3
 8014966:	dc3a      	bgt.n	80149de <_printf_float+0x386>
 8014968:	6823      	ldr	r3, [r4, #0]
 801496a:	07da      	lsls	r2, r3, #31
 801496c:	d437      	bmi.n	80149de <_printf_float+0x386>
 801496e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014970:	ebaa 0903 	sub.w	r9, sl, r3
 8014974:	9b06      	ldr	r3, [sp, #24]
 8014976:	ebaa 0303 	sub.w	r3, sl, r3
 801497a:	4599      	cmp	r9, r3
 801497c:	bfa8      	it	ge
 801497e:	4699      	movge	r9, r3
 8014980:	f1b9 0f00 	cmp.w	r9, #0
 8014984:	dc33      	bgt.n	80149ee <_printf_float+0x396>
 8014986:	f04f 0800 	mov.w	r8, #0
 801498a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801498e:	f104 0b1a 	add.w	fp, r4, #26
 8014992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014994:	ebaa 0303 	sub.w	r3, sl, r3
 8014998:	eba3 0309 	sub.w	r3, r3, r9
 801499c:	4543      	cmp	r3, r8
 801499e:	f77f af79 	ble.w	8014894 <_printf_float+0x23c>
 80149a2:	2301      	movs	r3, #1
 80149a4:	465a      	mov	r2, fp
 80149a6:	4631      	mov	r1, r6
 80149a8:	4628      	mov	r0, r5
 80149aa:	47b8      	blx	r7
 80149ac:	3001      	adds	r0, #1
 80149ae:	f43f aeae 	beq.w	801470e <_printf_float+0xb6>
 80149b2:	f108 0801 	add.w	r8, r8, #1
 80149b6:	e7ec      	b.n	8014992 <_printf_float+0x33a>
 80149b8:	4642      	mov	r2, r8
 80149ba:	4631      	mov	r1, r6
 80149bc:	4628      	mov	r0, r5
 80149be:	47b8      	blx	r7
 80149c0:	3001      	adds	r0, #1
 80149c2:	d1c2      	bne.n	801494a <_printf_float+0x2f2>
 80149c4:	e6a3      	b.n	801470e <_printf_float+0xb6>
 80149c6:	2301      	movs	r3, #1
 80149c8:	4631      	mov	r1, r6
 80149ca:	4628      	mov	r0, r5
 80149cc:	9206      	str	r2, [sp, #24]
 80149ce:	47b8      	blx	r7
 80149d0:	3001      	adds	r0, #1
 80149d2:	f43f ae9c 	beq.w	801470e <_printf_float+0xb6>
 80149d6:	9a06      	ldr	r2, [sp, #24]
 80149d8:	f10b 0b01 	add.w	fp, fp, #1
 80149dc:	e7bb      	b.n	8014956 <_printf_float+0x2fe>
 80149de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149e2:	4631      	mov	r1, r6
 80149e4:	4628      	mov	r0, r5
 80149e6:	47b8      	blx	r7
 80149e8:	3001      	adds	r0, #1
 80149ea:	d1c0      	bne.n	801496e <_printf_float+0x316>
 80149ec:	e68f      	b.n	801470e <_printf_float+0xb6>
 80149ee:	9a06      	ldr	r2, [sp, #24]
 80149f0:	464b      	mov	r3, r9
 80149f2:	4442      	add	r2, r8
 80149f4:	4631      	mov	r1, r6
 80149f6:	4628      	mov	r0, r5
 80149f8:	47b8      	blx	r7
 80149fa:	3001      	adds	r0, #1
 80149fc:	d1c3      	bne.n	8014986 <_printf_float+0x32e>
 80149fe:	e686      	b.n	801470e <_printf_float+0xb6>
 8014a00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014a04:	f1ba 0f01 	cmp.w	sl, #1
 8014a08:	dc01      	bgt.n	8014a0e <_printf_float+0x3b6>
 8014a0a:	07db      	lsls	r3, r3, #31
 8014a0c:	d536      	bpl.n	8014a7c <_printf_float+0x424>
 8014a0e:	2301      	movs	r3, #1
 8014a10:	4642      	mov	r2, r8
 8014a12:	4631      	mov	r1, r6
 8014a14:	4628      	mov	r0, r5
 8014a16:	47b8      	blx	r7
 8014a18:	3001      	adds	r0, #1
 8014a1a:	f43f ae78 	beq.w	801470e <_printf_float+0xb6>
 8014a1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a22:	4631      	mov	r1, r6
 8014a24:	4628      	mov	r0, r5
 8014a26:	47b8      	blx	r7
 8014a28:	3001      	adds	r0, #1
 8014a2a:	f43f ae70 	beq.w	801470e <_printf_float+0xb6>
 8014a2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014a32:	2200      	movs	r2, #0
 8014a34:	2300      	movs	r3, #0
 8014a36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a3a:	f7ec f8c5 	bl	8000bc8 <__aeabi_dcmpeq>
 8014a3e:	b9c0      	cbnz	r0, 8014a72 <_printf_float+0x41a>
 8014a40:	4653      	mov	r3, sl
 8014a42:	f108 0201 	add.w	r2, r8, #1
 8014a46:	4631      	mov	r1, r6
 8014a48:	4628      	mov	r0, r5
 8014a4a:	47b8      	blx	r7
 8014a4c:	3001      	adds	r0, #1
 8014a4e:	d10c      	bne.n	8014a6a <_printf_float+0x412>
 8014a50:	e65d      	b.n	801470e <_printf_float+0xb6>
 8014a52:	2301      	movs	r3, #1
 8014a54:	465a      	mov	r2, fp
 8014a56:	4631      	mov	r1, r6
 8014a58:	4628      	mov	r0, r5
 8014a5a:	47b8      	blx	r7
 8014a5c:	3001      	adds	r0, #1
 8014a5e:	f43f ae56 	beq.w	801470e <_printf_float+0xb6>
 8014a62:	f108 0801 	add.w	r8, r8, #1
 8014a66:	45d0      	cmp	r8, sl
 8014a68:	dbf3      	blt.n	8014a52 <_printf_float+0x3fa>
 8014a6a:	464b      	mov	r3, r9
 8014a6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014a70:	e6df      	b.n	8014832 <_printf_float+0x1da>
 8014a72:	f04f 0800 	mov.w	r8, #0
 8014a76:	f104 0b1a 	add.w	fp, r4, #26
 8014a7a:	e7f4      	b.n	8014a66 <_printf_float+0x40e>
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	4642      	mov	r2, r8
 8014a80:	e7e1      	b.n	8014a46 <_printf_float+0x3ee>
 8014a82:	2301      	movs	r3, #1
 8014a84:	464a      	mov	r2, r9
 8014a86:	4631      	mov	r1, r6
 8014a88:	4628      	mov	r0, r5
 8014a8a:	47b8      	blx	r7
 8014a8c:	3001      	adds	r0, #1
 8014a8e:	f43f ae3e 	beq.w	801470e <_printf_float+0xb6>
 8014a92:	f108 0801 	add.w	r8, r8, #1
 8014a96:	68e3      	ldr	r3, [r4, #12]
 8014a98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014a9a:	1a5b      	subs	r3, r3, r1
 8014a9c:	4543      	cmp	r3, r8
 8014a9e:	dcf0      	bgt.n	8014a82 <_printf_float+0x42a>
 8014aa0:	e6fc      	b.n	801489c <_printf_float+0x244>
 8014aa2:	f04f 0800 	mov.w	r8, #0
 8014aa6:	f104 0919 	add.w	r9, r4, #25
 8014aaa:	e7f4      	b.n	8014a96 <_printf_float+0x43e>

08014aac <_printf_common>:
 8014aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ab0:	4616      	mov	r6, r2
 8014ab2:	4698      	mov	r8, r3
 8014ab4:	688a      	ldr	r2, [r1, #8]
 8014ab6:	690b      	ldr	r3, [r1, #16]
 8014ab8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014abc:	4293      	cmp	r3, r2
 8014abe:	bfb8      	it	lt
 8014ac0:	4613      	movlt	r3, r2
 8014ac2:	6033      	str	r3, [r6, #0]
 8014ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014ac8:	4607      	mov	r7, r0
 8014aca:	460c      	mov	r4, r1
 8014acc:	b10a      	cbz	r2, 8014ad2 <_printf_common+0x26>
 8014ace:	3301      	adds	r3, #1
 8014ad0:	6033      	str	r3, [r6, #0]
 8014ad2:	6823      	ldr	r3, [r4, #0]
 8014ad4:	0699      	lsls	r1, r3, #26
 8014ad6:	bf42      	ittt	mi
 8014ad8:	6833      	ldrmi	r3, [r6, #0]
 8014ada:	3302      	addmi	r3, #2
 8014adc:	6033      	strmi	r3, [r6, #0]
 8014ade:	6825      	ldr	r5, [r4, #0]
 8014ae0:	f015 0506 	ands.w	r5, r5, #6
 8014ae4:	d106      	bne.n	8014af4 <_printf_common+0x48>
 8014ae6:	f104 0a19 	add.w	sl, r4, #25
 8014aea:	68e3      	ldr	r3, [r4, #12]
 8014aec:	6832      	ldr	r2, [r6, #0]
 8014aee:	1a9b      	subs	r3, r3, r2
 8014af0:	42ab      	cmp	r3, r5
 8014af2:	dc26      	bgt.n	8014b42 <_printf_common+0x96>
 8014af4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014af8:	6822      	ldr	r2, [r4, #0]
 8014afa:	3b00      	subs	r3, #0
 8014afc:	bf18      	it	ne
 8014afe:	2301      	movne	r3, #1
 8014b00:	0692      	lsls	r2, r2, #26
 8014b02:	d42b      	bmi.n	8014b5c <_printf_common+0xb0>
 8014b04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014b08:	4641      	mov	r1, r8
 8014b0a:	4638      	mov	r0, r7
 8014b0c:	47c8      	blx	r9
 8014b0e:	3001      	adds	r0, #1
 8014b10:	d01e      	beq.n	8014b50 <_printf_common+0xa4>
 8014b12:	6823      	ldr	r3, [r4, #0]
 8014b14:	6922      	ldr	r2, [r4, #16]
 8014b16:	f003 0306 	and.w	r3, r3, #6
 8014b1a:	2b04      	cmp	r3, #4
 8014b1c:	bf02      	ittt	eq
 8014b1e:	68e5      	ldreq	r5, [r4, #12]
 8014b20:	6833      	ldreq	r3, [r6, #0]
 8014b22:	1aed      	subeq	r5, r5, r3
 8014b24:	68a3      	ldr	r3, [r4, #8]
 8014b26:	bf0c      	ite	eq
 8014b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b2c:	2500      	movne	r5, #0
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	bfc4      	itt	gt
 8014b32:	1a9b      	subgt	r3, r3, r2
 8014b34:	18ed      	addgt	r5, r5, r3
 8014b36:	2600      	movs	r6, #0
 8014b38:	341a      	adds	r4, #26
 8014b3a:	42b5      	cmp	r5, r6
 8014b3c:	d11a      	bne.n	8014b74 <_printf_common+0xc8>
 8014b3e:	2000      	movs	r0, #0
 8014b40:	e008      	b.n	8014b54 <_printf_common+0xa8>
 8014b42:	2301      	movs	r3, #1
 8014b44:	4652      	mov	r2, sl
 8014b46:	4641      	mov	r1, r8
 8014b48:	4638      	mov	r0, r7
 8014b4a:	47c8      	blx	r9
 8014b4c:	3001      	adds	r0, #1
 8014b4e:	d103      	bne.n	8014b58 <_printf_common+0xac>
 8014b50:	f04f 30ff 	mov.w	r0, #4294967295
 8014b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b58:	3501      	adds	r5, #1
 8014b5a:	e7c6      	b.n	8014aea <_printf_common+0x3e>
 8014b5c:	18e1      	adds	r1, r4, r3
 8014b5e:	1c5a      	adds	r2, r3, #1
 8014b60:	2030      	movs	r0, #48	@ 0x30
 8014b62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014b66:	4422      	add	r2, r4
 8014b68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014b6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014b70:	3302      	adds	r3, #2
 8014b72:	e7c7      	b.n	8014b04 <_printf_common+0x58>
 8014b74:	2301      	movs	r3, #1
 8014b76:	4622      	mov	r2, r4
 8014b78:	4641      	mov	r1, r8
 8014b7a:	4638      	mov	r0, r7
 8014b7c:	47c8      	blx	r9
 8014b7e:	3001      	adds	r0, #1
 8014b80:	d0e6      	beq.n	8014b50 <_printf_common+0xa4>
 8014b82:	3601      	adds	r6, #1
 8014b84:	e7d9      	b.n	8014b3a <_printf_common+0x8e>
	...

08014b88 <_printf_i>:
 8014b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b8c:	7e0f      	ldrb	r7, [r1, #24]
 8014b8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014b90:	2f78      	cmp	r7, #120	@ 0x78
 8014b92:	4691      	mov	r9, r2
 8014b94:	4680      	mov	r8, r0
 8014b96:	460c      	mov	r4, r1
 8014b98:	469a      	mov	sl, r3
 8014b9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014b9e:	d807      	bhi.n	8014bb0 <_printf_i+0x28>
 8014ba0:	2f62      	cmp	r7, #98	@ 0x62
 8014ba2:	d80a      	bhi.n	8014bba <_printf_i+0x32>
 8014ba4:	2f00      	cmp	r7, #0
 8014ba6:	f000 80d2 	beq.w	8014d4e <_printf_i+0x1c6>
 8014baa:	2f58      	cmp	r7, #88	@ 0x58
 8014bac:	f000 80b9 	beq.w	8014d22 <_printf_i+0x19a>
 8014bb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014bb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014bb8:	e03a      	b.n	8014c30 <_printf_i+0xa8>
 8014bba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014bbe:	2b15      	cmp	r3, #21
 8014bc0:	d8f6      	bhi.n	8014bb0 <_printf_i+0x28>
 8014bc2:	a101      	add	r1, pc, #4	@ (adr r1, 8014bc8 <_printf_i+0x40>)
 8014bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014bc8:	08014c21 	.word	0x08014c21
 8014bcc:	08014c35 	.word	0x08014c35
 8014bd0:	08014bb1 	.word	0x08014bb1
 8014bd4:	08014bb1 	.word	0x08014bb1
 8014bd8:	08014bb1 	.word	0x08014bb1
 8014bdc:	08014bb1 	.word	0x08014bb1
 8014be0:	08014c35 	.word	0x08014c35
 8014be4:	08014bb1 	.word	0x08014bb1
 8014be8:	08014bb1 	.word	0x08014bb1
 8014bec:	08014bb1 	.word	0x08014bb1
 8014bf0:	08014bb1 	.word	0x08014bb1
 8014bf4:	08014d35 	.word	0x08014d35
 8014bf8:	08014c5f 	.word	0x08014c5f
 8014bfc:	08014cef 	.word	0x08014cef
 8014c00:	08014bb1 	.word	0x08014bb1
 8014c04:	08014bb1 	.word	0x08014bb1
 8014c08:	08014d57 	.word	0x08014d57
 8014c0c:	08014bb1 	.word	0x08014bb1
 8014c10:	08014c5f 	.word	0x08014c5f
 8014c14:	08014bb1 	.word	0x08014bb1
 8014c18:	08014bb1 	.word	0x08014bb1
 8014c1c:	08014cf7 	.word	0x08014cf7
 8014c20:	6833      	ldr	r3, [r6, #0]
 8014c22:	1d1a      	adds	r2, r3, #4
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	6032      	str	r2, [r6, #0]
 8014c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014c30:	2301      	movs	r3, #1
 8014c32:	e09d      	b.n	8014d70 <_printf_i+0x1e8>
 8014c34:	6833      	ldr	r3, [r6, #0]
 8014c36:	6820      	ldr	r0, [r4, #0]
 8014c38:	1d19      	adds	r1, r3, #4
 8014c3a:	6031      	str	r1, [r6, #0]
 8014c3c:	0606      	lsls	r6, r0, #24
 8014c3e:	d501      	bpl.n	8014c44 <_printf_i+0xbc>
 8014c40:	681d      	ldr	r5, [r3, #0]
 8014c42:	e003      	b.n	8014c4c <_printf_i+0xc4>
 8014c44:	0645      	lsls	r5, r0, #25
 8014c46:	d5fb      	bpl.n	8014c40 <_printf_i+0xb8>
 8014c48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014c4c:	2d00      	cmp	r5, #0
 8014c4e:	da03      	bge.n	8014c58 <_printf_i+0xd0>
 8014c50:	232d      	movs	r3, #45	@ 0x2d
 8014c52:	426d      	negs	r5, r5
 8014c54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014c58:	4859      	ldr	r0, [pc, #356]	@ (8014dc0 <_printf_i+0x238>)
 8014c5a:	230a      	movs	r3, #10
 8014c5c:	e011      	b.n	8014c82 <_printf_i+0xfa>
 8014c5e:	6821      	ldr	r1, [r4, #0]
 8014c60:	6833      	ldr	r3, [r6, #0]
 8014c62:	0608      	lsls	r0, r1, #24
 8014c64:	f853 5b04 	ldr.w	r5, [r3], #4
 8014c68:	d402      	bmi.n	8014c70 <_printf_i+0xe8>
 8014c6a:	0649      	lsls	r1, r1, #25
 8014c6c:	bf48      	it	mi
 8014c6e:	b2ad      	uxthmi	r5, r5
 8014c70:	2f6f      	cmp	r7, #111	@ 0x6f
 8014c72:	4853      	ldr	r0, [pc, #332]	@ (8014dc0 <_printf_i+0x238>)
 8014c74:	6033      	str	r3, [r6, #0]
 8014c76:	bf14      	ite	ne
 8014c78:	230a      	movne	r3, #10
 8014c7a:	2308      	moveq	r3, #8
 8014c7c:	2100      	movs	r1, #0
 8014c7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014c82:	6866      	ldr	r6, [r4, #4]
 8014c84:	60a6      	str	r6, [r4, #8]
 8014c86:	2e00      	cmp	r6, #0
 8014c88:	bfa2      	ittt	ge
 8014c8a:	6821      	ldrge	r1, [r4, #0]
 8014c8c:	f021 0104 	bicge.w	r1, r1, #4
 8014c90:	6021      	strge	r1, [r4, #0]
 8014c92:	b90d      	cbnz	r5, 8014c98 <_printf_i+0x110>
 8014c94:	2e00      	cmp	r6, #0
 8014c96:	d04b      	beq.n	8014d30 <_printf_i+0x1a8>
 8014c98:	4616      	mov	r6, r2
 8014c9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8014c9e:	fb03 5711 	mls	r7, r3, r1, r5
 8014ca2:	5dc7      	ldrb	r7, [r0, r7]
 8014ca4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014ca8:	462f      	mov	r7, r5
 8014caa:	42bb      	cmp	r3, r7
 8014cac:	460d      	mov	r5, r1
 8014cae:	d9f4      	bls.n	8014c9a <_printf_i+0x112>
 8014cb0:	2b08      	cmp	r3, #8
 8014cb2:	d10b      	bne.n	8014ccc <_printf_i+0x144>
 8014cb4:	6823      	ldr	r3, [r4, #0]
 8014cb6:	07df      	lsls	r7, r3, #31
 8014cb8:	d508      	bpl.n	8014ccc <_printf_i+0x144>
 8014cba:	6923      	ldr	r3, [r4, #16]
 8014cbc:	6861      	ldr	r1, [r4, #4]
 8014cbe:	4299      	cmp	r1, r3
 8014cc0:	bfde      	ittt	le
 8014cc2:	2330      	movle	r3, #48	@ 0x30
 8014cc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014cc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014ccc:	1b92      	subs	r2, r2, r6
 8014cce:	6122      	str	r2, [r4, #16]
 8014cd0:	f8cd a000 	str.w	sl, [sp]
 8014cd4:	464b      	mov	r3, r9
 8014cd6:	aa03      	add	r2, sp, #12
 8014cd8:	4621      	mov	r1, r4
 8014cda:	4640      	mov	r0, r8
 8014cdc:	f7ff fee6 	bl	8014aac <_printf_common>
 8014ce0:	3001      	adds	r0, #1
 8014ce2:	d14a      	bne.n	8014d7a <_printf_i+0x1f2>
 8014ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ce8:	b004      	add	sp, #16
 8014cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cee:	6823      	ldr	r3, [r4, #0]
 8014cf0:	f043 0320 	orr.w	r3, r3, #32
 8014cf4:	6023      	str	r3, [r4, #0]
 8014cf6:	4833      	ldr	r0, [pc, #204]	@ (8014dc4 <_printf_i+0x23c>)
 8014cf8:	2778      	movs	r7, #120	@ 0x78
 8014cfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014cfe:	6823      	ldr	r3, [r4, #0]
 8014d00:	6831      	ldr	r1, [r6, #0]
 8014d02:	061f      	lsls	r7, r3, #24
 8014d04:	f851 5b04 	ldr.w	r5, [r1], #4
 8014d08:	d402      	bmi.n	8014d10 <_printf_i+0x188>
 8014d0a:	065f      	lsls	r7, r3, #25
 8014d0c:	bf48      	it	mi
 8014d0e:	b2ad      	uxthmi	r5, r5
 8014d10:	6031      	str	r1, [r6, #0]
 8014d12:	07d9      	lsls	r1, r3, #31
 8014d14:	bf44      	itt	mi
 8014d16:	f043 0320 	orrmi.w	r3, r3, #32
 8014d1a:	6023      	strmi	r3, [r4, #0]
 8014d1c:	b11d      	cbz	r5, 8014d26 <_printf_i+0x19e>
 8014d1e:	2310      	movs	r3, #16
 8014d20:	e7ac      	b.n	8014c7c <_printf_i+0xf4>
 8014d22:	4827      	ldr	r0, [pc, #156]	@ (8014dc0 <_printf_i+0x238>)
 8014d24:	e7e9      	b.n	8014cfa <_printf_i+0x172>
 8014d26:	6823      	ldr	r3, [r4, #0]
 8014d28:	f023 0320 	bic.w	r3, r3, #32
 8014d2c:	6023      	str	r3, [r4, #0]
 8014d2e:	e7f6      	b.n	8014d1e <_printf_i+0x196>
 8014d30:	4616      	mov	r6, r2
 8014d32:	e7bd      	b.n	8014cb0 <_printf_i+0x128>
 8014d34:	6833      	ldr	r3, [r6, #0]
 8014d36:	6825      	ldr	r5, [r4, #0]
 8014d38:	6961      	ldr	r1, [r4, #20]
 8014d3a:	1d18      	adds	r0, r3, #4
 8014d3c:	6030      	str	r0, [r6, #0]
 8014d3e:	062e      	lsls	r6, r5, #24
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	d501      	bpl.n	8014d48 <_printf_i+0x1c0>
 8014d44:	6019      	str	r1, [r3, #0]
 8014d46:	e002      	b.n	8014d4e <_printf_i+0x1c6>
 8014d48:	0668      	lsls	r0, r5, #25
 8014d4a:	d5fb      	bpl.n	8014d44 <_printf_i+0x1bc>
 8014d4c:	8019      	strh	r1, [r3, #0]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	6123      	str	r3, [r4, #16]
 8014d52:	4616      	mov	r6, r2
 8014d54:	e7bc      	b.n	8014cd0 <_printf_i+0x148>
 8014d56:	6833      	ldr	r3, [r6, #0]
 8014d58:	1d1a      	adds	r2, r3, #4
 8014d5a:	6032      	str	r2, [r6, #0]
 8014d5c:	681e      	ldr	r6, [r3, #0]
 8014d5e:	6862      	ldr	r2, [r4, #4]
 8014d60:	2100      	movs	r1, #0
 8014d62:	4630      	mov	r0, r6
 8014d64:	f7eb fab4 	bl	80002d0 <memchr>
 8014d68:	b108      	cbz	r0, 8014d6e <_printf_i+0x1e6>
 8014d6a:	1b80      	subs	r0, r0, r6
 8014d6c:	6060      	str	r0, [r4, #4]
 8014d6e:	6863      	ldr	r3, [r4, #4]
 8014d70:	6123      	str	r3, [r4, #16]
 8014d72:	2300      	movs	r3, #0
 8014d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014d78:	e7aa      	b.n	8014cd0 <_printf_i+0x148>
 8014d7a:	6923      	ldr	r3, [r4, #16]
 8014d7c:	4632      	mov	r2, r6
 8014d7e:	4649      	mov	r1, r9
 8014d80:	4640      	mov	r0, r8
 8014d82:	47d0      	blx	sl
 8014d84:	3001      	adds	r0, #1
 8014d86:	d0ad      	beq.n	8014ce4 <_printf_i+0x15c>
 8014d88:	6823      	ldr	r3, [r4, #0]
 8014d8a:	079b      	lsls	r3, r3, #30
 8014d8c:	d413      	bmi.n	8014db6 <_printf_i+0x22e>
 8014d8e:	68e0      	ldr	r0, [r4, #12]
 8014d90:	9b03      	ldr	r3, [sp, #12]
 8014d92:	4298      	cmp	r0, r3
 8014d94:	bfb8      	it	lt
 8014d96:	4618      	movlt	r0, r3
 8014d98:	e7a6      	b.n	8014ce8 <_printf_i+0x160>
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	4632      	mov	r2, r6
 8014d9e:	4649      	mov	r1, r9
 8014da0:	4640      	mov	r0, r8
 8014da2:	47d0      	blx	sl
 8014da4:	3001      	adds	r0, #1
 8014da6:	d09d      	beq.n	8014ce4 <_printf_i+0x15c>
 8014da8:	3501      	adds	r5, #1
 8014daa:	68e3      	ldr	r3, [r4, #12]
 8014dac:	9903      	ldr	r1, [sp, #12]
 8014dae:	1a5b      	subs	r3, r3, r1
 8014db0:	42ab      	cmp	r3, r5
 8014db2:	dcf2      	bgt.n	8014d9a <_printf_i+0x212>
 8014db4:	e7eb      	b.n	8014d8e <_printf_i+0x206>
 8014db6:	2500      	movs	r5, #0
 8014db8:	f104 0619 	add.w	r6, r4, #25
 8014dbc:	e7f5      	b.n	8014daa <_printf_i+0x222>
 8014dbe:	bf00      	nop
 8014dc0:	080d4ee2 	.word	0x080d4ee2
 8014dc4:	080d4ef3 	.word	0x080d4ef3

08014dc8 <std>:
 8014dc8:	2300      	movs	r3, #0
 8014dca:	b510      	push	{r4, lr}
 8014dcc:	4604      	mov	r4, r0
 8014dce:	e9c0 3300 	strd	r3, r3, [r0]
 8014dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014dd6:	6083      	str	r3, [r0, #8]
 8014dd8:	8181      	strh	r1, [r0, #12]
 8014dda:	6643      	str	r3, [r0, #100]	@ 0x64
 8014ddc:	81c2      	strh	r2, [r0, #14]
 8014dde:	6183      	str	r3, [r0, #24]
 8014de0:	4619      	mov	r1, r3
 8014de2:	2208      	movs	r2, #8
 8014de4:	305c      	adds	r0, #92	@ 0x5c
 8014de6:	f000 f9f9 	bl	80151dc <memset>
 8014dea:	4b0d      	ldr	r3, [pc, #52]	@ (8014e20 <std+0x58>)
 8014dec:	6263      	str	r3, [r4, #36]	@ 0x24
 8014dee:	4b0d      	ldr	r3, [pc, #52]	@ (8014e24 <std+0x5c>)
 8014df0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014df2:	4b0d      	ldr	r3, [pc, #52]	@ (8014e28 <std+0x60>)
 8014df4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014df6:	4b0d      	ldr	r3, [pc, #52]	@ (8014e2c <std+0x64>)
 8014df8:	6323      	str	r3, [r4, #48]	@ 0x30
 8014dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8014e30 <std+0x68>)
 8014dfc:	6224      	str	r4, [r4, #32]
 8014dfe:	429c      	cmp	r4, r3
 8014e00:	d006      	beq.n	8014e10 <std+0x48>
 8014e02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014e06:	4294      	cmp	r4, r2
 8014e08:	d002      	beq.n	8014e10 <std+0x48>
 8014e0a:	33d0      	adds	r3, #208	@ 0xd0
 8014e0c:	429c      	cmp	r4, r3
 8014e0e:	d105      	bne.n	8014e1c <std+0x54>
 8014e10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e18:	f000 ba6c 	b.w	80152f4 <__retarget_lock_init_recursive>
 8014e1c:	bd10      	pop	{r4, pc}
 8014e1e:	bf00      	nop
 8014e20:	0801502d 	.word	0x0801502d
 8014e24:	0801504f 	.word	0x0801504f
 8014e28:	08015087 	.word	0x08015087
 8014e2c:	080150ab 	.word	0x080150ab
 8014e30:	20035e1c 	.word	0x20035e1c

08014e34 <stdio_exit_handler>:
 8014e34:	4a02      	ldr	r2, [pc, #8]	@ (8014e40 <stdio_exit_handler+0xc>)
 8014e36:	4903      	ldr	r1, [pc, #12]	@ (8014e44 <stdio_exit_handler+0x10>)
 8014e38:	4803      	ldr	r0, [pc, #12]	@ (8014e48 <stdio_exit_handler+0x14>)
 8014e3a:	f000 b869 	b.w	8014f10 <_fwalk_sglue>
 8014e3e:	bf00      	nop
 8014e40:	20000818 	.word	0x20000818
 8014e44:	08016ad5 	.word	0x08016ad5
 8014e48:	20000828 	.word	0x20000828

08014e4c <cleanup_stdio>:
 8014e4c:	6841      	ldr	r1, [r0, #4]
 8014e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8014e80 <cleanup_stdio+0x34>)
 8014e50:	4299      	cmp	r1, r3
 8014e52:	b510      	push	{r4, lr}
 8014e54:	4604      	mov	r4, r0
 8014e56:	d001      	beq.n	8014e5c <cleanup_stdio+0x10>
 8014e58:	f001 fe3c 	bl	8016ad4 <_fflush_r>
 8014e5c:	68a1      	ldr	r1, [r4, #8]
 8014e5e:	4b09      	ldr	r3, [pc, #36]	@ (8014e84 <cleanup_stdio+0x38>)
 8014e60:	4299      	cmp	r1, r3
 8014e62:	d002      	beq.n	8014e6a <cleanup_stdio+0x1e>
 8014e64:	4620      	mov	r0, r4
 8014e66:	f001 fe35 	bl	8016ad4 <_fflush_r>
 8014e6a:	68e1      	ldr	r1, [r4, #12]
 8014e6c:	4b06      	ldr	r3, [pc, #24]	@ (8014e88 <cleanup_stdio+0x3c>)
 8014e6e:	4299      	cmp	r1, r3
 8014e70:	d004      	beq.n	8014e7c <cleanup_stdio+0x30>
 8014e72:	4620      	mov	r0, r4
 8014e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e78:	f001 be2c 	b.w	8016ad4 <_fflush_r>
 8014e7c:	bd10      	pop	{r4, pc}
 8014e7e:	bf00      	nop
 8014e80:	20035e1c 	.word	0x20035e1c
 8014e84:	20035e84 	.word	0x20035e84
 8014e88:	20035eec 	.word	0x20035eec

08014e8c <global_stdio_init.part.0>:
 8014e8c:	b510      	push	{r4, lr}
 8014e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8014ebc <global_stdio_init.part.0+0x30>)
 8014e90:	4c0b      	ldr	r4, [pc, #44]	@ (8014ec0 <global_stdio_init.part.0+0x34>)
 8014e92:	4a0c      	ldr	r2, [pc, #48]	@ (8014ec4 <global_stdio_init.part.0+0x38>)
 8014e94:	601a      	str	r2, [r3, #0]
 8014e96:	4620      	mov	r0, r4
 8014e98:	2200      	movs	r2, #0
 8014e9a:	2104      	movs	r1, #4
 8014e9c:	f7ff ff94 	bl	8014dc8 <std>
 8014ea0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	2109      	movs	r1, #9
 8014ea8:	f7ff ff8e 	bl	8014dc8 <std>
 8014eac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014eb0:	2202      	movs	r2, #2
 8014eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eb6:	2112      	movs	r1, #18
 8014eb8:	f7ff bf86 	b.w	8014dc8 <std>
 8014ebc:	20035f54 	.word	0x20035f54
 8014ec0:	20035e1c 	.word	0x20035e1c
 8014ec4:	08014e35 	.word	0x08014e35

08014ec8 <__sfp_lock_acquire>:
 8014ec8:	4801      	ldr	r0, [pc, #4]	@ (8014ed0 <__sfp_lock_acquire+0x8>)
 8014eca:	f000 ba14 	b.w	80152f6 <__retarget_lock_acquire_recursive>
 8014ece:	bf00      	nop
 8014ed0:	20035f5d 	.word	0x20035f5d

08014ed4 <__sfp_lock_release>:
 8014ed4:	4801      	ldr	r0, [pc, #4]	@ (8014edc <__sfp_lock_release+0x8>)
 8014ed6:	f000 ba0f 	b.w	80152f8 <__retarget_lock_release_recursive>
 8014eda:	bf00      	nop
 8014edc:	20035f5d 	.word	0x20035f5d

08014ee0 <__sinit>:
 8014ee0:	b510      	push	{r4, lr}
 8014ee2:	4604      	mov	r4, r0
 8014ee4:	f7ff fff0 	bl	8014ec8 <__sfp_lock_acquire>
 8014ee8:	6a23      	ldr	r3, [r4, #32]
 8014eea:	b11b      	cbz	r3, 8014ef4 <__sinit+0x14>
 8014eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ef0:	f7ff bff0 	b.w	8014ed4 <__sfp_lock_release>
 8014ef4:	4b04      	ldr	r3, [pc, #16]	@ (8014f08 <__sinit+0x28>)
 8014ef6:	6223      	str	r3, [r4, #32]
 8014ef8:	4b04      	ldr	r3, [pc, #16]	@ (8014f0c <__sinit+0x2c>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d1f5      	bne.n	8014eec <__sinit+0xc>
 8014f00:	f7ff ffc4 	bl	8014e8c <global_stdio_init.part.0>
 8014f04:	e7f2      	b.n	8014eec <__sinit+0xc>
 8014f06:	bf00      	nop
 8014f08:	08014e4d 	.word	0x08014e4d
 8014f0c:	20035f54 	.word	0x20035f54

08014f10 <_fwalk_sglue>:
 8014f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f14:	4607      	mov	r7, r0
 8014f16:	4688      	mov	r8, r1
 8014f18:	4614      	mov	r4, r2
 8014f1a:	2600      	movs	r6, #0
 8014f1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f20:	f1b9 0901 	subs.w	r9, r9, #1
 8014f24:	d505      	bpl.n	8014f32 <_fwalk_sglue+0x22>
 8014f26:	6824      	ldr	r4, [r4, #0]
 8014f28:	2c00      	cmp	r4, #0
 8014f2a:	d1f7      	bne.n	8014f1c <_fwalk_sglue+0xc>
 8014f2c:	4630      	mov	r0, r6
 8014f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f32:	89ab      	ldrh	r3, [r5, #12]
 8014f34:	2b01      	cmp	r3, #1
 8014f36:	d907      	bls.n	8014f48 <_fwalk_sglue+0x38>
 8014f38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	d003      	beq.n	8014f48 <_fwalk_sglue+0x38>
 8014f40:	4629      	mov	r1, r5
 8014f42:	4638      	mov	r0, r7
 8014f44:	47c0      	blx	r8
 8014f46:	4306      	orrs	r6, r0
 8014f48:	3568      	adds	r5, #104	@ 0x68
 8014f4a:	e7e9      	b.n	8014f20 <_fwalk_sglue+0x10>

08014f4c <iprintf>:
 8014f4c:	b40f      	push	{r0, r1, r2, r3}
 8014f4e:	b507      	push	{r0, r1, r2, lr}
 8014f50:	4906      	ldr	r1, [pc, #24]	@ (8014f6c <iprintf+0x20>)
 8014f52:	ab04      	add	r3, sp, #16
 8014f54:	6808      	ldr	r0, [r1, #0]
 8014f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f5a:	6881      	ldr	r1, [r0, #8]
 8014f5c:	9301      	str	r3, [sp, #4]
 8014f5e:	f001 fc1d 	bl	801679c <_vfiprintf_r>
 8014f62:	b003      	add	sp, #12
 8014f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f68:	b004      	add	sp, #16
 8014f6a:	4770      	bx	lr
 8014f6c:	20000824 	.word	0x20000824

08014f70 <_puts_r>:
 8014f70:	6a03      	ldr	r3, [r0, #32]
 8014f72:	b570      	push	{r4, r5, r6, lr}
 8014f74:	6884      	ldr	r4, [r0, #8]
 8014f76:	4605      	mov	r5, r0
 8014f78:	460e      	mov	r6, r1
 8014f7a:	b90b      	cbnz	r3, 8014f80 <_puts_r+0x10>
 8014f7c:	f7ff ffb0 	bl	8014ee0 <__sinit>
 8014f80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f82:	07db      	lsls	r3, r3, #31
 8014f84:	d405      	bmi.n	8014f92 <_puts_r+0x22>
 8014f86:	89a3      	ldrh	r3, [r4, #12]
 8014f88:	0598      	lsls	r0, r3, #22
 8014f8a:	d402      	bmi.n	8014f92 <_puts_r+0x22>
 8014f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f8e:	f000 f9b2 	bl	80152f6 <__retarget_lock_acquire_recursive>
 8014f92:	89a3      	ldrh	r3, [r4, #12]
 8014f94:	0719      	lsls	r1, r3, #28
 8014f96:	d502      	bpl.n	8014f9e <_puts_r+0x2e>
 8014f98:	6923      	ldr	r3, [r4, #16]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d135      	bne.n	801500a <_puts_r+0x9a>
 8014f9e:	4621      	mov	r1, r4
 8014fa0:	4628      	mov	r0, r5
 8014fa2:	f000 f8c5 	bl	8015130 <__swsetup_r>
 8014fa6:	b380      	cbz	r0, 801500a <_puts_r+0x9a>
 8014fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8014fac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014fae:	07da      	lsls	r2, r3, #31
 8014fb0:	d405      	bmi.n	8014fbe <_puts_r+0x4e>
 8014fb2:	89a3      	ldrh	r3, [r4, #12]
 8014fb4:	059b      	lsls	r3, r3, #22
 8014fb6:	d402      	bmi.n	8014fbe <_puts_r+0x4e>
 8014fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014fba:	f000 f99d 	bl	80152f8 <__retarget_lock_release_recursive>
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	bd70      	pop	{r4, r5, r6, pc}
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	da04      	bge.n	8014fd0 <_puts_r+0x60>
 8014fc6:	69a2      	ldr	r2, [r4, #24]
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	dc17      	bgt.n	8014ffc <_puts_r+0x8c>
 8014fcc:	290a      	cmp	r1, #10
 8014fce:	d015      	beq.n	8014ffc <_puts_r+0x8c>
 8014fd0:	6823      	ldr	r3, [r4, #0]
 8014fd2:	1c5a      	adds	r2, r3, #1
 8014fd4:	6022      	str	r2, [r4, #0]
 8014fd6:	7019      	strb	r1, [r3, #0]
 8014fd8:	68a3      	ldr	r3, [r4, #8]
 8014fda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014fde:	3b01      	subs	r3, #1
 8014fe0:	60a3      	str	r3, [r4, #8]
 8014fe2:	2900      	cmp	r1, #0
 8014fe4:	d1ed      	bne.n	8014fc2 <_puts_r+0x52>
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	da11      	bge.n	801500e <_puts_r+0x9e>
 8014fea:	4622      	mov	r2, r4
 8014fec:	210a      	movs	r1, #10
 8014fee:	4628      	mov	r0, r5
 8014ff0:	f000 f85f 	bl	80150b2 <__swbuf_r>
 8014ff4:	3001      	adds	r0, #1
 8014ff6:	d0d7      	beq.n	8014fa8 <_puts_r+0x38>
 8014ff8:	250a      	movs	r5, #10
 8014ffa:	e7d7      	b.n	8014fac <_puts_r+0x3c>
 8014ffc:	4622      	mov	r2, r4
 8014ffe:	4628      	mov	r0, r5
 8015000:	f000 f857 	bl	80150b2 <__swbuf_r>
 8015004:	3001      	adds	r0, #1
 8015006:	d1e7      	bne.n	8014fd8 <_puts_r+0x68>
 8015008:	e7ce      	b.n	8014fa8 <_puts_r+0x38>
 801500a:	3e01      	subs	r6, #1
 801500c:	e7e4      	b.n	8014fd8 <_puts_r+0x68>
 801500e:	6823      	ldr	r3, [r4, #0]
 8015010:	1c5a      	adds	r2, r3, #1
 8015012:	6022      	str	r2, [r4, #0]
 8015014:	220a      	movs	r2, #10
 8015016:	701a      	strb	r2, [r3, #0]
 8015018:	e7ee      	b.n	8014ff8 <_puts_r+0x88>
	...

0801501c <puts>:
 801501c:	4b02      	ldr	r3, [pc, #8]	@ (8015028 <puts+0xc>)
 801501e:	4601      	mov	r1, r0
 8015020:	6818      	ldr	r0, [r3, #0]
 8015022:	f7ff bfa5 	b.w	8014f70 <_puts_r>
 8015026:	bf00      	nop
 8015028:	20000824 	.word	0x20000824

0801502c <__sread>:
 801502c:	b510      	push	{r4, lr}
 801502e:	460c      	mov	r4, r1
 8015030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015034:	f000 f900 	bl	8015238 <_read_r>
 8015038:	2800      	cmp	r0, #0
 801503a:	bfab      	itete	ge
 801503c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801503e:	89a3      	ldrhlt	r3, [r4, #12]
 8015040:	181b      	addge	r3, r3, r0
 8015042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015046:	bfac      	ite	ge
 8015048:	6563      	strge	r3, [r4, #84]	@ 0x54
 801504a:	81a3      	strhlt	r3, [r4, #12]
 801504c:	bd10      	pop	{r4, pc}

0801504e <__swrite>:
 801504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015052:	461f      	mov	r7, r3
 8015054:	898b      	ldrh	r3, [r1, #12]
 8015056:	05db      	lsls	r3, r3, #23
 8015058:	4605      	mov	r5, r0
 801505a:	460c      	mov	r4, r1
 801505c:	4616      	mov	r6, r2
 801505e:	d505      	bpl.n	801506c <__swrite+0x1e>
 8015060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015064:	2302      	movs	r3, #2
 8015066:	2200      	movs	r2, #0
 8015068:	f000 f8d4 	bl	8015214 <_lseek_r>
 801506c:	89a3      	ldrh	r3, [r4, #12]
 801506e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015076:	81a3      	strh	r3, [r4, #12]
 8015078:	4632      	mov	r2, r6
 801507a:	463b      	mov	r3, r7
 801507c:	4628      	mov	r0, r5
 801507e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015082:	f000 b8fb 	b.w	801527c <_write_r>

08015086 <__sseek>:
 8015086:	b510      	push	{r4, lr}
 8015088:	460c      	mov	r4, r1
 801508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801508e:	f000 f8c1 	bl	8015214 <_lseek_r>
 8015092:	1c43      	adds	r3, r0, #1
 8015094:	89a3      	ldrh	r3, [r4, #12]
 8015096:	bf15      	itete	ne
 8015098:	6560      	strne	r0, [r4, #84]	@ 0x54
 801509a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801509e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80150a2:	81a3      	strheq	r3, [r4, #12]
 80150a4:	bf18      	it	ne
 80150a6:	81a3      	strhne	r3, [r4, #12]
 80150a8:	bd10      	pop	{r4, pc}

080150aa <__sclose>:
 80150aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ae:	f000 b8a1 	b.w	80151f4 <_close_r>

080150b2 <__swbuf_r>:
 80150b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150b4:	460e      	mov	r6, r1
 80150b6:	4614      	mov	r4, r2
 80150b8:	4605      	mov	r5, r0
 80150ba:	b118      	cbz	r0, 80150c4 <__swbuf_r+0x12>
 80150bc:	6a03      	ldr	r3, [r0, #32]
 80150be:	b90b      	cbnz	r3, 80150c4 <__swbuf_r+0x12>
 80150c0:	f7ff ff0e 	bl	8014ee0 <__sinit>
 80150c4:	69a3      	ldr	r3, [r4, #24]
 80150c6:	60a3      	str	r3, [r4, #8]
 80150c8:	89a3      	ldrh	r3, [r4, #12]
 80150ca:	071a      	lsls	r2, r3, #28
 80150cc:	d501      	bpl.n	80150d2 <__swbuf_r+0x20>
 80150ce:	6923      	ldr	r3, [r4, #16]
 80150d0:	b943      	cbnz	r3, 80150e4 <__swbuf_r+0x32>
 80150d2:	4621      	mov	r1, r4
 80150d4:	4628      	mov	r0, r5
 80150d6:	f000 f82b 	bl	8015130 <__swsetup_r>
 80150da:	b118      	cbz	r0, 80150e4 <__swbuf_r+0x32>
 80150dc:	f04f 37ff 	mov.w	r7, #4294967295
 80150e0:	4638      	mov	r0, r7
 80150e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150e4:	6823      	ldr	r3, [r4, #0]
 80150e6:	6922      	ldr	r2, [r4, #16]
 80150e8:	1a98      	subs	r0, r3, r2
 80150ea:	6963      	ldr	r3, [r4, #20]
 80150ec:	b2f6      	uxtb	r6, r6
 80150ee:	4283      	cmp	r3, r0
 80150f0:	4637      	mov	r7, r6
 80150f2:	dc05      	bgt.n	8015100 <__swbuf_r+0x4e>
 80150f4:	4621      	mov	r1, r4
 80150f6:	4628      	mov	r0, r5
 80150f8:	f001 fcec 	bl	8016ad4 <_fflush_r>
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d1ed      	bne.n	80150dc <__swbuf_r+0x2a>
 8015100:	68a3      	ldr	r3, [r4, #8]
 8015102:	3b01      	subs	r3, #1
 8015104:	60a3      	str	r3, [r4, #8]
 8015106:	6823      	ldr	r3, [r4, #0]
 8015108:	1c5a      	adds	r2, r3, #1
 801510a:	6022      	str	r2, [r4, #0]
 801510c:	701e      	strb	r6, [r3, #0]
 801510e:	6962      	ldr	r2, [r4, #20]
 8015110:	1c43      	adds	r3, r0, #1
 8015112:	429a      	cmp	r2, r3
 8015114:	d004      	beq.n	8015120 <__swbuf_r+0x6e>
 8015116:	89a3      	ldrh	r3, [r4, #12]
 8015118:	07db      	lsls	r3, r3, #31
 801511a:	d5e1      	bpl.n	80150e0 <__swbuf_r+0x2e>
 801511c:	2e0a      	cmp	r6, #10
 801511e:	d1df      	bne.n	80150e0 <__swbuf_r+0x2e>
 8015120:	4621      	mov	r1, r4
 8015122:	4628      	mov	r0, r5
 8015124:	f001 fcd6 	bl	8016ad4 <_fflush_r>
 8015128:	2800      	cmp	r0, #0
 801512a:	d0d9      	beq.n	80150e0 <__swbuf_r+0x2e>
 801512c:	e7d6      	b.n	80150dc <__swbuf_r+0x2a>
	...

08015130 <__swsetup_r>:
 8015130:	b538      	push	{r3, r4, r5, lr}
 8015132:	4b29      	ldr	r3, [pc, #164]	@ (80151d8 <__swsetup_r+0xa8>)
 8015134:	4605      	mov	r5, r0
 8015136:	6818      	ldr	r0, [r3, #0]
 8015138:	460c      	mov	r4, r1
 801513a:	b118      	cbz	r0, 8015144 <__swsetup_r+0x14>
 801513c:	6a03      	ldr	r3, [r0, #32]
 801513e:	b90b      	cbnz	r3, 8015144 <__swsetup_r+0x14>
 8015140:	f7ff fece 	bl	8014ee0 <__sinit>
 8015144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015148:	0719      	lsls	r1, r3, #28
 801514a:	d422      	bmi.n	8015192 <__swsetup_r+0x62>
 801514c:	06da      	lsls	r2, r3, #27
 801514e:	d407      	bmi.n	8015160 <__swsetup_r+0x30>
 8015150:	2209      	movs	r2, #9
 8015152:	602a      	str	r2, [r5, #0]
 8015154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015158:	81a3      	strh	r3, [r4, #12]
 801515a:	f04f 30ff 	mov.w	r0, #4294967295
 801515e:	e033      	b.n	80151c8 <__swsetup_r+0x98>
 8015160:	0758      	lsls	r0, r3, #29
 8015162:	d512      	bpl.n	801518a <__swsetup_r+0x5a>
 8015164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015166:	b141      	cbz	r1, 801517a <__swsetup_r+0x4a>
 8015168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801516c:	4299      	cmp	r1, r3
 801516e:	d002      	beq.n	8015176 <__swsetup_r+0x46>
 8015170:	4628      	mov	r0, r5
 8015172:	f000 ff1d 	bl	8015fb0 <_free_r>
 8015176:	2300      	movs	r3, #0
 8015178:	6363      	str	r3, [r4, #52]	@ 0x34
 801517a:	89a3      	ldrh	r3, [r4, #12]
 801517c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015180:	81a3      	strh	r3, [r4, #12]
 8015182:	2300      	movs	r3, #0
 8015184:	6063      	str	r3, [r4, #4]
 8015186:	6923      	ldr	r3, [r4, #16]
 8015188:	6023      	str	r3, [r4, #0]
 801518a:	89a3      	ldrh	r3, [r4, #12]
 801518c:	f043 0308 	orr.w	r3, r3, #8
 8015190:	81a3      	strh	r3, [r4, #12]
 8015192:	6923      	ldr	r3, [r4, #16]
 8015194:	b94b      	cbnz	r3, 80151aa <__swsetup_r+0x7a>
 8015196:	89a3      	ldrh	r3, [r4, #12]
 8015198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801519c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80151a0:	d003      	beq.n	80151aa <__swsetup_r+0x7a>
 80151a2:	4621      	mov	r1, r4
 80151a4:	4628      	mov	r0, r5
 80151a6:	f001 fce3 	bl	8016b70 <__smakebuf_r>
 80151aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151ae:	f013 0201 	ands.w	r2, r3, #1
 80151b2:	d00a      	beq.n	80151ca <__swsetup_r+0x9a>
 80151b4:	2200      	movs	r2, #0
 80151b6:	60a2      	str	r2, [r4, #8]
 80151b8:	6962      	ldr	r2, [r4, #20]
 80151ba:	4252      	negs	r2, r2
 80151bc:	61a2      	str	r2, [r4, #24]
 80151be:	6922      	ldr	r2, [r4, #16]
 80151c0:	b942      	cbnz	r2, 80151d4 <__swsetup_r+0xa4>
 80151c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80151c6:	d1c5      	bne.n	8015154 <__swsetup_r+0x24>
 80151c8:	bd38      	pop	{r3, r4, r5, pc}
 80151ca:	0799      	lsls	r1, r3, #30
 80151cc:	bf58      	it	pl
 80151ce:	6962      	ldrpl	r2, [r4, #20]
 80151d0:	60a2      	str	r2, [r4, #8]
 80151d2:	e7f4      	b.n	80151be <__swsetup_r+0x8e>
 80151d4:	2000      	movs	r0, #0
 80151d6:	e7f7      	b.n	80151c8 <__swsetup_r+0x98>
 80151d8:	20000824 	.word	0x20000824

080151dc <memset>:
 80151dc:	4402      	add	r2, r0
 80151de:	4603      	mov	r3, r0
 80151e0:	4293      	cmp	r3, r2
 80151e2:	d100      	bne.n	80151e6 <memset+0xa>
 80151e4:	4770      	bx	lr
 80151e6:	f803 1b01 	strb.w	r1, [r3], #1
 80151ea:	e7f9      	b.n	80151e0 <memset+0x4>

080151ec <_localeconv_r>:
 80151ec:	4800      	ldr	r0, [pc, #0]	@ (80151f0 <_localeconv_r+0x4>)
 80151ee:	4770      	bx	lr
 80151f0:	20000964 	.word	0x20000964

080151f4 <_close_r>:
 80151f4:	b538      	push	{r3, r4, r5, lr}
 80151f6:	4d06      	ldr	r5, [pc, #24]	@ (8015210 <_close_r+0x1c>)
 80151f8:	2300      	movs	r3, #0
 80151fa:	4604      	mov	r4, r0
 80151fc:	4608      	mov	r0, r1
 80151fe:	602b      	str	r3, [r5, #0]
 8015200:	f7ed fb96 	bl	8002930 <_close>
 8015204:	1c43      	adds	r3, r0, #1
 8015206:	d102      	bne.n	801520e <_close_r+0x1a>
 8015208:	682b      	ldr	r3, [r5, #0]
 801520a:	b103      	cbz	r3, 801520e <_close_r+0x1a>
 801520c:	6023      	str	r3, [r4, #0]
 801520e:	bd38      	pop	{r3, r4, r5, pc}
 8015210:	20035f58 	.word	0x20035f58

08015214 <_lseek_r>:
 8015214:	b538      	push	{r3, r4, r5, lr}
 8015216:	4d07      	ldr	r5, [pc, #28]	@ (8015234 <_lseek_r+0x20>)
 8015218:	4604      	mov	r4, r0
 801521a:	4608      	mov	r0, r1
 801521c:	4611      	mov	r1, r2
 801521e:	2200      	movs	r2, #0
 8015220:	602a      	str	r2, [r5, #0]
 8015222:	461a      	mov	r2, r3
 8015224:	f7ed fbab 	bl	800297e <_lseek>
 8015228:	1c43      	adds	r3, r0, #1
 801522a:	d102      	bne.n	8015232 <_lseek_r+0x1e>
 801522c:	682b      	ldr	r3, [r5, #0]
 801522e:	b103      	cbz	r3, 8015232 <_lseek_r+0x1e>
 8015230:	6023      	str	r3, [r4, #0]
 8015232:	bd38      	pop	{r3, r4, r5, pc}
 8015234:	20035f58 	.word	0x20035f58

08015238 <_read_r>:
 8015238:	b538      	push	{r3, r4, r5, lr}
 801523a:	4d07      	ldr	r5, [pc, #28]	@ (8015258 <_read_r+0x20>)
 801523c:	4604      	mov	r4, r0
 801523e:	4608      	mov	r0, r1
 8015240:	4611      	mov	r1, r2
 8015242:	2200      	movs	r2, #0
 8015244:	602a      	str	r2, [r5, #0]
 8015246:	461a      	mov	r2, r3
 8015248:	f7ed fb39 	bl	80028be <_read>
 801524c:	1c43      	adds	r3, r0, #1
 801524e:	d102      	bne.n	8015256 <_read_r+0x1e>
 8015250:	682b      	ldr	r3, [r5, #0]
 8015252:	b103      	cbz	r3, 8015256 <_read_r+0x1e>
 8015254:	6023      	str	r3, [r4, #0]
 8015256:	bd38      	pop	{r3, r4, r5, pc}
 8015258:	20035f58 	.word	0x20035f58

0801525c <_sbrk_r>:
 801525c:	b538      	push	{r3, r4, r5, lr}
 801525e:	4d06      	ldr	r5, [pc, #24]	@ (8015278 <_sbrk_r+0x1c>)
 8015260:	2300      	movs	r3, #0
 8015262:	4604      	mov	r4, r0
 8015264:	4608      	mov	r0, r1
 8015266:	602b      	str	r3, [r5, #0]
 8015268:	f7ed fb96 	bl	8002998 <_sbrk>
 801526c:	1c43      	adds	r3, r0, #1
 801526e:	d102      	bne.n	8015276 <_sbrk_r+0x1a>
 8015270:	682b      	ldr	r3, [r5, #0]
 8015272:	b103      	cbz	r3, 8015276 <_sbrk_r+0x1a>
 8015274:	6023      	str	r3, [r4, #0]
 8015276:	bd38      	pop	{r3, r4, r5, pc}
 8015278:	20035f58 	.word	0x20035f58

0801527c <_write_r>:
 801527c:	b538      	push	{r3, r4, r5, lr}
 801527e:	4d07      	ldr	r5, [pc, #28]	@ (801529c <_write_r+0x20>)
 8015280:	4604      	mov	r4, r0
 8015282:	4608      	mov	r0, r1
 8015284:	4611      	mov	r1, r2
 8015286:	2200      	movs	r2, #0
 8015288:	602a      	str	r2, [r5, #0]
 801528a:	461a      	mov	r2, r3
 801528c:	f7ed fb34 	bl	80028f8 <_write>
 8015290:	1c43      	adds	r3, r0, #1
 8015292:	d102      	bne.n	801529a <_write_r+0x1e>
 8015294:	682b      	ldr	r3, [r5, #0]
 8015296:	b103      	cbz	r3, 801529a <_write_r+0x1e>
 8015298:	6023      	str	r3, [r4, #0]
 801529a:	bd38      	pop	{r3, r4, r5, pc}
 801529c:	20035f58 	.word	0x20035f58

080152a0 <__errno>:
 80152a0:	4b01      	ldr	r3, [pc, #4]	@ (80152a8 <__errno+0x8>)
 80152a2:	6818      	ldr	r0, [r3, #0]
 80152a4:	4770      	bx	lr
 80152a6:	bf00      	nop
 80152a8:	20000824 	.word	0x20000824

080152ac <__libc_init_array>:
 80152ac:	b570      	push	{r4, r5, r6, lr}
 80152ae:	4d0d      	ldr	r5, [pc, #52]	@ (80152e4 <__libc_init_array+0x38>)
 80152b0:	4c0d      	ldr	r4, [pc, #52]	@ (80152e8 <__libc_init_array+0x3c>)
 80152b2:	1b64      	subs	r4, r4, r5
 80152b4:	10a4      	asrs	r4, r4, #2
 80152b6:	2600      	movs	r6, #0
 80152b8:	42a6      	cmp	r6, r4
 80152ba:	d109      	bne.n	80152d0 <__libc_init_array+0x24>
 80152bc:	4d0b      	ldr	r5, [pc, #44]	@ (80152ec <__libc_init_array+0x40>)
 80152be:	4c0c      	ldr	r4, [pc, #48]	@ (80152f0 <__libc_init_array+0x44>)
 80152c0:	f002 fbf0 	bl	8017aa4 <_init>
 80152c4:	1b64      	subs	r4, r4, r5
 80152c6:	10a4      	asrs	r4, r4, #2
 80152c8:	2600      	movs	r6, #0
 80152ca:	42a6      	cmp	r6, r4
 80152cc:	d105      	bne.n	80152da <__libc_init_array+0x2e>
 80152ce:	bd70      	pop	{r4, r5, r6, pc}
 80152d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80152d4:	4798      	blx	r3
 80152d6:	3601      	adds	r6, #1
 80152d8:	e7ee      	b.n	80152b8 <__libc_init_array+0xc>
 80152da:	f855 3b04 	ldr.w	r3, [r5], #4
 80152de:	4798      	blx	r3
 80152e0:	3601      	adds	r6, #1
 80152e2:	e7f2      	b.n	80152ca <__libc_init_array+0x1e>
 80152e4:	080d5630 	.word	0x080d5630
 80152e8:	080d5630 	.word	0x080d5630
 80152ec:	080d5630 	.word	0x080d5630
 80152f0:	080d5634 	.word	0x080d5634

080152f4 <__retarget_lock_init_recursive>:
 80152f4:	4770      	bx	lr

080152f6 <__retarget_lock_acquire_recursive>:
 80152f6:	4770      	bx	lr

080152f8 <__retarget_lock_release_recursive>:
 80152f8:	4770      	bx	lr

080152fa <memcpy>:
 80152fa:	440a      	add	r2, r1
 80152fc:	4291      	cmp	r1, r2
 80152fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8015302:	d100      	bne.n	8015306 <memcpy+0xc>
 8015304:	4770      	bx	lr
 8015306:	b510      	push	{r4, lr}
 8015308:	f811 4b01 	ldrb.w	r4, [r1], #1
 801530c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015310:	4291      	cmp	r1, r2
 8015312:	d1f9      	bne.n	8015308 <memcpy+0xe>
 8015314:	bd10      	pop	{r4, pc}

08015316 <quorem>:
 8015316:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801531a:	6903      	ldr	r3, [r0, #16]
 801531c:	690c      	ldr	r4, [r1, #16]
 801531e:	42a3      	cmp	r3, r4
 8015320:	4607      	mov	r7, r0
 8015322:	db7e      	blt.n	8015422 <quorem+0x10c>
 8015324:	3c01      	subs	r4, #1
 8015326:	f101 0814 	add.w	r8, r1, #20
 801532a:	00a3      	lsls	r3, r4, #2
 801532c:	f100 0514 	add.w	r5, r0, #20
 8015330:	9300      	str	r3, [sp, #0]
 8015332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015336:	9301      	str	r3, [sp, #4]
 8015338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801533c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015340:	3301      	adds	r3, #1
 8015342:	429a      	cmp	r2, r3
 8015344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015348:	fbb2 f6f3 	udiv	r6, r2, r3
 801534c:	d32e      	bcc.n	80153ac <quorem+0x96>
 801534e:	f04f 0a00 	mov.w	sl, #0
 8015352:	46c4      	mov	ip, r8
 8015354:	46ae      	mov	lr, r5
 8015356:	46d3      	mov	fp, sl
 8015358:	f85c 3b04 	ldr.w	r3, [ip], #4
 801535c:	b298      	uxth	r0, r3
 801535e:	fb06 a000 	mla	r0, r6, r0, sl
 8015362:	0c02      	lsrs	r2, r0, #16
 8015364:	0c1b      	lsrs	r3, r3, #16
 8015366:	fb06 2303 	mla	r3, r6, r3, r2
 801536a:	f8de 2000 	ldr.w	r2, [lr]
 801536e:	b280      	uxth	r0, r0
 8015370:	b292      	uxth	r2, r2
 8015372:	1a12      	subs	r2, r2, r0
 8015374:	445a      	add	r2, fp
 8015376:	f8de 0000 	ldr.w	r0, [lr]
 801537a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801537e:	b29b      	uxth	r3, r3
 8015380:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015384:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015388:	b292      	uxth	r2, r2
 801538a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801538e:	45e1      	cmp	r9, ip
 8015390:	f84e 2b04 	str.w	r2, [lr], #4
 8015394:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015398:	d2de      	bcs.n	8015358 <quorem+0x42>
 801539a:	9b00      	ldr	r3, [sp, #0]
 801539c:	58eb      	ldr	r3, [r5, r3]
 801539e:	b92b      	cbnz	r3, 80153ac <quorem+0x96>
 80153a0:	9b01      	ldr	r3, [sp, #4]
 80153a2:	3b04      	subs	r3, #4
 80153a4:	429d      	cmp	r5, r3
 80153a6:	461a      	mov	r2, r3
 80153a8:	d32f      	bcc.n	801540a <quorem+0xf4>
 80153aa:	613c      	str	r4, [r7, #16]
 80153ac:	4638      	mov	r0, r7
 80153ae:	f001 f8c3 	bl	8016538 <__mcmp>
 80153b2:	2800      	cmp	r0, #0
 80153b4:	db25      	blt.n	8015402 <quorem+0xec>
 80153b6:	4629      	mov	r1, r5
 80153b8:	2000      	movs	r0, #0
 80153ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80153be:	f8d1 c000 	ldr.w	ip, [r1]
 80153c2:	fa1f fe82 	uxth.w	lr, r2
 80153c6:	fa1f f38c 	uxth.w	r3, ip
 80153ca:	eba3 030e 	sub.w	r3, r3, lr
 80153ce:	4403      	add	r3, r0
 80153d0:	0c12      	lsrs	r2, r2, #16
 80153d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80153d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80153da:	b29b      	uxth	r3, r3
 80153dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80153e0:	45c1      	cmp	r9, r8
 80153e2:	f841 3b04 	str.w	r3, [r1], #4
 80153e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80153ea:	d2e6      	bcs.n	80153ba <quorem+0xa4>
 80153ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80153f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80153f4:	b922      	cbnz	r2, 8015400 <quorem+0xea>
 80153f6:	3b04      	subs	r3, #4
 80153f8:	429d      	cmp	r5, r3
 80153fa:	461a      	mov	r2, r3
 80153fc:	d30b      	bcc.n	8015416 <quorem+0x100>
 80153fe:	613c      	str	r4, [r7, #16]
 8015400:	3601      	adds	r6, #1
 8015402:	4630      	mov	r0, r6
 8015404:	b003      	add	sp, #12
 8015406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801540a:	6812      	ldr	r2, [r2, #0]
 801540c:	3b04      	subs	r3, #4
 801540e:	2a00      	cmp	r2, #0
 8015410:	d1cb      	bne.n	80153aa <quorem+0x94>
 8015412:	3c01      	subs	r4, #1
 8015414:	e7c6      	b.n	80153a4 <quorem+0x8e>
 8015416:	6812      	ldr	r2, [r2, #0]
 8015418:	3b04      	subs	r3, #4
 801541a:	2a00      	cmp	r2, #0
 801541c:	d1ef      	bne.n	80153fe <quorem+0xe8>
 801541e:	3c01      	subs	r4, #1
 8015420:	e7ea      	b.n	80153f8 <quorem+0xe2>
 8015422:	2000      	movs	r0, #0
 8015424:	e7ee      	b.n	8015404 <quorem+0xee>
	...

08015428 <_dtoa_r>:
 8015428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801542c:	69c7      	ldr	r7, [r0, #28]
 801542e:	b099      	sub	sp, #100	@ 0x64
 8015430:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015434:	ec55 4b10 	vmov	r4, r5, d0
 8015438:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801543a:	9109      	str	r1, [sp, #36]	@ 0x24
 801543c:	4683      	mov	fp, r0
 801543e:	920e      	str	r2, [sp, #56]	@ 0x38
 8015440:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015442:	b97f      	cbnz	r7, 8015464 <_dtoa_r+0x3c>
 8015444:	2010      	movs	r0, #16
 8015446:	f7fe ffb1 	bl	80143ac <malloc>
 801544a:	4602      	mov	r2, r0
 801544c:	f8cb 001c 	str.w	r0, [fp, #28]
 8015450:	b920      	cbnz	r0, 801545c <_dtoa_r+0x34>
 8015452:	4ba7      	ldr	r3, [pc, #668]	@ (80156f0 <_dtoa_r+0x2c8>)
 8015454:	21ef      	movs	r1, #239	@ 0xef
 8015456:	48a7      	ldr	r0, [pc, #668]	@ (80156f4 <_dtoa_r+0x2cc>)
 8015458:	f001 fbe8 	bl	8016c2c <__assert_func>
 801545c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015460:	6007      	str	r7, [r0, #0]
 8015462:	60c7      	str	r7, [r0, #12]
 8015464:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015468:	6819      	ldr	r1, [r3, #0]
 801546a:	b159      	cbz	r1, 8015484 <_dtoa_r+0x5c>
 801546c:	685a      	ldr	r2, [r3, #4]
 801546e:	604a      	str	r2, [r1, #4]
 8015470:	2301      	movs	r3, #1
 8015472:	4093      	lsls	r3, r2
 8015474:	608b      	str	r3, [r1, #8]
 8015476:	4658      	mov	r0, fp
 8015478:	f000 fe24 	bl	80160c4 <_Bfree>
 801547c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015480:	2200      	movs	r2, #0
 8015482:	601a      	str	r2, [r3, #0]
 8015484:	1e2b      	subs	r3, r5, #0
 8015486:	bfb9      	ittee	lt
 8015488:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801548c:	9303      	strlt	r3, [sp, #12]
 801548e:	2300      	movge	r3, #0
 8015490:	6033      	strge	r3, [r6, #0]
 8015492:	9f03      	ldr	r7, [sp, #12]
 8015494:	4b98      	ldr	r3, [pc, #608]	@ (80156f8 <_dtoa_r+0x2d0>)
 8015496:	bfbc      	itt	lt
 8015498:	2201      	movlt	r2, #1
 801549a:	6032      	strlt	r2, [r6, #0]
 801549c:	43bb      	bics	r3, r7
 801549e:	d112      	bne.n	80154c6 <_dtoa_r+0x9e>
 80154a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80154a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80154a6:	6013      	str	r3, [r2, #0]
 80154a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80154ac:	4323      	orrs	r3, r4
 80154ae:	f000 854d 	beq.w	8015f4c <_dtoa_r+0xb24>
 80154b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80154b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801570c <_dtoa_r+0x2e4>
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	f000 854f 	beq.w	8015f5c <_dtoa_r+0xb34>
 80154be:	f10a 0303 	add.w	r3, sl, #3
 80154c2:	f000 bd49 	b.w	8015f58 <_dtoa_r+0xb30>
 80154c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80154ca:	2200      	movs	r2, #0
 80154cc:	ec51 0b17 	vmov	r0, r1, d7
 80154d0:	2300      	movs	r3, #0
 80154d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80154d6:	f7eb fb77 	bl	8000bc8 <__aeabi_dcmpeq>
 80154da:	4680      	mov	r8, r0
 80154dc:	b158      	cbz	r0, 80154f6 <_dtoa_r+0xce>
 80154de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80154e0:	2301      	movs	r3, #1
 80154e2:	6013      	str	r3, [r2, #0]
 80154e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80154e6:	b113      	cbz	r3, 80154ee <_dtoa_r+0xc6>
 80154e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80154ea:	4b84      	ldr	r3, [pc, #528]	@ (80156fc <_dtoa_r+0x2d4>)
 80154ec:	6013      	str	r3, [r2, #0]
 80154ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015710 <_dtoa_r+0x2e8>
 80154f2:	f000 bd33 	b.w	8015f5c <_dtoa_r+0xb34>
 80154f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80154fa:	aa16      	add	r2, sp, #88	@ 0x58
 80154fc:	a917      	add	r1, sp, #92	@ 0x5c
 80154fe:	4658      	mov	r0, fp
 8015500:	f001 f8ca 	bl	8016698 <__d2b>
 8015504:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015508:	4681      	mov	r9, r0
 801550a:	2e00      	cmp	r6, #0
 801550c:	d077      	beq.n	80155fe <_dtoa_r+0x1d6>
 801550e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015510:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8015514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801551c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015520:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015524:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015528:	4619      	mov	r1, r3
 801552a:	2200      	movs	r2, #0
 801552c:	4b74      	ldr	r3, [pc, #464]	@ (8015700 <_dtoa_r+0x2d8>)
 801552e:	f7ea ff2b 	bl	8000388 <__aeabi_dsub>
 8015532:	a369      	add	r3, pc, #420	@ (adr r3, 80156d8 <_dtoa_r+0x2b0>)
 8015534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015538:	f7eb f8de 	bl	80006f8 <__aeabi_dmul>
 801553c:	a368      	add	r3, pc, #416	@ (adr r3, 80156e0 <_dtoa_r+0x2b8>)
 801553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015542:	f7ea ff23 	bl	800038c <__adddf3>
 8015546:	4604      	mov	r4, r0
 8015548:	4630      	mov	r0, r6
 801554a:	460d      	mov	r5, r1
 801554c:	f7eb f86a 	bl	8000624 <__aeabi_i2d>
 8015550:	a365      	add	r3, pc, #404	@ (adr r3, 80156e8 <_dtoa_r+0x2c0>)
 8015552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015556:	f7eb f8cf 	bl	80006f8 <__aeabi_dmul>
 801555a:	4602      	mov	r2, r0
 801555c:	460b      	mov	r3, r1
 801555e:	4620      	mov	r0, r4
 8015560:	4629      	mov	r1, r5
 8015562:	f7ea ff13 	bl	800038c <__adddf3>
 8015566:	4604      	mov	r4, r0
 8015568:	460d      	mov	r5, r1
 801556a:	f7eb fb75 	bl	8000c58 <__aeabi_d2iz>
 801556e:	2200      	movs	r2, #0
 8015570:	4607      	mov	r7, r0
 8015572:	2300      	movs	r3, #0
 8015574:	4620      	mov	r0, r4
 8015576:	4629      	mov	r1, r5
 8015578:	f7eb fb30 	bl	8000bdc <__aeabi_dcmplt>
 801557c:	b140      	cbz	r0, 8015590 <_dtoa_r+0x168>
 801557e:	4638      	mov	r0, r7
 8015580:	f7eb f850 	bl	8000624 <__aeabi_i2d>
 8015584:	4622      	mov	r2, r4
 8015586:	462b      	mov	r3, r5
 8015588:	f7eb fb1e 	bl	8000bc8 <__aeabi_dcmpeq>
 801558c:	b900      	cbnz	r0, 8015590 <_dtoa_r+0x168>
 801558e:	3f01      	subs	r7, #1
 8015590:	2f16      	cmp	r7, #22
 8015592:	d851      	bhi.n	8015638 <_dtoa_r+0x210>
 8015594:	4b5b      	ldr	r3, [pc, #364]	@ (8015704 <_dtoa_r+0x2dc>)
 8015596:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80155a2:	f7eb fb1b 	bl	8000bdc <__aeabi_dcmplt>
 80155a6:	2800      	cmp	r0, #0
 80155a8:	d048      	beq.n	801563c <_dtoa_r+0x214>
 80155aa:	3f01      	subs	r7, #1
 80155ac:	2300      	movs	r3, #0
 80155ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80155b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80155b2:	1b9b      	subs	r3, r3, r6
 80155b4:	1e5a      	subs	r2, r3, #1
 80155b6:	bf44      	itt	mi
 80155b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80155bc:	2300      	movmi	r3, #0
 80155be:	9208      	str	r2, [sp, #32]
 80155c0:	bf54      	ite	pl
 80155c2:	f04f 0800 	movpl.w	r8, #0
 80155c6:	9308      	strmi	r3, [sp, #32]
 80155c8:	2f00      	cmp	r7, #0
 80155ca:	db39      	blt.n	8015640 <_dtoa_r+0x218>
 80155cc:	9b08      	ldr	r3, [sp, #32]
 80155ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80155d0:	443b      	add	r3, r7
 80155d2:	9308      	str	r3, [sp, #32]
 80155d4:	2300      	movs	r3, #0
 80155d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80155d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155da:	2b09      	cmp	r3, #9
 80155dc:	d864      	bhi.n	80156a8 <_dtoa_r+0x280>
 80155de:	2b05      	cmp	r3, #5
 80155e0:	bfc4      	itt	gt
 80155e2:	3b04      	subgt	r3, #4
 80155e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80155e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155e8:	f1a3 0302 	sub.w	r3, r3, #2
 80155ec:	bfcc      	ite	gt
 80155ee:	2400      	movgt	r4, #0
 80155f0:	2401      	movle	r4, #1
 80155f2:	2b03      	cmp	r3, #3
 80155f4:	d863      	bhi.n	80156be <_dtoa_r+0x296>
 80155f6:	e8df f003 	tbb	[pc, r3]
 80155fa:	372a      	.short	0x372a
 80155fc:	5535      	.short	0x5535
 80155fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8015602:	441e      	add	r6, r3
 8015604:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015608:	2b20      	cmp	r3, #32
 801560a:	bfc1      	itttt	gt
 801560c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015610:	409f      	lslgt	r7, r3
 8015612:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015616:	fa24 f303 	lsrgt.w	r3, r4, r3
 801561a:	bfd6      	itet	le
 801561c:	f1c3 0320 	rsble	r3, r3, #32
 8015620:	ea47 0003 	orrgt.w	r0, r7, r3
 8015624:	fa04 f003 	lslle.w	r0, r4, r3
 8015628:	f7ea ffec 	bl	8000604 <__aeabi_ui2d>
 801562c:	2201      	movs	r2, #1
 801562e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015632:	3e01      	subs	r6, #1
 8015634:	9214      	str	r2, [sp, #80]	@ 0x50
 8015636:	e777      	b.n	8015528 <_dtoa_r+0x100>
 8015638:	2301      	movs	r3, #1
 801563a:	e7b8      	b.n	80155ae <_dtoa_r+0x186>
 801563c:	9012      	str	r0, [sp, #72]	@ 0x48
 801563e:	e7b7      	b.n	80155b0 <_dtoa_r+0x188>
 8015640:	427b      	negs	r3, r7
 8015642:	930a      	str	r3, [sp, #40]	@ 0x28
 8015644:	2300      	movs	r3, #0
 8015646:	eba8 0807 	sub.w	r8, r8, r7
 801564a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801564c:	e7c4      	b.n	80155d8 <_dtoa_r+0x1b0>
 801564e:	2300      	movs	r3, #0
 8015650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015654:	2b00      	cmp	r3, #0
 8015656:	dc35      	bgt.n	80156c4 <_dtoa_r+0x29c>
 8015658:	2301      	movs	r3, #1
 801565a:	9300      	str	r3, [sp, #0]
 801565c:	9307      	str	r3, [sp, #28]
 801565e:	461a      	mov	r2, r3
 8015660:	920e      	str	r2, [sp, #56]	@ 0x38
 8015662:	e00b      	b.n	801567c <_dtoa_r+0x254>
 8015664:	2301      	movs	r3, #1
 8015666:	e7f3      	b.n	8015650 <_dtoa_r+0x228>
 8015668:	2300      	movs	r3, #0
 801566a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801566c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801566e:	18fb      	adds	r3, r7, r3
 8015670:	9300      	str	r3, [sp, #0]
 8015672:	3301      	adds	r3, #1
 8015674:	2b01      	cmp	r3, #1
 8015676:	9307      	str	r3, [sp, #28]
 8015678:	bfb8      	it	lt
 801567a:	2301      	movlt	r3, #1
 801567c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015680:	2100      	movs	r1, #0
 8015682:	2204      	movs	r2, #4
 8015684:	f102 0514 	add.w	r5, r2, #20
 8015688:	429d      	cmp	r5, r3
 801568a:	d91f      	bls.n	80156cc <_dtoa_r+0x2a4>
 801568c:	6041      	str	r1, [r0, #4]
 801568e:	4658      	mov	r0, fp
 8015690:	f000 fcd8 	bl	8016044 <_Balloc>
 8015694:	4682      	mov	sl, r0
 8015696:	2800      	cmp	r0, #0
 8015698:	d13c      	bne.n	8015714 <_dtoa_r+0x2ec>
 801569a:	4b1b      	ldr	r3, [pc, #108]	@ (8015708 <_dtoa_r+0x2e0>)
 801569c:	4602      	mov	r2, r0
 801569e:	f240 11af 	movw	r1, #431	@ 0x1af
 80156a2:	e6d8      	b.n	8015456 <_dtoa_r+0x2e>
 80156a4:	2301      	movs	r3, #1
 80156a6:	e7e0      	b.n	801566a <_dtoa_r+0x242>
 80156a8:	2401      	movs	r4, #1
 80156aa:	2300      	movs	r3, #0
 80156ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80156ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80156b0:	f04f 33ff 	mov.w	r3, #4294967295
 80156b4:	9300      	str	r3, [sp, #0]
 80156b6:	9307      	str	r3, [sp, #28]
 80156b8:	2200      	movs	r2, #0
 80156ba:	2312      	movs	r3, #18
 80156bc:	e7d0      	b.n	8015660 <_dtoa_r+0x238>
 80156be:	2301      	movs	r3, #1
 80156c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80156c2:	e7f5      	b.n	80156b0 <_dtoa_r+0x288>
 80156c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80156c6:	9300      	str	r3, [sp, #0]
 80156c8:	9307      	str	r3, [sp, #28]
 80156ca:	e7d7      	b.n	801567c <_dtoa_r+0x254>
 80156cc:	3101      	adds	r1, #1
 80156ce:	0052      	lsls	r2, r2, #1
 80156d0:	e7d8      	b.n	8015684 <_dtoa_r+0x25c>
 80156d2:	bf00      	nop
 80156d4:	f3af 8000 	nop.w
 80156d8:	636f4361 	.word	0x636f4361
 80156dc:	3fd287a7 	.word	0x3fd287a7
 80156e0:	8b60c8b3 	.word	0x8b60c8b3
 80156e4:	3fc68a28 	.word	0x3fc68a28
 80156e8:	509f79fb 	.word	0x509f79fb
 80156ec:	3fd34413 	.word	0x3fd34413
 80156f0:	080d4f11 	.word	0x080d4f11
 80156f4:	080d4f28 	.word	0x080d4f28
 80156f8:	7ff00000 	.word	0x7ff00000
 80156fc:	080d4ee1 	.word	0x080d4ee1
 8015700:	3ff80000 	.word	0x3ff80000
 8015704:	080d5020 	.word	0x080d5020
 8015708:	080d4f80 	.word	0x080d4f80
 801570c:	080d4f0d 	.word	0x080d4f0d
 8015710:	080d4ee0 	.word	0x080d4ee0
 8015714:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015718:	6018      	str	r0, [r3, #0]
 801571a:	9b07      	ldr	r3, [sp, #28]
 801571c:	2b0e      	cmp	r3, #14
 801571e:	f200 80a4 	bhi.w	801586a <_dtoa_r+0x442>
 8015722:	2c00      	cmp	r4, #0
 8015724:	f000 80a1 	beq.w	801586a <_dtoa_r+0x442>
 8015728:	2f00      	cmp	r7, #0
 801572a:	dd33      	ble.n	8015794 <_dtoa_r+0x36c>
 801572c:	4bad      	ldr	r3, [pc, #692]	@ (80159e4 <_dtoa_r+0x5bc>)
 801572e:	f007 020f 	and.w	r2, r7, #15
 8015732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015736:	ed93 7b00 	vldr	d7, [r3]
 801573a:	05f8      	lsls	r0, r7, #23
 801573c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015740:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015744:	d516      	bpl.n	8015774 <_dtoa_r+0x34c>
 8015746:	4ba8      	ldr	r3, [pc, #672]	@ (80159e8 <_dtoa_r+0x5c0>)
 8015748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801574c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015750:	f7eb f8fc 	bl	800094c <__aeabi_ddiv>
 8015754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015758:	f004 040f 	and.w	r4, r4, #15
 801575c:	2603      	movs	r6, #3
 801575e:	4da2      	ldr	r5, [pc, #648]	@ (80159e8 <_dtoa_r+0x5c0>)
 8015760:	b954      	cbnz	r4, 8015778 <_dtoa_r+0x350>
 8015762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801576a:	f7eb f8ef 	bl	800094c <__aeabi_ddiv>
 801576e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015772:	e028      	b.n	80157c6 <_dtoa_r+0x39e>
 8015774:	2602      	movs	r6, #2
 8015776:	e7f2      	b.n	801575e <_dtoa_r+0x336>
 8015778:	07e1      	lsls	r1, r4, #31
 801577a:	d508      	bpl.n	801578e <_dtoa_r+0x366>
 801577c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015780:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015784:	f7ea ffb8 	bl	80006f8 <__aeabi_dmul>
 8015788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801578c:	3601      	adds	r6, #1
 801578e:	1064      	asrs	r4, r4, #1
 8015790:	3508      	adds	r5, #8
 8015792:	e7e5      	b.n	8015760 <_dtoa_r+0x338>
 8015794:	f000 80d2 	beq.w	801593c <_dtoa_r+0x514>
 8015798:	427c      	negs	r4, r7
 801579a:	4b92      	ldr	r3, [pc, #584]	@ (80159e4 <_dtoa_r+0x5bc>)
 801579c:	4d92      	ldr	r5, [pc, #584]	@ (80159e8 <_dtoa_r+0x5c0>)
 801579e:	f004 020f 	and.w	r2, r4, #15
 80157a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80157a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80157ae:	f7ea ffa3 	bl	80006f8 <__aeabi_dmul>
 80157b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80157b6:	1124      	asrs	r4, r4, #4
 80157b8:	2300      	movs	r3, #0
 80157ba:	2602      	movs	r6, #2
 80157bc:	2c00      	cmp	r4, #0
 80157be:	f040 80b2 	bne.w	8015926 <_dtoa_r+0x4fe>
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d1d3      	bne.n	801576e <_dtoa_r+0x346>
 80157c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80157c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	f000 80b7 	beq.w	8015940 <_dtoa_r+0x518>
 80157d2:	4b86      	ldr	r3, [pc, #536]	@ (80159ec <_dtoa_r+0x5c4>)
 80157d4:	2200      	movs	r2, #0
 80157d6:	4620      	mov	r0, r4
 80157d8:	4629      	mov	r1, r5
 80157da:	f7eb f9ff 	bl	8000bdc <__aeabi_dcmplt>
 80157de:	2800      	cmp	r0, #0
 80157e0:	f000 80ae 	beq.w	8015940 <_dtoa_r+0x518>
 80157e4:	9b07      	ldr	r3, [sp, #28]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	f000 80aa 	beq.w	8015940 <_dtoa_r+0x518>
 80157ec:	9b00      	ldr	r3, [sp, #0]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	dd37      	ble.n	8015862 <_dtoa_r+0x43a>
 80157f2:	1e7b      	subs	r3, r7, #1
 80157f4:	9304      	str	r3, [sp, #16]
 80157f6:	4620      	mov	r0, r4
 80157f8:	4b7d      	ldr	r3, [pc, #500]	@ (80159f0 <_dtoa_r+0x5c8>)
 80157fa:	2200      	movs	r2, #0
 80157fc:	4629      	mov	r1, r5
 80157fe:	f7ea ff7b 	bl	80006f8 <__aeabi_dmul>
 8015802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015806:	9c00      	ldr	r4, [sp, #0]
 8015808:	3601      	adds	r6, #1
 801580a:	4630      	mov	r0, r6
 801580c:	f7ea ff0a 	bl	8000624 <__aeabi_i2d>
 8015810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015814:	f7ea ff70 	bl	80006f8 <__aeabi_dmul>
 8015818:	4b76      	ldr	r3, [pc, #472]	@ (80159f4 <_dtoa_r+0x5cc>)
 801581a:	2200      	movs	r2, #0
 801581c:	f7ea fdb6 	bl	800038c <__adddf3>
 8015820:	4605      	mov	r5, r0
 8015822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015826:	2c00      	cmp	r4, #0
 8015828:	f040 808d 	bne.w	8015946 <_dtoa_r+0x51e>
 801582c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015830:	4b71      	ldr	r3, [pc, #452]	@ (80159f8 <_dtoa_r+0x5d0>)
 8015832:	2200      	movs	r2, #0
 8015834:	f7ea fda8 	bl	8000388 <__aeabi_dsub>
 8015838:	4602      	mov	r2, r0
 801583a:	460b      	mov	r3, r1
 801583c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015840:	462a      	mov	r2, r5
 8015842:	4633      	mov	r3, r6
 8015844:	f7eb f9e8 	bl	8000c18 <__aeabi_dcmpgt>
 8015848:	2800      	cmp	r0, #0
 801584a:	f040 828b 	bne.w	8015d64 <_dtoa_r+0x93c>
 801584e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015852:	462a      	mov	r2, r5
 8015854:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015858:	f7eb f9c0 	bl	8000bdc <__aeabi_dcmplt>
 801585c:	2800      	cmp	r0, #0
 801585e:	f040 8128 	bne.w	8015ab2 <_dtoa_r+0x68a>
 8015862:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015866:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801586a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801586c:	2b00      	cmp	r3, #0
 801586e:	f2c0 815a 	blt.w	8015b26 <_dtoa_r+0x6fe>
 8015872:	2f0e      	cmp	r7, #14
 8015874:	f300 8157 	bgt.w	8015b26 <_dtoa_r+0x6fe>
 8015878:	4b5a      	ldr	r3, [pc, #360]	@ (80159e4 <_dtoa_r+0x5bc>)
 801587a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801587e:	ed93 7b00 	vldr	d7, [r3]
 8015882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015884:	2b00      	cmp	r3, #0
 8015886:	ed8d 7b00 	vstr	d7, [sp]
 801588a:	da03      	bge.n	8015894 <_dtoa_r+0x46c>
 801588c:	9b07      	ldr	r3, [sp, #28]
 801588e:	2b00      	cmp	r3, #0
 8015890:	f340 8101 	ble.w	8015a96 <_dtoa_r+0x66e>
 8015894:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015898:	4656      	mov	r6, sl
 801589a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801589e:	4620      	mov	r0, r4
 80158a0:	4629      	mov	r1, r5
 80158a2:	f7eb f853 	bl	800094c <__aeabi_ddiv>
 80158a6:	f7eb f9d7 	bl	8000c58 <__aeabi_d2iz>
 80158aa:	4680      	mov	r8, r0
 80158ac:	f7ea feba 	bl	8000624 <__aeabi_i2d>
 80158b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80158b4:	f7ea ff20 	bl	80006f8 <__aeabi_dmul>
 80158b8:	4602      	mov	r2, r0
 80158ba:	460b      	mov	r3, r1
 80158bc:	4620      	mov	r0, r4
 80158be:	4629      	mov	r1, r5
 80158c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80158c4:	f7ea fd60 	bl	8000388 <__aeabi_dsub>
 80158c8:	f806 4b01 	strb.w	r4, [r6], #1
 80158cc:	9d07      	ldr	r5, [sp, #28]
 80158ce:	eba6 040a 	sub.w	r4, r6, sl
 80158d2:	42a5      	cmp	r5, r4
 80158d4:	4602      	mov	r2, r0
 80158d6:	460b      	mov	r3, r1
 80158d8:	f040 8117 	bne.w	8015b0a <_dtoa_r+0x6e2>
 80158dc:	f7ea fd56 	bl	800038c <__adddf3>
 80158e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80158e4:	4604      	mov	r4, r0
 80158e6:	460d      	mov	r5, r1
 80158e8:	f7eb f996 	bl	8000c18 <__aeabi_dcmpgt>
 80158ec:	2800      	cmp	r0, #0
 80158ee:	f040 80f9 	bne.w	8015ae4 <_dtoa_r+0x6bc>
 80158f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80158f6:	4620      	mov	r0, r4
 80158f8:	4629      	mov	r1, r5
 80158fa:	f7eb f965 	bl	8000bc8 <__aeabi_dcmpeq>
 80158fe:	b118      	cbz	r0, 8015908 <_dtoa_r+0x4e0>
 8015900:	f018 0f01 	tst.w	r8, #1
 8015904:	f040 80ee 	bne.w	8015ae4 <_dtoa_r+0x6bc>
 8015908:	4649      	mov	r1, r9
 801590a:	4658      	mov	r0, fp
 801590c:	f000 fbda 	bl	80160c4 <_Bfree>
 8015910:	2300      	movs	r3, #0
 8015912:	7033      	strb	r3, [r6, #0]
 8015914:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015916:	3701      	adds	r7, #1
 8015918:	601f      	str	r7, [r3, #0]
 801591a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801591c:	2b00      	cmp	r3, #0
 801591e:	f000 831d 	beq.w	8015f5c <_dtoa_r+0xb34>
 8015922:	601e      	str	r6, [r3, #0]
 8015924:	e31a      	b.n	8015f5c <_dtoa_r+0xb34>
 8015926:	07e2      	lsls	r2, r4, #31
 8015928:	d505      	bpl.n	8015936 <_dtoa_r+0x50e>
 801592a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801592e:	f7ea fee3 	bl	80006f8 <__aeabi_dmul>
 8015932:	3601      	adds	r6, #1
 8015934:	2301      	movs	r3, #1
 8015936:	1064      	asrs	r4, r4, #1
 8015938:	3508      	adds	r5, #8
 801593a:	e73f      	b.n	80157bc <_dtoa_r+0x394>
 801593c:	2602      	movs	r6, #2
 801593e:	e742      	b.n	80157c6 <_dtoa_r+0x39e>
 8015940:	9c07      	ldr	r4, [sp, #28]
 8015942:	9704      	str	r7, [sp, #16]
 8015944:	e761      	b.n	801580a <_dtoa_r+0x3e2>
 8015946:	4b27      	ldr	r3, [pc, #156]	@ (80159e4 <_dtoa_r+0x5bc>)
 8015948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801594a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801594e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015952:	4454      	add	r4, sl
 8015954:	2900      	cmp	r1, #0
 8015956:	d053      	beq.n	8015a00 <_dtoa_r+0x5d8>
 8015958:	4928      	ldr	r1, [pc, #160]	@ (80159fc <_dtoa_r+0x5d4>)
 801595a:	2000      	movs	r0, #0
 801595c:	f7ea fff6 	bl	800094c <__aeabi_ddiv>
 8015960:	4633      	mov	r3, r6
 8015962:	462a      	mov	r2, r5
 8015964:	f7ea fd10 	bl	8000388 <__aeabi_dsub>
 8015968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801596c:	4656      	mov	r6, sl
 801596e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015972:	f7eb f971 	bl	8000c58 <__aeabi_d2iz>
 8015976:	4605      	mov	r5, r0
 8015978:	f7ea fe54 	bl	8000624 <__aeabi_i2d>
 801597c:	4602      	mov	r2, r0
 801597e:	460b      	mov	r3, r1
 8015980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015984:	f7ea fd00 	bl	8000388 <__aeabi_dsub>
 8015988:	3530      	adds	r5, #48	@ 0x30
 801598a:	4602      	mov	r2, r0
 801598c:	460b      	mov	r3, r1
 801598e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015992:	f806 5b01 	strb.w	r5, [r6], #1
 8015996:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801599a:	f7eb f91f 	bl	8000bdc <__aeabi_dcmplt>
 801599e:	2800      	cmp	r0, #0
 80159a0:	d171      	bne.n	8015a86 <_dtoa_r+0x65e>
 80159a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80159a6:	4911      	ldr	r1, [pc, #68]	@ (80159ec <_dtoa_r+0x5c4>)
 80159a8:	2000      	movs	r0, #0
 80159aa:	f7ea fced 	bl	8000388 <__aeabi_dsub>
 80159ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80159b2:	f7eb f913 	bl	8000bdc <__aeabi_dcmplt>
 80159b6:	2800      	cmp	r0, #0
 80159b8:	f040 8095 	bne.w	8015ae6 <_dtoa_r+0x6be>
 80159bc:	42a6      	cmp	r6, r4
 80159be:	f43f af50 	beq.w	8015862 <_dtoa_r+0x43a>
 80159c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80159c6:	4b0a      	ldr	r3, [pc, #40]	@ (80159f0 <_dtoa_r+0x5c8>)
 80159c8:	2200      	movs	r2, #0
 80159ca:	f7ea fe95 	bl	80006f8 <__aeabi_dmul>
 80159ce:	4b08      	ldr	r3, [pc, #32]	@ (80159f0 <_dtoa_r+0x5c8>)
 80159d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80159d4:	2200      	movs	r2, #0
 80159d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80159da:	f7ea fe8d 	bl	80006f8 <__aeabi_dmul>
 80159de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80159e2:	e7c4      	b.n	801596e <_dtoa_r+0x546>
 80159e4:	080d5020 	.word	0x080d5020
 80159e8:	080d4ff8 	.word	0x080d4ff8
 80159ec:	3ff00000 	.word	0x3ff00000
 80159f0:	40240000 	.word	0x40240000
 80159f4:	401c0000 	.word	0x401c0000
 80159f8:	40140000 	.word	0x40140000
 80159fc:	3fe00000 	.word	0x3fe00000
 8015a00:	4631      	mov	r1, r6
 8015a02:	4628      	mov	r0, r5
 8015a04:	f7ea fe78 	bl	80006f8 <__aeabi_dmul>
 8015a08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015a0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8015a0e:	4656      	mov	r6, sl
 8015a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a14:	f7eb f920 	bl	8000c58 <__aeabi_d2iz>
 8015a18:	4605      	mov	r5, r0
 8015a1a:	f7ea fe03 	bl	8000624 <__aeabi_i2d>
 8015a1e:	4602      	mov	r2, r0
 8015a20:	460b      	mov	r3, r1
 8015a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a26:	f7ea fcaf 	bl	8000388 <__aeabi_dsub>
 8015a2a:	3530      	adds	r5, #48	@ 0x30
 8015a2c:	f806 5b01 	strb.w	r5, [r6], #1
 8015a30:	4602      	mov	r2, r0
 8015a32:	460b      	mov	r3, r1
 8015a34:	42a6      	cmp	r6, r4
 8015a36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015a3a:	f04f 0200 	mov.w	r2, #0
 8015a3e:	d124      	bne.n	8015a8a <_dtoa_r+0x662>
 8015a40:	4bac      	ldr	r3, [pc, #688]	@ (8015cf4 <_dtoa_r+0x8cc>)
 8015a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015a46:	f7ea fca1 	bl	800038c <__adddf3>
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	460b      	mov	r3, r1
 8015a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a52:	f7eb f8e1 	bl	8000c18 <__aeabi_dcmpgt>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	d145      	bne.n	8015ae6 <_dtoa_r+0x6be>
 8015a5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015a5e:	49a5      	ldr	r1, [pc, #660]	@ (8015cf4 <_dtoa_r+0x8cc>)
 8015a60:	2000      	movs	r0, #0
 8015a62:	f7ea fc91 	bl	8000388 <__aeabi_dsub>
 8015a66:	4602      	mov	r2, r0
 8015a68:	460b      	mov	r3, r1
 8015a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015a6e:	f7eb f8b5 	bl	8000bdc <__aeabi_dcmplt>
 8015a72:	2800      	cmp	r0, #0
 8015a74:	f43f aef5 	beq.w	8015862 <_dtoa_r+0x43a>
 8015a78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8015a7a:	1e73      	subs	r3, r6, #1
 8015a7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8015a7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015a82:	2b30      	cmp	r3, #48	@ 0x30
 8015a84:	d0f8      	beq.n	8015a78 <_dtoa_r+0x650>
 8015a86:	9f04      	ldr	r7, [sp, #16]
 8015a88:	e73e      	b.n	8015908 <_dtoa_r+0x4e0>
 8015a8a:	4b9b      	ldr	r3, [pc, #620]	@ (8015cf8 <_dtoa_r+0x8d0>)
 8015a8c:	f7ea fe34 	bl	80006f8 <__aeabi_dmul>
 8015a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a94:	e7bc      	b.n	8015a10 <_dtoa_r+0x5e8>
 8015a96:	d10c      	bne.n	8015ab2 <_dtoa_r+0x68a>
 8015a98:	4b98      	ldr	r3, [pc, #608]	@ (8015cfc <_dtoa_r+0x8d4>)
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015aa0:	f7ea fe2a 	bl	80006f8 <__aeabi_dmul>
 8015aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015aa8:	f7eb f8ac 	bl	8000c04 <__aeabi_dcmpge>
 8015aac:	2800      	cmp	r0, #0
 8015aae:	f000 8157 	beq.w	8015d60 <_dtoa_r+0x938>
 8015ab2:	2400      	movs	r4, #0
 8015ab4:	4625      	mov	r5, r4
 8015ab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ab8:	43db      	mvns	r3, r3
 8015aba:	9304      	str	r3, [sp, #16]
 8015abc:	4656      	mov	r6, sl
 8015abe:	2700      	movs	r7, #0
 8015ac0:	4621      	mov	r1, r4
 8015ac2:	4658      	mov	r0, fp
 8015ac4:	f000 fafe 	bl	80160c4 <_Bfree>
 8015ac8:	2d00      	cmp	r5, #0
 8015aca:	d0dc      	beq.n	8015a86 <_dtoa_r+0x65e>
 8015acc:	b12f      	cbz	r7, 8015ada <_dtoa_r+0x6b2>
 8015ace:	42af      	cmp	r7, r5
 8015ad0:	d003      	beq.n	8015ada <_dtoa_r+0x6b2>
 8015ad2:	4639      	mov	r1, r7
 8015ad4:	4658      	mov	r0, fp
 8015ad6:	f000 faf5 	bl	80160c4 <_Bfree>
 8015ada:	4629      	mov	r1, r5
 8015adc:	4658      	mov	r0, fp
 8015ade:	f000 faf1 	bl	80160c4 <_Bfree>
 8015ae2:	e7d0      	b.n	8015a86 <_dtoa_r+0x65e>
 8015ae4:	9704      	str	r7, [sp, #16]
 8015ae6:	4633      	mov	r3, r6
 8015ae8:	461e      	mov	r6, r3
 8015aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015aee:	2a39      	cmp	r2, #57	@ 0x39
 8015af0:	d107      	bne.n	8015b02 <_dtoa_r+0x6da>
 8015af2:	459a      	cmp	sl, r3
 8015af4:	d1f8      	bne.n	8015ae8 <_dtoa_r+0x6c0>
 8015af6:	9a04      	ldr	r2, [sp, #16]
 8015af8:	3201      	adds	r2, #1
 8015afa:	9204      	str	r2, [sp, #16]
 8015afc:	2230      	movs	r2, #48	@ 0x30
 8015afe:	f88a 2000 	strb.w	r2, [sl]
 8015b02:	781a      	ldrb	r2, [r3, #0]
 8015b04:	3201      	adds	r2, #1
 8015b06:	701a      	strb	r2, [r3, #0]
 8015b08:	e7bd      	b.n	8015a86 <_dtoa_r+0x65e>
 8015b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8015cf8 <_dtoa_r+0x8d0>)
 8015b0c:	2200      	movs	r2, #0
 8015b0e:	f7ea fdf3 	bl	80006f8 <__aeabi_dmul>
 8015b12:	2200      	movs	r2, #0
 8015b14:	2300      	movs	r3, #0
 8015b16:	4604      	mov	r4, r0
 8015b18:	460d      	mov	r5, r1
 8015b1a:	f7eb f855 	bl	8000bc8 <__aeabi_dcmpeq>
 8015b1e:	2800      	cmp	r0, #0
 8015b20:	f43f aebb 	beq.w	801589a <_dtoa_r+0x472>
 8015b24:	e6f0      	b.n	8015908 <_dtoa_r+0x4e0>
 8015b26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015b28:	2a00      	cmp	r2, #0
 8015b2a:	f000 80db 	beq.w	8015ce4 <_dtoa_r+0x8bc>
 8015b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015b30:	2a01      	cmp	r2, #1
 8015b32:	f300 80bf 	bgt.w	8015cb4 <_dtoa_r+0x88c>
 8015b36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015b38:	2a00      	cmp	r2, #0
 8015b3a:	f000 80b7 	beq.w	8015cac <_dtoa_r+0x884>
 8015b3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015b42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015b44:	4646      	mov	r6, r8
 8015b46:	9a08      	ldr	r2, [sp, #32]
 8015b48:	2101      	movs	r1, #1
 8015b4a:	441a      	add	r2, r3
 8015b4c:	4658      	mov	r0, fp
 8015b4e:	4498      	add	r8, r3
 8015b50:	9208      	str	r2, [sp, #32]
 8015b52:	f000 fb6b 	bl	801622c <__i2b>
 8015b56:	4605      	mov	r5, r0
 8015b58:	b15e      	cbz	r6, 8015b72 <_dtoa_r+0x74a>
 8015b5a:	9b08      	ldr	r3, [sp, #32]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	dd08      	ble.n	8015b72 <_dtoa_r+0x74a>
 8015b60:	42b3      	cmp	r3, r6
 8015b62:	9a08      	ldr	r2, [sp, #32]
 8015b64:	bfa8      	it	ge
 8015b66:	4633      	movge	r3, r6
 8015b68:	eba8 0803 	sub.w	r8, r8, r3
 8015b6c:	1af6      	subs	r6, r6, r3
 8015b6e:	1ad3      	subs	r3, r2, r3
 8015b70:	9308      	str	r3, [sp, #32]
 8015b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b74:	b1f3      	cbz	r3, 8015bb4 <_dtoa_r+0x78c>
 8015b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	f000 80b7 	beq.w	8015cec <_dtoa_r+0x8c4>
 8015b7e:	b18c      	cbz	r4, 8015ba4 <_dtoa_r+0x77c>
 8015b80:	4629      	mov	r1, r5
 8015b82:	4622      	mov	r2, r4
 8015b84:	4658      	mov	r0, fp
 8015b86:	f000 fc11 	bl	80163ac <__pow5mult>
 8015b8a:	464a      	mov	r2, r9
 8015b8c:	4601      	mov	r1, r0
 8015b8e:	4605      	mov	r5, r0
 8015b90:	4658      	mov	r0, fp
 8015b92:	f000 fb61 	bl	8016258 <__multiply>
 8015b96:	4649      	mov	r1, r9
 8015b98:	9004      	str	r0, [sp, #16]
 8015b9a:	4658      	mov	r0, fp
 8015b9c:	f000 fa92 	bl	80160c4 <_Bfree>
 8015ba0:	9b04      	ldr	r3, [sp, #16]
 8015ba2:	4699      	mov	r9, r3
 8015ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ba6:	1b1a      	subs	r2, r3, r4
 8015ba8:	d004      	beq.n	8015bb4 <_dtoa_r+0x78c>
 8015baa:	4649      	mov	r1, r9
 8015bac:	4658      	mov	r0, fp
 8015bae:	f000 fbfd 	bl	80163ac <__pow5mult>
 8015bb2:	4681      	mov	r9, r0
 8015bb4:	2101      	movs	r1, #1
 8015bb6:	4658      	mov	r0, fp
 8015bb8:	f000 fb38 	bl	801622c <__i2b>
 8015bbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015bbe:	4604      	mov	r4, r0
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	f000 81cf 	beq.w	8015f64 <_dtoa_r+0xb3c>
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	4601      	mov	r1, r0
 8015bca:	4658      	mov	r0, fp
 8015bcc:	f000 fbee 	bl	80163ac <__pow5mult>
 8015bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bd2:	2b01      	cmp	r3, #1
 8015bd4:	4604      	mov	r4, r0
 8015bd6:	f300 8095 	bgt.w	8015d04 <_dtoa_r+0x8dc>
 8015bda:	9b02      	ldr	r3, [sp, #8]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	f040 8087 	bne.w	8015cf0 <_dtoa_r+0x8c8>
 8015be2:	9b03      	ldr	r3, [sp, #12]
 8015be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	f040 8089 	bne.w	8015d00 <_dtoa_r+0x8d8>
 8015bee:	9b03      	ldr	r3, [sp, #12]
 8015bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015bf4:	0d1b      	lsrs	r3, r3, #20
 8015bf6:	051b      	lsls	r3, r3, #20
 8015bf8:	b12b      	cbz	r3, 8015c06 <_dtoa_r+0x7de>
 8015bfa:	9b08      	ldr	r3, [sp, #32]
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	9308      	str	r3, [sp, #32]
 8015c00:	f108 0801 	add.w	r8, r8, #1
 8015c04:	2301      	movs	r3, #1
 8015c06:	930a      	str	r3, [sp, #40]	@ 0x28
 8015c08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	f000 81b0 	beq.w	8015f70 <_dtoa_r+0xb48>
 8015c10:	6923      	ldr	r3, [r4, #16]
 8015c12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015c16:	6918      	ldr	r0, [r3, #16]
 8015c18:	f000 fabc 	bl	8016194 <__hi0bits>
 8015c1c:	f1c0 0020 	rsb	r0, r0, #32
 8015c20:	9b08      	ldr	r3, [sp, #32]
 8015c22:	4418      	add	r0, r3
 8015c24:	f010 001f 	ands.w	r0, r0, #31
 8015c28:	d077      	beq.n	8015d1a <_dtoa_r+0x8f2>
 8015c2a:	f1c0 0320 	rsb	r3, r0, #32
 8015c2e:	2b04      	cmp	r3, #4
 8015c30:	dd6b      	ble.n	8015d0a <_dtoa_r+0x8e2>
 8015c32:	9b08      	ldr	r3, [sp, #32]
 8015c34:	f1c0 001c 	rsb	r0, r0, #28
 8015c38:	4403      	add	r3, r0
 8015c3a:	4480      	add	r8, r0
 8015c3c:	4406      	add	r6, r0
 8015c3e:	9308      	str	r3, [sp, #32]
 8015c40:	f1b8 0f00 	cmp.w	r8, #0
 8015c44:	dd05      	ble.n	8015c52 <_dtoa_r+0x82a>
 8015c46:	4649      	mov	r1, r9
 8015c48:	4642      	mov	r2, r8
 8015c4a:	4658      	mov	r0, fp
 8015c4c:	f000 fc08 	bl	8016460 <__lshift>
 8015c50:	4681      	mov	r9, r0
 8015c52:	9b08      	ldr	r3, [sp, #32]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	dd05      	ble.n	8015c64 <_dtoa_r+0x83c>
 8015c58:	4621      	mov	r1, r4
 8015c5a:	461a      	mov	r2, r3
 8015c5c:	4658      	mov	r0, fp
 8015c5e:	f000 fbff 	bl	8016460 <__lshift>
 8015c62:	4604      	mov	r4, r0
 8015c64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d059      	beq.n	8015d1e <_dtoa_r+0x8f6>
 8015c6a:	4621      	mov	r1, r4
 8015c6c:	4648      	mov	r0, r9
 8015c6e:	f000 fc63 	bl	8016538 <__mcmp>
 8015c72:	2800      	cmp	r0, #0
 8015c74:	da53      	bge.n	8015d1e <_dtoa_r+0x8f6>
 8015c76:	1e7b      	subs	r3, r7, #1
 8015c78:	9304      	str	r3, [sp, #16]
 8015c7a:	4649      	mov	r1, r9
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	220a      	movs	r2, #10
 8015c80:	4658      	mov	r0, fp
 8015c82:	f000 fa41 	bl	8016108 <__multadd>
 8015c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c88:	4681      	mov	r9, r0
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	f000 8172 	beq.w	8015f74 <_dtoa_r+0xb4c>
 8015c90:	2300      	movs	r3, #0
 8015c92:	4629      	mov	r1, r5
 8015c94:	220a      	movs	r2, #10
 8015c96:	4658      	mov	r0, fp
 8015c98:	f000 fa36 	bl	8016108 <__multadd>
 8015c9c:	9b00      	ldr	r3, [sp, #0]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	4605      	mov	r5, r0
 8015ca2:	dc67      	bgt.n	8015d74 <_dtoa_r+0x94c>
 8015ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ca6:	2b02      	cmp	r3, #2
 8015ca8:	dc41      	bgt.n	8015d2e <_dtoa_r+0x906>
 8015caa:	e063      	b.n	8015d74 <_dtoa_r+0x94c>
 8015cac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015cae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015cb2:	e746      	b.n	8015b42 <_dtoa_r+0x71a>
 8015cb4:	9b07      	ldr	r3, [sp, #28]
 8015cb6:	1e5c      	subs	r4, r3, #1
 8015cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015cba:	42a3      	cmp	r3, r4
 8015cbc:	bfbf      	itttt	lt
 8015cbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015cc0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015cc2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015cc4:	1ae3      	sublt	r3, r4, r3
 8015cc6:	bfb4      	ite	lt
 8015cc8:	18d2      	addlt	r2, r2, r3
 8015cca:	1b1c      	subge	r4, r3, r4
 8015ccc:	9b07      	ldr	r3, [sp, #28]
 8015cce:	bfbc      	itt	lt
 8015cd0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015cd2:	2400      	movlt	r4, #0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	bfb5      	itete	lt
 8015cd8:	eba8 0603 	sublt.w	r6, r8, r3
 8015cdc:	9b07      	ldrge	r3, [sp, #28]
 8015cde:	2300      	movlt	r3, #0
 8015ce0:	4646      	movge	r6, r8
 8015ce2:	e730      	b.n	8015b46 <_dtoa_r+0x71e>
 8015ce4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015ce6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015ce8:	4646      	mov	r6, r8
 8015cea:	e735      	b.n	8015b58 <_dtoa_r+0x730>
 8015cec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015cee:	e75c      	b.n	8015baa <_dtoa_r+0x782>
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	e788      	b.n	8015c06 <_dtoa_r+0x7de>
 8015cf4:	3fe00000 	.word	0x3fe00000
 8015cf8:	40240000 	.word	0x40240000
 8015cfc:	40140000 	.word	0x40140000
 8015d00:	9b02      	ldr	r3, [sp, #8]
 8015d02:	e780      	b.n	8015c06 <_dtoa_r+0x7de>
 8015d04:	2300      	movs	r3, #0
 8015d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8015d08:	e782      	b.n	8015c10 <_dtoa_r+0x7e8>
 8015d0a:	d099      	beq.n	8015c40 <_dtoa_r+0x818>
 8015d0c:	9a08      	ldr	r2, [sp, #32]
 8015d0e:	331c      	adds	r3, #28
 8015d10:	441a      	add	r2, r3
 8015d12:	4498      	add	r8, r3
 8015d14:	441e      	add	r6, r3
 8015d16:	9208      	str	r2, [sp, #32]
 8015d18:	e792      	b.n	8015c40 <_dtoa_r+0x818>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	e7f6      	b.n	8015d0c <_dtoa_r+0x8e4>
 8015d1e:	9b07      	ldr	r3, [sp, #28]
 8015d20:	9704      	str	r7, [sp, #16]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	dc20      	bgt.n	8015d68 <_dtoa_r+0x940>
 8015d26:	9300      	str	r3, [sp, #0]
 8015d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d2a:	2b02      	cmp	r3, #2
 8015d2c:	dd1e      	ble.n	8015d6c <_dtoa_r+0x944>
 8015d2e:	9b00      	ldr	r3, [sp, #0]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	f47f aec0 	bne.w	8015ab6 <_dtoa_r+0x68e>
 8015d36:	4621      	mov	r1, r4
 8015d38:	2205      	movs	r2, #5
 8015d3a:	4658      	mov	r0, fp
 8015d3c:	f000 f9e4 	bl	8016108 <__multadd>
 8015d40:	4601      	mov	r1, r0
 8015d42:	4604      	mov	r4, r0
 8015d44:	4648      	mov	r0, r9
 8015d46:	f000 fbf7 	bl	8016538 <__mcmp>
 8015d4a:	2800      	cmp	r0, #0
 8015d4c:	f77f aeb3 	ble.w	8015ab6 <_dtoa_r+0x68e>
 8015d50:	4656      	mov	r6, sl
 8015d52:	2331      	movs	r3, #49	@ 0x31
 8015d54:	f806 3b01 	strb.w	r3, [r6], #1
 8015d58:	9b04      	ldr	r3, [sp, #16]
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	9304      	str	r3, [sp, #16]
 8015d5e:	e6ae      	b.n	8015abe <_dtoa_r+0x696>
 8015d60:	9c07      	ldr	r4, [sp, #28]
 8015d62:	9704      	str	r7, [sp, #16]
 8015d64:	4625      	mov	r5, r4
 8015d66:	e7f3      	b.n	8015d50 <_dtoa_r+0x928>
 8015d68:	9b07      	ldr	r3, [sp, #28]
 8015d6a:	9300      	str	r3, [sp, #0]
 8015d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	f000 8104 	beq.w	8015f7c <_dtoa_r+0xb54>
 8015d74:	2e00      	cmp	r6, #0
 8015d76:	dd05      	ble.n	8015d84 <_dtoa_r+0x95c>
 8015d78:	4629      	mov	r1, r5
 8015d7a:	4632      	mov	r2, r6
 8015d7c:	4658      	mov	r0, fp
 8015d7e:	f000 fb6f 	bl	8016460 <__lshift>
 8015d82:	4605      	mov	r5, r0
 8015d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d05a      	beq.n	8015e40 <_dtoa_r+0xa18>
 8015d8a:	6869      	ldr	r1, [r5, #4]
 8015d8c:	4658      	mov	r0, fp
 8015d8e:	f000 f959 	bl	8016044 <_Balloc>
 8015d92:	4606      	mov	r6, r0
 8015d94:	b928      	cbnz	r0, 8015da2 <_dtoa_r+0x97a>
 8015d96:	4b84      	ldr	r3, [pc, #528]	@ (8015fa8 <_dtoa_r+0xb80>)
 8015d98:	4602      	mov	r2, r0
 8015d9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015d9e:	f7ff bb5a 	b.w	8015456 <_dtoa_r+0x2e>
 8015da2:	692a      	ldr	r2, [r5, #16]
 8015da4:	3202      	adds	r2, #2
 8015da6:	0092      	lsls	r2, r2, #2
 8015da8:	f105 010c 	add.w	r1, r5, #12
 8015dac:	300c      	adds	r0, #12
 8015dae:	f7ff faa4 	bl	80152fa <memcpy>
 8015db2:	2201      	movs	r2, #1
 8015db4:	4631      	mov	r1, r6
 8015db6:	4658      	mov	r0, fp
 8015db8:	f000 fb52 	bl	8016460 <__lshift>
 8015dbc:	f10a 0301 	add.w	r3, sl, #1
 8015dc0:	9307      	str	r3, [sp, #28]
 8015dc2:	9b00      	ldr	r3, [sp, #0]
 8015dc4:	4453      	add	r3, sl
 8015dc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015dc8:	9b02      	ldr	r3, [sp, #8]
 8015dca:	f003 0301 	and.w	r3, r3, #1
 8015dce:	462f      	mov	r7, r5
 8015dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8015dd2:	4605      	mov	r5, r0
 8015dd4:	9b07      	ldr	r3, [sp, #28]
 8015dd6:	4621      	mov	r1, r4
 8015dd8:	3b01      	subs	r3, #1
 8015dda:	4648      	mov	r0, r9
 8015ddc:	9300      	str	r3, [sp, #0]
 8015dde:	f7ff fa9a 	bl	8015316 <quorem>
 8015de2:	4639      	mov	r1, r7
 8015de4:	9002      	str	r0, [sp, #8]
 8015de6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015dea:	4648      	mov	r0, r9
 8015dec:	f000 fba4 	bl	8016538 <__mcmp>
 8015df0:	462a      	mov	r2, r5
 8015df2:	9008      	str	r0, [sp, #32]
 8015df4:	4621      	mov	r1, r4
 8015df6:	4658      	mov	r0, fp
 8015df8:	f000 fbba 	bl	8016570 <__mdiff>
 8015dfc:	68c2      	ldr	r2, [r0, #12]
 8015dfe:	4606      	mov	r6, r0
 8015e00:	bb02      	cbnz	r2, 8015e44 <_dtoa_r+0xa1c>
 8015e02:	4601      	mov	r1, r0
 8015e04:	4648      	mov	r0, r9
 8015e06:	f000 fb97 	bl	8016538 <__mcmp>
 8015e0a:	4602      	mov	r2, r0
 8015e0c:	4631      	mov	r1, r6
 8015e0e:	4658      	mov	r0, fp
 8015e10:	920e      	str	r2, [sp, #56]	@ 0x38
 8015e12:	f000 f957 	bl	80160c4 <_Bfree>
 8015e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015e1a:	9e07      	ldr	r6, [sp, #28]
 8015e1c:	ea43 0102 	orr.w	r1, r3, r2
 8015e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015e22:	4319      	orrs	r1, r3
 8015e24:	d110      	bne.n	8015e48 <_dtoa_r+0xa20>
 8015e26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015e2a:	d029      	beq.n	8015e80 <_dtoa_r+0xa58>
 8015e2c:	9b08      	ldr	r3, [sp, #32]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	dd02      	ble.n	8015e38 <_dtoa_r+0xa10>
 8015e32:	9b02      	ldr	r3, [sp, #8]
 8015e34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015e38:	9b00      	ldr	r3, [sp, #0]
 8015e3a:	f883 8000 	strb.w	r8, [r3]
 8015e3e:	e63f      	b.n	8015ac0 <_dtoa_r+0x698>
 8015e40:	4628      	mov	r0, r5
 8015e42:	e7bb      	b.n	8015dbc <_dtoa_r+0x994>
 8015e44:	2201      	movs	r2, #1
 8015e46:	e7e1      	b.n	8015e0c <_dtoa_r+0x9e4>
 8015e48:	9b08      	ldr	r3, [sp, #32]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	db04      	blt.n	8015e58 <_dtoa_r+0xa30>
 8015e4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015e50:	430b      	orrs	r3, r1
 8015e52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015e54:	430b      	orrs	r3, r1
 8015e56:	d120      	bne.n	8015e9a <_dtoa_r+0xa72>
 8015e58:	2a00      	cmp	r2, #0
 8015e5a:	dded      	ble.n	8015e38 <_dtoa_r+0xa10>
 8015e5c:	4649      	mov	r1, r9
 8015e5e:	2201      	movs	r2, #1
 8015e60:	4658      	mov	r0, fp
 8015e62:	f000 fafd 	bl	8016460 <__lshift>
 8015e66:	4621      	mov	r1, r4
 8015e68:	4681      	mov	r9, r0
 8015e6a:	f000 fb65 	bl	8016538 <__mcmp>
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	dc03      	bgt.n	8015e7a <_dtoa_r+0xa52>
 8015e72:	d1e1      	bne.n	8015e38 <_dtoa_r+0xa10>
 8015e74:	f018 0f01 	tst.w	r8, #1
 8015e78:	d0de      	beq.n	8015e38 <_dtoa_r+0xa10>
 8015e7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015e7e:	d1d8      	bne.n	8015e32 <_dtoa_r+0xa0a>
 8015e80:	9a00      	ldr	r2, [sp, #0]
 8015e82:	2339      	movs	r3, #57	@ 0x39
 8015e84:	7013      	strb	r3, [r2, #0]
 8015e86:	4633      	mov	r3, r6
 8015e88:	461e      	mov	r6, r3
 8015e8a:	3b01      	subs	r3, #1
 8015e8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015e90:	2a39      	cmp	r2, #57	@ 0x39
 8015e92:	d052      	beq.n	8015f3a <_dtoa_r+0xb12>
 8015e94:	3201      	adds	r2, #1
 8015e96:	701a      	strb	r2, [r3, #0]
 8015e98:	e612      	b.n	8015ac0 <_dtoa_r+0x698>
 8015e9a:	2a00      	cmp	r2, #0
 8015e9c:	dd07      	ble.n	8015eae <_dtoa_r+0xa86>
 8015e9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015ea2:	d0ed      	beq.n	8015e80 <_dtoa_r+0xa58>
 8015ea4:	9a00      	ldr	r2, [sp, #0]
 8015ea6:	f108 0301 	add.w	r3, r8, #1
 8015eaa:	7013      	strb	r3, [r2, #0]
 8015eac:	e608      	b.n	8015ac0 <_dtoa_r+0x698>
 8015eae:	9b07      	ldr	r3, [sp, #28]
 8015eb0:	9a07      	ldr	r2, [sp, #28]
 8015eb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015eb8:	4293      	cmp	r3, r2
 8015eba:	d028      	beq.n	8015f0e <_dtoa_r+0xae6>
 8015ebc:	4649      	mov	r1, r9
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	220a      	movs	r2, #10
 8015ec2:	4658      	mov	r0, fp
 8015ec4:	f000 f920 	bl	8016108 <__multadd>
 8015ec8:	42af      	cmp	r7, r5
 8015eca:	4681      	mov	r9, r0
 8015ecc:	f04f 0300 	mov.w	r3, #0
 8015ed0:	f04f 020a 	mov.w	r2, #10
 8015ed4:	4639      	mov	r1, r7
 8015ed6:	4658      	mov	r0, fp
 8015ed8:	d107      	bne.n	8015eea <_dtoa_r+0xac2>
 8015eda:	f000 f915 	bl	8016108 <__multadd>
 8015ede:	4607      	mov	r7, r0
 8015ee0:	4605      	mov	r5, r0
 8015ee2:	9b07      	ldr	r3, [sp, #28]
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	9307      	str	r3, [sp, #28]
 8015ee8:	e774      	b.n	8015dd4 <_dtoa_r+0x9ac>
 8015eea:	f000 f90d 	bl	8016108 <__multadd>
 8015eee:	4629      	mov	r1, r5
 8015ef0:	4607      	mov	r7, r0
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	220a      	movs	r2, #10
 8015ef6:	4658      	mov	r0, fp
 8015ef8:	f000 f906 	bl	8016108 <__multadd>
 8015efc:	4605      	mov	r5, r0
 8015efe:	e7f0      	b.n	8015ee2 <_dtoa_r+0xaba>
 8015f00:	9b00      	ldr	r3, [sp, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	bfcc      	ite	gt
 8015f06:	461e      	movgt	r6, r3
 8015f08:	2601      	movle	r6, #1
 8015f0a:	4456      	add	r6, sl
 8015f0c:	2700      	movs	r7, #0
 8015f0e:	4649      	mov	r1, r9
 8015f10:	2201      	movs	r2, #1
 8015f12:	4658      	mov	r0, fp
 8015f14:	f000 faa4 	bl	8016460 <__lshift>
 8015f18:	4621      	mov	r1, r4
 8015f1a:	4681      	mov	r9, r0
 8015f1c:	f000 fb0c 	bl	8016538 <__mcmp>
 8015f20:	2800      	cmp	r0, #0
 8015f22:	dcb0      	bgt.n	8015e86 <_dtoa_r+0xa5e>
 8015f24:	d102      	bne.n	8015f2c <_dtoa_r+0xb04>
 8015f26:	f018 0f01 	tst.w	r8, #1
 8015f2a:	d1ac      	bne.n	8015e86 <_dtoa_r+0xa5e>
 8015f2c:	4633      	mov	r3, r6
 8015f2e:	461e      	mov	r6, r3
 8015f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f34:	2a30      	cmp	r2, #48	@ 0x30
 8015f36:	d0fa      	beq.n	8015f2e <_dtoa_r+0xb06>
 8015f38:	e5c2      	b.n	8015ac0 <_dtoa_r+0x698>
 8015f3a:	459a      	cmp	sl, r3
 8015f3c:	d1a4      	bne.n	8015e88 <_dtoa_r+0xa60>
 8015f3e:	9b04      	ldr	r3, [sp, #16]
 8015f40:	3301      	adds	r3, #1
 8015f42:	9304      	str	r3, [sp, #16]
 8015f44:	2331      	movs	r3, #49	@ 0x31
 8015f46:	f88a 3000 	strb.w	r3, [sl]
 8015f4a:	e5b9      	b.n	8015ac0 <_dtoa_r+0x698>
 8015f4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015f4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8015fac <_dtoa_r+0xb84>
 8015f52:	b11b      	cbz	r3, 8015f5c <_dtoa_r+0xb34>
 8015f54:	f10a 0308 	add.w	r3, sl, #8
 8015f58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015f5a:	6013      	str	r3, [r2, #0]
 8015f5c:	4650      	mov	r0, sl
 8015f5e:	b019      	add	sp, #100	@ 0x64
 8015f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f66:	2b01      	cmp	r3, #1
 8015f68:	f77f ae37 	ble.w	8015bda <_dtoa_r+0x7b2>
 8015f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f70:	2001      	movs	r0, #1
 8015f72:	e655      	b.n	8015c20 <_dtoa_r+0x7f8>
 8015f74:	9b00      	ldr	r3, [sp, #0]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	f77f aed6 	ble.w	8015d28 <_dtoa_r+0x900>
 8015f7c:	4656      	mov	r6, sl
 8015f7e:	4621      	mov	r1, r4
 8015f80:	4648      	mov	r0, r9
 8015f82:	f7ff f9c8 	bl	8015316 <quorem>
 8015f86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015f8a:	f806 8b01 	strb.w	r8, [r6], #1
 8015f8e:	9b00      	ldr	r3, [sp, #0]
 8015f90:	eba6 020a 	sub.w	r2, r6, sl
 8015f94:	4293      	cmp	r3, r2
 8015f96:	ddb3      	ble.n	8015f00 <_dtoa_r+0xad8>
 8015f98:	4649      	mov	r1, r9
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	220a      	movs	r2, #10
 8015f9e:	4658      	mov	r0, fp
 8015fa0:	f000 f8b2 	bl	8016108 <__multadd>
 8015fa4:	4681      	mov	r9, r0
 8015fa6:	e7ea      	b.n	8015f7e <_dtoa_r+0xb56>
 8015fa8:	080d4f80 	.word	0x080d4f80
 8015fac:	080d4f04 	.word	0x080d4f04

08015fb0 <_free_r>:
 8015fb0:	b538      	push	{r3, r4, r5, lr}
 8015fb2:	4605      	mov	r5, r0
 8015fb4:	2900      	cmp	r1, #0
 8015fb6:	d041      	beq.n	801603c <_free_r+0x8c>
 8015fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fbc:	1f0c      	subs	r4, r1, #4
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	bfb8      	it	lt
 8015fc2:	18e4      	addlt	r4, r4, r3
 8015fc4:	f7fe fa9c 	bl	8014500 <__malloc_lock>
 8015fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8016040 <_free_r+0x90>)
 8015fca:	6813      	ldr	r3, [r2, #0]
 8015fcc:	b933      	cbnz	r3, 8015fdc <_free_r+0x2c>
 8015fce:	6063      	str	r3, [r4, #4]
 8015fd0:	6014      	str	r4, [r2, #0]
 8015fd2:	4628      	mov	r0, r5
 8015fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fd8:	f7fe ba98 	b.w	801450c <__malloc_unlock>
 8015fdc:	42a3      	cmp	r3, r4
 8015fde:	d908      	bls.n	8015ff2 <_free_r+0x42>
 8015fe0:	6820      	ldr	r0, [r4, #0]
 8015fe2:	1821      	adds	r1, r4, r0
 8015fe4:	428b      	cmp	r3, r1
 8015fe6:	bf01      	itttt	eq
 8015fe8:	6819      	ldreq	r1, [r3, #0]
 8015fea:	685b      	ldreq	r3, [r3, #4]
 8015fec:	1809      	addeq	r1, r1, r0
 8015fee:	6021      	streq	r1, [r4, #0]
 8015ff0:	e7ed      	b.n	8015fce <_free_r+0x1e>
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	685b      	ldr	r3, [r3, #4]
 8015ff6:	b10b      	cbz	r3, 8015ffc <_free_r+0x4c>
 8015ff8:	42a3      	cmp	r3, r4
 8015ffa:	d9fa      	bls.n	8015ff2 <_free_r+0x42>
 8015ffc:	6811      	ldr	r1, [r2, #0]
 8015ffe:	1850      	adds	r0, r2, r1
 8016000:	42a0      	cmp	r0, r4
 8016002:	d10b      	bne.n	801601c <_free_r+0x6c>
 8016004:	6820      	ldr	r0, [r4, #0]
 8016006:	4401      	add	r1, r0
 8016008:	1850      	adds	r0, r2, r1
 801600a:	4283      	cmp	r3, r0
 801600c:	6011      	str	r1, [r2, #0]
 801600e:	d1e0      	bne.n	8015fd2 <_free_r+0x22>
 8016010:	6818      	ldr	r0, [r3, #0]
 8016012:	685b      	ldr	r3, [r3, #4]
 8016014:	6053      	str	r3, [r2, #4]
 8016016:	4408      	add	r0, r1
 8016018:	6010      	str	r0, [r2, #0]
 801601a:	e7da      	b.n	8015fd2 <_free_r+0x22>
 801601c:	d902      	bls.n	8016024 <_free_r+0x74>
 801601e:	230c      	movs	r3, #12
 8016020:	602b      	str	r3, [r5, #0]
 8016022:	e7d6      	b.n	8015fd2 <_free_r+0x22>
 8016024:	6820      	ldr	r0, [r4, #0]
 8016026:	1821      	adds	r1, r4, r0
 8016028:	428b      	cmp	r3, r1
 801602a:	bf04      	itt	eq
 801602c:	6819      	ldreq	r1, [r3, #0]
 801602e:	685b      	ldreq	r3, [r3, #4]
 8016030:	6063      	str	r3, [r4, #4]
 8016032:	bf04      	itt	eq
 8016034:	1809      	addeq	r1, r1, r0
 8016036:	6021      	streq	r1, [r4, #0]
 8016038:	6054      	str	r4, [r2, #4]
 801603a:	e7ca      	b.n	8015fd2 <_free_r+0x22>
 801603c:	bd38      	pop	{r3, r4, r5, pc}
 801603e:	bf00      	nop
 8016040:	20035e18 	.word	0x20035e18

08016044 <_Balloc>:
 8016044:	b570      	push	{r4, r5, r6, lr}
 8016046:	69c6      	ldr	r6, [r0, #28]
 8016048:	4604      	mov	r4, r0
 801604a:	460d      	mov	r5, r1
 801604c:	b976      	cbnz	r6, 801606c <_Balloc+0x28>
 801604e:	2010      	movs	r0, #16
 8016050:	f7fe f9ac 	bl	80143ac <malloc>
 8016054:	4602      	mov	r2, r0
 8016056:	61e0      	str	r0, [r4, #28]
 8016058:	b920      	cbnz	r0, 8016064 <_Balloc+0x20>
 801605a:	4b18      	ldr	r3, [pc, #96]	@ (80160bc <_Balloc+0x78>)
 801605c:	4818      	ldr	r0, [pc, #96]	@ (80160c0 <_Balloc+0x7c>)
 801605e:	216b      	movs	r1, #107	@ 0x6b
 8016060:	f000 fde4 	bl	8016c2c <__assert_func>
 8016064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016068:	6006      	str	r6, [r0, #0]
 801606a:	60c6      	str	r6, [r0, #12]
 801606c:	69e6      	ldr	r6, [r4, #28]
 801606e:	68f3      	ldr	r3, [r6, #12]
 8016070:	b183      	cbz	r3, 8016094 <_Balloc+0x50>
 8016072:	69e3      	ldr	r3, [r4, #28]
 8016074:	68db      	ldr	r3, [r3, #12]
 8016076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801607a:	b9b8      	cbnz	r0, 80160ac <_Balloc+0x68>
 801607c:	2101      	movs	r1, #1
 801607e:	fa01 f605 	lsl.w	r6, r1, r5
 8016082:	1d72      	adds	r2, r6, #5
 8016084:	0092      	lsls	r2, r2, #2
 8016086:	4620      	mov	r0, r4
 8016088:	f000 fdee 	bl	8016c68 <_calloc_r>
 801608c:	b160      	cbz	r0, 80160a8 <_Balloc+0x64>
 801608e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016092:	e00e      	b.n	80160b2 <_Balloc+0x6e>
 8016094:	2221      	movs	r2, #33	@ 0x21
 8016096:	2104      	movs	r1, #4
 8016098:	4620      	mov	r0, r4
 801609a:	f000 fde5 	bl	8016c68 <_calloc_r>
 801609e:	69e3      	ldr	r3, [r4, #28]
 80160a0:	60f0      	str	r0, [r6, #12]
 80160a2:	68db      	ldr	r3, [r3, #12]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d1e4      	bne.n	8016072 <_Balloc+0x2e>
 80160a8:	2000      	movs	r0, #0
 80160aa:	bd70      	pop	{r4, r5, r6, pc}
 80160ac:	6802      	ldr	r2, [r0, #0]
 80160ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80160b2:	2300      	movs	r3, #0
 80160b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80160b8:	e7f7      	b.n	80160aa <_Balloc+0x66>
 80160ba:	bf00      	nop
 80160bc:	080d4f11 	.word	0x080d4f11
 80160c0:	080d4f91 	.word	0x080d4f91

080160c4 <_Bfree>:
 80160c4:	b570      	push	{r4, r5, r6, lr}
 80160c6:	69c6      	ldr	r6, [r0, #28]
 80160c8:	4605      	mov	r5, r0
 80160ca:	460c      	mov	r4, r1
 80160cc:	b976      	cbnz	r6, 80160ec <_Bfree+0x28>
 80160ce:	2010      	movs	r0, #16
 80160d0:	f7fe f96c 	bl	80143ac <malloc>
 80160d4:	4602      	mov	r2, r0
 80160d6:	61e8      	str	r0, [r5, #28]
 80160d8:	b920      	cbnz	r0, 80160e4 <_Bfree+0x20>
 80160da:	4b09      	ldr	r3, [pc, #36]	@ (8016100 <_Bfree+0x3c>)
 80160dc:	4809      	ldr	r0, [pc, #36]	@ (8016104 <_Bfree+0x40>)
 80160de:	218f      	movs	r1, #143	@ 0x8f
 80160e0:	f000 fda4 	bl	8016c2c <__assert_func>
 80160e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80160e8:	6006      	str	r6, [r0, #0]
 80160ea:	60c6      	str	r6, [r0, #12]
 80160ec:	b13c      	cbz	r4, 80160fe <_Bfree+0x3a>
 80160ee:	69eb      	ldr	r3, [r5, #28]
 80160f0:	6862      	ldr	r2, [r4, #4]
 80160f2:	68db      	ldr	r3, [r3, #12]
 80160f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80160f8:	6021      	str	r1, [r4, #0]
 80160fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80160fe:	bd70      	pop	{r4, r5, r6, pc}
 8016100:	080d4f11 	.word	0x080d4f11
 8016104:	080d4f91 	.word	0x080d4f91

08016108 <__multadd>:
 8016108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801610c:	690d      	ldr	r5, [r1, #16]
 801610e:	4607      	mov	r7, r0
 8016110:	460c      	mov	r4, r1
 8016112:	461e      	mov	r6, r3
 8016114:	f101 0c14 	add.w	ip, r1, #20
 8016118:	2000      	movs	r0, #0
 801611a:	f8dc 3000 	ldr.w	r3, [ip]
 801611e:	b299      	uxth	r1, r3
 8016120:	fb02 6101 	mla	r1, r2, r1, r6
 8016124:	0c1e      	lsrs	r6, r3, #16
 8016126:	0c0b      	lsrs	r3, r1, #16
 8016128:	fb02 3306 	mla	r3, r2, r6, r3
 801612c:	b289      	uxth	r1, r1
 801612e:	3001      	adds	r0, #1
 8016130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016134:	4285      	cmp	r5, r0
 8016136:	f84c 1b04 	str.w	r1, [ip], #4
 801613a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801613e:	dcec      	bgt.n	801611a <__multadd+0x12>
 8016140:	b30e      	cbz	r6, 8016186 <__multadd+0x7e>
 8016142:	68a3      	ldr	r3, [r4, #8]
 8016144:	42ab      	cmp	r3, r5
 8016146:	dc19      	bgt.n	801617c <__multadd+0x74>
 8016148:	6861      	ldr	r1, [r4, #4]
 801614a:	4638      	mov	r0, r7
 801614c:	3101      	adds	r1, #1
 801614e:	f7ff ff79 	bl	8016044 <_Balloc>
 8016152:	4680      	mov	r8, r0
 8016154:	b928      	cbnz	r0, 8016162 <__multadd+0x5a>
 8016156:	4602      	mov	r2, r0
 8016158:	4b0c      	ldr	r3, [pc, #48]	@ (801618c <__multadd+0x84>)
 801615a:	480d      	ldr	r0, [pc, #52]	@ (8016190 <__multadd+0x88>)
 801615c:	21ba      	movs	r1, #186	@ 0xba
 801615e:	f000 fd65 	bl	8016c2c <__assert_func>
 8016162:	6922      	ldr	r2, [r4, #16]
 8016164:	3202      	adds	r2, #2
 8016166:	f104 010c 	add.w	r1, r4, #12
 801616a:	0092      	lsls	r2, r2, #2
 801616c:	300c      	adds	r0, #12
 801616e:	f7ff f8c4 	bl	80152fa <memcpy>
 8016172:	4621      	mov	r1, r4
 8016174:	4638      	mov	r0, r7
 8016176:	f7ff ffa5 	bl	80160c4 <_Bfree>
 801617a:	4644      	mov	r4, r8
 801617c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016180:	3501      	adds	r5, #1
 8016182:	615e      	str	r6, [r3, #20]
 8016184:	6125      	str	r5, [r4, #16]
 8016186:	4620      	mov	r0, r4
 8016188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801618c:	080d4f80 	.word	0x080d4f80
 8016190:	080d4f91 	.word	0x080d4f91

08016194 <__hi0bits>:
 8016194:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016198:	4603      	mov	r3, r0
 801619a:	bf36      	itet	cc
 801619c:	0403      	lslcc	r3, r0, #16
 801619e:	2000      	movcs	r0, #0
 80161a0:	2010      	movcc	r0, #16
 80161a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80161a6:	bf3c      	itt	cc
 80161a8:	021b      	lslcc	r3, r3, #8
 80161aa:	3008      	addcc	r0, #8
 80161ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80161b0:	bf3c      	itt	cc
 80161b2:	011b      	lslcc	r3, r3, #4
 80161b4:	3004      	addcc	r0, #4
 80161b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80161ba:	bf3c      	itt	cc
 80161bc:	009b      	lslcc	r3, r3, #2
 80161be:	3002      	addcc	r0, #2
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	db05      	blt.n	80161d0 <__hi0bits+0x3c>
 80161c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80161c8:	f100 0001 	add.w	r0, r0, #1
 80161cc:	bf08      	it	eq
 80161ce:	2020      	moveq	r0, #32
 80161d0:	4770      	bx	lr

080161d2 <__lo0bits>:
 80161d2:	6803      	ldr	r3, [r0, #0]
 80161d4:	4602      	mov	r2, r0
 80161d6:	f013 0007 	ands.w	r0, r3, #7
 80161da:	d00b      	beq.n	80161f4 <__lo0bits+0x22>
 80161dc:	07d9      	lsls	r1, r3, #31
 80161de:	d421      	bmi.n	8016224 <__lo0bits+0x52>
 80161e0:	0798      	lsls	r0, r3, #30
 80161e2:	bf49      	itett	mi
 80161e4:	085b      	lsrmi	r3, r3, #1
 80161e6:	089b      	lsrpl	r3, r3, #2
 80161e8:	2001      	movmi	r0, #1
 80161ea:	6013      	strmi	r3, [r2, #0]
 80161ec:	bf5c      	itt	pl
 80161ee:	6013      	strpl	r3, [r2, #0]
 80161f0:	2002      	movpl	r0, #2
 80161f2:	4770      	bx	lr
 80161f4:	b299      	uxth	r1, r3
 80161f6:	b909      	cbnz	r1, 80161fc <__lo0bits+0x2a>
 80161f8:	0c1b      	lsrs	r3, r3, #16
 80161fa:	2010      	movs	r0, #16
 80161fc:	b2d9      	uxtb	r1, r3
 80161fe:	b909      	cbnz	r1, 8016204 <__lo0bits+0x32>
 8016200:	3008      	adds	r0, #8
 8016202:	0a1b      	lsrs	r3, r3, #8
 8016204:	0719      	lsls	r1, r3, #28
 8016206:	bf04      	itt	eq
 8016208:	091b      	lsreq	r3, r3, #4
 801620a:	3004      	addeq	r0, #4
 801620c:	0799      	lsls	r1, r3, #30
 801620e:	bf04      	itt	eq
 8016210:	089b      	lsreq	r3, r3, #2
 8016212:	3002      	addeq	r0, #2
 8016214:	07d9      	lsls	r1, r3, #31
 8016216:	d403      	bmi.n	8016220 <__lo0bits+0x4e>
 8016218:	085b      	lsrs	r3, r3, #1
 801621a:	f100 0001 	add.w	r0, r0, #1
 801621e:	d003      	beq.n	8016228 <__lo0bits+0x56>
 8016220:	6013      	str	r3, [r2, #0]
 8016222:	4770      	bx	lr
 8016224:	2000      	movs	r0, #0
 8016226:	4770      	bx	lr
 8016228:	2020      	movs	r0, #32
 801622a:	4770      	bx	lr

0801622c <__i2b>:
 801622c:	b510      	push	{r4, lr}
 801622e:	460c      	mov	r4, r1
 8016230:	2101      	movs	r1, #1
 8016232:	f7ff ff07 	bl	8016044 <_Balloc>
 8016236:	4602      	mov	r2, r0
 8016238:	b928      	cbnz	r0, 8016246 <__i2b+0x1a>
 801623a:	4b05      	ldr	r3, [pc, #20]	@ (8016250 <__i2b+0x24>)
 801623c:	4805      	ldr	r0, [pc, #20]	@ (8016254 <__i2b+0x28>)
 801623e:	f240 1145 	movw	r1, #325	@ 0x145
 8016242:	f000 fcf3 	bl	8016c2c <__assert_func>
 8016246:	2301      	movs	r3, #1
 8016248:	6144      	str	r4, [r0, #20]
 801624a:	6103      	str	r3, [r0, #16]
 801624c:	bd10      	pop	{r4, pc}
 801624e:	bf00      	nop
 8016250:	080d4f80 	.word	0x080d4f80
 8016254:	080d4f91 	.word	0x080d4f91

08016258 <__multiply>:
 8016258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801625c:	4614      	mov	r4, r2
 801625e:	690a      	ldr	r2, [r1, #16]
 8016260:	6923      	ldr	r3, [r4, #16]
 8016262:	429a      	cmp	r2, r3
 8016264:	bfa8      	it	ge
 8016266:	4623      	movge	r3, r4
 8016268:	460f      	mov	r7, r1
 801626a:	bfa4      	itt	ge
 801626c:	460c      	movge	r4, r1
 801626e:	461f      	movge	r7, r3
 8016270:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016274:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016278:	68a3      	ldr	r3, [r4, #8]
 801627a:	6861      	ldr	r1, [r4, #4]
 801627c:	eb0a 0609 	add.w	r6, sl, r9
 8016280:	42b3      	cmp	r3, r6
 8016282:	b085      	sub	sp, #20
 8016284:	bfb8      	it	lt
 8016286:	3101      	addlt	r1, #1
 8016288:	f7ff fedc 	bl	8016044 <_Balloc>
 801628c:	b930      	cbnz	r0, 801629c <__multiply+0x44>
 801628e:	4602      	mov	r2, r0
 8016290:	4b44      	ldr	r3, [pc, #272]	@ (80163a4 <__multiply+0x14c>)
 8016292:	4845      	ldr	r0, [pc, #276]	@ (80163a8 <__multiply+0x150>)
 8016294:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016298:	f000 fcc8 	bl	8016c2c <__assert_func>
 801629c:	f100 0514 	add.w	r5, r0, #20
 80162a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80162a4:	462b      	mov	r3, r5
 80162a6:	2200      	movs	r2, #0
 80162a8:	4543      	cmp	r3, r8
 80162aa:	d321      	bcc.n	80162f0 <__multiply+0x98>
 80162ac:	f107 0114 	add.w	r1, r7, #20
 80162b0:	f104 0214 	add.w	r2, r4, #20
 80162b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80162b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80162bc:	9302      	str	r3, [sp, #8]
 80162be:	1b13      	subs	r3, r2, r4
 80162c0:	3b15      	subs	r3, #21
 80162c2:	f023 0303 	bic.w	r3, r3, #3
 80162c6:	3304      	adds	r3, #4
 80162c8:	f104 0715 	add.w	r7, r4, #21
 80162cc:	42ba      	cmp	r2, r7
 80162ce:	bf38      	it	cc
 80162d0:	2304      	movcc	r3, #4
 80162d2:	9301      	str	r3, [sp, #4]
 80162d4:	9b02      	ldr	r3, [sp, #8]
 80162d6:	9103      	str	r1, [sp, #12]
 80162d8:	428b      	cmp	r3, r1
 80162da:	d80c      	bhi.n	80162f6 <__multiply+0x9e>
 80162dc:	2e00      	cmp	r6, #0
 80162de:	dd03      	ble.n	80162e8 <__multiply+0x90>
 80162e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d05b      	beq.n	80163a0 <__multiply+0x148>
 80162e8:	6106      	str	r6, [r0, #16]
 80162ea:	b005      	add	sp, #20
 80162ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f0:	f843 2b04 	str.w	r2, [r3], #4
 80162f4:	e7d8      	b.n	80162a8 <__multiply+0x50>
 80162f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80162fa:	f1ba 0f00 	cmp.w	sl, #0
 80162fe:	d024      	beq.n	801634a <__multiply+0xf2>
 8016300:	f104 0e14 	add.w	lr, r4, #20
 8016304:	46a9      	mov	r9, r5
 8016306:	f04f 0c00 	mov.w	ip, #0
 801630a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801630e:	f8d9 3000 	ldr.w	r3, [r9]
 8016312:	fa1f fb87 	uxth.w	fp, r7
 8016316:	b29b      	uxth	r3, r3
 8016318:	fb0a 330b 	mla	r3, sl, fp, r3
 801631c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016320:	f8d9 7000 	ldr.w	r7, [r9]
 8016324:	4463      	add	r3, ip
 8016326:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801632a:	fb0a c70b 	mla	r7, sl, fp, ip
 801632e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016332:	b29b      	uxth	r3, r3
 8016334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016338:	4572      	cmp	r2, lr
 801633a:	f849 3b04 	str.w	r3, [r9], #4
 801633e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016342:	d8e2      	bhi.n	801630a <__multiply+0xb2>
 8016344:	9b01      	ldr	r3, [sp, #4]
 8016346:	f845 c003 	str.w	ip, [r5, r3]
 801634a:	9b03      	ldr	r3, [sp, #12]
 801634c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016350:	3104      	adds	r1, #4
 8016352:	f1b9 0f00 	cmp.w	r9, #0
 8016356:	d021      	beq.n	801639c <__multiply+0x144>
 8016358:	682b      	ldr	r3, [r5, #0]
 801635a:	f104 0c14 	add.w	ip, r4, #20
 801635e:	46ae      	mov	lr, r5
 8016360:	f04f 0a00 	mov.w	sl, #0
 8016364:	f8bc b000 	ldrh.w	fp, [ip]
 8016368:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801636c:	fb09 770b 	mla	r7, r9, fp, r7
 8016370:	4457      	add	r7, sl
 8016372:	b29b      	uxth	r3, r3
 8016374:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016378:	f84e 3b04 	str.w	r3, [lr], #4
 801637c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016380:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016384:	f8be 3000 	ldrh.w	r3, [lr]
 8016388:	fb09 330a 	mla	r3, r9, sl, r3
 801638c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016390:	4562      	cmp	r2, ip
 8016392:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016396:	d8e5      	bhi.n	8016364 <__multiply+0x10c>
 8016398:	9f01      	ldr	r7, [sp, #4]
 801639a:	51eb      	str	r3, [r5, r7]
 801639c:	3504      	adds	r5, #4
 801639e:	e799      	b.n	80162d4 <__multiply+0x7c>
 80163a0:	3e01      	subs	r6, #1
 80163a2:	e79b      	b.n	80162dc <__multiply+0x84>
 80163a4:	080d4f80 	.word	0x080d4f80
 80163a8:	080d4f91 	.word	0x080d4f91

080163ac <__pow5mult>:
 80163ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163b0:	4615      	mov	r5, r2
 80163b2:	f012 0203 	ands.w	r2, r2, #3
 80163b6:	4607      	mov	r7, r0
 80163b8:	460e      	mov	r6, r1
 80163ba:	d007      	beq.n	80163cc <__pow5mult+0x20>
 80163bc:	4c25      	ldr	r4, [pc, #148]	@ (8016454 <__pow5mult+0xa8>)
 80163be:	3a01      	subs	r2, #1
 80163c0:	2300      	movs	r3, #0
 80163c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80163c6:	f7ff fe9f 	bl	8016108 <__multadd>
 80163ca:	4606      	mov	r6, r0
 80163cc:	10ad      	asrs	r5, r5, #2
 80163ce:	d03d      	beq.n	801644c <__pow5mult+0xa0>
 80163d0:	69fc      	ldr	r4, [r7, #28]
 80163d2:	b97c      	cbnz	r4, 80163f4 <__pow5mult+0x48>
 80163d4:	2010      	movs	r0, #16
 80163d6:	f7fd ffe9 	bl	80143ac <malloc>
 80163da:	4602      	mov	r2, r0
 80163dc:	61f8      	str	r0, [r7, #28]
 80163de:	b928      	cbnz	r0, 80163ec <__pow5mult+0x40>
 80163e0:	4b1d      	ldr	r3, [pc, #116]	@ (8016458 <__pow5mult+0xac>)
 80163e2:	481e      	ldr	r0, [pc, #120]	@ (801645c <__pow5mult+0xb0>)
 80163e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80163e8:	f000 fc20 	bl	8016c2c <__assert_func>
 80163ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80163f0:	6004      	str	r4, [r0, #0]
 80163f2:	60c4      	str	r4, [r0, #12]
 80163f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80163f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80163fc:	b94c      	cbnz	r4, 8016412 <__pow5mult+0x66>
 80163fe:	f240 2171 	movw	r1, #625	@ 0x271
 8016402:	4638      	mov	r0, r7
 8016404:	f7ff ff12 	bl	801622c <__i2b>
 8016408:	2300      	movs	r3, #0
 801640a:	f8c8 0008 	str.w	r0, [r8, #8]
 801640e:	4604      	mov	r4, r0
 8016410:	6003      	str	r3, [r0, #0]
 8016412:	f04f 0900 	mov.w	r9, #0
 8016416:	07eb      	lsls	r3, r5, #31
 8016418:	d50a      	bpl.n	8016430 <__pow5mult+0x84>
 801641a:	4631      	mov	r1, r6
 801641c:	4622      	mov	r2, r4
 801641e:	4638      	mov	r0, r7
 8016420:	f7ff ff1a 	bl	8016258 <__multiply>
 8016424:	4631      	mov	r1, r6
 8016426:	4680      	mov	r8, r0
 8016428:	4638      	mov	r0, r7
 801642a:	f7ff fe4b 	bl	80160c4 <_Bfree>
 801642e:	4646      	mov	r6, r8
 8016430:	106d      	asrs	r5, r5, #1
 8016432:	d00b      	beq.n	801644c <__pow5mult+0xa0>
 8016434:	6820      	ldr	r0, [r4, #0]
 8016436:	b938      	cbnz	r0, 8016448 <__pow5mult+0x9c>
 8016438:	4622      	mov	r2, r4
 801643a:	4621      	mov	r1, r4
 801643c:	4638      	mov	r0, r7
 801643e:	f7ff ff0b 	bl	8016258 <__multiply>
 8016442:	6020      	str	r0, [r4, #0]
 8016444:	f8c0 9000 	str.w	r9, [r0]
 8016448:	4604      	mov	r4, r0
 801644a:	e7e4      	b.n	8016416 <__pow5mult+0x6a>
 801644c:	4630      	mov	r0, r6
 801644e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016452:	bf00      	nop
 8016454:	080d4fec 	.word	0x080d4fec
 8016458:	080d4f11 	.word	0x080d4f11
 801645c:	080d4f91 	.word	0x080d4f91

08016460 <__lshift>:
 8016460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016464:	460c      	mov	r4, r1
 8016466:	6849      	ldr	r1, [r1, #4]
 8016468:	6923      	ldr	r3, [r4, #16]
 801646a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801646e:	68a3      	ldr	r3, [r4, #8]
 8016470:	4607      	mov	r7, r0
 8016472:	4691      	mov	r9, r2
 8016474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016478:	f108 0601 	add.w	r6, r8, #1
 801647c:	42b3      	cmp	r3, r6
 801647e:	db0b      	blt.n	8016498 <__lshift+0x38>
 8016480:	4638      	mov	r0, r7
 8016482:	f7ff fddf 	bl	8016044 <_Balloc>
 8016486:	4605      	mov	r5, r0
 8016488:	b948      	cbnz	r0, 801649e <__lshift+0x3e>
 801648a:	4602      	mov	r2, r0
 801648c:	4b28      	ldr	r3, [pc, #160]	@ (8016530 <__lshift+0xd0>)
 801648e:	4829      	ldr	r0, [pc, #164]	@ (8016534 <__lshift+0xd4>)
 8016490:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016494:	f000 fbca 	bl	8016c2c <__assert_func>
 8016498:	3101      	adds	r1, #1
 801649a:	005b      	lsls	r3, r3, #1
 801649c:	e7ee      	b.n	801647c <__lshift+0x1c>
 801649e:	2300      	movs	r3, #0
 80164a0:	f100 0114 	add.w	r1, r0, #20
 80164a4:	f100 0210 	add.w	r2, r0, #16
 80164a8:	4618      	mov	r0, r3
 80164aa:	4553      	cmp	r3, sl
 80164ac:	db33      	blt.n	8016516 <__lshift+0xb6>
 80164ae:	6920      	ldr	r0, [r4, #16]
 80164b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80164b4:	f104 0314 	add.w	r3, r4, #20
 80164b8:	f019 091f 	ands.w	r9, r9, #31
 80164bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80164c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80164c4:	d02b      	beq.n	801651e <__lshift+0xbe>
 80164c6:	f1c9 0e20 	rsb	lr, r9, #32
 80164ca:	468a      	mov	sl, r1
 80164cc:	2200      	movs	r2, #0
 80164ce:	6818      	ldr	r0, [r3, #0]
 80164d0:	fa00 f009 	lsl.w	r0, r0, r9
 80164d4:	4310      	orrs	r0, r2
 80164d6:	f84a 0b04 	str.w	r0, [sl], #4
 80164da:	f853 2b04 	ldr.w	r2, [r3], #4
 80164de:	459c      	cmp	ip, r3
 80164e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80164e4:	d8f3      	bhi.n	80164ce <__lshift+0x6e>
 80164e6:	ebac 0304 	sub.w	r3, ip, r4
 80164ea:	3b15      	subs	r3, #21
 80164ec:	f023 0303 	bic.w	r3, r3, #3
 80164f0:	3304      	adds	r3, #4
 80164f2:	f104 0015 	add.w	r0, r4, #21
 80164f6:	4584      	cmp	ip, r0
 80164f8:	bf38      	it	cc
 80164fa:	2304      	movcc	r3, #4
 80164fc:	50ca      	str	r2, [r1, r3]
 80164fe:	b10a      	cbz	r2, 8016504 <__lshift+0xa4>
 8016500:	f108 0602 	add.w	r6, r8, #2
 8016504:	3e01      	subs	r6, #1
 8016506:	4638      	mov	r0, r7
 8016508:	612e      	str	r6, [r5, #16]
 801650a:	4621      	mov	r1, r4
 801650c:	f7ff fdda 	bl	80160c4 <_Bfree>
 8016510:	4628      	mov	r0, r5
 8016512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016516:	f842 0f04 	str.w	r0, [r2, #4]!
 801651a:	3301      	adds	r3, #1
 801651c:	e7c5      	b.n	80164aa <__lshift+0x4a>
 801651e:	3904      	subs	r1, #4
 8016520:	f853 2b04 	ldr.w	r2, [r3], #4
 8016524:	f841 2f04 	str.w	r2, [r1, #4]!
 8016528:	459c      	cmp	ip, r3
 801652a:	d8f9      	bhi.n	8016520 <__lshift+0xc0>
 801652c:	e7ea      	b.n	8016504 <__lshift+0xa4>
 801652e:	bf00      	nop
 8016530:	080d4f80 	.word	0x080d4f80
 8016534:	080d4f91 	.word	0x080d4f91

08016538 <__mcmp>:
 8016538:	690a      	ldr	r2, [r1, #16]
 801653a:	4603      	mov	r3, r0
 801653c:	6900      	ldr	r0, [r0, #16]
 801653e:	1a80      	subs	r0, r0, r2
 8016540:	b530      	push	{r4, r5, lr}
 8016542:	d10e      	bne.n	8016562 <__mcmp+0x2a>
 8016544:	3314      	adds	r3, #20
 8016546:	3114      	adds	r1, #20
 8016548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801654c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016558:	4295      	cmp	r5, r2
 801655a:	d003      	beq.n	8016564 <__mcmp+0x2c>
 801655c:	d205      	bcs.n	801656a <__mcmp+0x32>
 801655e:	f04f 30ff 	mov.w	r0, #4294967295
 8016562:	bd30      	pop	{r4, r5, pc}
 8016564:	42a3      	cmp	r3, r4
 8016566:	d3f3      	bcc.n	8016550 <__mcmp+0x18>
 8016568:	e7fb      	b.n	8016562 <__mcmp+0x2a>
 801656a:	2001      	movs	r0, #1
 801656c:	e7f9      	b.n	8016562 <__mcmp+0x2a>
	...

08016570 <__mdiff>:
 8016570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016574:	4689      	mov	r9, r1
 8016576:	4606      	mov	r6, r0
 8016578:	4611      	mov	r1, r2
 801657a:	4648      	mov	r0, r9
 801657c:	4614      	mov	r4, r2
 801657e:	f7ff ffdb 	bl	8016538 <__mcmp>
 8016582:	1e05      	subs	r5, r0, #0
 8016584:	d112      	bne.n	80165ac <__mdiff+0x3c>
 8016586:	4629      	mov	r1, r5
 8016588:	4630      	mov	r0, r6
 801658a:	f7ff fd5b 	bl	8016044 <_Balloc>
 801658e:	4602      	mov	r2, r0
 8016590:	b928      	cbnz	r0, 801659e <__mdiff+0x2e>
 8016592:	4b3f      	ldr	r3, [pc, #252]	@ (8016690 <__mdiff+0x120>)
 8016594:	f240 2137 	movw	r1, #567	@ 0x237
 8016598:	483e      	ldr	r0, [pc, #248]	@ (8016694 <__mdiff+0x124>)
 801659a:	f000 fb47 	bl	8016c2c <__assert_func>
 801659e:	2301      	movs	r3, #1
 80165a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80165a4:	4610      	mov	r0, r2
 80165a6:	b003      	add	sp, #12
 80165a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ac:	bfbc      	itt	lt
 80165ae:	464b      	movlt	r3, r9
 80165b0:	46a1      	movlt	r9, r4
 80165b2:	4630      	mov	r0, r6
 80165b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80165b8:	bfba      	itte	lt
 80165ba:	461c      	movlt	r4, r3
 80165bc:	2501      	movlt	r5, #1
 80165be:	2500      	movge	r5, #0
 80165c0:	f7ff fd40 	bl	8016044 <_Balloc>
 80165c4:	4602      	mov	r2, r0
 80165c6:	b918      	cbnz	r0, 80165d0 <__mdiff+0x60>
 80165c8:	4b31      	ldr	r3, [pc, #196]	@ (8016690 <__mdiff+0x120>)
 80165ca:	f240 2145 	movw	r1, #581	@ 0x245
 80165ce:	e7e3      	b.n	8016598 <__mdiff+0x28>
 80165d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80165d4:	6926      	ldr	r6, [r4, #16]
 80165d6:	60c5      	str	r5, [r0, #12]
 80165d8:	f109 0310 	add.w	r3, r9, #16
 80165dc:	f109 0514 	add.w	r5, r9, #20
 80165e0:	f104 0e14 	add.w	lr, r4, #20
 80165e4:	f100 0b14 	add.w	fp, r0, #20
 80165e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80165ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80165f0:	9301      	str	r3, [sp, #4]
 80165f2:	46d9      	mov	r9, fp
 80165f4:	f04f 0c00 	mov.w	ip, #0
 80165f8:	9b01      	ldr	r3, [sp, #4]
 80165fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80165fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016602:	9301      	str	r3, [sp, #4]
 8016604:	fa1f f38a 	uxth.w	r3, sl
 8016608:	4619      	mov	r1, r3
 801660a:	b283      	uxth	r3, r0
 801660c:	1acb      	subs	r3, r1, r3
 801660e:	0c00      	lsrs	r0, r0, #16
 8016610:	4463      	add	r3, ip
 8016612:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016616:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801661a:	b29b      	uxth	r3, r3
 801661c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016620:	4576      	cmp	r6, lr
 8016622:	f849 3b04 	str.w	r3, [r9], #4
 8016626:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801662a:	d8e5      	bhi.n	80165f8 <__mdiff+0x88>
 801662c:	1b33      	subs	r3, r6, r4
 801662e:	3b15      	subs	r3, #21
 8016630:	f023 0303 	bic.w	r3, r3, #3
 8016634:	3415      	adds	r4, #21
 8016636:	3304      	adds	r3, #4
 8016638:	42a6      	cmp	r6, r4
 801663a:	bf38      	it	cc
 801663c:	2304      	movcc	r3, #4
 801663e:	441d      	add	r5, r3
 8016640:	445b      	add	r3, fp
 8016642:	461e      	mov	r6, r3
 8016644:	462c      	mov	r4, r5
 8016646:	4544      	cmp	r4, r8
 8016648:	d30e      	bcc.n	8016668 <__mdiff+0xf8>
 801664a:	f108 0103 	add.w	r1, r8, #3
 801664e:	1b49      	subs	r1, r1, r5
 8016650:	f021 0103 	bic.w	r1, r1, #3
 8016654:	3d03      	subs	r5, #3
 8016656:	45a8      	cmp	r8, r5
 8016658:	bf38      	it	cc
 801665a:	2100      	movcc	r1, #0
 801665c:	440b      	add	r3, r1
 801665e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016662:	b191      	cbz	r1, 801668a <__mdiff+0x11a>
 8016664:	6117      	str	r7, [r2, #16]
 8016666:	e79d      	b.n	80165a4 <__mdiff+0x34>
 8016668:	f854 1b04 	ldr.w	r1, [r4], #4
 801666c:	46e6      	mov	lr, ip
 801666e:	0c08      	lsrs	r0, r1, #16
 8016670:	fa1c fc81 	uxtah	ip, ip, r1
 8016674:	4471      	add	r1, lr
 8016676:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801667a:	b289      	uxth	r1, r1
 801667c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016680:	f846 1b04 	str.w	r1, [r6], #4
 8016684:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016688:	e7dd      	b.n	8016646 <__mdiff+0xd6>
 801668a:	3f01      	subs	r7, #1
 801668c:	e7e7      	b.n	801665e <__mdiff+0xee>
 801668e:	bf00      	nop
 8016690:	080d4f80 	.word	0x080d4f80
 8016694:	080d4f91 	.word	0x080d4f91

08016698 <__d2b>:
 8016698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801669c:	460f      	mov	r7, r1
 801669e:	2101      	movs	r1, #1
 80166a0:	ec59 8b10 	vmov	r8, r9, d0
 80166a4:	4616      	mov	r6, r2
 80166a6:	f7ff fccd 	bl	8016044 <_Balloc>
 80166aa:	4604      	mov	r4, r0
 80166ac:	b930      	cbnz	r0, 80166bc <__d2b+0x24>
 80166ae:	4602      	mov	r2, r0
 80166b0:	4b23      	ldr	r3, [pc, #140]	@ (8016740 <__d2b+0xa8>)
 80166b2:	4824      	ldr	r0, [pc, #144]	@ (8016744 <__d2b+0xac>)
 80166b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80166b8:	f000 fab8 	bl	8016c2c <__assert_func>
 80166bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80166c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80166c4:	b10d      	cbz	r5, 80166ca <__d2b+0x32>
 80166c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80166ca:	9301      	str	r3, [sp, #4]
 80166cc:	f1b8 0300 	subs.w	r3, r8, #0
 80166d0:	d023      	beq.n	801671a <__d2b+0x82>
 80166d2:	4668      	mov	r0, sp
 80166d4:	9300      	str	r3, [sp, #0]
 80166d6:	f7ff fd7c 	bl	80161d2 <__lo0bits>
 80166da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80166de:	b1d0      	cbz	r0, 8016716 <__d2b+0x7e>
 80166e0:	f1c0 0320 	rsb	r3, r0, #32
 80166e4:	fa02 f303 	lsl.w	r3, r2, r3
 80166e8:	430b      	orrs	r3, r1
 80166ea:	40c2      	lsrs	r2, r0
 80166ec:	6163      	str	r3, [r4, #20]
 80166ee:	9201      	str	r2, [sp, #4]
 80166f0:	9b01      	ldr	r3, [sp, #4]
 80166f2:	61a3      	str	r3, [r4, #24]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	bf0c      	ite	eq
 80166f8:	2201      	moveq	r2, #1
 80166fa:	2202      	movne	r2, #2
 80166fc:	6122      	str	r2, [r4, #16]
 80166fe:	b1a5      	cbz	r5, 801672a <__d2b+0x92>
 8016700:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016704:	4405      	add	r5, r0
 8016706:	603d      	str	r5, [r7, #0]
 8016708:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801670c:	6030      	str	r0, [r6, #0]
 801670e:	4620      	mov	r0, r4
 8016710:	b003      	add	sp, #12
 8016712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016716:	6161      	str	r1, [r4, #20]
 8016718:	e7ea      	b.n	80166f0 <__d2b+0x58>
 801671a:	a801      	add	r0, sp, #4
 801671c:	f7ff fd59 	bl	80161d2 <__lo0bits>
 8016720:	9b01      	ldr	r3, [sp, #4]
 8016722:	6163      	str	r3, [r4, #20]
 8016724:	3020      	adds	r0, #32
 8016726:	2201      	movs	r2, #1
 8016728:	e7e8      	b.n	80166fc <__d2b+0x64>
 801672a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801672e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016732:	6038      	str	r0, [r7, #0]
 8016734:	6918      	ldr	r0, [r3, #16]
 8016736:	f7ff fd2d 	bl	8016194 <__hi0bits>
 801673a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801673e:	e7e5      	b.n	801670c <__d2b+0x74>
 8016740:	080d4f80 	.word	0x080d4f80
 8016744:	080d4f91 	.word	0x080d4f91

08016748 <__sfputc_r>:
 8016748:	6893      	ldr	r3, [r2, #8]
 801674a:	3b01      	subs	r3, #1
 801674c:	2b00      	cmp	r3, #0
 801674e:	b410      	push	{r4}
 8016750:	6093      	str	r3, [r2, #8]
 8016752:	da08      	bge.n	8016766 <__sfputc_r+0x1e>
 8016754:	6994      	ldr	r4, [r2, #24]
 8016756:	42a3      	cmp	r3, r4
 8016758:	db01      	blt.n	801675e <__sfputc_r+0x16>
 801675a:	290a      	cmp	r1, #10
 801675c:	d103      	bne.n	8016766 <__sfputc_r+0x1e>
 801675e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016762:	f7fe bca6 	b.w	80150b2 <__swbuf_r>
 8016766:	6813      	ldr	r3, [r2, #0]
 8016768:	1c58      	adds	r0, r3, #1
 801676a:	6010      	str	r0, [r2, #0]
 801676c:	7019      	strb	r1, [r3, #0]
 801676e:	4608      	mov	r0, r1
 8016770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016774:	4770      	bx	lr

08016776 <__sfputs_r>:
 8016776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016778:	4606      	mov	r6, r0
 801677a:	460f      	mov	r7, r1
 801677c:	4614      	mov	r4, r2
 801677e:	18d5      	adds	r5, r2, r3
 8016780:	42ac      	cmp	r4, r5
 8016782:	d101      	bne.n	8016788 <__sfputs_r+0x12>
 8016784:	2000      	movs	r0, #0
 8016786:	e007      	b.n	8016798 <__sfputs_r+0x22>
 8016788:	f814 1b01 	ldrb.w	r1, [r4], #1
 801678c:	463a      	mov	r2, r7
 801678e:	4630      	mov	r0, r6
 8016790:	f7ff ffda 	bl	8016748 <__sfputc_r>
 8016794:	1c43      	adds	r3, r0, #1
 8016796:	d1f3      	bne.n	8016780 <__sfputs_r+0xa>
 8016798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801679c <_vfiprintf_r>:
 801679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a0:	460d      	mov	r5, r1
 80167a2:	b09d      	sub	sp, #116	@ 0x74
 80167a4:	4614      	mov	r4, r2
 80167a6:	4698      	mov	r8, r3
 80167a8:	4606      	mov	r6, r0
 80167aa:	b118      	cbz	r0, 80167b4 <_vfiprintf_r+0x18>
 80167ac:	6a03      	ldr	r3, [r0, #32]
 80167ae:	b90b      	cbnz	r3, 80167b4 <_vfiprintf_r+0x18>
 80167b0:	f7fe fb96 	bl	8014ee0 <__sinit>
 80167b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80167b6:	07d9      	lsls	r1, r3, #31
 80167b8:	d405      	bmi.n	80167c6 <_vfiprintf_r+0x2a>
 80167ba:	89ab      	ldrh	r3, [r5, #12]
 80167bc:	059a      	lsls	r2, r3, #22
 80167be:	d402      	bmi.n	80167c6 <_vfiprintf_r+0x2a>
 80167c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80167c2:	f7fe fd98 	bl	80152f6 <__retarget_lock_acquire_recursive>
 80167c6:	89ab      	ldrh	r3, [r5, #12]
 80167c8:	071b      	lsls	r3, r3, #28
 80167ca:	d501      	bpl.n	80167d0 <_vfiprintf_r+0x34>
 80167cc:	692b      	ldr	r3, [r5, #16]
 80167ce:	b99b      	cbnz	r3, 80167f8 <_vfiprintf_r+0x5c>
 80167d0:	4629      	mov	r1, r5
 80167d2:	4630      	mov	r0, r6
 80167d4:	f7fe fcac 	bl	8015130 <__swsetup_r>
 80167d8:	b170      	cbz	r0, 80167f8 <_vfiprintf_r+0x5c>
 80167da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80167dc:	07dc      	lsls	r4, r3, #31
 80167de:	d504      	bpl.n	80167ea <_vfiprintf_r+0x4e>
 80167e0:	f04f 30ff 	mov.w	r0, #4294967295
 80167e4:	b01d      	add	sp, #116	@ 0x74
 80167e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ea:	89ab      	ldrh	r3, [r5, #12]
 80167ec:	0598      	lsls	r0, r3, #22
 80167ee:	d4f7      	bmi.n	80167e0 <_vfiprintf_r+0x44>
 80167f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80167f2:	f7fe fd81 	bl	80152f8 <__retarget_lock_release_recursive>
 80167f6:	e7f3      	b.n	80167e0 <_vfiprintf_r+0x44>
 80167f8:	2300      	movs	r3, #0
 80167fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80167fc:	2320      	movs	r3, #32
 80167fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016802:	f8cd 800c 	str.w	r8, [sp, #12]
 8016806:	2330      	movs	r3, #48	@ 0x30
 8016808:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80169b8 <_vfiprintf_r+0x21c>
 801680c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016810:	f04f 0901 	mov.w	r9, #1
 8016814:	4623      	mov	r3, r4
 8016816:	469a      	mov	sl, r3
 8016818:	f813 2b01 	ldrb.w	r2, [r3], #1
 801681c:	b10a      	cbz	r2, 8016822 <_vfiprintf_r+0x86>
 801681e:	2a25      	cmp	r2, #37	@ 0x25
 8016820:	d1f9      	bne.n	8016816 <_vfiprintf_r+0x7a>
 8016822:	ebba 0b04 	subs.w	fp, sl, r4
 8016826:	d00b      	beq.n	8016840 <_vfiprintf_r+0xa4>
 8016828:	465b      	mov	r3, fp
 801682a:	4622      	mov	r2, r4
 801682c:	4629      	mov	r1, r5
 801682e:	4630      	mov	r0, r6
 8016830:	f7ff ffa1 	bl	8016776 <__sfputs_r>
 8016834:	3001      	adds	r0, #1
 8016836:	f000 80a7 	beq.w	8016988 <_vfiprintf_r+0x1ec>
 801683a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801683c:	445a      	add	r2, fp
 801683e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016840:	f89a 3000 	ldrb.w	r3, [sl]
 8016844:	2b00      	cmp	r3, #0
 8016846:	f000 809f 	beq.w	8016988 <_vfiprintf_r+0x1ec>
 801684a:	2300      	movs	r3, #0
 801684c:	f04f 32ff 	mov.w	r2, #4294967295
 8016850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016854:	f10a 0a01 	add.w	sl, sl, #1
 8016858:	9304      	str	r3, [sp, #16]
 801685a:	9307      	str	r3, [sp, #28]
 801685c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016860:	931a      	str	r3, [sp, #104]	@ 0x68
 8016862:	4654      	mov	r4, sl
 8016864:	2205      	movs	r2, #5
 8016866:	f814 1b01 	ldrb.w	r1, [r4], #1
 801686a:	4853      	ldr	r0, [pc, #332]	@ (80169b8 <_vfiprintf_r+0x21c>)
 801686c:	f7e9 fd30 	bl	80002d0 <memchr>
 8016870:	9a04      	ldr	r2, [sp, #16]
 8016872:	b9d8      	cbnz	r0, 80168ac <_vfiprintf_r+0x110>
 8016874:	06d1      	lsls	r1, r2, #27
 8016876:	bf44      	itt	mi
 8016878:	2320      	movmi	r3, #32
 801687a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801687e:	0713      	lsls	r3, r2, #28
 8016880:	bf44      	itt	mi
 8016882:	232b      	movmi	r3, #43	@ 0x2b
 8016884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016888:	f89a 3000 	ldrb.w	r3, [sl]
 801688c:	2b2a      	cmp	r3, #42	@ 0x2a
 801688e:	d015      	beq.n	80168bc <_vfiprintf_r+0x120>
 8016890:	9a07      	ldr	r2, [sp, #28]
 8016892:	4654      	mov	r4, sl
 8016894:	2000      	movs	r0, #0
 8016896:	f04f 0c0a 	mov.w	ip, #10
 801689a:	4621      	mov	r1, r4
 801689c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168a0:	3b30      	subs	r3, #48	@ 0x30
 80168a2:	2b09      	cmp	r3, #9
 80168a4:	d94b      	bls.n	801693e <_vfiprintf_r+0x1a2>
 80168a6:	b1b0      	cbz	r0, 80168d6 <_vfiprintf_r+0x13a>
 80168a8:	9207      	str	r2, [sp, #28]
 80168aa:	e014      	b.n	80168d6 <_vfiprintf_r+0x13a>
 80168ac:	eba0 0308 	sub.w	r3, r0, r8
 80168b0:	fa09 f303 	lsl.w	r3, r9, r3
 80168b4:	4313      	orrs	r3, r2
 80168b6:	9304      	str	r3, [sp, #16]
 80168b8:	46a2      	mov	sl, r4
 80168ba:	e7d2      	b.n	8016862 <_vfiprintf_r+0xc6>
 80168bc:	9b03      	ldr	r3, [sp, #12]
 80168be:	1d19      	adds	r1, r3, #4
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	9103      	str	r1, [sp, #12]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	bfbb      	ittet	lt
 80168c8:	425b      	neglt	r3, r3
 80168ca:	f042 0202 	orrlt.w	r2, r2, #2
 80168ce:	9307      	strge	r3, [sp, #28]
 80168d0:	9307      	strlt	r3, [sp, #28]
 80168d2:	bfb8      	it	lt
 80168d4:	9204      	strlt	r2, [sp, #16]
 80168d6:	7823      	ldrb	r3, [r4, #0]
 80168d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80168da:	d10a      	bne.n	80168f2 <_vfiprintf_r+0x156>
 80168dc:	7863      	ldrb	r3, [r4, #1]
 80168de:	2b2a      	cmp	r3, #42	@ 0x2a
 80168e0:	d132      	bne.n	8016948 <_vfiprintf_r+0x1ac>
 80168e2:	9b03      	ldr	r3, [sp, #12]
 80168e4:	1d1a      	adds	r2, r3, #4
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	9203      	str	r2, [sp, #12]
 80168ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80168ee:	3402      	adds	r4, #2
 80168f0:	9305      	str	r3, [sp, #20]
 80168f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80169c8 <_vfiprintf_r+0x22c>
 80168f6:	7821      	ldrb	r1, [r4, #0]
 80168f8:	2203      	movs	r2, #3
 80168fa:	4650      	mov	r0, sl
 80168fc:	f7e9 fce8 	bl	80002d0 <memchr>
 8016900:	b138      	cbz	r0, 8016912 <_vfiprintf_r+0x176>
 8016902:	9b04      	ldr	r3, [sp, #16]
 8016904:	eba0 000a 	sub.w	r0, r0, sl
 8016908:	2240      	movs	r2, #64	@ 0x40
 801690a:	4082      	lsls	r2, r0
 801690c:	4313      	orrs	r3, r2
 801690e:	3401      	adds	r4, #1
 8016910:	9304      	str	r3, [sp, #16]
 8016912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016916:	4829      	ldr	r0, [pc, #164]	@ (80169bc <_vfiprintf_r+0x220>)
 8016918:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801691c:	2206      	movs	r2, #6
 801691e:	f7e9 fcd7 	bl	80002d0 <memchr>
 8016922:	2800      	cmp	r0, #0
 8016924:	d03f      	beq.n	80169a6 <_vfiprintf_r+0x20a>
 8016926:	4b26      	ldr	r3, [pc, #152]	@ (80169c0 <_vfiprintf_r+0x224>)
 8016928:	bb1b      	cbnz	r3, 8016972 <_vfiprintf_r+0x1d6>
 801692a:	9b03      	ldr	r3, [sp, #12]
 801692c:	3307      	adds	r3, #7
 801692e:	f023 0307 	bic.w	r3, r3, #7
 8016932:	3308      	adds	r3, #8
 8016934:	9303      	str	r3, [sp, #12]
 8016936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016938:	443b      	add	r3, r7
 801693a:	9309      	str	r3, [sp, #36]	@ 0x24
 801693c:	e76a      	b.n	8016814 <_vfiprintf_r+0x78>
 801693e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016942:	460c      	mov	r4, r1
 8016944:	2001      	movs	r0, #1
 8016946:	e7a8      	b.n	801689a <_vfiprintf_r+0xfe>
 8016948:	2300      	movs	r3, #0
 801694a:	3401      	adds	r4, #1
 801694c:	9305      	str	r3, [sp, #20]
 801694e:	4619      	mov	r1, r3
 8016950:	f04f 0c0a 	mov.w	ip, #10
 8016954:	4620      	mov	r0, r4
 8016956:	f810 2b01 	ldrb.w	r2, [r0], #1
 801695a:	3a30      	subs	r2, #48	@ 0x30
 801695c:	2a09      	cmp	r2, #9
 801695e:	d903      	bls.n	8016968 <_vfiprintf_r+0x1cc>
 8016960:	2b00      	cmp	r3, #0
 8016962:	d0c6      	beq.n	80168f2 <_vfiprintf_r+0x156>
 8016964:	9105      	str	r1, [sp, #20]
 8016966:	e7c4      	b.n	80168f2 <_vfiprintf_r+0x156>
 8016968:	fb0c 2101 	mla	r1, ip, r1, r2
 801696c:	4604      	mov	r4, r0
 801696e:	2301      	movs	r3, #1
 8016970:	e7f0      	b.n	8016954 <_vfiprintf_r+0x1b8>
 8016972:	ab03      	add	r3, sp, #12
 8016974:	9300      	str	r3, [sp, #0]
 8016976:	462a      	mov	r2, r5
 8016978:	4b12      	ldr	r3, [pc, #72]	@ (80169c4 <_vfiprintf_r+0x228>)
 801697a:	a904      	add	r1, sp, #16
 801697c:	4630      	mov	r0, r6
 801697e:	f7fd fe6b 	bl	8014658 <_printf_float>
 8016982:	4607      	mov	r7, r0
 8016984:	1c78      	adds	r0, r7, #1
 8016986:	d1d6      	bne.n	8016936 <_vfiprintf_r+0x19a>
 8016988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801698a:	07d9      	lsls	r1, r3, #31
 801698c:	d405      	bmi.n	801699a <_vfiprintf_r+0x1fe>
 801698e:	89ab      	ldrh	r3, [r5, #12]
 8016990:	059a      	lsls	r2, r3, #22
 8016992:	d402      	bmi.n	801699a <_vfiprintf_r+0x1fe>
 8016994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016996:	f7fe fcaf 	bl	80152f8 <__retarget_lock_release_recursive>
 801699a:	89ab      	ldrh	r3, [r5, #12]
 801699c:	065b      	lsls	r3, r3, #25
 801699e:	f53f af1f 	bmi.w	80167e0 <_vfiprintf_r+0x44>
 80169a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80169a4:	e71e      	b.n	80167e4 <_vfiprintf_r+0x48>
 80169a6:	ab03      	add	r3, sp, #12
 80169a8:	9300      	str	r3, [sp, #0]
 80169aa:	462a      	mov	r2, r5
 80169ac:	4b05      	ldr	r3, [pc, #20]	@ (80169c4 <_vfiprintf_r+0x228>)
 80169ae:	a904      	add	r1, sp, #16
 80169b0:	4630      	mov	r0, r6
 80169b2:	f7fe f8e9 	bl	8014b88 <_printf_i>
 80169b6:	e7e4      	b.n	8016982 <_vfiprintf_r+0x1e6>
 80169b8:	080d50e8 	.word	0x080d50e8
 80169bc:	080d50f2 	.word	0x080d50f2
 80169c0:	08014659 	.word	0x08014659
 80169c4:	08016777 	.word	0x08016777
 80169c8:	080d50ee 	.word	0x080d50ee

080169cc <__sflush_r>:
 80169cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80169d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169d4:	0716      	lsls	r6, r2, #28
 80169d6:	4605      	mov	r5, r0
 80169d8:	460c      	mov	r4, r1
 80169da:	d454      	bmi.n	8016a86 <__sflush_r+0xba>
 80169dc:	684b      	ldr	r3, [r1, #4]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	dc02      	bgt.n	80169e8 <__sflush_r+0x1c>
 80169e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	dd48      	ble.n	8016a7a <__sflush_r+0xae>
 80169e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80169ea:	2e00      	cmp	r6, #0
 80169ec:	d045      	beq.n	8016a7a <__sflush_r+0xae>
 80169ee:	2300      	movs	r3, #0
 80169f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80169f4:	682f      	ldr	r7, [r5, #0]
 80169f6:	6a21      	ldr	r1, [r4, #32]
 80169f8:	602b      	str	r3, [r5, #0]
 80169fa:	d030      	beq.n	8016a5e <__sflush_r+0x92>
 80169fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80169fe:	89a3      	ldrh	r3, [r4, #12]
 8016a00:	0759      	lsls	r1, r3, #29
 8016a02:	d505      	bpl.n	8016a10 <__sflush_r+0x44>
 8016a04:	6863      	ldr	r3, [r4, #4]
 8016a06:	1ad2      	subs	r2, r2, r3
 8016a08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016a0a:	b10b      	cbz	r3, 8016a10 <__sflush_r+0x44>
 8016a0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016a0e:	1ad2      	subs	r2, r2, r3
 8016a10:	2300      	movs	r3, #0
 8016a12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a14:	6a21      	ldr	r1, [r4, #32]
 8016a16:	4628      	mov	r0, r5
 8016a18:	47b0      	blx	r6
 8016a1a:	1c43      	adds	r3, r0, #1
 8016a1c:	89a3      	ldrh	r3, [r4, #12]
 8016a1e:	d106      	bne.n	8016a2e <__sflush_r+0x62>
 8016a20:	6829      	ldr	r1, [r5, #0]
 8016a22:	291d      	cmp	r1, #29
 8016a24:	d82b      	bhi.n	8016a7e <__sflush_r+0xb2>
 8016a26:	4a2a      	ldr	r2, [pc, #168]	@ (8016ad0 <__sflush_r+0x104>)
 8016a28:	410a      	asrs	r2, r1
 8016a2a:	07d6      	lsls	r6, r2, #31
 8016a2c:	d427      	bmi.n	8016a7e <__sflush_r+0xb2>
 8016a2e:	2200      	movs	r2, #0
 8016a30:	6062      	str	r2, [r4, #4]
 8016a32:	04d9      	lsls	r1, r3, #19
 8016a34:	6922      	ldr	r2, [r4, #16]
 8016a36:	6022      	str	r2, [r4, #0]
 8016a38:	d504      	bpl.n	8016a44 <__sflush_r+0x78>
 8016a3a:	1c42      	adds	r2, r0, #1
 8016a3c:	d101      	bne.n	8016a42 <__sflush_r+0x76>
 8016a3e:	682b      	ldr	r3, [r5, #0]
 8016a40:	b903      	cbnz	r3, 8016a44 <__sflush_r+0x78>
 8016a42:	6560      	str	r0, [r4, #84]	@ 0x54
 8016a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a46:	602f      	str	r7, [r5, #0]
 8016a48:	b1b9      	cbz	r1, 8016a7a <__sflush_r+0xae>
 8016a4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016a4e:	4299      	cmp	r1, r3
 8016a50:	d002      	beq.n	8016a58 <__sflush_r+0x8c>
 8016a52:	4628      	mov	r0, r5
 8016a54:	f7ff faac 	bl	8015fb0 <_free_r>
 8016a58:	2300      	movs	r3, #0
 8016a5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8016a5c:	e00d      	b.n	8016a7a <__sflush_r+0xae>
 8016a5e:	2301      	movs	r3, #1
 8016a60:	4628      	mov	r0, r5
 8016a62:	47b0      	blx	r6
 8016a64:	4602      	mov	r2, r0
 8016a66:	1c50      	adds	r0, r2, #1
 8016a68:	d1c9      	bne.n	80169fe <__sflush_r+0x32>
 8016a6a:	682b      	ldr	r3, [r5, #0]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d0c6      	beq.n	80169fe <__sflush_r+0x32>
 8016a70:	2b1d      	cmp	r3, #29
 8016a72:	d001      	beq.n	8016a78 <__sflush_r+0xac>
 8016a74:	2b16      	cmp	r3, #22
 8016a76:	d11e      	bne.n	8016ab6 <__sflush_r+0xea>
 8016a78:	602f      	str	r7, [r5, #0]
 8016a7a:	2000      	movs	r0, #0
 8016a7c:	e022      	b.n	8016ac4 <__sflush_r+0xf8>
 8016a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a82:	b21b      	sxth	r3, r3
 8016a84:	e01b      	b.n	8016abe <__sflush_r+0xf2>
 8016a86:	690f      	ldr	r7, [r1, #16]
 8016a88:	2f00      	cmp	r7, #0
 8016a8a:	d0f6      	beq.n	8016a7a <__sflush_r+0xae>
 8016a8c:	0793      	lsls	r3, r2, #30
 8016a8e:	680e      	ldr	r6, [r1, #0]
 8016a90:	bf08      	it	eq
 8016a92:	694b      	ldreq	r3, [r1, #20]
 8016a94:	600f      	str	r7, [r1, #0]
 8016a96:	bf18      	it	ne
 8016a98:	2300      	movne	r3, #0
 8016a9a:	eba6 0807 	sub.w	r8, r6, r7
 8016a9e:	608b      	str	r3, [r1, #8]
 8016aa0:	f1b8 0f00 	cmp.w	r8, #0
 8016aa4:	dde9      	ble.n	8016a7a <__sflush_r+0xae>
 8016aa6:	6a21      	ldr	r1, [r4, #32]
 8016aa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016aaa:	4643      	mov	r3, r8
 8016aac:	463a      	mov	r2, r7
 8016aae:	4628      	mov	r0, r5
 8016ab0:	47b0      	blx	r6
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	dc08      	bgt.n	8016ac8 <__sflush_r+0xfc>
 8016ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016abe:	81a3      	strh	r3, [r4, #12]
 8016ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ac8:	4407      	add	r7, r0
 8016aca:	eba8 0800 	sub.w	r8, r8, r0
 8016ace:	e7e7      	b.n	8016aa0 <__sflush_r+0xd4>
 8016ad0:	dfbffffe 	.word	0xdfbffffe

08016ad4 <_fflush_r>:
 8016ad4:	b538      	push	{r3, r4, r5, lr}
 8016ad6:	690b      	ldr	r3, [r1, #16]
 8016ad8:	4605      	mov	r5, r0
 8016ada:	460c      	mov	r4, r1
 8016adc:	b913      	cbnz	r3, 8016ae4 <_fflush_r+0x10>
 8016ade:	2500      	movs	r5, #0
 8016ae0:	4628      	mov	r0, r5
 8016ae2:	bd38      	pop	{r3, r4, r5, pc}
 8016ae4:	b118      	cbz	r0, 8016aee <_fflush_r+0x1a>
 8016ae6:	6a03      	ldr	r3, [r0, #32]
 8016ae8:	b90b      	cbnz	r3, 8016aee <_fflush_r+0x1a>
 8016aea:	f7fe f9f9 	bl	8014ee0 <__sinit>
 8016aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d0f3      	beq.n	8016ade <_fflush_r+0xa>
 8016af6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016af8:	07d0      	lsls	r0, r2, #31
 8016afa:	d404      	bmi.n	8016b06 <_fflush_r+0x32>
 8016afc:	0599      	lsls	r1, r3, #22
 8016afe:	d402      	bmi.n	8016b06 <_fflush_r+0x32>
 8016b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b02:	f7fe fbf8 	bl	80152f6 <__retarget_lock_acquire_recursive>
 8016b06:	4628      	mov	r0, r5
 8016b08:	4621      	mov	r1, r4
 8016b0a:	f7ff ff5f 	bl	80169cc <__sflush_r>
 8016b0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b10:	07da      	lsls	r2, r3, #31
 8016b12:	4605      	mov	r5, r0
 8016b14:	d4e4      	bmi.n	8016ae0 <_fflush_r+0xc>
 8016b16:	89a3      	ldrh	r3, [r4, #12]
 8016b18:	059b      	lsls	r3, r3, #22
 8016b1a:	d4e1      	bmi.n	8016ae0 <_fflush_r+0xc>
 8016b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b1e:	f7fe fbeb 	bl	80152f8 <__retarget_lock_release_recursive>
 8016b22:	e7dd      	b.n	8016ae0 <_fflush_r+0xc>

08016b24 <__swhatbuf_r>:
 8016b24:	b570      	push	{r4, r5, r6, lr}
 8016b26:	460c      	mov	r4, r1
 8016b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b2c:	2900      	cmp	r1, #0
 8016b2e:	b096      	sub	sp, #88	@ 0x58
 8016b30:	4615      	mov	r5, r2
 8016b32:	461e      	mov	r6, r3
 8016b34:	da0d      	bge.n	8016b52 <__swhatbuf_r+0x2e>
 8016b36:	89a3      	ldrh	r3, [r4, #12]
 8016b38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016b3c:	f04f 0100 	mov.w	r1, #0
 8016b40:	bf14      	ite	ne
 8016b42:	2340      	movne	r3, #64	@ 0x40
 8016b44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016b48:	2000      	movs	r0, #0
 8016b4a:	6031      	str	r1, [r6, #0]
 8016b4c:	602b      	str	r3, [r5, #0]
 8016b4e:	b016      	add	sp, #88	@ 0x58
 8016b50:	bd70      	pop	{r4, r5, r6, pc}
 8016b52:	466a      	mov	r2, sp
 8016b54:	f000 f848 	bl	8016be8 <_fstat_r>
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	dbec      	blt.n	8016b36 <__swhatbuf_r+0x12>
 8016b5c:	9901      	ldr	r1, [sp, #4]
 8016b5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016b62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016b66:	4259      	negs	r1, r3
 8016b68:	4159      	adcs	r1, r3
 8016b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016b6e:	e7eb      	b.n	8016b48 <__swhatbuf_r+0x24>

08016b70 <__smakebuf_r>:
 8016b70:	898b      	ldrh	r3, [r1, #12]
 8016b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b74:	079d      	lsls	r5, r3, #30
 8016b76:	4606      	mov	r6, r0
 8016b78:	460c      	mov	r4, r1
 8016b7a:	d507      	bpl.n	8016b8c <__smakebuf_r+0x1c>
 8016b7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016b80:	6023      	str	r3, [r4, #0]
 8016b82:	6123      	str	r3, [r4, #16]
 8016b84:	2301      	movs	r3, #1
 8016b86:	6163      	str	r3, [r4, #20]
 8016b88:	b003      	add	sp, #12
 8016b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b8c:	ab01      	add	r3, sp, #4
 8016b8e:	466a      	mov	r2, sp
 8016b90:	f7ff ffc8 	bl	8016b24 <__swhatbuf_r>
 8016b94:	9f00      	ldr	r7, [sp, #0]
 8016b96:	4605      	mov	r5, r0
 8016b98:	4639      	mov	r1, r7
 8016b9a:	4630      	mov	r0, r6
 8016b9c:	f7fd fc30 	bl	8014400 <_malloc_r>
 8016ba0:	b948      	cbnz	r0, 8016bb6 <__smakebuf_r+0x46>
 8016ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ba6:	059a      	lsls	r2, r3, #22
 8016ba8:	d4ee      	bmi.n	8016b88 <__smakebuf_r+0x18>
 8016baa:	f023 0303 	bic.w	r3, r3, #3
 8016bae:	f043 0302 	orr.w	r3, r3, #2
 8016bb2:	81a3      	strh	r3, [r4, #12]
 8016bb4:	e7e2      	b.n	8016b7c <__smakebuf_r+0xc>
 8016bb6:	89a3      	ldrh	r3, [r4, #12]
 8016bb8:	6020      	str	r0, [r4, #0]
 8016bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016bbe:	81a3      	strh	r3, [r4, #12]
 8016bc0:	9b01      	ldr	r3, [sp, #4]
 8016bc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016bc6:	b15b      	cbz	r3, 8016be0 <__smakebuf_r+0x70>
 8016bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bcc:	4630      	mov	r0, r6
 8016bce:	f000 f81d 	bl	8016c0c <_isatty_r>
 8016bd2:	b128      	cbz	r0, 8016be0 <__smakebuf_r+0x70>
 8016bd4:	89a3      	ldrh	r3, [r4, #12]
 8016bd6:	f023 0303 	bic.w	r3, r3, #3
 8016bda:	f043 0301 	orr.w	r3, r3, #1
 8016bde:	81a3      	strh	r3, [r4, #12]
 8016be0:	89a3      	ldrh	r3, [r4, #12]
 8016be2:	431d      	orrs	r5, r3
 8016be4:	81a5      	strh	r5, [r4, #12]
 8016be6:	e7cf      	b.n	8016b88 <__smakebuf_r+0x18>

08016be8 <_fstat_r>:
 8016be8:	b538      	push	{r3, r4, r5, lr}
 8016bea:	4d07      	ldr	r5, [pc, #28]	@ (8016c08 <_fstat_r+0x20>)
 8016bec:	2300      	movs	r3, #0
 8016bee:	4604      	mov	r4, r0
 8016bf0:	4608      	mov	r0, r1
 8016bf2:	4611      	mov	r1, r2
 8016bf4:	602b      	str	r3, [r5, #0]
 8016bf6:	f7eb fea7 	bl	8002948 <_fstat>
 8016bfa:	1c43      	adds	r3, r0, #1
 8016bfc:	d102      	bne.n	8016c04 <_fstat_r+0x1c>
 8016bfe:	682b      	ldr	r3, [r5, #0]
 8016c00:	b103      	cbz	r3, 8016c04 <_fstat_r+0x1c>
 8016c02:	6023      	str	r3, [r4, #0]
 8016c04:	bd38      	pop	{r3, r4, r5, pc}
 8016c06:	bf00      	nop
 8016c08:	20035f58 	.word	0x20035f58

08016c0c <_isatty_r>:
 8016c0c:	b538      	push	{r3, r4, r5, lr}
 8016c0e:	4d06      	ldr	r5, [pc, #24]	@ (8016c28 <_isatty_r+0x1c>)
 8016c10:	2300      	movs	r3, #0
 8016c12:	4604      	mov	r4, r0
 8016c14:	4608      	mov	r0, r1
 8016c16:	602b      	str	r3, [r5, #0]
 8016c18:	f7eb fea6 	bl	8002968 <_isatty>
 8016c1c:	1c43      	adds	r3, r0, #1
 8016c1e:	d102      	bne.n	8016c26 <_isatty_r+0x1a>
 8016c20:	682b      	ldr	r3, [r5, #0]
 8016c22:	b103      	cbz	r3, 8016c26 <_isatty_r+0x1a>
 8016c24:	6023      	str	r3, [r4, #0]
 8016c26:	bd38      	pop	{r3, r4, r5, pc}
 8016c28:	20035f58 	.word	0x20035f58

08016c2c <__assert_func>:
 8016c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016c2e:	4614      	mov	r4, r2
 8016c30:	461a      	mov	r2, r3
 8016c32:	4b09      	ldr	r3, [pc, #36]	@ (8016c58 <__assert_func+0x2c>)
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	4605      	mov	r5, r0
 8016c38:	68d8      	ldr	r0, [r3, #12]
 8016c3a:	b954      	cbnz	r4, 8016c52 <__assert_func+0x26>
 8016c3c:	4b07      	ldr	r3, [pc, #28]	@ (8016c5c <__assert_func+0x30>)
 8016c3e:	461c      	mov	r4, r3
 8016c40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016c44:	9100      	str	r1, [sp, #0]
 8016c46:	462b      	mov	r3, r5
 8016c48:	4905      	ldr	r1, [pc, #20]	@ (8016c60 <__assert_func+0x34>)
 8016c4a:	f000 f841 	bl	8016cd0 <fiprintf>
 8016c4e:	f000 f851 	bl	8016cf4 <abort>
 8016c52:	4b04      	ldr	r3, [pc, #16]	@ (8016c64 <__assert_func+0x38>)
 8016c54:	e7f4      	b.n	8016c40 <__assert_func+0x14>
 8016c56:	bf00      	nop
 8016c58:	20000824 	.word	0x20000824
 8016c5c:	080d513e 	.word	0x080d513e
 8016c60:	080d5110 	.word	0x080d5110
 8016c64:	080d5103 	.word	0x080d5103

08016c68 <_calloc_r>:
 8016c68:	b570      	push	{r4, r5, r6, lr}
 8016c6a:	fba1 5402 	umull	r5, r4, r1, r2
 8016c6e:	b93c      	cbnz	r4, 8016c80 <_calloc_r+0x18>
 8016c70:	4629      	mov	r1, r5
 8016c72:	f7fd fbc5 	bl	8014400 <_malloc_r>
 8016c76:	4606      	mov	r6, r0
 8016c78:	b928      	cbnz	r0, 8016c86 <_calloc_r+0x1e>
 8016c7a:	2600      	movs	r6, #0
 8016c7c:	4630      	mov	r0, r6
 8016c7e:	bd70      	pop	{r4, r5, r6, pc}
 8016c80:	220c      	movs	r2, #12
 8016c82:	6002      	str	r2, [r0, #0]
 8016c84:	e7f9      	b.n	8016c7a <_calloc_r+0x12>
 8016c86:	462a      	mov	r2, r5
 8016c88:	4621      	mov	r1, r4
 8016c8a:	f7fe faa7 	bl	80151dc <memset>
 8016c8e:	e7f5      	b.n	8016c7c <_calloc_r+0x14>

08016c90 <__ascii_mbtowc>:
 8016c90:	b082      	sub	sp, #8
 8016c92:	b901      	cbnz	r1, 8016c96 <__ascii_mbtowc+0x6>
 8016c94:	a901      	add	r1, sp, #4
 8016c96:	b142      	cbz	r2, 8016caa <__ascii_mbtowc+0x1a>
 8016c98:	b14b      	cbz	r3, 8016cae <__ascii_mbtowc+0x1e>
 8016c9a:	7813      	ldrb	r3, [r2, #0]
 8016c9c:	600b      	str	r3, [r1, #0]
 8016c9e:	7812      	ldrb	r2, [r2, #0]
 8016ca0:	1e10      	subs	r0, r2, #0
 8016ca2:	bf18      	it	ne
 8016ca4:	2001      	movne	r0, #1
 8016ca6:	b002      	add	sp, #8
 8016ca8:	4770      	bx	lr
 8016caa:	4610      	mov	r0, r2
 8016cac:	e7fb      	b.n	8016ca6 <__ascii_mbtowc+0x16>
 8016cae:	f06f 0001 	mvn.w	r0, #1
 8016cb2:	e7f8      	b.n	8016ca6 <__ascii_mbtowc+0x16>

08016cb4 <__ascii_wctomb>:
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	4608      	mov	r0, r1
 8016cb8:	b141      	cbz	r1, 8016ccc <__ascii_wctomb+0x18>
 8016cba:	2aff      	cmp	r2, #255	@ 0xff
 8016cbc:	d904      	bls.n	8016cc8 <__ascii_wctomb+0x14>
 8016cbe:	228a      	movs	r2, #138	@ 0x8a
 8016cc0:	601a      	str	r2, [r3, #0]
 8016cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8016cc6:	4770      	bx	lr
 8016cc8:	700a      	strb	r2, [r1, #0]
 8016cca:	2001      	movs	r0, #1
 8016ccc:	4770      	bx	lr
	...

08016cd0 <fiprintf>:
 8016cd0:	b40e      	push	{r1, r2, r3}
 8016cd2:	b503      	push	{r0, r1, lr}
 8016cd4:	4601      	mov	r1, r0
 8016cd6:	ab03      	add	r3, sp, #12
 8016cd8:	4805      	ldr	r0, [pc, #20]	@ (8016cf0 <fiprintf+0x20>)
 8016cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cde:	6800      	ldr	r0, [r0, #0]
 8016ce0:	9301      	str	r3, [sp, #4]
 8016ce2:	f7ff fd5b 	bl	801679c <_vfiprintf_r>
 8016ce6:	b002      	add	sp, #8
 8016ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016cec:	b003      	add	sp, #12
 8016cee:	4770      	bx	lr
 8016cf0:	20000824 	.word	0x20000824

08016cf4 <abort>:
 8016cf4:	b508      	push	{r3, lr}
 8016cf6:	2006      	movs	r0, #6
 8016cf8:	f000 f82c 	bl	8016d54 <raise>
 8016cfc:	2001      	movs	r0, #1
 8016cfe:	f7eb fdd3 	bl	80028a8 <_exit>

08016d02 <_raise_r>:
 8016d02:	291f      	cmp	r1, #31
 8016d04:	b538      	push	{r3, r4, r5, lr}
 8016d06:	4605      	mov	r5, r0
 8016d08:	460c      	mov	r4, r1
 8016d0a:	d904      	bls.n	8016d16 <_raise_r+0x14>
 8016d0c:	2316      	movs	r3, #22
 8016d0e:	6003      	str	r3, [r0, #0]
 8016d10:	f04f 30ff 	mov.w	r0, #4294967295
 8016d14:	bd38      	pop	{r3, r4, r5, pc}
 8016d16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016d18:	b112      	cbz	r2, 8016d20 <_raise_r+0x1e>
 8016d1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d1e:	b94b      	cbnz	r3, 8016d34 <_raise_r+0x32>
 8016d20:	4628      	mov	r0, r5
 8016d22:	f000 f831 	bl	8016d88 <_getpid_r>
 8016d26:	4622      	mov	r2, r4
 8016d28:	4601      	mov	r1, r0
 8016d2a:	4628      	mov	r0, r5
 8016d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d30:	f000 b818 	b.w	8016d64 <_kill_r>
 8016d34:	2b01      	cmp	r3, #1
 8016d36:	d00a      	beq.n	8016d4e <_raise_r+0x4c>
 8016d38:	1c59      	adds	r1, r3, #1
 8016d3a:	d103      	bne.n	8016d44 <_raise_r+0x42>
 8016d3c:	2316      	movs	r3, #22
 8016d3e:	6003      	str	r3, [r0, #0]
 8016d40:	2001      	movs	r0, #1
 8016d42:	e7e7      	b.n	8016d14 <_raise_r+0x12>
 8016d44:	2100      	movs	r1, #0
 8016d46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	4798      	blx	r3
 8016d4e:	2000      	movs	r0, #0
 8016d50:	e7e0      	b.n	8016d14 <_raise_r+0x12>
	...

08016d54 <raise>:
 8016d54:	4b02      	ldr	r3, [pc, #8]	@ (8016d60 <raise+0xc>)
 8016d56:	4601      	mov	r1, r0
 8016d58:	6818      	ldr	r0, [r3, #0]
 8016d5a:	f7ff bfd2 	b.w	8016d02 <_raise_r>
 8016d5e:	bf00      	nop
 8016d60:	20000824 	.word	0x20000824

08016d64 <_kill_r>:
 8016d64:	b538      	push	{r3, r4, r5, lr}
 8016d66:	4d07      	ldr	r5, [pc, #28]	@ (8016d84 <_kill_r+0x20>)
 8016d68:	2300      	movs	r3, #0
 8016d6a:	4604      	mov	r4, r0
 8016d6c:	4608      	mov	r0, r1
 8016d6e:	4611      	mov	r1, r2
 8016d70:	602b      	str	r3, [r5, #0]
 8016d72:	f7eb fd89 	bl	8002888 <_kill>
 8016d76:	1c43      	adds	r3, r0, #1
 8016d78:	d102      	bne.n	8016d80 <_kill_r+0x1c>
 8016d7a:	682b      	ldr	r3, [r5, #0]
 8016d7c:	b103      	cbz	r3, 8016d80 <_kill_r+0x1c>
 8016d7e:	6023      	str	r3, [r4, #0]
 8016d80:	bd38      	pop	{r3, r4, r5, pc}
 8016d82:	bf00      	nop
 8016d84:	20035f58 	.word	0x20035f58

08016d88 <_getpid_r>:
 8016d88:	f7eb bd76 	b.w	8002878 <_getpid>

08016d8c <expf>:
 8016d8c:	b508      	push	{r3, lr}
 8016d8e:	ed2d 8b02 	vpush	{d8}
 8016d92:	eef0 8a40 	vmov.f32	s17, s0
 8016d96:	f000 f96b 	bl	8017070 <__ieee754_expf>
 8016d9a:	eeb0 8a40 	vmov.f32	s16, s0
 8016d9e:	eeb0 0a68 	vmov.f32	s0, s17
 8016da2:	f000 f892 	bl	8016eca <finitef>
 8016da6:	b160      	cbz	r0, 8016dc2 <expf+0x36>
 8016da8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8016de8 <expf+0x5c>
 8016dac:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016db4:	dd0a      	ble.n	8016dcc <expf+0x40>
 8016db6:	f7fe fa73 	bl	80152a0 <__errno>
 8016dba:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8016dec <expf+0x60>
 8016dbe:	2322      	movs	r3, #34	@ 0x22
 8016dc0:	6003      	str	r3, [r0, #0]
 8016dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8016dc6:	ecbd 8b02 	vpop	{d8}
 8016dca:	bd08      	pop	{r3, pc}
 8016dcc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8016df0 <expf+0x64>
 8016dd0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dd8:	d5f3      	bpl.n	8016dc2 <expf+0x36>
 8016dda:	f7fe fa61 	bl	80152a0 <__errno>
 8016dde:	2322      	movs	r3, #34	@ 0x22
 8016de0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8016df4 <expf+0x68>
 8016de4:	6003      	str	r3, [r0, #0]
 8016de6:	e7ec      	b.n	8016dc2 <expf+0x36>
 8016de8:	42b17217 	.word	0x42b17217
 8016dec:	7f800000 	.word	0x7f800000
 8016df0:	c2cff1b5 	.word	0xc2cff1b5
 8016df4:	00000000 	.word	0x00000000

08016df8 <sqrtf>:
 8016df8:	b508      	push	{r3, lr}
 8016dfa:	ed2d 8b02 	vpush	{d8}
 8016dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8016e02:	f000 f891 	bl	8016f28 <__ieee754_sqrtf>
 8016e06:	eeb4 8a48 	vcmp.f32	s16, s16
 8016e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e0e:	d60c      	bvs.n	8016e2a <sqrtf+0x32>
 8016e10:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8016e30 <sqrtf+0x38>
 8016e14:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e1c:	d505      	bpl.n	8016e2a <sqrtf+0x32>
 8016e1e:	f7fe fa3f 	bl	80152a0 <__errno>
 8016e22:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8016e26:	2321      	movs	r3, #33	@ 0x21
 8016e28:	6003      	str	r3, [r0, #0]
 8016e2a:	ecbd 8b02 	vpop	{d8}
 8016e2e:	bd08      	pop	{r3, pc}
 8016e30:	00000000 	.word	0x00000000

08016e34 <cosf>:
 8016e34:	ee10 3a10 	vmov	r3, s0
 8016e38:	b507      	push	{r0, r1, r2, lr}
 8016e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8016eb4 <cosf+0x80>)
 8016e3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016e40:	4293      	cmp	r3, r2
 8016e42:	d806      	bhi.n	8016e52 <cosf+0x1e>
 8016e44:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8016eb8 <cosf+0x84>
 8016e48:	b003      	add	sp, #12
 8016e4a:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e4e:	f000 b86f 	b.w	8016f30 <__kernel_cosf>
 8016e52:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016e56:	d304      	bcc.n	8016e62 <cosf+0x2e>
 8016e58:	ee30 0a40 	vsub.f32	s0, s0, s0
 8016e5c:	b003      	add	sp, #12
 8016e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016e62:	4668      	mov	r0, sp
 8016e64:	f000 f9d2 	bl	801720c <__ieee754_rem_pio2f>
 8016e68:	f000 0003 	and.w	r0, r0, #3
 8016e6c:	2801      	cmp	r0, #1
 8016e6e:	d009      	beq.n	8016e84 <cosf+0x50>
 8016e70:	2802      	cmp	r0, #2
 8016e72:	d010      	beq.n	8016e96 <cosf+0x62>
 8016e74:	b9b0      	cbnz	r0, 8016ea4 <cosf+0x70>
 8016e76:	eddd 0a01 	vldr	s1, [sp, #4]
 8016e7a:	ed9d 0a00 	vldr	s0, [sp]
 8016e7e:	f000 f857 	bl	8016f30 <__kernel_cosf>
 8016e82:	e7eb      	b.n	8016e5c <cosf+0x28>
 8016e84:	eddd 0a01 	vldr	s1, [sp, #4]
 8016e88:	ed9d 0a00 	vldr	s0, [sp]
 8016e8c:	f000 f8a8 	bl	8016fe0 <__kernel_sinf>
 8016e90:	eeb1 0a40 	vneg.f32	s0, s0
 8016e94:	e7e2      	b.n	8016e5c <cosf+0x28>
 8016e96:	eddd 0a01 	vldr	s1, [sp, #4]
 8016e9a:	ed9d 0a00 	vldr	s0, [sp]
 8016e9e:	f000 f847 	bl	8016f30 <__kernel_cosf>
 8016ea2:	e7f5      	b.n	8016e90 <cosf+0x5c>
 8016ea4:	eddd 0a01 	vldr	s1, [sp, #4]
 8016ea8:	ed9d 0a00 	vldr	s0, [sp]
 8016eac:	2001      	movs	r0, #1
 8016eae:	f000 f897 	bl	8016fe0 <__kernel_sinf>
 8016eb2:	e7d3      	b.n	8016e5c <cosf+0x28>
 8016eb4:	3f490fd8 	.word	0x3f490fd8
 8016eb8:	00000000 	.word	0x00000000

08016ebc <fabsf>:
 8016ebc:	ee10 3a10 	vmov	r3, s0
 8016ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016ec4:	ee00 3a10 	vmov	s0, r3
 8016ec8:	4770      	bx	lr

08016eca <finitef>:
 8016eca:	ee10 3a10 	vmov	r3, s0
 8016ece:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8016ed2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8016ed6:	bfac      	ite	ge
 8016ed8:	2000      	movge	r0, #0
 8016eda:	2001      	movlt	r0, #1
 8016edc:	4770      	bx	lr

08016ede <with_errnof>:
 8016ede:	b510      	push	{r4, lr}
 8016ee0:	ed2d 8b02 	vpush	{d8}
 8016ee4:	eeb0 8a40 	vmov.f32	s16, s0
 8016ee8:	4604      	mov	r4, r0
 8016eea:	f7fe f9d9 	bl	80152a0 <__errno>
 8016eee:	eeb0 0a48 	vmov.f32	s0, s16
 8016ef2:	ecbd 8b02 	vpop	{d8}
 8016ef6:	6004      	str	r4, [r0, #0]
 8016ef8:	bd10      	pop	{r4, pc}

08016efa <xflowf>:
 8016efa:	b130      	cbz	r0, 8016f0a <xflowf+0x10>
 8016efc:	eef1 7a40 	vneg.f32	s15, s0
 8016f00:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016f04:	2022      	movs	r0, #34	@ 0x22
 8016f06:	f7ff bfea 	b.w	8016ede <with_errnof>
 8016f0a:	eef0 7a40 	vmov.f32	s15, s0
 8016f0e:	e7f7      	b.n	8016f00 <xflowf+0x6>

08016f10 <__math_uflowf>:
 8016f10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016f18 <__math_uflowf+0x8>
 8016f14:	f7ff bff1 	b.w	8016efa <xflowf>
 8016f18:	10000000 	.word	0x10000000

08016f1c <__math_oflowf>:
 8016f1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016f24 <__math_oflowf+0x8>
 8016f20:	f7ff bfeb 	b.w	8016efa <xflowf>
 8016f24:	70000000 	.word	0x70000000

08016f28 <__ieee754_sqrtf>:
 8016f28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016f2c:	4770      	bx	lr
	...

08016f30 <__kernel_cosf>:
 8016f30:	ee10 3a10 	vmov	r3, s0
 8016f34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016f38:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8016f3c:	eef0 6a40 	vmov.f32	s13, s0
 8016f40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8016f44:	d204      	bcs.n	8016f50 <__kernel_cosf+0x20>
 8016f46:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8016f4a:	ee17 2a90 	vmov	r2, s15
 8016f4e:	b342      	cbz	r2, 8016fa2 <__kernel_cosf+0x72>
 8016f50:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016f54:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8016fc0 <__kernel_cosf+0x90>
 8016f58:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8016fc4 <__kernel_cosf+0x94>
 8016f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8016fc8 <__kernel_cosf+0x98>)
 8016f5e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016f62:	4293      	cmp	r3, r2
 8016f64:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016fcc <__kernel_cosf+0x9c>
 8016f68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016f6c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8016fd0 <__kernel_cosf+0xa0>
 8016f70:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016f74:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8016fd4 <__kernel_cosf+0xa4>
 8016f78:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016f7c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8016fd8 <__kernel_cosf+0xa8>
 8016f80:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016f84:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8016f88:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016f8c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016f90:	eee7 0a06 	vfma.f32	s1, s14, s12
 8016f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f98:	d804      	bhi.n	8016fa4 <__kernel_cosf+0x74>
 8016f9a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016f9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016fa2:	4770      	bx	lr
 8016fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8016fdc <__kernel_cosf+0xac>)
 8016fa6:	4293      	cmp	r3, r2
 8016fa8:	bf9a      	itte	ls
 8016faa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8016fae:	ee07 3a10 	vmovls	s14, r3
 8016fb2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8016fb6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016fba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016fbe:	e7ec      	b.n	8016f9a <__kernel_cosf+0x6a>
 8016fc0:	ad47d74e 	.word	0xad47d74e
 8016fc4:	310f74f6 	.word	0x310f74f6
 8016fc8:	3e999999 	.word	0x3e999999
 8016fcc:	b493f27c 	.word	0xb493f27c
 8016fd0:	37d00d01 	.word	0x37d00d01
 8016fd4:	bab60b61 	.word	0xbab60b61
 8016fd8:	3d2aaaab 	.word	0x3d2aaaab
 8016fdc:	3f480000 	.word	0x3f480000

08016fe0 <__kernel_sinf>:
 8016fe0:	ee10 3a10 	vmov	r3, s0
 8016fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016fe8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8016fec:	d204      	bcs.n	8016ff8 <__kernel_sinf+0x18>
 8016fee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016ff2:	ee17 3a90 	vmov	r3, s15
 8016ff6:	b35b      	cbz	r3, 8017050 <__kernel_sinf+0x70>
 8016ff8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016ffc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8017054 <__kernel_sinf+0x74>
 8017000:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8017058 <__kernel_sinf+0x78>
 8017004:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017008:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801705c <__kernel_sinf+0x7c>
 801700c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017010:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8017060 <__kernel_sinf+0x80>
 8017014:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017018:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8017064 <__kernel_sinf+0x84>
 801701c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8017020:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017024:	b930      	cbnz	r0, 8017034 <__kernel_sinf+0x54>
 8017026:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8017068 <__kernel_sinf+0x88>
 801702a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801702e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017032:	4770      	bx	lr
 8017034:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8017038:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801703c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017040:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017044:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801706c <__kernel_sinf+0x8c>
 8017048:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801704c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017050:	4770      	bx	lr
 8017052:	bf00      	nop
 8017054:	2f2ec9d3 	.word	0x2f2ec9d3
 8017058:	b2d72f34 	.word	0xb2d72f34
 801705c:	3638ef1b 	.word	0x3638ef1b
 8017060:	b9500d01 	.word	0xb9500d01
 8017064:	3c088889 	.word	0x3c088889
 8017068:	be2aaaab 	.word	0xbe2aaaab
 801706c:	3e2aaaab 	.word	0x3e2aaaab

08017070 <__ieee754_expf>:
 8017070:	ee10 2a10 	vmov	r2, s0
 8017074:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8017078:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801707c:	d902      	bls.n	8017084 <__ieee754_expf+0x14>
 801707e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017082:	4770      	bx	lr
 8017084:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8017088:	d106      	bne.n	8017098 <__ieee754_expf+0x28>
 801708a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80171c4 <__ieee754_expf+0x154>
 801708e:	2900      	cmp	r1, #0
 8017090:	bf18      	it	ne
 8017092:	eeb0 0a67 	vmovne.f32	s0, s15
 8017096:	4770      	bx	lr
 8017098:	484b      	ldr	r0, [pc, #300]	@ (80171c8 <__ieee754_expf+0x158>)
 801709a:	4282      	cmp	r2, r0
 801709c:	dd02      	ble.n	80170a4 <__ieee754_expf+0x34>
 801709e:	2000      	movs	r0, #0
 80170a0:	f7ff bf3c 	b.w	8016f1c <__math_oflowf>
 80170a4:	2a00      	cmp	r2, #0
 80170a6:	da05      	bge.n	80170b4 <__ieee754_expf+0x44>
 80170a8:	4a48      	ldr	r2, [pc, #288]	@ (80171cc <__ieee754_expf+0x15c>)
 80170aa:	4293      	cmp	r3, r2
 80170ac:	d902      	bls.n	80170b4 <__ieee754_expf+0x44>
 80170ae:	2000      	movs	r0, #0
 80170b0:	f7ff bf2e 	b.w	8016f10 <__math_uflowf>
 80170b4:	4a46      	ldr	r2, [pc, #280]	@ (80171d0 <__ieee754_expf+0x160>)
 80170b6:	4293      	cmp	r3, r2
 80170b8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80170bc:	d952      	bls.n	8017164 <__ieee754_expf+0xf4>
 80170be:	4a45      	ldr	r2, [pc, #276]	@ (80171d4 <__ieee754_expf+0x164>)
 80170c0:	4293      	cmp	r3, r2
 80170c2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80170c6:	d834      	bhi.n	8017132 <__ieee754_expf+0xc2>
 80170c8:	4b43      	ldr	r3, [pc, #268]	@ (80171d8 <__ieee754_expf+0x168>)
 80170ca:	4413      	add	r3, r2
 80170cc:	ed93 7a00 	vldr	s14, [r3]
 80170d0:	4b42      	ldr	r3, [pc, #264]	@ (80171dc <__ieee754_expf+0x16c>)
 80170d2:	4413      	add	r3, r2
 80170d4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80170d8:	f1c1 0201 	rsb	r2, r1, #1
 80170dc:	edd3 7a00 	vldr	s15, [r3]
 80170e0:	1a52      	subs	r2, r2, r1
 80170e2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80170e6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80170ea:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80171e0 <__ieee754_expf+0x170>
 80170ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80171e4 <__ieee754_expf+0x174>
 80170f2:	eee6 6a05 	vfma.f32	s13, s12, s10
 80170f6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80171e8 <__ieee754_expf+0x178>
 80170fa:	eea6 5a86 	vfma.f32	s10, s13, s12
 80170fe:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80171ec <__ieee754_expf+0x17c>
 8017102:	eee5 6a06 	vfma.f32	s13, s10, s12
 8017106:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80171f0 <__ieee754_expf+0x180>
 801710a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801710e:	eef0 6a40 	vmov.f32	s13, s0
 8017112:	eee5 6a46 	vfms.f32	s13, s10, s12
 8017116:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801711a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801711e:	bb92      	cbnz	r2, 8017186 <__ieee754_expf+0x116>
 8017120:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8017124:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8017128:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801712c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8017130:	4770      	bx	lr
 8017132:	4b30      	ldr	r3, [pc, #192]	@ (80171f4 <__ieee754_expf+0x184>)
 8017134:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80171f8 <__ieee754_expf+0x188>
 8017138:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80171fc <__ieee754_expf+0x18c>
 801713c:	4413      	add	r3, r2
 801713e:	edd3 7a00 	vldr	s15, [r3]
 8017142:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017146:	eeb0 7a40 	vmov.f32	s14, s0
 801714a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801714e:	ee17 2a90 	vmov	r2, s15
 8017152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017156:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801715a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8017200 <__ieee754_expf+0x190>
 801715e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017162:	e7be      	b.n	80170e2 <__ieee754_expf+0x72>
 8017164:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8017168:	d20b      	bcs.n	8017182 <__ieee754_expf+0x112>
 801716a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8017204 <__ieee754_expf+0x194>
 801716e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8017172:	eef4 6ae5 	vcmpe.f32	s13, s11
 8017176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801717a:	dd02      	ble.n	8017182 <__ieee754_expf+0x112>
 801717c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8017180:	4770      	bx	lr
 8017182:	2200      	movs	r2, #0
 8017184:	e7af      	b.n	80170e6 <__ieee754_expf+0x76>
 8017186:	ee36 6a66 	vsub.f32	s12, s12, s13
 801718a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801718e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8017192:	bfb8      	it	lt
 8017194:	3264      	addlt	r2, #100	@ 0x64
 8017196:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801719a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801719e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80171a2:	ee17 3a90 	vmov	r3, s15
 80171a6:	bfab      	itete	ge
 80171a8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80171ac:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80171b0:	ee00 3a10 	vmovge	s0, r3
 80171b4:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8017208 <__ieee754_expf+0x198>
 80171b8:	bfbc      	itt	lt
 80171ba:	ee00 3a10 	vmovlt	s0, r3
 80171be:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80171c2:	4770      	bx	lr
 80171c4:	00000000 	.word	0x00000000
 80171c8:	42b17217 	.word	0x42b17217
 80171cc:	42cff1b5 	.word	0x42cff1b5
 80171d0:	3eb17218 	.word	0x3eb17218
 80171d4:	3f851591 	.word	0x3f851591
 80171d8:	080d5248 	.word	0x080d5248
 80171dc:	080d5240 	.word	0x080d5240
 80171e0:	3331bb4c 	.word	0x3331bb4c
 80171e4:	b5ddea0e 	.word	0xb5ddea0e
 80171e8:	388ab355 	.word	0x388ab355
 80171ec:	bb360b61 	.word	0xbb360b61
 80171f0:	3e2aaaab 	.word	0x3e2aaaab
 80171f4:	080d5250 	.word	0x080d5250
 80171f8:	3fb8aa3b 	.word	0x3fb8aa3b
 80171fc:	3f317180 	.word	0x3f317180
 8017200:	3717f7d1 	.word	0x3717f7d1
 8017204:	7149f2ca 	.word	0x7149f2ca
 8017208:	0d800000 	.word	0x0d800000

0801720c <__ieee754_rem_pio2f>:
 801720c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801720e:	ee10 6a10 	vmov	r6, s0
 8017212:	4b88      	ldr	r3, [pc, #544]	@ (8017434 <__ieee754_rem_pio2f+0x228>)
 8017214:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8017218:	429d      	cmp	r5, r3
 801721a:	b087      	sub	sp, #28
 801721c:	4604      	mov	r4, r0
 801721e:	d805      	bhi.n	801722c <__ieee754_rem_pio2f+0x20>
 8017220:	2300      	movs	r3, #0
 8017222:	ed80 0a00 	vstr	s0, [r0]
 8017226:	6043      	str	r3, [r0, #4]
 8017228:	2000      	movs	r0, #0
 801722a:	e022      	b.n	8017272 <__ieee754_rem_pio2f+0x66>
 801722c:	4b82      	ldr	r3, [pc, #520]	@ (8017438 <__ieee754_rem_pio2f+0x22c>)
 801722e:	429d      	cmp	r5, r3
 8017230:	d83a      	bhi.n	80172a8 <__ieee754_rem_pio2f+0x9c>
 8017232:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8017236:	2e00      	cmp	r6, #0
 8017238:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801743c <__ieee754_rem_pio2f+0x230>
 801723c:	4a80      	ldr	r2, [pc, #512]	@ (8017440 <__ieee754_rem_pio2f+0x234>)
 801723e:	f023 030f 	bic.w	r3, r3, #15
 8017242:	dd18      	ble.n	8017276 <__ieee754_rem_pio2f+0x6a>
 8017244:	4293      	cmp	r3, r2
 8017246:	ee70 7a47 	vsub.f32	s15, s0, s14
 801724a:	bf09      	itett	eq
 801724c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8017444 <__ieee754_rem_pio2f+0x238>
 8017250:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8017448 <__ieee754_rem_pio2f+0x23c>
 8017254:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801744c <__ieee754_rem_pio2f+0x240>
 8017258:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801725c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8017260:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017264:	ed80 7a00 	vstr	s14, [r0]
 8017268:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801726c:	edc0 7a01 	vstr	s15, [r0, #4]
 8017270:	2001      	movs	r0, #1
 8017272:	b007      	add	sp, #28
 8017274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017276:	4293      	cmp	r3, r2
 8017278:	ee70 7a07 	vadd.f32	s15, s0, s14
 801727c:	bf09      	itett	eq
 801727e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8017444 <__ieee754_rem_pio2f+0x238>
 8017282:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8017448 <__ieee754_rem_pio2f+0x23c>
 8017286:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801744c <__ieee754_rem_pio2f+0x240>
 801728a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801728e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017296:	ed80 7a00 	vstr	s14, [r0]
 801729a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801729e:	edc0 7a01 	vstr	s15, [r0, #4]
 80172a2:	f04f 30ff 	mov.w	r0, #4294967295
 80172a6:	e7e4      	b.n	8017272 <__ieee754_rem_pio2f+0x66>
 80172a8:	4b69      	ldr	r3, [pc, #420]	@ (8017450 <__ieee754_rem_pio2f+0x244>)
 80172aa:	429d      	cmp	r5, r3
 80172ac:	d873      	bhi.n	8017396 <__ieee754_rem_pio2f+0x18a>
 80172ae:	f7ff fe05 	bl	8016ebc <fabsf>
 80172b2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8017454 <__ieee754_rem_pio2f+0x248>
 80172b6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80172ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80172be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80172c6:	ee17 0a90 	vmov	r0, s15
 80172ca:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801743c <__ieee754_rem_pio2f+0x230>
 80172ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80172d2:	281f      	cmp	r0, #31
 80172d4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8017448 <__ieee754_rem_pio2f+0x23c>
 80172d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80172dc:	eeb1 6a47 	vneg.f32	s12, s14
 80172e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80172e4:	ee16 1a90 	vmov	r1, s13
 80172e8:	dc09      	bgt.n	80172fe <__ieee754_rem_pio2f+0xf2>
 80172ea:	4a5b      	ldr	r2, [pc, #364]	@ (8017458 <__ieee754_rem_pio2f+0x24c>)
 80172ec:	1e47      	subs	r7, r0, #1
 80172ee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80172f2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80172f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80172fa:	4293      	cmp	r3, r2
 80172fc:	d107      	bne.n	801730e <__ieee754_rem_pio2f+0x102>
 80172fe:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8017302:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8017306:	2a08      	cmp	r2, #8
 8017308:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801730c:	dc14      	bgt.n	8017338 <__ieee754_rem_pio2f+0x12c>
 801730e:	6021      	str	r1, [r4, #0]
 8017310:	ed94 7a00 	vldr	s14, [r4]
 8017314:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017318:	2e00      	cmp	r6, #0
 801731a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801731e:	ed84 0a01 	vstr	s0, [r4, #4]
 8017322:	daa6      	bge.n	8017272 <__ieee754_rem_pio2f+0x66>
 8017324:	eeb1 7a47 	vneg.f32	s14, s14
 8017328:	eeb1 0a40 	vneg.f32	s0, s0
 801732c:	ed84 7a00 	vstr	s14, [r4]
 8017330:	ed84 0a01 	vstr	s0, [r4, #4]
 8017334:	4240      	negs	r0, r0
 8017336:	e79c      	b.n	8017272 <__ieee754_rem_pio2f+0x66>
 8017338:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8017444 <__ieee754_rem_pio2f+0x238>
 801733c:	eef0 6a40 	vmov.f32	s13, s0
 8017340:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017344:	ee70 7a66 	vsub.f32	s15, s0, s13
 8017348:	eee6 7a25 	vfma.f32	s15, s12, s11
 801734c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801744c <__ieee754_rem_pio2f+0x240>
 8017350:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8017354:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8017358:	ee15 2a90 	vmov	r2, s11
 801735c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8017360:	1a5b      	subs	r3, r3, r1
 8017362:	2b19      	cmp	r3, #25
 8017364:	dc04      	bgt.n	8017370 <__ieee754_rem_pio2f+0x164>
 8017366:	edc4 5a00 	vstr	s11, [r4]
 801736a:	eeb0 0a66 	vmov.f32	s0, s13
 801736e:	e7cf      	b.n	8017310 <__ieee754_rem_pio2f+0x104>
 8017370:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801745c <__ieee754_rem_pio2f+0x250>
 8017374:	eeb0 0a66 	vmov.f32	s0, s13
 8017378:	eea6 0a25 	vfma.f32	s0, s12, s11
 801737c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8017380:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8017460 <__ieee754_rem_pio2f+0x254>
 8017384:	eee6 7a25 	vfma.f32	s15, s12, s11
 8017388:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801738c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017390:	ed84 7a00 	vstr	s14, [r4]
 8017394:	e7bc      	b.n	8017310 <__ieee754_rem_pio2f+0x104>
 8017396:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801739a:	d306      	bcc.n	80173aa <__ieee754_rem_pio2f+0x19e>
 801739c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80173a0:	edc0 7a01 	vstr	s15, [r0, #4]
 80173a4:	edc0 7a00 	vstr	s15, [r0]
 80173a8:	e73e      	b.n	8017228 <__ieee754_rem_pio2f+0x1c>
 80173aa:	15ea      	asrs	r2, r5, #23
 80173ac:	3a86      	subs	r2, #134	@ 0x86
 80173ae:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80173b2:	ee07 3a90 	vmov	s15, r3
 80173b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80173ba:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8017464 <__ieee754_rem_pio2f+0x258>
 80173be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80173ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80173ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80173d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80173da:	ed8d 7a04 	vstr	s14, [sp, #16]
 80173de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80173e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80173e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ea:	edcd 7a05 	vstr	s15, [sp, #20]
 80173ee:	d11e      	bne.n	801742e <__ieee754_rem_pio2f+0x222>
 80173f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80173f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173f8:	bf0c      	ite	eq
 80173fa:	2301      	moveq	r3, #1
 80173fc:	2302      	movne	r3, #2
 80173fe:	491a      	ldr	r1, [pc, #104]	@ (8017468 <__ieee754_rem_pio2f+0x25c>)
 8017400:	9101      	str	r1, [sp, #4]
 8017402:	2102      	movs	r1, #2
 8017404:	9100      	str	r1, [sp, #0]
 8017406:	a803      	add	r0, sp, #12
 8017408:	4621      	mov	r1, r4
 801740a:	f000 f895 	bl	8017538 <__kernel_rem_pio2f>
 801740e:	2e00      	cmp	r6, #0
 8017410:	f6bf af2f 	bge.w	8017272 <__ieee754_rem_pio2f+0x66>
 8017414:	edd4 7a00 	vldr	s15, [r4]
 8017418:	eef1 7a67 	vneg.f32	s15, s15
 801741c:	edc4 7a00 	vstr	s15, [r4]
 8017420:	edd4 7a01 	vldr	s15, [r4, #4]
 8017424:	eef1 7a67 	vneg.f32	s15, s15
 8017428:	edc4 7a01 	vstr	s15, [r4, #4]
 801742c:	e782      	b.n	8017334 <__ieee754_rem_pio2f+0x128>
 801742e:	2303      	movs	r3, #3
 8017430:	e7e5      	b.n	80173fe <__ieee754_rem_pio2f+0x1f2>
 8017432:	bf00      	nop
 8017434:	3f490fd8 	.word	0x3f490fd8
 8017438:	4016cbe3 	.word	0x4016cbe3
 801743c:	3fc90f80 	.word	0x3fc90f80
 8017440:	3fc90fd0 	.word	0x3fc90fd0
 8017444:	37354400 	.word	0x37354400
 8017448:	37354443 	.word	0x37354443
 801744c:	2e85a308 	.word	0x2e85a308
 8017450:	43490f80 	.word	0x43490f80
 8017454:	3f22f984 	.word	0x3f22f984
 8017458:	080d5258 	.word	0x080d5258
 801745c:	2e85a300 	.word	0x2e85a300
 8017460:	248d3132 	.word	0x248d3132
 8017464:	43800000 	.word	0x43800000
 8017468:	080d52d8 	.word	0x080d52d8

0801746c <scalbnf>:
 801746c:	ee10 3a10 	vmov	r3, s0
 8017470:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8017474:	d02b      	beq.n	80174ce <scalbnf+0x62>
 8017476:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801747a:	d302      	bcc.n	8017482 <scalbnf+0x16>
 801747c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017480:	4770      	bx	lr
 8017482:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8017486:	d123      	bne.n	80174d0 <scalbnf+0x64>
 8017488:	4b24      	ldr	r3, [pc, #144]	@ (801751c <scalbnf+0xb0>)
 801748a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8017520 <scalbnf+0xb4>
 801748e:	4298      	cmp	r0, r3
 8017490:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017494:	db17      	blt.n	80174c6 <scalbnf+0x5a>
 8017496:	ee10 3a10 	vmov	r3, s0
 801749a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801749e:	3a19      	subs	r2, #25
 80174a0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80174a4:	4288      	cmp	r0, r1
 80174a6:	dd15      	ble.n	80174d4 <scalbnf+0x68>
 80174a8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8017524 <scalbnf+0xb8>
 80174ac:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8017528 <scalbnf+0xbc>
 80174b0:	ee10 3a10 	vmov	r3, s0
 80174b4:	eeb0 7a67 	vmov.f32	s14, s15
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	bfb8      	it	lt
 80174bc:	eef0 7a66 	vmovlt.f32	s15, s13
 80174c0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80174c4:	4770      	bx	lr
 80174c6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801752c <scalbnf+0xc0>
 80174ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80174ce:	4770      	bx	lr
 80174d0:	0dd2      	lsrs	r2, r2, #23
 80174d2:	e7e5      	b.n	80174a0 <scalbnf+0x34>
 80174d4:	4410      	add	r0, r2
 80174d6:	28fe      	cmp	r0, #254	@ 0xfe
 80174d8:	dce6      	bgt.n	80174a8 <scalbnf+0x3c>
 80174da:	2800      	cmp	r0, #0
 80174dc:	dd06      	ble.n	80174ec <scalbnf+0x80>
 80174de:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80174e2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80174e6:	ee00 3a10 	vmov	s0, r3
 80174ea:	4770      	bx	lr
 80174ec:	f110 0f16 	cmn.w	r0, #22
 80174f0:	da09      	bge.n	8017506 <scalbnf+0x9a>
 80174f2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801752c <scalbnf+0xc0>
 80174f6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8017530 <scalbnf+0xc4>
 80174fa:	ee10 3a10 	vmov	r3, s0
 80174fe:	eeb0 7a67 	vmov.f32	s14, s15
 8017502:	2b00      	cmp	r3, #0
 8017504:	e7d9      	b.n	80174ba <scalbnf+0x4e>
 8017506:	3019      	adds	r0, #25
 8017508:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801750c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8017510:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8017534 <scalbnf+0xc8>
 8017514:	ee07 3a90 	vmov	s15, r3
 8017518:	e7d7      	b.n	80174ca <scalbnf+0x5e>
 801751a:	bf00      	nop
 801751c:	ffff3cb0 	.word	0xffff3cb0
 8017520:	4c000000 	.word	0x4c000000
 8017524:	7149f2ca 	.word	0x7149f2ca
 8017528:	f149f2ca 	.word	0xf149f2ca
 801752c:	0da24260 	.word	0x0da24260
 8017530:	8da24260 	.word	0x8da24260
 8017534:	33000000 	.word	0x33000000

08017538 <__kernel_rem_pio2f>:
 8017538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801753c:	ed2d 8b04 	vpush	{d8-d9}
 8017540:	b0d9      	sub	sp, #356	@ 0x164
 8017542:	4690      	mov	r8, r2
 8017544:	9001      	str	r0, [sp, #4]
 8017546:	4ab9      	ldr	r2, [pc, #740]	@ (801782c <__kernel_rem_pio2f+0x2f4>)
 8017548:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801754a:	f118 0f04 	cmn.w	r8, #4
 801754e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8017552:	460f      	mov	r7, r1
 8017554:	f103 3bff 	add.w	fp, r3, #4294967295
 8017558:	db27      	blt.n	80175aa <__kernel_rem_pio2f+0x72>
 801755a:	f1b8 0203 	subs.w	r2, r8, #3
 801755e:	bf48      	it	mi
 8017560:	f108 0204 	addmi.w	r2, r8, #4
 8017564:	10d2      	asrs	r2, r2, #3
 8017566:	1c55      	adds	r5, r2, #1
 8017568:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801756a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801783c <__kernel_rem_pio2f+0x304>
 801756e:	00e8      	lsls	r0, r5, #3
 8017570:	eba2 060b 	sub.w	r6, r2, fp
 8017574:	9002      	str	r0, [sp, #8]
 8017576:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801757a:	eb0a 0c0b 	add.w	ip, sl, fp
 801757e:	ac1c      	add	r4, sp, #112	@ 0x70
 8017580:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8017584:	2000      	movs	r0, #0
 8017586:	4560      	cmp	r0, ip
 8017588:	dd11      	ble.n	80175ae <__kernel_rem_pio2f+0x76>
 801758a:	a91c      	add	r1, sp, #112	@ 0x70
 801758c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8017590:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8017594:	f04f 0c00 	mov.w	ip, #0
 8017598:	45d4      	cmp	ip, sl
 801759a:	dc27      	bgt.n	80175ec <__kernel_rem_pio2f+0xb4>
 801759c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80175a0:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801783c <__kernel_rem_pio2f+0x304>
 80175a4:	4606      	mov	r6, r0
 80175a6:	2400      	movs	r4, #0
 80175a8:	e016      	b.n	80175d8 <__kernel_rem_pio2f+0xa0>
 80175aa:	2200      	movs	r2, #0
 80175ac:	e7db      	b.n	8017566 <__kernel_rem_pio2f+0x2e>
 80175ae:	42c6      	cmn	r6, r0
 80175b0:	bf5d      	ittte	pl
 80175b2:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80175b6:	ee07 1a90 	vmovpl	s15, r1
 80175ba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80175be:	eef0 7a47 	vmovmi.f32	s15, s14
 80175c2:	ece4 7a01 	vstmia	r4!, {s15}
 80175c6:	3001      	adds	r0, #1
 80175c8:	e7dd      	b.n	8017586 <__kernel_rem_pio2f+0x4e>
 80175ca:	ecfe 6a01 	vldmia	lr!, {s13}
 80175ce:	ed96 7a00 	vldr	s14, [r6]
 80175d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80175d6:	3401      	adds	r4, #1
 80175d8:	455c      	cmp	r4, fp
 80175da:	f1a6 0604 	sub.w	r6, r6, #4
 80175de:	ddf4      	ble.n	80175ca <__kernel_rem_pio2f+0x92>
 80175e0:	ece9 7a01 	vstmia	r9!, {s15}
 80175e4:	f10c 0c01 	add.w	ip, ip, #1
 80175e8:	3004      	adds	r0, #4
 80175ea:	e7d5      	b.n	8017598 <__kernel_rem_pio2f+0x60>
 80175ec:	a908      	add	r1, sp, #32
 80175ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80175f2:	9104      	str	r1, [sp, #16]
 80175f4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80175f6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8017838 <__kernel_rem_pio2f+0x300>
 80175fa:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8017834 <__kernel_rem_pio2f+0x2fc>
 80175fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8017602:	9203      	str	r2, [sp, #12]
 8017604:	4654      	mov	r4, sl
 8017606:	00a2      	lsls	r2, r4, #2
 8017608:	9205      	str	r2, [sp, #20]
 801760a:	aa58      	add	r2, sp, #352	@ 0x160
 801760c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8017610:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8017614:	a944      	add	r1, sp, #272	@ 0x110
 8017616:	aa08      	add	r2, sp, #32
 8017618:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801761c:	4694      	mov	ip, r2
 801761e:	4626      	mov	r6, r4
 8017620:	2e00      	cmp	r6, #0
 8017622:	f1a0 0004 	sub.w	r0, r0, #4
 8017626:	dc4c      	bgt.n	80176c2 <__kernel_rem_pio2f+0x18a>
 8017628:	4628      	mov	r0, r5
 801762a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801762e:	f7ff ff1d 	bl	801746c <scalbnf>
 8017632:	eeb0 8a40 	vmov.f32	s16, s0
 8017636:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801763a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801763e:	f000 f9ed 	bl	8017a1c <floorf>
 8017642:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8017646:	eea0 8a67 	vfms.f32	s16, s0, s15
 801764a:	2d00      	cmp	r5, #0
 801764c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017650:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8017654:	ee17 9a90 	vmov	r9, s15
 8017658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801765c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017660:	dd41      	ble.n	80176e6 <__kernel_rem_pio2f+0x1ae>
 8017662:	f104 3cff 	add.w	ip, r4, #4294967295
 8017666:	a908      	add	r1, sp, #32
 8017668:	f1c5 0e08 	rsb	lr, r5, #8
 801766c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8017670:	fa46 f00e 	asr.w	r0, r6, lr
 8017674:	4481      	add	r9, r0
 8017676:	fa00 f00e 	lsl.w	r0, r0, lr
 801767a:	1a36      	subs	r6, r6, r0
 801767c:	f1c5 0007 	rsb	r0, r5, #7
 8017680:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8017684:	4106      	asrs	r6, r0
 8017686:	2e00      	cmp	r6, #0
 8017688:	dd3c      	ble.n	8017704 <__kernel_rem_pio2f+0x1cc>
 801768a:	f04f 0e00 	mov.w	lr, #0
 801768e:	f109 0901 	add.w	r9, r9, #1
 8017692:	4670      	mov	r0, lr
 8017694:	4574      	cmp	r4, lr
 8017696:	dc68      	bgt.n	801776a <__kernel_rem_pio2f+0x232>
 8017698:	2d00      	cmp	r5, #0
 801769a:	dd03      	ble.n	80176a4 <__kernel_rem_pio2f+0x16c>
 801769c:	2d01      	cmp	r5, #1
 801769e:	d074      	beq.n	801778a <__kernel_rem_pio2f+0x252>
 80176a0:	2d02      	cmp	r5, #2
 80176a2:	d07d      	beq.n	80177a0 <__kernel_rem_pio2f+0x268>
 80176a4:	2e02      	cmp	r6, #2
 80176a6:	d12d      	bne.n	8017704 <__kernel_rem_pio2f+0x1cc>
 80176a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80176ac:	ee30 8a48 	vsub.f32	s16, s0, s16
 80176b0:	b340      	cbz	r0, 8017704 <__kernel_rem_pio2f+0x1cc>
 80176b2:	4628      	mov	r0, r5
 80176b4:	9306      	str	r3, [sp, #24]
 80176b6:	f7ff fed9 	bl	801746c <scalbnf>
 80176ba:	9b06      	ldr	r3, [sp, #24]
 80176bc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80176c0:	e020      	b.n	8017704 <__kernel_rem_pio2f+0x1cc>
 80176c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80176c6:	3e01      	subs	r6, #1
 80176c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80176cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80176d0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80176d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80176d8:	ecac 0a01 	vstmia	ip!, {s0}
 80176dc:	ed90 0a00 	vldr	s0, [r0]
 80176e0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80176e4:	e79c      	b.n	8017620 <__kernel_rem_pio2f+0xe8>
 80176e6:	d105      	bne.n	80176f4 <__kernel_rem_pio2f+0x1bc>
 80176e8:	1e60      	subs	r0, r4, #1
 80176ea:	a908      	add	r1, sp, #32
 80176ec:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80176f0:	11f6      	asrs	r6, r6, #7
 80176f2:	e7c8      	b.n	8017686 <__kernel_rem_pio2f+0x14e>
 80176f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80176f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80176fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017700:	da31      	bge.n	8017766 <__kernel_rem_pio2f+0x22e>
 8017702:	2600      	movs	r6, #0
 8017704:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801770c:	f040 8098 	bne.w	8017840 <__kernel_rem_pio2f+0x308>
 8017710:	1e60      	subs	r0, r4, #1
 8017712:	2200      	movs	r2, #0
 8017714:	4550      	cmp	r0, sl
 8017716:	da4b      	bge.n	80177b0 <__kernel_rem_pio2f+0x278>
 8017718:	2a00      	cmp	r2, #0
 801771a:	d065      	beq.n	80177e8 <__kernel_rem_pio2f+0x2b0>
 801771c:	3c01      	subs	r4, #1
 801771e:	ab08      	add	r3, sp, #32
 8017720:	3d08      	subs	r5, #8
 8017722:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d0f8      	beq.n	801771c <__kernel_rem_pio2f+0x1e4>
 801772a:	4628      	mov	r0, r5
 801772c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017730:	f7ff fe9c 	bl	801746c <scalbnf>
 8017734:	1c63      	adds	r3, r4, #1
 8017736:	aa44      	add	r2, sp, #272	@ 0x110
 8017738:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8017838 <__kernel_rem_pio2f+0x300>
 801773c:	0099      	lsls	r1, r3, #2
 801773e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017742:	4623      	mov	r3, r4
 8017744:	2b00      	cmp	r3, #0
 8017746:	f280 80a9 	bge.w	801789c <__kernel_rem_pio2f+0x364>
 801774a:	4623      	mov	r3, r4
 801774c:	2b00      	cmp	r3, #0
 801774e:	f2c0 80c7 	blt.w	80178e0 <__kernel_rem_pio2f+0x3a8>
 8017752:	aa44      	add	r2, sp, #272	@ 0x110
 8017754:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8017758:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8017830 <__kernel_rem_pio2f+0x2f8>
 801775c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801783c <__kernel_rem_pio2f+0x304>
 8017760:	2000      	movs	r0, #0
 8017762:	1ae2      	subs	r2, r4, r3
 8017764:	e0b1      	b.n	80178ca <__kernel_rem_pio2f+0x392>
 8017766:	2602      	movs	r6, #2
 8017768:	e78f      	b.n	801768a <__kernel_rem_pio2f+0x152>
 801776a:	f852 1b04 	ldr.w	r1, [r2], #4
 801776e:	b948      	cbnz	r0, 8017784 <__kernel_rem_pio2f+0x24c>
 8017770:	b121      	cbz	r1, 801777c <__kernel_rem_pio2f+0x244>
 8017772:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8017776:	f842 1c04 	str.w	r1, [r2, #-4]
 801777a:	2101      	movs	r1, #1
 801777c:	f10e 0e01 	add.w	lr, lr, #1
 8017780:	4608      	mov	r0, r1
 8017782:	e787      	b.n	8017694 <__kernel_rem_pio2f+0x15c>
 8017784:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8017788:	e7f5      	b.n	8017776 <__kernel_rem_pio2f+0x23e>
 801778a:	f104 3cff 	add.w	ip, r4, #4294967295
 801778e:	aa08      	add	r2, sp, #32
 8017790:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8017794:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017798:	a908      	add	r1, sp, #32
 801779a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801779e:	e781      	b.n	80176a4 <__kernel_rem_pio2f+0x16c>
 80177a0:	f104 3cff 	add.w	ip, r4, #4294967295
 80177a4:	aa08      	add	r2, sp, #32
 80177a6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80177aa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80177ae:	e7f3      	b.n	8017798 <__kernel_rem_pio2f+0x260>
 80177b0:	a908      	add	r1, sp, #32
 80177b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80177b6:	3801      	subs	r0, #1
 80177b8:	430a      	orrs	r2, r1
 80177ba:	e7ab      	b.n	8017714 <__kernel_rem_pio2f+0x1dc>
 80177bc:	3201      	adds	r2, #1
 80177be:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80177c2:	2e00      	cmp	r6, #0
 80177c4:	d0fa      	beq.n	80177bc <__kernel_rem_pio2f+0x284>
 80177c6:	9905      	ldr	r1, [sp, #20]
 80177c8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80177cc:	eb0d 0001 	add.w	r0, sp, r1
 80177d0:	18e6      	adds	r6, r4, r3
 80177d2:	a91c      	add	r1, sp, #112	@ 0x70
 80177d4:	f104 0c01 	add.w	ip, r4, #1
 80177d8:	384c      	subs	r0, #76	@ 0x4c
 80177da:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80177de:	4422      	add	r2, r4
 80177e0:	4562      	cmp	r2, ip
 80177e2:	da04      	bge.n	80177ee <__kernel_rem_pio2f+0x2b6>
 80177e4:	4614      	mov	r4, r2
 80177e6:	e70e      	b.n	8017606 <__kernel_rem_pio2f+0xce>
 80177e8:	9804      	ldr	r0, [sp, #16]
 80177ea:	2201      	movs	r2, #1
 80177ec:	e7e7      	b.n	80177be <__kernel_rem_pio2f+0x286>
 80177ee:	9903      	ldr	r1, [sp, #12]
 80177f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80177f4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80177f8:	9105      	str	r1, [sp, #20]
 80177fa:	ee07 1a90 	vmov	s15, r1
 80177fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017802:	2400      	movs	r4, #0
 8017804:	ece6 7a01 	vstmia	r6!, {s15}
 8017808:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801783c <__kernel_rem_pio2f+0x304>
 801780c:	46b1      	mov	r9, r6
 801780e:	455c      	cmp	r4, fp
 8017810:	dd04      	ble.n	801781c <__kernel_rem_pio2f+0x2e4>
 8017812:	ece0 7a01 	vstmia	r0!, {s15}
 8017816:	f10c 0c01 	add.w	ip, ip, #1
 801781a:	e7e1      	b.n	80177e0 <__kernel_rem_pio2f+0x2a8>
 801781c:	ecfe 6a01 	vldmia	lr!, {s13}
 8017820:	ed39 7a01 	vldmdb	r9!, {s14}
 8017824:	3401      	adds	r4, #1
 8017826:	eee6 7a87 	vfma.f32	s15, s13, s14
 801782a:	e7f0      	b.n	801780e <__kernel_rem_pio2f+0x2d6>
 801782c:	080d561c 	.word	0x080d561c
 8017830:	080d55f0 	.word	0x080d55f0
 8017834:	43800000 	.word	0x43800000
 8017838:	3b800000 	.word	0x3b800000
 801783c:	00000000 	.word	0x00000000
 8017840:	9b02      	ldr	r3, [sp, #8]
 8017842:	eeb0 0a48 	vmov.f32	s0, s16
 8017846:	eba3 0008 	sub.w	r0, r3, r8
 801784a:	f7ff fe0f 	bl	801746c <scalbnf>
 801784e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8017834 <__kernel_rem_pio2f+0x2fc>
 8017852:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785a:	db19      	blt.n	8017890 <__kernel_rem_pio2f+0x358>
 801785c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8017838 <__kernel_rem_pio2f+0x300>
 8017860:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017864:	aa08      	add	r2, sp, #32
 8017866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801786a:	3508      	adds	r5, #8
 801786c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017870:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017878:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801787c:	ee10 3a10 	vmov	r3, s0
 8017880:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017884:	ee17 3a90 	vmov	r3, s15
 8017888:	3401      	adds	r4, #1
 801788a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801788e:	e74c      	b.n	801772a <__kernel_rem_pio2f+0x1f2>
 8017890:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017894:	aa08      	add	r2, sp, #32
 8017896:	ee10 3a10 	vmov	r3, s0
 801789a:	e7f6      	b.n	801788a <__kernel_rem_pio2f+0x352>
 801789c:	a808      	add	r0, sp, #32
 801789e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80178a2:	9001      	str	r0, [sp, #4]
 80178a4:	ee07 0a90 	vmov	s15, r0
 80178a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80178ac:	3b01      	subs	r3, #1
 80178ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 80178b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80178b6:	ed62 7a01 	vstmdb	r2!, {s15}
 80178ba:	e743      	b.n	8017744 <__kernel_rem_pio2f+0x20c>
 80178bc:	ecfc 6a01 	vldmia	ip!, {s13}
 80178c0:	ecb5 7a01 	vldmia	r5!, {s14}
 80178c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80178c8:	3001      	adds	r0, #1
 80178ca:	4550      	cmp	r0, sl
 80178cc:	dc01      	bgt.n	80178d2 <__kernel_rem_pio2f+0x39a>
 80178ce:	4282      	cmp	r2, r0
 80178d0:	daf4      	bge.n	80178bc <__kernel_rem_pio2f+0x384>
 80178d2:	a858      	add	r0, sp, #352	@ 0x160
 80178d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80178d8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80178dc:	3b01      	subs	r3, #1
 80178de:	e735      	b.n	801774c <__kernel_rem_pio2f+0x214>
 80178e0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80178e2:	2b02      	cmp	r3, #2
 80178e4:	dc09      	bgt.n	80178fa <__kernel_rem_pio2f+0x3c2>
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	dc2b      	bgt.n	8017942 <__kernel_rem_pio2f+0x40a>
 80178ea:	d044      	beq.n	8017976 <__kernel_rem_pio2f+0x43e>
 80178ec:	f009 0007 	and.w	r0, r9, #7
 80178f0:	b059      	add	sp, #356	@ 0x164
 80178f2:	ecbd 8b04 	vpop	{d8-d9}
 80178f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178fa:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80178fc:	2b03      	cmp	r3, #3
 80178fe:	d1f5      	bne.n	80178ec <__kernel_rem_pio2f+0x3b4>
 8017900:	aa30      	add	r2, sp, #192	@ 0xc0
 8017902:	1f0b      	subs	r3, r1, #4
 8017904:	4413      	add	r3, r2
 8017906:	461a      	mov	r2, r3
 8017908:	4620      	mov	r0, r4
 801790a:	2800      	cmp	r0, #0
 801790c:	f1a2 0204 	sub.w	r2, r2, #4
 8017910:	dc52      	bgt.n	80179b8 <__kernel_rem_pio2f+0x480>
 8017912:	4622      	mov	r2, r4
 8017914:	2a01      	cmp	r2, #1
 8017916:	f1a3 0304 	sub.w	r3, r3, #4
 801791a:	dc5d      	bgt.n	80179d8 <__kernel_rem_pio2f+0x4a0>
 801791c:	ab30      	add	r3, sp, #192	@ 0xc0
 801791e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801783c <__kernel_rem_pio2f+0x304>
 8017922:	440b      	add	r3, r1
 8017924:	2c01      	cmp	r4, #1
 8017926:	dc67      	bgt.n	80179f8 <__kernel_rem_pio2f+0x4c0>
 8017928:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801792c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8017930:	2e00      	cmp	r6, #0
 8017932:	d167      	bne.n	8017a04 <__kernel_rem_pio2f+0x4cc>
 8017934:	edc7 6a00 	vstr	s13, [r7]
 8017938:	ed87 7a01 	vstr	s14, [r7, #4]
 801793c:	edc7 7a02 	vstr	s15, [r7, #8]
 8017940:	e7d4      	b.n	80178ec <__kernel_rem_pio2f+0x3b4>
 8017942:	ab30      	add	r3, sp, #192	@ 0xc0
 8017944:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801783c <__kernel_rem_pio2f+0x304>
 8017948:	440b      	add	r3, r1
 801794a:	4622      	mov	r2, r4
 801794c:	2a00      	cmp	r2, #0
 801794e:	da24      	bge.n	801799a <__kernel_rem_pio2f+0x462>
 8017950:	b34e      	cbz	r6, 80179a6 <__kernel_rem_pio2f+0x46e>
 8017952:	eef1 7a47 	vneg.f32	s15, s14
 8017956:	edc7 7a00 	vstr	s15, [r7]
 801795a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801795e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017962:	aa31      	add	r2, sp, #196	@ 0xc4
 8017964:	2301      	movs	r3, #1
 8017966:	429c      	cmp	r4, r3
 8017968:	da20      	bge.n	80179ac <__kernel_rem_pio2f+0x474>
 801796a:	b10e      	cbz	r6, 8017970 <__kernel_rem_pio2f+0x438>
 801796c:	eef1 7a67 	vneg.f32	s15, s15
 8017970:	edc7 7a01 	vstr	s15, [r7, #4]
 8017974:	e7ba      	b.n	80178ec <__kernel_rem_pio2f+0x3b4>
 8017976:	ab30      	add	r3, sp, #192	@ 0xc0
 8017978:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801783c <__kernel_rem_pio2f+0x304>
 801797c:	440b      	add	r3, r1
 801797e:	2c00      	cmp	r4, #0
 8017980:	da05      	bge.n	801798e <__kernel_rem_pio2f+0x456>
 8017982:	b10e      	cbz	r6, 8017988 <__kernel_rem_pio2f+0x450>
 8017984:	eef1 7a67 	vneg.f32	s15, s15
 8017988:	edc7 7a00 	vstr	s15, [r7]
 801798c:	e7ae      	b.n	80178ec <__kernel_rem_pio2f+0x3b4>
 801798e:	ed33 7a01 	vldmdb	r3!, {s14}
 8017992:	3c01      	subs	r4, #1
 8017994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017998:	e7f1      	b.n	801797e <__kernel_rem_pio2f+0x446>
 801799a:	ed73 7a01 	vldmdb	r3!, {s15}
 801799e:	3a01      	subs	r2, #1
 80179a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80179a4:	e7d2      	b.n	801794c <__kernel_rem_pio2f+0x414>
 80179a6:	eef0 7a47 	vmov.f32	s15, s14
 80179aa:	e7d4      	b.n	8017956 <__kernel_rem_pio2f+0x41e>
 80179ac:	ecb2 7a01 	vldmia	r2!, {s14}
 80179b0:	3301      	adds	r3, #1
 80179b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80179b6:	e7d6      	b.n	8017966 <__kernel_rem_pio2f+0x42e>
 80179b8:	edd2 7a00 	vldr	s15, [r2]
 80179bc:	edd2 6a01 	vldr	s13, [r2, #4]
 80179c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80179c4:	3801      	subs	r0, #1
 80179c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179ca:	ed82 7a00 	vstr	s14, [r2]
 80179ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80179d2:	edc2 7a01 	vstr	s15, [r2, #4]
 80179d6:	e798      	b.n	801790a <__kernel_rem_pio2f+0x3d2>
 80179d8:	edd3 7a00 	vldr	s15, [r3]
 80179dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80179e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80179e4:	3a01      	subs	r2, #1
 80179e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179ea:	ed83 7a00 	vstr	s14, [r3]
 80179ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80179f2:	edc3 7a01 	vstr	s15, [r3, #4]
 80179f6:	e78d      	b.n	8017914 <__kernel_rem_pio2f+0x3dc>
 80179f8:	ed33 7a01 	vldmdb	r3!, {s14}
 80179fc:	3c01      	subs	r4, #1
 80179fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017a02:	e78f      	b.n	8017924 <__kernel_rem_pio2f+0x3ec>
 8017a04:	eef1 6a66 	vneg.f32	s13, s13
 8017a08:	eeb1 7a47 	vneg.f32	s14, s14
 8017a0c:	edc7 6a00 	vstr	s13, [r7]
 8017a10:	ed87 7a01 	vstr	s14, [r7, #4]
 8017a14:	eef1 7a67 	vneg.f32	s15, s15
 8017a18:	e790      	b.n	801793c <__kernel_rem_pio2f+0x404>
 8017a1a:	bf00      	nop

08017a1c <floorf>:
 8017a1c:	ee10 3a10 	vmov	r3, s0
 8017a20:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017a24:	3a7f      	subs	r2, #127	@ 0x7f
 8017a26:	2a16      	cmp	r2, #22
 8017a28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8017a2c:	dc2b      	bgt.n	8017a86 <floorf+0x6a>
 8017a2e:	2a00      	cmp	r2, #0
 8017a30:	da12      	bge.n	8017a58 <floorf+0x3c>
 8017a32:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017a98 <floorf+0x7c>
 8017a36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017a3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a42:	dd06      	ble.n	8017a52 <floorf+0x36>
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	da24      	bge.n	8017a92 <floorf+0x76>
 8017a48:	2900      	cmp	r1, #0
 8017a4a:	4b14      	ldr	r3, [pc, #80]	@ (8017a9c <floorf+0x80>)
 8017a4c:	bf08      	it	eq
 8017a4e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8017a52:	ee00 3a10 	vmov	s0, r3
 8017a56:	4770      	bx	lr
 8017a58:	4911      	ldr	r1, [pc, #68]	@ (8017aa0 <floorf+0x84>)
 8017a5a:	4111      	asrs	r1, r2
 8017a5c:	420b      	tst	r3, r1
 8017a5e:	d0fa      	beq.n	8017a56 <floorf+0x3a>
 8017a60:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8017a98 <floorf+0x7c>
 8017a64:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017a68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a70:	ddef      	ble.n	8017a52 <floorf+0x36>
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	bfbe      	ittt	lt
 8017a76:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8017a7a:	fa40 f202 	asrlt.w	r2, r0, r2
 8017a7e:	189b      	addlt	r3, r3, r2
 8017a80:	ea23 0301 	bic.w	r3, r3, r1
 8017a84:	e7e5      	b.n	8017a52 <floorf+0x36>
 8017a86:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8017a8a:	d3e4      	bcc.n	8017a56 <floorf+0x3a>
 8017a8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017a90:	4770      	bx	lr
 8017a92:	2300      	movs	r3, #0
 8017a94:	e7dd      	b.n	8017a52 <floorf+0x36>
 8017a96:	bf00      	nop
 8017a98:	7149f2ca 	.word	0x7149f2ca
 8017a9c:	bf800000 	.word	0xbf800000
 8017aa0:	007fffff 	.word	0x007fffff

08017aa4 <_init>:
 8017aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aa6:	bf00      	nop
 8017aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017aaa:	bc08      	pop	{r3}
 8017aac:	469e      	mov	lr, r3
 8017aae:	4770      	bx	lr

08017ab0 <_fini>:
 8017ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ab2:	bf00      	nop
 8017ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ab6:	bc08      	pop	{r3}
 8017ab8:	469e      	mov	lr, r3
 8017aba:	4770      	bx	lr
